// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger i = BigInteger.Zero; i < _hi0; i++) {
        Dafny.ISequence<Dafny.Rune> s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(i));
        s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger i = BigInteger.Zero; i < _hi1; i++) {
        DAST._IModuleItem _source0 = ((mod).dtor_body).Select(i);
        if (_source0.is_Module) {
          DAST._IModule __mcc_h0 = _source0.dtor_Module_a0;
          DAST._IModule m = __mcc_h0;
          Dafny.ISequence<Dafny.Rune> s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(m);
          s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, s_k);
        } else if (_source0.is_Class) {
          DAST._IClass _10___mcc_h1 = _source0.dtor_Class_a0;
          DAST._IClass _11_c = _10___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _12_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_11_c);
          _12_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _12_s_k);
        } else if (_source0.is_Trait) {
          DAST._ITrait _13___mcc_h2 = _source0.dtor_Trait_a0;
          DAST._ITrait _14_c = _13___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source0.is_Newtype) {
          DAST._INewtype _15___mcc_h3 = _source0.dtor_Newtype_a0;
          DAST._INewtype _16_n = _15___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _17___mcc_h4 = _source0.dtor_Datatype_a0;
          DAST._IDatatype _18_d = _17___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _19_i = BigInteger.Zero; _19_i < _hi2; _19_i++) {
        DAST._IMethod _source1 = ((c).dtor_body).Select(_19_i);
        DAST._IMethod _20___mcc_h0 = _source1;
        DAST._IMethod _21_m = _20___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _22_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_21_m);
        _22_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _22_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _23_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _23_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _23_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _23_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _23_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _24_i = BigInteger.Zero; _24_i < _hi3; _24_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_24_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _25_i = BigInteger.Zero; _25_i < _hi4; _25_i++) {
        Dafny.ISequence<Dafny.Rune> _26_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_25_i));
        _26_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _26_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source2 = st;
      if (_source2.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _27___mcc_h0 = _source2.dtor_name;
        DAST._IType _28___mcc_h1 = _source2.dtor_typ;
        DAST._IOptional<DAST._IExpression> _29___mcc_h2 = _source2.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_Assign) {
        DAST._IAssignLhs _30___mcc_h6 = _source2.dtor_lhs;
        DAST._IExpression _31___mcc_h7 = _source2.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_If) {
        DAST._IExpression _32___mcc_h10 = _source2.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _33___mcc_h11 = _source2.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _34___mcc_h12 = _source2.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _35___mcc_h16 = _source2.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _36___mcc_h17 = _source2.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_While) {
        DAST._IExpression _37___mcc_h20 = _source2.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _38___mcc_h21 = _source2.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _39___mcc_h24 = _source2.dtor_boundName;
        DAST._IType _40___mcc_h25 = _source2.dtor_boundType;
        DAST._IExpression _41___mcc_h26 = _source2.dtor_over;
        Dafny.ISequence<DAST._IStatement> _42___mcc_h27 = _source2.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_Call) {
        DAST._IExpression _43___mcc_h32 = _source2.dtor_on;
        Dafny.ISequence<Dafny.Rune> _44___mcc_h33 = _source2.dtor_name;
        Dafny.ISequence<DAST._IType> _45___mcc_h34 = _source2.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _46___mcc_h35 = _source2.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _47___mcc_h36 = _source2.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_Return) {
        DAST._IExpression _48___mcc_h42 = _source2.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source2.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _49___mcc_h44 = _source2.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _50___mcc_h46 = _source2.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source2.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _51___mcc_h48 = _source2.dtor_Print_a0;
        DAST._IExpression _52_e = _51___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _53_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_52_e);
        _53_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _53_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source3 = e;
      if (_source3.is_Literal) {
        DAST._ILiteral _54___mcc_h0 = _source3.dtor_Literal_a0;
        DAST._ILiteral _55_l = _54___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_55_l);
        s = _out9;
      } else if (_source3.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _56___mcc_h2 = _source3.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _57___mcc_h4 = _source3.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _58___mcc_h6 = _source3.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _59___mcc_h8 = _source3.dtor_path;
        Dafny.ISequence<DAST._IType> _60___mcc_h9 = _source3.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _61___mcc_h10 = _source3.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _62___mcc_h14 = _source3.dtor_dims;
        DAST._IType _63___mcc_h15 = _source3.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _64___mcc_h18 = _source3.dtor_path;
        Dafny.ISequence<DAST._IType> _65___mcc_h19 = _source3.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _66___mcc_h20 = _source3.dtor_variant;
        bool _67___mcc_h21 = _source3.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _68___mcc_h22 = _source3.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Convert) {
        DAST._IExpression _69___mcc_h28 = _source3.dtor_value;
        DAST._IType _70___mcc_h29 = _source3.dtor_from;
        DAST._IType _71___mcc_h30 = _source3.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_SeqConstruct) {
        DAST._IExpression _72___mcc_h34 = _source3.dtor_length;
        DAST._IExpression _73___mcc_h35 = _source3.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _74___mcc_h38 = _source3.dtor_elements;
        DAST._IType _75___mcc_h39 = _source3.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _76___mcc_h42 = _source3.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _77___mcc_h44 = _source3.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Ite) {
        DAST._IExpression _78___mcc_h46 = _source3.dtor_cond;
        DAST._IExpression _79___mcc_h47 = _source3.dtor_thn;
        DAST._IExpression _80___mcc_h48 = _source3.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_UnOp) {
        DAST._IUnaryOp _81___mcc_h52 = _source3.dtor_unOp;
        DAST._IExpression _82___mcc_h53 = _source3.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_BinOp) {
        DAST._IBinOp _83___mcc_h56 = _source3.dtor_op;
        DAST._IExpression _84___mcc_h57 = _source3.dtor_left;
        DAST._IExpression _85___mcc_h58 = _source3.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_ArrayLen) {
        DAST._IExpression _86___mcc_h62 = _source3.dtor_expr;
        BigInteger _87___mcc_h63 = _source3.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Select) {
        DAST._IExpression _88___mcc_h66 = _source3.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _89___mcc_h67 = _source3.dtor_field;
        bool _90___mcc_h68 = _source3.dtor_isConstant;
        bool _91___mcc_h69 = _source3.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_SelectFn) {
        DAST._IExpression _92___mcc_h74 = _source3.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _93___mcc_h75 = _source3.dtor_field;
        bool _94___mcc_h76 = _source3.dtor_onDatatype;
        bool _95___mcc_h77 = _source3.dtor_isStatic;
        BigInteger _96___mcc_h78 = _source3.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Index) {
        DAST._IExpression _97___mcc_h84 = _source3.dtor_expr;
        DAST._ICollKind _98___mcc_h85 = _source3.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _99___mcc_h86 = _source3.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_IndexRange) {
        DAST._IExpression _100___mcc_h90 = _source3.dtor_expr;
        bool _101___mcc_h91 = _source3.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _102___mcc_h92 = _source3.dtor_low;
        DAST._IOptional<DAST._IExpression> _103___mcc_h93 = _source3.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_TupleSelect) {
        DAST._IExpression _104___mcc_h98 = _source3.dtor_expr;
        BigInteger _105___mcc_h99 = _source3.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Call) {
        DAST._IExpression _106___mcc_h102 = _source3.dtor_on;
        Dafny.ISequence<Dafny.Rune> _107___mcc_h103 = _source3.dtor_name;
        Dafny.ISequence<DAST._IType> _108___mcc_h104 = _source3.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _109___mcc_h105 = _source3.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _110___mcc_h110 = _source3.dtor_params;
        DAST._IType _111___mcc_h111 = _source3.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _112___mcc_h112 = _source3.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _113___mcc_h116 = _source3.dtor_values;
        DAST._IType _114___mcc_h117 = _source3.dtor_retType;
        DAST._IExpression _115___mcc_h118 = _source3.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _116___mcc_h122 = _source3.dtor_name;
        DAST._IType _117___mcc_h123 = _source3.dtor_typ;
        DAST._IExpression _118___mcc_h124 = _source3.dtor_value;
        DAST._IExpression _119___mcc_h125 = _source3.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_Apply) {
        DAST._IExpression _120___mcc_h130 = _source3.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _121___mcc_h131 = _source3.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_TypeTest) {
        DAST._IExpression _122___mcc_h134 = _source3.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _123___mcc_h135 = _source3.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _124___mcc_h136 = _source3.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_InitializationValue) {
        DAST._IType _125___mcc_h140 = _source3.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_SetBoundedPool) {
        DAST._IExpression _126___mcc_h142 = _source3.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source3.is_SeqBoundedPool) {
        DAST._IExpression _127___mcc_h144 = _source3.dtor_of;
        bool _128___mcc_h145 = _source3.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _129___mcc_h148 = _source3.dtor_lo;
        DAST._IExpression _130___mcc_h149 = _source3.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source4 = l;
      if (_source4.is_BoolLiteral) {
        bool _131___mcc_h0 = _source4.dtor_BoolLiteral_a0;
        bool _132_b = _131___mcc_h0;
        s = ((_132_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source4.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _133___mcc_h1 = _source4.dtor_IntLiteral_a0;
        DAST._IType _134___mcc_h2 = _source4.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _135_i = _133___mcc_h1;
        s = _135_i;
      } else if (_source4.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _136___mcc_h3 = _source4.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _137___mcc_h4 = _source4.dtor_DecLiteral_a1;
        DAST._IType _138___mcc_h5 = _source4.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _139_r = _137___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _140_l = _136___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_140_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _139_r);
      } else if (_source4.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _141___mcc_h6 = _source4.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _142_s_k = _141___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _142_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source4.is_CharLiteral) {
        Dafny.Rune _143___mcc_h7 = _source4.dtor_CharLiteral_a0;
        Dafny.Rune _144_c = _143___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_144_c);
      } else {
        DAST._IType _145___mcc_h8 = _source4.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out10;
      _out10 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out10;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _146___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_146___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _146___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_146___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in0 = (i).Drop(BigInteger.One);
          i = _in0;
          goto TAIL_CALL_START;
        } else {
          _146___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_146___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
          i = _in1;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _147_body;
      Dafny.ISequence<Dafny.Rune> _out11;
      _out11 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _147_body = _out11;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _147_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _148_i;
      _148_i = BigInteger.Zero;
      while ((_148_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _149_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source5 = (body).Select(_148_i);
        if (_source5.is_Module) {
          DAST._IModule _150___mcc_h0 = _source5.dtor_Module_a0;
          DAST._IModule _151_m = _150___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out12;
          _out12 = DCOMP.COMP.GenModule(_151_m, containingPath);
          _149_generated = _out12;
        } else if (_source5.is_Class) {
          DAST._IClass _152___mcc_h1 = _source5.dtor_Class_a0;
          DAST._IClass _153_c = _152___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out13;
          _out13 = DCOMP.COMP.GenClass(_153_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_153_c).dtor_name)));
          _149_generated = _out13;
        } else if (_source5.is_Trait) {
          DAST._ITrait _154___mcc_h2 = _source5.dtor_Trait_a0;
          DAST._ITrait _155_t = _154___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out14;
          _out14 = DCOMP.COMP.GenTrait(_155_t, containingPath);
          _149_generated = _out14;
        } else if (_source5.is_Newtype) {
          DAST._INewtype _156___mcc_h3 = _source5.dtor_Newtype_a0;
          DAST._INewtype _157_n = _156___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out15;
          _out15 = DCOMP.COMP.GenNewtype(_157_n);
          _149_generated = _out15;
        } else {
          DAST._IDatatype _158___mcc_h4 = _source5.dtor_Datatype_a0;
          DAST._IDatatype _159_d = _158___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out16;
          _out16 = DCOMP.COMP.GenDatatype(_159_d);
          _149_generated = _out16;
        }
        if ((_148_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _149_generated);
        _148_i = (_148_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _160_tpI;
      _160_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_160_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _161_tp;
          _161_tp = (@params).Select(_160_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_161_tp));
          Dafny.ISequence<Dafny.Rune> _162_genTp;
          Dafny.ISequence<Dafny.Rune> _out17;
          _out17 = DCOMP.COMP.GenType(_161_tp, false, false);
          _162_genTp = _out17;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _162_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _163_baseConstraints;
          _163_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _162_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _162_genTp), _163_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _162_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _162_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _162_genTp), _163_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _162_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _162_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _162_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _160_tpI = (_160_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _164_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _165_typeParams;
      Dafny.ISequence<Dafny.Rune> _166_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _167_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _168_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _169_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _170_erasedParams;
      Dafny.ISet<DAST._IType> _out18;
      Dafny.ISequence<Dafny.Rune> _out19;
      Dafny.ISequence<Dafny.Rune> _out20;
      Dafny.ISequence<Dafny.Rune> _out21;
      Dafny.ISequence<Dafny.Rune> _out22;
      Dafny.ISequence<Dafny.Rune> _out23;
      Dafny.ISequence<Dafny.Rune> _out24;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out18, out _out19, out _out20, out _out21, out _out22, out _out23, out _out24);
      _164_typeParamsSet = _out18;
      _165_typeParams = _out19;
      _166_constrainedTypeParams = _out20;
      _167_whereConstraints = _out21;
      _168_constrainedEraseParams = _out22;
      _169_unerasedParams = _out23;
      _170_erasedParams = _out24;
      Dafny.ISequence<Dafny.Rune> _171_fields;
      _171_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _172_fieldInits;
      _172_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _173_fieldI;
      _173_fieldI = BigInteger.Zero;
      while ((_173_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _174_field;
        _174_field = ((c).dtor_fields).Select(_173_fieldI);
        Dafny.ISequence<Dafny.Rune> _175_fieldType;
        Dafny.ISequence<Dafny.Rune> _out25;
        _out25 = DCOMP.COMP.GenType(((_174_field).dtor_formal).dtor_typ, false, false);
        _175_fieldType = _out25;
        _171_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_171_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_174_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _175_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source6 = (_174_field).dtor_defaultValue;
        if (_source6.is_Some) {
          DAST._IExpression _176___mcc_h0 = _source6.dtor_Some_a0;
          DAST._IExpression _177_e = _176___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _178_eStr;
            bool _179___v1;
            bool _180___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _181___v3;
            Dafny.ISequence<Dafny.Rune> _out26;
            bool _out27;
            bool _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_177_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out26, out _out27, out _out28, out _out29);
            _178_eStr = _out26;
            _179___v1 = _out27;
            _180___v2 = _out28;
            _181___v3 = _out29;
            _172_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_172_fieldInits, DCOMP.__default.escapeIdent(((_174_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _178_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _172_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_172_fieldInits, DCOMP.__default.escapeIdent(((_174_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _173_fieldI = (_173_fieldI) + (BigInteger.One);
      }
      BigInteger _182_typeParamI;
      _182_typeParamI = BigInteger.Zero;
      while ((_182_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _183_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_182_typeParamI), false, false);
        _183_tpeGen = _out30;
        _171_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_171_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_182_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _183_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _172_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_172_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_182_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _182_typeParamI = (_182_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _165_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _171_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _184_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _185_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _164_typeParamsSet, out _out31, out _out32);
      _184_implBody = _out31;
      _185_traitBodies = _out32;
      _184_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _172_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _184_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _166_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _165_typeParams), _167_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _184_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _186_i;
        _186_i = BigInteger.Zero;
        while ((_186_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _187_superClass;
          _187_superClass = ((c).dtor_superClasses).Select(_186_i);
          DAST._IType _source7 = _187_superClass;
          if (_source7.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _188___mcc_h1 = _source7.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _189___mcc_h2 = _source7.dtor_typeArgs;
            DAST._IResolvedType _190___mcc_h3 = _source7.dtor_resolved;
            DAST._IResolvedType _source8 = _190___mcc_h3;
            if (_source8.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _191___mcc_h7 = _source8.dtor_path;
            } else if (_source8.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _192___mcc_h9 = _source8.dtor_path;
              Dafny.ISequence<DAST._IType> _193_typeArgs = _189___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _194_traitPath = _188___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _195_pathStr;
                Dafny.ISequence<Dafny.Rune> _out33;
                _out33 = DCOMP.COMP.GenPath(_194_traitPath);
                _195_pathStr = _out33;
                Dafny.ISequence<Dafny.Rune> _196_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_193_typeArgs, false, false);
                _196_typeArgs = _out34;
                Dafny.ISequence<Dafny.Rune> _197_body;
                _197_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_185_traitBodies).Contains(_194_traitPath)) {
                  _197_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_185_traitBodies, _194_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _198_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _198_genSelfPath = _out35;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _166_constrainedTypeParams), _195_pathStr), _196_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _198_genSelfPath), _165_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _167_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _197_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _199___mcc_h11 = _source8.dtor_Newtype_a0;
            }
          } else if (_source7.is_Nullable) {
            DAST._IType _200___mcc_h13 = _source7.dtor_Nullable_a0;
          } else if (_source7.is_Tuple) {
            Dafny.ISequence<DAST._IType> _201___mcc_h15 = _source7.dtor_Tuple_a0;
          } else if (_source7.is_Array) {
            DAST._IType _202___mcc_h17 = _source7.dtor_element;
            BigInteger _203___mcc_h18 = _source7.dtor_dims;
          } else if (_source7.is_Seq) {
            DAST._IType _204___mcc_h21 = _source7.dtor_element;
          } else if (_source7.is_Set) {
            DAST._IType _205___mcc_h23 = _source7.dtor_element;
          } else if (_source7.is_Multiset) {
            DAST._IType _206___mcc_h25 = _source7.dtor_element;
          } else if (_source7.is_Map) {
            DAST._IType _207___mcc_h27 = _source7.dtor_key;
            DAST._IType _208___mcc_h28 = _source7.dtor_value;
          } else if (_source7.is_Arrow) {
            Dafny.ISequence<DAST._IType> _209___mcc_h31 = _source7.dtor_args;
            DAST._IType _210___mcc_h32 = _source7.dtor_result;
          } else if (_source7.is_Primitive) {
            DAST._IPrimitive _211___mcc_h35 = _source7.dtor_Primitive_a0;
          } else if (_source7.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _212___mcc_h37 = _source7.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _213___mcc_h39 = _source7.dtor_TypeArg_a0;
          }
          _186_i = (_186_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _214_defaultImpl;
      _214_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _166_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _165_typeParams), _167_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _214_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_214_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _214_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_214_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _214_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_214_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _214_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_214_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _215_printImpl;
      _215_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _166_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _165_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _215_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_215_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _216_ptrPartialEqImpl;
      _216_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _165_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _165_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _216_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_216_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _216_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_216_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _216_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_216_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _217_identEraseImpls;
      _217_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _166_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _165_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _170_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _217_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_217_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _168_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _169_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _165_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _214_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _215_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _216_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _217_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _218_typeParamsSet;
      _218_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _219_typeParams;
      _219_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _220_tpI;
      _220_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _219_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_220_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _221_tp;
          _221_tp = ((t).dtor_typeParams).Select(_220_tpI);
          _218_typeParamsSet = Dafny.Set<DAST._IType>.Union(_218_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_221_tp));
          Dafny.ISequence<Dafny.Rune> _222_genTp;
          Dafny.ISequence<Dafny.Rune> _out36;
          _out36 = DCOMP.COMP.GenType(_221_tp, false, false);
          _222_genTp = _out36;
          _219_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_219_typeParams, _222_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _220_tpI = (_220_tpI) + (BigInteger.One);
        }
        _219_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_219_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _223_fullPath;
      _223_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _224_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _225___v6;
      Dafny.ISequence<Dafny.Rune> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_223_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_223_fullPath)), _218_typeParamsSet, out _out37, out _out38);
      _224_implBody = _out37;
      _225___v6 = _out38;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _219_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _224_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _226_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _227_typeParams;
      Dafny.ISequence<Dafny.Rune> _228_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _229_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _230___v7;
      Dafny.ISequence<Dafny.Rune> _231___v8;
      Dafny.ISequence<Dafny.Rune> _232___v9;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<Dafny.Rune> _out40;
      Dafny.ISequence<Dafny.Rune> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      Dafny.ISequence<Dafny.Rune> _out43;
      Dafny.ISequence<Dafny.Rune> _out44;
      Dafny.ISequence<Dafny.Rune> _out45;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42, out _out43, out _out44, out _out45);
      _226_typeParamsSet = _out39;
      _227_typeParams = _out40;
      _228_constrainedTypeParams = _out41;
      _229_whereConstraints = _out42;
      _230___v7 = _out43;
      _231___v8 = _out44;
      _232___v9 = _out45;
      Dafny.ISequence<Dafny.Rune> _233_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out46;
      _out46 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _233_underlyingType = _out46;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _227_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _233_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _228_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _227_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _233_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _228_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _233_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _227_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _228_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _227_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _227_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _228_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _227_typeParams), _229_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source9 = (c).dtor_witnessExpr;
      if (_source9.is_Some) {
        DAST._IExpression _234___mcc_h0 = _source9.dtor_Some_a0;
        DAST._IExpression _235_e = _234___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _236_eStr;
          bool _237___v10;
          bool _238___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _239___v12;
          Dafny.ISequence<Dafny.Rune> _out47;
          bool _out48;
          bool _out49;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out50;
          DCOMP.COMP.GenExpr(_235_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out47, out _out48, out _out49, out _out50);
          _236_eStr = _out47;
          _237___v10 = _out48;
          _238___v11 = _out49;
          _239___v12 = _out50;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _236_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _228_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _227_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _228_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _227_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _233_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _240_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _241_typeParams;
      Dafny.ISequence<Dafny.Rune> _242_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _243_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _244_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _245_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _246_erasedParams;
      Dafny.ISet<DAST._IType> _out51;
      Dafny.ISequence<Dafny.Rune> _out52;
      Dafny.ISequence<Dafny.Rune> _out53;
      Dafny.ISequence<Dafny.Rune> _out54;
      Dafny.ISequence<Dafny.Rune> _out55;
      Dafny.ISequence<Dafny.Rune> _out56;
      Dafny.ISequence<Dafny.Rune> _out57;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out51, out _out52, out _out53, out _out54, out _out55, out _out56, out _out57);
      _240_typeParamsSet = _out51;
      _241_typeParams = _out52;
      _242_constrainedTypeParams = _out53;
      _243_whereConstraints = _out54;
      _244_constrainedEraseParams = _out55;
      _245_unerasedParams = _out56;
      _246_erasedParams = _out57;
      Dafny.ISequence<Dafny.Rune> _247_ctors;
      _247_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _248_i;
      _248_i = BigInteger.Zero;
      while ((_248_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _249_ctor;
        _249_ctor = ((c).dtor_ctors).Select(_248_i);
        Dafny.ISequence<Dafny.Rune> _250_ctorBody;
        _250_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_249_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _251_j;
        _251_j = BigInteger.Zero;
        while ((_251_j) < (new BigInteger(((_249_ctor).dtor_args).Count))) {
          DAST._IFormal _252_formal;
          _252_formal = ((_249_ctor).dtor_args).Select(_251_j);
          Dafny.ISequence<Dafny.Rune> _253_formalType;
          Dafny.ISequence<Dafny.Rune> _out58;
          _out58 = DCOMP.COMP.GenType((_252_formal).dtor_typ, false, false);
          _253_formalType = _out58;
          if ((c).dtor_isCo) {
            _250_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_250_ctorBody, DCOMP.__default.escapeIdent((_252_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _253_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _250_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_250_ctorBody, DCOMP.__default.escapeIdent((_252_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _253_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _251_j = (_251_j) + (BigInteger.One);
        }
        _250_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_250_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _247_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_247_ctors, _250_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _248_i = (_248_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _254_selfPath;
      _254_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _255_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _256_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out59;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out60;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_254_selfPath)), _240_typeParamsSet, out _out59, out _out60);
      _255_implBody = _out59;
      _256_traitBodies = _out60;
      _248_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _257_emittedFields;
      _257_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_248_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _258_ctor;
        _258_ctor = ((c).dtor_ctors).Select(_248_i);
        BigInteger _259_j;
        _259_j = BigInteger.Zero;
        while ((_259_j) < (new BigInteger(((_258_ctor).dtor_args).Count))) {
          DAST._IFormal _260_formal;
          _260_formal = ((_258_ctor).dtor_args).Select(_259_j);
          if (!((_257_emittedFields).Contains((_260_formal).dtor_name))) {
            _257_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_257_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_260_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _261_formalType;
            Dafny.ISequence<Dafny.Rune> _out61;
            _out61 = DCOMP.COMP.GenType((_260_formal).dtor_typ, false, false);
            _261_formalType = _out61;
            Dafny.ISequence<Dafny.Rune> _262_methodBody;
            _262_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _263_k;
            _263_k = BigInteger.Zero;
            while ((_263_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _264_ctor2;
              _264_ctor2 = ((c).dtor_ctors).Select(_263_k);
              Dafny.ISequence<Dafny.Rune> _265_ctorMatch;
              _265_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_264_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _266_l;
              _266_l = BigInteger.Zero;
              bool _267_hasMatchingField;
              _267_hasMatchingField = false;
              while ((_266_l) < (new BigInteger(((_264_ctor2).dtor_args).Count))) {
                DAST._IFormal _268_formal2;
                _268_formal2 = ((_264_ctor2).dtor_args).Select(_266_l);
                if (((_260_formal).dtor_name).Equals((_268_formal2).dtor_name)) {
                  _267_hasMatchingField = true;
                }
                _265_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_265_ctorMatch, DCOMP.__default.escapeIdent((_268_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _266_l = (_266_l) + (BigInteger.One);
              }
              if (_267_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _265_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_265_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_260_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _265_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_265_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_260_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _265_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_265_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _262_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_262_methodBody, _265_ctorMatch);
              _263_k = (_263_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _262_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_262_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _262_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_262_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _255_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_255_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_260_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _261_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _262_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _259_j = (_259_j) + (BigInteger.One);
        }
        _248_i = (_248_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _247_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_247_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _269_typeI;
        _269_typeI = BigInteger.Zero;
        while ((_269_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_269_typeI).Sign == 1) {
            _247_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_247_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _270_genTp;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_269_typeI), false, false);
          _270_genTp = _out62;
          _247_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_247_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _270_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _269_typeI = (_269_typeI) + (BigInteger.One);
        }
        _247_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_247_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _271_enumBody;
      _271_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _241_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _247_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _242_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _241_typeParams), _243_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _255_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _272_identEraseImpls;
      _272_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _242_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _241_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _246_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _272_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_272_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _244_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _245_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _241_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _273_printImpl;
      _273_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _242_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _241_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _248_i = BigInteger.Zero;
      while ((_248_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _274_ctor;
        _274_ctor = ((c).dtor_ctors).Select(_248_i);
        Dafny.ISequence<Dafny.Rune> _275_ctorMatch;
        _275_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_274_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _276_modulePrefix;
        _276_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _277_printRhs;
        _277_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _276_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_274_ctor).dtor_name), (((_274_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _278_j;
        _278_j = BigInteger.Zero;
        while ((_278_j) < (new BigInteger(((_274_ctor).dtor_args).Count))) {
          DAST._IFormal _279_formal;
          _279_formal = ((_274_ctor).dtor_args).Select(_278_j);
          _275_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_275_ctorMatch, DCOMP.__default.escapeIdent((_279_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_278_j).Sign == 1) {
            _277_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_277_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _277_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_277_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_279_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _278_j = (_278_j) + (BigInteger.One);
        }
        _275_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_275_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_274_ctor).dtor_hasAnyArgs) {
          _277_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_277_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _277_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_277_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _273_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_273_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _275_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _277_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _248_i = (_248_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _273_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_273_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _273_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_273_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _280_defaultImpl;
      _280_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _280_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _242_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _241_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _248_i = BigInteger.Zero;
        while ((_248_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _281_formal;
          _281_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_248_i);
          _280_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_280_defaultImpl, DCOMP.__default.escapeIdent((_281_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _248_i = (_248_i) + (BigInteger.One);
        }
        _280_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_280_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_271_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _272_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _273_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _280_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _282_i;
        _282_i = BigInteger.Zero;
        while ((_282_i) < (new BigInteger((p).Count))) {
          if ((_282_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_282_i))));
          _282_i = (_282_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _283_i;
        _283_i = BigInteger.Zero;
        while ((_283_i) < (new BigInteger((args).Count))) {
          if ((_283_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _284_genTp;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenType((args).Select(_283_i), inBinding, inFn);
          _284_genTp = _out63;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _284_genTp);
          _283_i = (_283_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source10 = c;
      if (_source10.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _285___mcc_h0 = _source10.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _286___mcc_h1 = _source10.dtor_typeArgs;
        DAST._IResolvedType _287___mcc_h2 = _source10.dtor_resolved;
        DAST._IResolvedType _288_resolved = _287___mcc_h2;
        Dafny.ISequence<DAST._IType> _289_args = _286___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _290_p = _285___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenPath(_290_p);
          s = _out64;
          Dafny.ISequence<Dafny.Rune> _291_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out65;
          _out65 = DCOMP.COMP.GenTypeArgs(_289_args, inBinding, inFn);
          _291_typeArgs = _out65;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _291_typeArgs);
          DAST._IResolvedType _source11 = _288_resolved;
          if (_source11.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _292___mcc_h18 = _source11.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source11.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _293___mcc_h20 = _source11.dtor_path;
            {
              if ((_290_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _294___mcc_h22 = _source11.dtor_Newtype_a0;
            DAST._IResolvedType _295_Primitive = _288_resolved;
          }
        }
      } else if (_source10.is_Nullable) {
        DAST._IType _296___mcc_h3 = _source10.dtor_Nullable_a0;
        DAST._IType _297_inner = _296___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _298_innerStr;
          Dafny.ISequence<Dafny.Rune> _out66;
          _out66 = DCOMP.COMP.GenType(_297_inner, inBinding, inFn);
          _298_innerStr = _out66;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _298_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source10.is_Tuple) {
        Dafny.ISequence<DAST._IType> _299___mcc_h4 = _source10.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _300_types = _299___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _301_i;
          _301_i = BigInteger.Zero;
          while ((_301_i) < (new BigInteger((_300_types).Count))) {
            if ((_301_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _302_generated;
            Dafny.ISequence<Dafny.Rune> _out67;
            _out67 = DCOMP.COMP.GenType((_300_types).Select(_301_i), inBinding, inFn);
            _302_generated = _out67;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _302_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _301_i = (_301_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source10.is_Array) {
        DAST._IType _303___mcc_h5 = _source10.dtor_element;
        BigInteger _304___mcc_h6 = _source10.dtor_dims;
        BigInteger _305_dims = _304___mcc_h6;
        DAST._IType _306_element = _303___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _307_elemStr;
          Dafny.ISequence<Dafny.Rune> _out68;
          _out68 = DCOMP.COMP.GenType(_306_element, inBinding, inFn);
          _307_elemStr = _out68;
          s = _307_elemStr;
          BigInteger _308_i;
          _308_i = BigInteger.Zero;
          while ((_308_i) < (_305_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _308_i = (_308_i) + (BigInteger.One);
          }
        }
      } else if (_source10.is_Seq) {
        DAST._IType _309___mcc_h7 = _source10.dtor_element;
        DAST._IType _310_element = _309___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _311_elemStr;
          Dafny.ISequence<Dafny.Rune> _out69;
          _out69 = DCOMP.COMP.GenType(_310_element, inBinding, inFn);
          _311_elemStr = _out69;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _311_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source10.is_Set) {
        DAST._IType _312___mcc_h8 = _source10.dtor_element;
        DAST._IType _313_element = _312___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _314_elemStr;
          Dafny.ISequence<Dafny.Rune> _out70;
          _out70 = DCOMP.COMP.GenType(_313_element, inBinding, inFn);
          _314_elemStr = _out70;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _314_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source10.is_Multiset) {
        DAST._IType _315___mcc_h9 = _source10.dtor_element;
        DAST._IType _316_element = _315___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _317_elemStr;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType(_316_element, inBinding, inFn);
          _317_elemStr = _out71;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _317_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source10.is_Map) {
        DAST._IType _318___mcc_h10 = _source10.dtor_key;
        DAST._IType _319___mcc_h11 = _source10.dtor_value;
        DAST._IType _320_value = _319___mcc_h11;
        DAST._IType _321_key = _318___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _322_keyStr;
          Dafny.ISequence<Dafny.Rune> _out72;
          _out72 = DCOMP.COMP.GenType(_321_key, inBinding, inFn);
          _322_keyStr = _out72;
          Dafny.ISequence<Dafny.Rune> _323_valueStr;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType(_320_value, inBinding, inFn);
          _323_valueStr = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _322_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _323_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source10.is_Arrow) {
        Dafny.ISequence<DAST._IType> _324___mcc_h12 = _source10.dtor_args;
        DAST._IType _325___mcc_h13 = _source10.dtor_result;
        DAST._IType _326_result = _325___mcc_h13;
        Dafny.ISequence<DAST._IType> _327_args = _324___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _328_i;
          _328_i = BigInteger.Zero;
          while ((_328_i) < (new BigInteger((_327_args).Count))) {
            if ((_328_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _329_generated;
            Dafny.ISequence<Dafny.Rune> _out74;
            _out74 = DCOMP.COMP.GenType((_327_args).Select(_328_i), inBinding, true);
            _329_generated = _out74;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _329_generated);
            _328_i = (_328_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _330_resultType;
          Dafny.ISequence<Dafny.Rune> _out75;
          _out75 = DCOMP.COMP.GenType(_326_result, inBinding, (inFn) || (inBinding));
          _330_resultType = _out75;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _330_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source10.is_Primitive) {
        DAST._IPrimitive _331___mcc_h14 = _source10.dtor_Primitive_a0;
        DAST._IPrimitive _332_p = _331___mcc_h14;
        {
          DAST._IPrimitive _source12 = _332_p;
          if (_source12.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source12.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source12.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source12.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source10.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _333___mcc_h15 = _source10.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _334_v = _333___mcc_h15;
        s = _334_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _335___mcc_h16 = _source10.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source13 = _335___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _336___mcc_h17 = _source13;
        Dafny.ISequence<Dafny.Rune> _337_name = _336___mcc_h17;
        s = DCOMP.__default.escapeIdent(_337_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _338_i;
      _338_i = BigInteger.Zero;
      while ((_338_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source14 = (body).Select(_338_i);
        DAST._IMethod _339___mcc_h0 = _source14;
        DAST._IMethod _340_m = _339___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source15 = (_340_m).dtor_overridingPath;
          if (_source15.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _341___mcc_h1 = _source15.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _342_p = _341___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _343_existing;
              _343_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_342_p)) {
                _343_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _342_p);
              }
              if ((new BigInteger((_343_existing).Count)).Sign == 1) {
                _343_existing = Dafny.Sequence<Dafny.Rune>.Concat(_343_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _344_genMethod;
              Dafny.ISequence<Dafny.Rune> _out76;
              _out76 = DCOMP.COMP.GenMethod(_340_m, true, enclosingType, enclosingTypeParams);
              _344_genMethod = _out76;
              _343_existing = Dafny.Sequence<Dafny.Rune>.Concat(_343_existing, _344_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_342_p, _343_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _345_generated;
              Dafny.ISequence<Dafny.Rune> _out77;
              _out77 = DCOMP.COMP.GenMethod(_340_m, forTrait, enclosingType, enclosingTypeParams);
              _345_generated = _out77;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _345_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _338_i = (_338_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _346_i;
      _346_i = BigInteger.Zero;
      while ((_346_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _347_param;
        _347_param = (@params).Select(_346_i);
        Dafny.ISequence<Dafny.Rune> _348_paramType;
        Dafny.ISequence<Dafny.Rune> _out78;
        _out78 = DCOMP.COMP.GenType((_347_param).dtor_typ, false, false);
        _348_paramType = _out78;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_347_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _348_paramType);
        if ((_346_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _346_i = (_346_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _349_params;
      Dafny.ISequence<Dafny.Rune> _out79;
      _out79 = DCOMP.COMP.GenParams((m).dtor_params);
      _349_params = _out79;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _350_paramNames;
      _350_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _351_paramI;
      _351_paramI = BigInteger.Zero;
      while ((_351_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _350_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_350_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_351_paramI)).dtor_name));
        _351_paramI = (_351_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _349_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _349_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _352_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out80;
          _out80 = DCOMP.COMP.GenType(enclosingType, false, false);
          _352_enclosingTypeString = _out80;
          _349_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _352_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _349_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _353_retType;
      _353_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _354_typeI;
      _354_typeI = BigInteger.Zero;
      while ((_354_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_354_typeI).Sign == 1) {
          _353_retType = Dafny.Sequence<Dafny.Rune>.Concat(_353_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _355_typeString;
        Dafny.ISequence<Dafny.Rune> _out81;
        _out81 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_354_typeI), false, false);
        _355_typeString = _out81;
        _353_retType = Dafny.Sequence<Dafny.Rune>.Concat(_353_retType, _355_typeString);
        _354_typeI = (_354_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _353_retType = Dafny.Sequence<Dafny.Rune>.Concat(_353_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _356_typeParamsFiltered;
      _356_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _357_typeParamI;
      _357_typeParamI = BigInteger.Zero;
      while ((_357_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _358_typeParam;
        _358_typeParam = ((m).dtor_typeParams).Select(_357_typeParamI);
        if (!((enclosingTypeParams).Contains(_358_typeParam))) {
          _356_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_356_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_358_typeParam));
        }
        _357_typeParamI = (_357_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _359_whereClauses;
      _359_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_356_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _359_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_359_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _360_i;
        _360_i = BigInteger.Zero;
        while ((_360_i) < (new BigInteger((_356_typeParamsFiltered).Count))) {
          if ((_360_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _359_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_359_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _361_typeString;
          Dafny.ISequence<Dafny.Rune> _out82;
          _out82 = DCOMP.COMP.GenType((_356_typeParamsFiltered).Select(_360_i), false, false);
          _361_typeString = _out82;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _361_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _361_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _359_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_359_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _361_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _360_i = (_360_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _349_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _353_retType), _359_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _362_earlyReturn;
        _362_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source16 = (m).dtor_outVars;
        if (_source16.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _363___mcc_h0 = _source16.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _364_outVars = _363___mcc_h0;
          {
            _362_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _365_outI;
            _365_outI = BigInteger.Zero;
            while ((_365_outI) < (new BigInteger((_364_outVars).Count))) {
              if ((_365_outI).Sign == 1) {
                _362_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_362_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _366_outVar;
              _366_outVar = (_364_outVars).Select(_365_outI);
              _362_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_362_earlyReturn, DCOMP.__default.escapeIdent((_366_outVar)));
              _365_outI = (_365_outI) + (BigInteger.One);
            }
            _362_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_362_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _367_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _368___v15;
        Dafny.ISequence<Dafny.Rune> _out83;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out84;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _350_paramNames, true, _362_earlyReturn, out _out83, out _out84);
        _367_body = _out83;
        _368___v15 = _out84;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _367_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _369_declarations;
      _369_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _370_i;
      _370_i = BigInteger.Zero;
      while ((_370_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _371_stmt;
        _371_stmt = (stmts).Select(_370_i);
        Dafny.ISequence<Dafny.Rune> _372_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _373_recIdents;
        Dafny.ISequence<Dafny.Rune> _out85;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out86;
        DCOMP.COMP.GenStmt(_371_stmt, selfIdent, @params, (isLast) && ((_370_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out85, out _out86);
        _372_stmtString = _out85;
        _373_recIdents = _out86;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_373_recIdents, _369_declarations));
        DAST._IStatement _source17 = _371_stmt;
        if (_source17.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _374___mcc_h0 = _source17.dtor_name;
          DAST._IType _375___mcc_h1 = _source17.dtor_typ;
          DAST._IOptional<DAST._IExpression> _376___mcc_h2 = _source17.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _377_name = _374___mcc_h0;
          {
            _369_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_369_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_377_name));
          }
        } else if (_source17.is_Assign) {
          DAST._IAssignLhs _378___mcc_h6 = _source17.dtor_lhs;
          DAST._IExpression _379___mcc_h7 = _source17.dtor_value;
        } else if (_source17.is_If) {
          DAST._IExpression _380___mcc_h10 = _source17.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _381___mcc_h11 = _source17.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _382___mcc_h12 = _source17.dtor_els;
        } else if (_source17.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _383___mcc_h16 = _source17.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _384___mcc_h17 = _source17.dtor_body;
        } else if (_source17.is_While) {
          DAST._IExpression _385___mcc_h20 = _source17.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _386___mcc_h21 = _source17.dtor_body;
        } else if (_source17.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _387___mcc_h24 = _source17.dtor_boundName;
          DAST._IType _388___mcc_h25 = _source17.dtor_boundType;
          DAST._IExpression _389___mcc_h26 = _source17.dtor_over;
          Dafny.ISequence<DAST._IStatement> _390___mcc_h27 = _source17.dtor_body;
        } else if (_source17.is_Call) {
          DAST._IExpression _391___mcc_h32 = _source17.dtor_on;
          Dafny.ISequence<Dafny.Rune> _392___mcc_h33 = _source17.dtor_name;
          Dafny.ISequence<DAST._IType> _393___mcc_h34 = _source17.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _394___mcc_h35 = _source17.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _395___mcc_h36 = _source17.dtor_outs;
        } else if (_source17.is_Return) {
          DAST._IExpression _396___mcc_h42 = _source17.dtor_expr;
        } else if (_source17.is_EarlyReturn) {
        } else if (_source17.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _397___mcc_h44 = _source17.dtor_toLabel;
        } else if (_source17.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _398___mcc_h46 = _source17.dtor_body;
        } else if (_source17.is_JumpTailCallStart) {
        } else if (_source17.is_Halt) {
        } else {
          DAST._IExpression _399___mcc_h48 = _source17.dtor_Print_a0;
        }
        if ((_370_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _372_stmtString);
        _370_i = (_370_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source18 = lhs;
      if (_source18.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _400___mcc_h0 = _source18.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source19 = _400___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _401___mcc_h1 = _source19;
        Dafny.ISequence<Dafny.Rune> _402_id = _401___mcc_h1;
        {
          if ((@params).Contains(_402_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_402_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_402_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_402_id);
          needsIIFE = false;
        }
      } else if (_source18.is_Select) {
        DAST._IExpression _403___mcc_h2 = _source18.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _404___mcc_h3 = _source18.dtor_field;
        Dafny.ISequence<Dafny.Rune> _405_field = _404___mcc_h3;
        DAST._IExpression _406_on = _403___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _407_onExpr;
          bool _408_onOwned;
          bool _409_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _410_recIdents;
          Dafny.ISequence<Dafny.Rune> _out87;
          bool _out88;
          bool _out89;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out90;
          DCOMP.COMP.GenExpr(_406_on, selfIdent, @params, false, out _out87, out _out88, out _out89, out _out90);
          _407_onExpr = _out87;
          _408_onOwned = _out88;
          _409_onErased = _out89;
          _410_recIdents = _out90;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _407_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _405_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _410_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _411___mcc_h4 = _source18.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _412___mcc_h5 = _source18.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _413_indices = _412___mcc_h5;
        DAST._IExpression _414_on = _411___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _415_onExpr;
          bool _416_onOwned;
          bool _417_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _418_recIdents;
          Dafny.ISequence<Dafny.Rune> _out91;
          bool _out92;
          bool _out93;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
          DCOMP.COMP.GenExpr(_414_on, selfIdent, @params, false, out _out91, out _out92, out _out93, out _out94);
          _415_onExpr = _out91;
          _416_onOwned = _out92;
          _417_onErased = _out93;
          _418_recIdents = _out94;
          readIdents = _418_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _419_i;
          _419_i = BigInteger.Zero;
          while ((_419_i) < (new BigInteger((_413_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _420_idx;
            bool _421___v19;
            bool _422_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _423_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out95;
            bool _out96;
            bool _out97;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
            DCOMP.COMP.GenExpr((_413_indices).Select(_419_i), selfIdent, @params, true, out _out95, out _out96, out _out97, out _out98);
            _420_idx = _out95;
            _421___v19 = _out96;
            _422_idxErased = _out97;
            _423_recIdentsIdx = _out98;
            if (!(_422_idxErased)) {
              _420_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _420_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_419_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _420_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _423_recIdentsIdx);
            _419_i = (_419_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _415_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _419_i = BigInteger.Zero;
          while ((_419_i) < (new BigInteger((_413_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_419_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _419_i = (_419_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source20 = stmt;
      if (_source20.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _424___mcc_h0 = _source20.dtor_name;
        DAST._IType _425___mcc_h1 = _source20.dtor_typ;
        DAST._IOptional<DAST._IExpression> _426___mcc_h2 = _source20.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source21 = _426___mcc_h2;
        if (_source21.is_Some) {
          DAST._IExpression _427___mcc_h3 = _source21.dtor_Some_a0;
          DAST._IExpression _428_expression = _427___mcc_h3;
          DAST._IType _429_typ = _425___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _430_name = _424___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _431_typeString;
            Dafny.ISequence<Dafny.Rune> _out99;
            _out99 = DCOMP.COMP.GenType(_429_typ, true, false);
            _431_typeString = _out99;
            Dafny.ISequence<Dafny.Rune> _432_expr;
            bool _433___v20;
            bool _434_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _435_recIdents;
            Dafny.ISequence<Dafny.Rune> _out100;
            bool _out101;
            bool _out102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out103;
            DCOMP.COMP.GenExpr(_428_expression, selfIdent, @params, true, out _out100, out _out101, out _out102, out _out103);
            _432_expr = _out100;
            _433___v20 = _out101;
            _434_recErased = _out102;
            _435_recIdents = _out103;
            if (!(_434_recErased)) {
              _432_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _432_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _432_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _431_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _432_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_430_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _431_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _432_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _435_recIdents;
          }
        } else {
          DAST._IType _436_typ = _425___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _437_name = _424___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _438_typeString;
            Dafny.ISequence<Dafny.Rune> _out104;
            _out104 = DCOMP.COMP.GenType(_436_typ, true, false);
            _438_typeString = _out104;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_437_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _438_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source20.is_Assign) {
        DAST._IAssignLhs _439___mcc_h4 = _source20.dtor_lhs;
        DAST._IExpression _440___mcc_h5 = _source20.dtor_value;
        DAST._IExpression _441_expression = _440___mcc_h5;
        DAST._IAssignLhs _442_lhs = _439___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _443_lhsGen;
          bool _444_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _445_recIdents;
          Dafny.ISequence<Dafny.Rune> _out105;
          bool _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          DCOMP.COMP.GenAssignLhs(_442_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out105, out _out106, out _out107);
          _443_lhsGen = _out105;
          _444_needsIIFE = _out106;
          _445_recIdents = _out107;
          Dafny.ISequence<Dafny.Rune> _446_exprGen;
          bool _447___v21;
          bool _448_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _449_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out108;
          bool _out109;
          bool _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenExpr(_441_expression, selfIdent, @params, true, out _out108, out _out109, out _out110, out _out111);
          _446_exprGen = _out108;
          _447___v21 = _out109;
          _448_exprErased = _out110;
          _449_exprIdents = _out111;
          if (!(_448_exprErased)) {
            _446_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _446_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _446_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _446_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_444_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _446_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _443_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_443_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _446_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_445_recIdents, _449_exprIdents);
        }
      } else if (_source20.is_If) {
        DAST._IExpression _450___mcc_h6 = _source20.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _451___mcc_h7 = _source20.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _452___mcc_h8 = _source20.dtor_els;
        Dafny.ISequence<DAST._IStatement> _453_els = _452___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _454_thn = _451___mcc_h7;
        DAST._IExpression _455_cond = _450___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _456_condString;
          bool _457___v22;
          bool _458_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _459_recIdents;
          Dafny.ISequence<Dafny.Rune> _out112;
          bool _out113;
          bool _out114;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out115;
          DCOMP.COMP.GenExpr(_455_cond, selfIdent, @params, true, out _out112, out _out113, out _out114, out _out115);
          _456_condString = _out112;
          _457___v22 = _out113;
          _458_condErased = _out114;
          _459_recIdents = _out115;
          if (!(_458_condErased)) {
            _456_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _456_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _459_recIdents;
          Dafny.ISequence<Dafny.Rune> _460_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _461_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out117;
          DCOMP.COMP.GenStmts(_454_thn, selfIdent, @params, isLast, earlyReturn, out _out116, out _out117);
          _460_thnString = _out116;
          _461_thnIdents = _out117;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _461_thnIdents);
          Dafny.ISequence<Dafny.Rune> _462_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _463_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenStmts(_453_els, selfIdent, @params, isLast, earlyReturn, out _out118, out _out119);
          _462_elsString = _out118;
          _463_elsIdents = _out119;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _463_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _456_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _460_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _462_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source20.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _464___mcc_h9 = _source20.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _465___mcc_h10 = _source20.dtor_body;
        Dafny.ISequence<DAST._IStatement> _466_body = _465___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _467_lbl = _464___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _468_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _469_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out121;
          DCOMP.COMP.GenStmts(_466_body, selfIdent, @params, isLast, earlyReturn, out _out120, out _out121);
          _468_bodyString = _out120;
          _469_bodyIdents = _out121;
          readIdents = _469_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _467_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _468_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source20.is_While) {
        DAST._IExpression _470___mcc_h11 = _source20.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _471___mcc_h12 = _source20.dtor_body;
        Dafny.ISequence<DAST._IStatement> _472_body = _471___mcc_h12;
        DAST._IExpression _473_cond = _470___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _474_condString;
          bool _475___v23;
          bool _476_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _477_recIdents;
          Dafny.ISequence<Dafny.Rune> _out122;
          bool _out123;
          bool _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenExpr(_473_cond, selfIdent, @params, true, out _out122, out _out123, out _out124, out _out125);
          _474_condString = _out122;
          _475___v23 = _out123;
          _476_condErased = _out124;
          _477_recIdents = _out125;
          if (!(_476_condErased)) {
            _474_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _474_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _477_recIdents;
          Dafny.ISequence<Dafny.Rune> _478_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _479_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out127;
          DCOMP.COMP.GenStmts(_472_body, selfIdent, @params, false, earlyReturn, out _out126, out _out127);
          _478_bodyString = _out126;
          _479_bodyIdents = _out127;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _479_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _474_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _478_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source20.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _480___mcc_h13 = _source20.dtor_boundName;
        DAST._IType _481___mcc_h14 = _source20.dtor_boundType;
        DAST._IExpression _482___mcc_h15 = _source20.dtor_over;
        Dafny.ISequence<DAST._IStatement> _483___mcc_h16 = _source20.dtor_body;
        Dafny.ISequence<DAST._IStatement> _484_body = _483___mcc_h16;
        DAST._IExpression _485_over = _482___mcc_h15;
        DAST._IType _486_boundType = _481___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _487_boundName = _480___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _488_overString;
          bool _489___v24;
          bool _490_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _491_recIdents;
          Dafny.ISequence<Dafny.Rune> _out128;
          bool _out129;
          bool _out130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
          DCOMP.COMP.GenExpr(_485_over, selfIdent, @params, true, out _out128, out _out129, out _out130, out _out131);
          _488_overString = _out128;
          _489___v24 = _out129;
          _490_overErased = _out130;
          _491_recIdents = _out131;
          Dafny.ISequence<Dafny.Rune> _492_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out132;
          _out132 = DCOMP.COMP.GenType(_486_boundType, false, false);
          _492_boundTypeStr = _out132;
          readIdents = _491_recIdents;
          Dafny.ISequence<Dafny.Rune> _493_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _494_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenStmts(_484_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_487_boundName)), false, earlyReturn, out _out133, out _out134);
          _493_bodyString = _out133;
          _494_bodyIdents = _out134;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _494_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_487_boundName));
          Dafny.ISequence<Dafny.Rune> _495_unerasedIter;
          _495_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_490_overErased) {
            _495_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _492_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _495_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _488_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_487_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _495_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _493_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source20.is_Call) {
        DAST._IExpression _496___mcc_h17 = _source20.dtor_on;
        Dafny.ISequence<Dafny.Rune> _497___mcc_h18 = _source20.dtor_name;
        Dafny.ISequence<DAST._IType> _498___mcc_h19 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _499___mcc_h20 = _source20.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _500___mcc_h21 = _source20.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _501_maybeOutVars = _500___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _502_args = _499___mcc_h20;
        Dafny.ISequence<DAST._IType> _503_typeArgs = _498___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _504_name = _497___mcc_h18;
        DAST._IExpression _505_on = _496___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _506_typeArgString;
          _506_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_503_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _507_typeI;
            _507_typeI = BigInteger.Zero;
            _506_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_507_typeI) < (new BigInteger((_503_typeArgs).Count))) {
              if ((_507_typeI).Sign == 1) {
                _506_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_506_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _508_typeString;
              Dafny.ISequence<Dafny.Rune> _out135;
              _out135 = DCOMP.COMP.GenType((_503_typeArgs).Select(_507_typeI), false, false);
              _508_typeString = _out135;
              _506_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_506_typeArgString, _508_typeString);
              _507_typeI = (_507_typeI) + (BigInteger.One);
            }
            _506_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_506_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _509_argString;
          _509_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _510_i;
          _510_i = BigInteger.Zero;
          while ((_510_i) < (new BigInteger((_502_args).Count))) {
            if ((_510_i).Sign == 1) {
              _509_argString = Dafny.Sequence<Dafny.Rune>.Concat(_509_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _511_argExpr;
            bool _512_isOwned;
            bool _513_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _514_argIdents;
            Dafny.ISequence<Dafny.Rune> _out136;
            bool _out137;
            bool _out138;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out139;
            DCOMP.COMP.GenExpr((_502_args).Select(_510_i), selfIdent, @params, false, out _out136, out _out137, out _out138, out _out139);
            _511_argExpr = _out136;
            _512_isOwned = _out137;
            _513_argErased = _out138;
            _514_argIdents = _out139;
            if (_512_isOwned) {
              _511_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _511_argExpr);
            }
            _509_argString = Dafny.Sequence<Dafny.Rune>.Concat(_509_argString, _511_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _514_argIdents);
            _510_i = (_510_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _515_enclosingString;
          bool _516___v25;
          bool _517___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _518_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out140;
          bool _out141;
          bool _out142;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out143;
          DCOMP.COMP.GenExpr(_505_on, selfIdent, @params, false, out _out140, out _out141, out _out142, out _out143);
          _515_enclosingString = _out140;
          _516___v25 = _out141;
          _517___v26 = _out142;
          _518_enclosingIdents = _out143;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _518_enclosingIdents);
          DAST._IExpression _source22 = _505_on;
          if (_source22.is_Literal) {
            DAST._ILiteral _519___mcc_h26 = _source22.dtor_Literal_a0;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _520___mcc_h28 = _source22.dtor_Ident_a0;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _521___mcc_h30 = _source22.dtor_Companion_a0;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_515_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source22.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _522___mcc_h32 = _source22.dtor_Tuple_a0;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _523___mcc_h34 = _source22.dtor_path;
            Dafny.ISequence<DAST._IType> _524___mcc_h35 = _source22.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _525___mcc_h36 = _source22.dtor_args;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _526___mcc_h40 = _source22.dtor_dims;
            DAST._IType _527___mcc_h41 = _source22.dtor_typ;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _528___mcc_h44 = _source22.dtor_path;
            Dafny.ISequence<DAST._IType> _529___mcc_h45 = _source22.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _530___mcc_h46 = _source22.dtor_variant;
            bool _531___mcc_h47 = _source22.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _532___mcc_h48 = _source22.dtor_contents;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Convert) {
            DAST._IExpression _533___mcc_h54 = _source22.dtor_value;
            DAST._IType _534___mcc_h55 = _source22.dtor_from;
            DAST._IType _535___mcc_h56 = _source22.dtor_typ;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_SeqConstruct) {
            DAST._IExpression _536___mcc_h60 = _source22.dtor_length;
            DAST._IExpression _537___mcc_h61 = _source22.dtor_elem;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _538___mcc_h64 = _source22.dtor_elements;
            DAST._IType _539___mcc_h65 = _source22.dtor_typ;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _540___mcc_h68 = _source22.dtor_elements;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _541___mcc_h70 = _source22.dtor_mapElems;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_This) {
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Ite) {
            DAST._IExpression _542___mcc_h72 = _source22.dtor_cond;
            DAST._IExpression _543___mcc_h73 = _source22.dtor_thn;
            DAST._IExpression _544___mcc_h74 = _source22.dtor_els;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_UnOp) {
            DAST._IUnaryOp _545___mcc_h78 = _source22.dtor_unOp;
            DAST._IExpression _546___mcc_h79 = _source22.dtor_expr;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_BinOp) {
            DAST._IBinOp _547___mcc_h82 = _source22.dtor_op;
            DAST._IExpression _548___mcc_h83 = _source22.dtor_left;
            DAST._IExpression _549___mcc_h84 = _source22.dtor_right;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_ArrayLen) {
            DAST._IExpression _550___mcc_h88 = _source22.dtor_expr;
            BigInteger _551___mcc_h89 = _source22.dtor_dim;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Select) {
            DAST._IExpression _552___mcc_h92 = _source22.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _553___mcc_h93 = _source22.dtor_field;
            bool _554___mcc_h94 = _source22.dtor_isConstant;
            bool _555___mcc_h95 = _source22.dtor_onDatatype;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_SelectFn) {
            DAST._IExpression _556___mcc_h100 = _source22.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _557___mcc_h101 = _source22.dtor_field;
            bool _558___mcc_h102 = _source22.dtor_onDatatype;
            bool _559___mcc_h103 = _source22.dtor_isStatic;
            BigInteger _560___mcc_h104 = _source22.dtor_arity;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Index) {
            DAST._IExpression _561___mcc_h110 = _source22.dtor_expr;
            DAST._ICollKind _562___mcc_h111 = _source22.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _563___mcc_h112 = _source22.dtor_indices;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_IndexRange) {
            DAST._IExpression _564___mcc_h116 = _source22.dtor_expr;
            bool _565___mcc_h117 = _source22.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _566___mcc_h118 = _source22.dtor_low;
            DAST._IOptional<DAST._IExpression> _567___mcc_h119 = _source22.dtor_high;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_TupleSelect) {
            DAST._IExpression _568___mcc_h124 = _source22.dtor_expr;
            BigInteger _569___mcc_h125 = _source22.dtor_index;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Call) {
            DAST._IExpression _570___mcc_h128 = _source22.dtor_on;
            Dafny.ISequence<Dafny.Rune> _571___mcc_h129 = _source22.dtor_name;
            Dafny.ISequence<DAST._IType> _572___mcc_h130 = _source22.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _573___mcc_h131 = _source22.dtor_args;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _574___mcc_h136 = _source22.dtor_params;
            DAST._IType _575___mcc_h137 = _source22.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _576___mcc_h138 = _source22.dtor_body;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _577___mcc_h142 = _source22.dtor_values;
            DAST._IType _578___mcc_h143 = _source22.dtor_retType;
            DAST._IExpression _579___mcc_h144 = _source22.dtor_expr;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _580___mcc_h148 = _source22.dtor_name;
            DAST._IType _581___mcc_h149 = _source22.dtor_typ;
            DAST._IExpression _582___mcc_h150 = _source22.dtor_value;
            DAST._IExpression _583___mcc_h151 = _source22.dtor_iifeBody;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_Apply) {
            DAST._IExpression _584___mcc_h156 = _source22.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _585___mcc_h157 = _source22.dtor_args;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_TypeTest) {
            DAST._IExpression _586___mcc_h160 = _source22.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _587___mcc_h161 = _source22.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _588___mcc_h162 = _source22.dtor_variant;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_InitializationValue) {
            DAST._IType _589___mcc_h166 = _source22.dtor_typ;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_BoolBoundedPool) {
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_SetBoundedPool) {
            DAST._IExpression _590___mcc_h168 = _source22.dtor_of;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source22.is_SeqBoundedPool) {
            DAST._IExpression _591___mcc_h170 = _source22.dtor_of;
            bool _592___mcc_h171 = _source22.dtor_includeDuplicates;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _593___mcc_h174 = _source22.dtor_lo;
            DAST._IExpression _594___mcc_h175 = _source22.dtor_hi;
            {
              _515_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _515_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _595_receiver;
          _595_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source23 = _501_maybeOutVars;
          if (_source23.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _596___mcc_h178 = _source23.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _597_outVars = _596___mcc_h178;
            {
              if ((new BigInteger((_597_outVars).Count)) > (BigInteger.One)) {
                _595_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _598_outI;
              _598_outI = BigInteger.Zero;
              while ((_598_outI) < (new BigInteger((_597_outVars).Count))) {
                if ((_598_outI).Sign == 1) {
                  _595_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_595_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _599_outVar;
                _599_outVar = (_597_outVars).Select(_598_outI);
                _595_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_595_receiver, (_599_outVar));
                _598_outI = (_598_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_597_outVars).Count)) > (BigInteger.One)) {
                _595_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_595_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_595_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_595_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _515_enclosingString), DCOMP.__default.escapeIdent(_504_name)), _506_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _509_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source20.is_Return) {
        DAST._IExpression _600___mcc_h22 = _source20.dtor_expr;
        DAST._IExpression _601_expr = _600___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _602_exprString;
          bool _603___v29;
          bool _604_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _605_recIdents;
          Dafny.ISequence<Dafny.Rune> _out144;
          bool _out145;
          bool _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP.COMP.GenExpr(_601_expr, selfIdent, @params, true, out _out144, out _out145, out _out146, out _out147);
          _602_exprString = _out144;
          _603___v29 = _out145;
          _604_recErased = _out146;
          _605_recIdents = _out147;
          _602_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _602_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _605_recIdents;
          if (isLast) {
            generated = _602_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _602_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source20.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _606___mcc_h23 = _source20.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _607_toLabel = _606___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source24 = _607_toLabel;
          if (_source24.is_Some) {
            Dafny.ISequence<Dafny.Rune> _608___mcc_h179 = _source24.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _609_lbl = _608___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _609_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _610___mcc_h24 = _source20.dtor_body;
        Dafny.ISequence<DAST._IStatement> _611_body = _610___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _612_paramI;
          _612_paramI = BigInteger.Zero;
          while ((_612_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _613_param;
            _613_param = (@params).Select(_612_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_613_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_613_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _612_paramI = (_612_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _614_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _615_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out148;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out149;
          DCOMP.COMP.GenStmts(_611_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out148, out _out149);
          _614_bodyString = _out148;
          _615_bodyIdents = _out149;
          readIdents = _615_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _614_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source20.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _616___mcc_h25 = _source20.dtor_Print_a0;
        DAST._IExpression _617_e = _616___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _618_printedExpr;
          bool _619_isOwned;
          bool _620___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _621_recIdents;
          Dafny.ISequence<Dafny.Rune> _out150;
          bool _out151;
          bool _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP.COMP.GenExpr(_617_e, selfIdent, @params, false, out _out150, out _out151, out _out152, out _out153);
          _618_printedExpr = _out150;
          _619_isOwned = _out151;
          _620___v30 = _out152;
          _621_recIdents = _out153;
          if (_619_isOwned) {
            _618_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _618_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _618_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _621_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source25 = e;
      if (_source25.is_Literal) {
        DAST._ILiteral _622___mcc_h0 = _source25.dtor_Literal_a0;
        DAST._ILiteral _source26 = _622___mcc_h0;
        if (_source26.is_BoolLiteral) {
          bool _623___mcc_h1 = _source26.dtor_BoolLiteral_a0;
          if ((_623___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source26.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _624___mcc_h2 = _source26.dtor_IntLiteral_a0;
          DAST._IType _625___mcc_h3 = _source26.dtor_IntLiteral_a1;
          DAST._IType _626_t = _625___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _627_i = _624___mcc_h2;
          {
            DAST._IType _source27 = _626_t;
            if (_source27.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _628___mcc_h237 = _source27.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _629___mcc_h238 = _source27.dtor_typeArgs;
              DAST._IResolvedType _630___mcc_h239 = _source27.dtor_resolved;
              DAST._IType _631_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _632_genType;
                Dafny.ISequence<Dafny.Rune> _out154;
                _out154 = DCOMP.COMP.GenType(_631_o, false, false);
                _632_genType = _out154;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _632_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Nullable) {
              DAST._IType _633___mcc_h243 = _source27.dtor_Nullable_a0;
              DAST._IType _634_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _635_genType;
                Dafny.ISequence<Dafny.Rune> _out155;
                _out155 = DCOMP.COMP.GenType(_634_o, false, false);
                _635_genType = _out155;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _635_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Tuple) {
              Dafny.ISequence<DAST._IType> _636___mcc_h245 = _source27.dtor_Tuple_a0;
              DAST._IType _637_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _638_genType;
                Dafny.ISequence<Dafny.Rune> _out156;
                _out156 = DCOMP.COMP.GenType(_637_o, false, false);
                _638_genType = _out156;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _638_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Array) {
              DAST._IType _639___mcc_h247 = _source27.dtor_element;
              BigInteger _640___mcc_h248 = _source27.dtor_dims;
              DAST._IType _641_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _642_genType;
                Dafny.ISequence<Dafny.Rune> _out157;
                _out157 = DCOMP.COMP.GenType(_641_o, false, false);
                _642_genType = _out157;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _642_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Seq) {
              DAST._IType _643___mcc_h251 = _source27.dtor_element;
              DAST._IType _644_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _645_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_644_o, false, false);
                _645_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _645_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Set) {
              DAST._IType _646___mcc_h253 = _source27.dtor_element;
              DAST._IType _647_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _648_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_647_o, false, false);
                _648_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _648_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Multiset) {
              DAST._IType _649___mcc_h255 = _source27.dtor_element;
              DAST._IType _650_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _651_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_650_o, false, false);
                _651_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _651_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Map) {
              DAST._IType _652___mcc_h257 = _source27.dtor_key;
              DAST._IType _653___mcc_h258 = _source27.dtor_value;
              DAST._IType _654_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _655_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_654_o, false, false);
                _655_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _655_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Arrow) {
              Dafny.ISequence<DAST._IType> _656___mcc_h261 = _source27.dtor_args;
              DAST._IType _657___mcc_h262 = _source27.dtor_result;
              DAST._IType _658_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _659_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_658_o, false, false);
                _659_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _659_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source27.is_Primitive) {
              DAST._IPrimitive _660___mcc_h265 = _source27.dtor_Primitive_a0;
              DAST._IPrimitive _source28 = _660___mcc_h265;
              if (_source28.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source28.is_Real) {
                DAST._IType _661_o = _626_t;
                {
                  Dafny.ISequence<Dafny.Rune> _662_genType;
                  Dafny.ISequence<Dafny.Rune> _out163;
                  _out163 = DCOMP.COMP.GenType(_661_o, false, false);
                  _662_genType = _out163;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _662_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source28.is_String) {
                DAST._IType _663_o = _626_t;
                {
                  Dafny.ISequence<Dafny.Rune> _664_genType;
                  Dafny.ISequence<Dafny.Rune> _out164;
                  _out164 = DCOMP.COMP.GenType(_663_o, false, false);
                  _664_genType = _out164;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _664_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source28.is_Bool) {
                DAST._IType _665_o = _626_t;
                {
                  Dafny.ISequence<Dafny.Rune> _666_genType;
                  Dafny.ISequence<Dafny.Rune> _out165;
                  _out165 = DCOMP.COMP.GenType(_665_o, false, false);
                  _666_genType = _out165;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _666_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _667_o = _626_t;
                {
                  Dafny.ISequence<Dafny.Rune> _668_genType;
                  Dafny.ISequence<Dafny.Rune> _out166;
                  _out166 = DCOMP.COMP.GenType(_667_o, false, false);
                  _668_genType = _out166;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _668_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source27.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _669___mcc_h267 = _source27.dtor_Passthrough_a0;
              DAST._IType _670_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _671_genType;
                Dafny.ISequence<Dafny.Rune> _out167;
                _out167 = DCOMP.COMP.GenType(_670_o, false, false);
                _671_genType = _out167;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _671_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _672___mcc_h269 = _source27.dtor_TypeArg_a0;
              DAST._IType _673_o = _626_t;
              {
                Dafny.ISequence<Dafny.Rune> _674_genType;
                Dafny.ISequence<Dafny.Rune> _out168;
                _out168 = DCOMP.COMP.GenType(_673_o, false, false);
                _674_genType = _out168;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _627_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _674_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source26.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _675___mcc_h4 = _source26.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _676___mcc_h5 = _source26.dtor_DecLiteral_a1;
          DAST._IType _677___mcc_h6 = _source26.dtor_DecLiteral_a2;
          DAST._IType _678_t = _677___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _679_d = _676___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _680_n = _675___mcc_h4;
          {
            DAST._IType _source29 = _678_t;
            if (_source29.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _681___mcc_h271 = _source29.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _682___mcc_h272 = _source29.dtor_typeArgs;
              DAST._IResolvedType _683___mcc_h273 = _source29.dtor_resolved;
              DAST._IType _684_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _685_genType;
                Dafny.ISequence<Dafny.Rune> _out169;
                _out169 = DCOMP.COMP.GenType(_684_o, false, false);
                _685_genType = _out169;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _685_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Nullable) {
              DAST._IType _686___mcc_h277 = _source29.dtor_Nullable_a0;
              DAST._IType _687_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _688_genType;
                Dafny.ISequence<Dafny.Rune> _out170;
                _out170 = DCOMP.COMP.GenType(_687_o, false, false);
                _688_genType = _out170;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _688_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Tuple) {
              Dafny.ISequence<DAST._IType> _689___mcc_h279 = _source29.dtor_Tuple_a0;
              DAST._IType _690_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _691_genType;
                Dafny.ISequence<Dafny.Rune> _out171;
                _out171 = DCOMP.COMP.GenType(_690_o, false, false);
                _691_genType = _out171;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _691_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Array) {
              DAST._IType _692___mcc_h281 = _source29.dtor_element;
              BigInteger _693___mcc_h282 = _source29.dtor_dims;
              DAST._IType _694_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _695_genType;
                Dafny.ISequence<Dafny.Rune> _out172;
                _out172 = DCOMP.COMP.GenType(_694_o, false, false);
                _695_genType = _out172;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _695_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Seq) {
              DAST._IType _696___mcc_h285 = _source29.dtor_element;
              DAST._IType _697_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _698_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_697_o, false, false);
                _698_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _698_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Set) {
              DAST._IType _699___mcc_h287 = _source29.dtor_element;
              DAST._IType _700_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _701_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_700_o, false, false);
                _701_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _701_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Multiset) {
              DAST._IType _702___mcc_h289 = _source29.dtor_element;
              DAST._IType _703_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _704_genType;
                Dafny.ISequence<Dafny.Rune> _out175;
                _out175 = DCOMP.COMP.GenType(_703_o, false, false);
                _704_genType = _out175;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _704_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Map) {
              DAST._IType _705___mcc_h291 = _source29.dtor_key;
              DAST._IType _706___mcc_h292 = _source29.dtor_value;
              DAST._IType _707_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _708_genType;
                Dafny.ISequence<Dafny.Rune> _out176;
                _out176 = DCOMP.COMP.GenType(_707_o, false, false);
                _708_genType = _out176;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _708_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Arrow) {
              Dafny.ISequence<DAST._IType> _709___mcc_h295 = _source29.dtor_args;
              DAST._IType _710___mcc_h296 = _source29.dtor_result;
              DAST._IType _711_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _712_genType;
                Dafny.ISequence<Dafny.Rune> _out177;
                _out177 = DCOMP.COMP.GenType(_711_o, false, false);
                _712_genType = _out177;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _712_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source29.is_Primitive) {
              DAST._IPrimitive _713___mcc_h299 = _source29.dtor_Primitive_a0;
              DAST._IPrimitive _source30 = _713___mcc_h299;
              if (_source30.is_Int) {
                DAST._IType _714_o = _678_t;
                {
                  Dafny.ISequence<Dafny.Rune> _715_genType;
                  Dafny.ISequence<Dafny.Rune> _out178;
                  _out178 = DCOMP.COMP.GenType(_714_o, false, false);
                  _715_genType = _out178;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _715_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source30.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source30.is_String) {
                DAST._IType _716_o = _678_t;
                {
                  Dafny.ISequence<Dafny.Rune> _717_genType;
                  Dafny.ISequence<Dafny.Rune> _out179;
                  _out179 = DCOMP.COMP.GenType(_716_o, false, false);
                  _717_genType = _out179;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _717_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source30.is_Bool) {
                DAST._IType _718_o = _678_t;
                {
                  Dafny.ISequence<Dafny.Rune> _719_genType;
                  Dafny.ISequence<Dafny.Rune> _out180;
                  _out180 = DCOMP.COMP.GenType(_718_o, false, false);
                  _719_genType = _out180;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _719_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _720_o = _678_t;
                {
                  Dafny.ISequence<Dafny.Rune> _721_genType;
                  Dafny.ISequence<Dafny.Rune> _out181;
                  _out181 = DCOMP.COMP.GenType(_720_o, false, false);
                  _721_genType = _out181;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _721_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source29.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _722___mcc_h301 = _source29.dtor_Passthrough_a0;
              DAST._IType _723_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _724_genType;
                Dafny.ISequence<Dafny.Rune> _out182;
                _out182 = DCOMP.COMP.GenType(_723_o, false, false);
                _724_genType = _out182;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _724_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _725___mcc_h303 = _source29.dtor_TypeArg_a0;
              DAST._IType _726_o = _678_t;
              {
                Dafny.ISequence<Dafny.Rune> _727_genType;
                Dafny.ISequence<Dafny.Rune> _out183;
                _out183 = DCOMP.COMP.GenType(_726_o, false, false);
                _727_genType = _out183;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _680_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _679_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _727_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source26.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _728___mcc_h7 = _source26.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _729_l = _728___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _729_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source26.is_CharLiteral) {
          Dafny.Rune _730___mcc_h8 = _source26.dtor_CharLiteral_a0;
          Dafny.Rune _731_c = _730___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_731_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _732___mcc_h9 = _source26.dtor_Null_a0;
          DAST._IType _733_tpe = _732___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _734_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out184;
            _out184 = DCOMP.COMP.GenType(_733_tpe, false, false);
            _734_tpeGen = _out184;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _734_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source25.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _735___mcc_h10 = _source25.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _736_name = _735___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_736_name);
          if (!((@params).Contains(_736_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_736_name);
        }
      } else if (_source25.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _737___mcc_h11 = _source25.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _738_path = _737___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out185;
          _out185 = DCOMP.COMP.GenPath(_738_path);
          s = _out185;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source25.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _739___mcc_h12 = _source25.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _740_values = _739___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _741_i;
          _741_i = BigInteger.Zero;
          while ((_741_i) < (new BigInteger((_740_values).Count))) {
            if ((_741_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _742_recursiveGen;
            bool _743___v31;
            bool _744_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _745_recIdents;
            Dafny.ISequence<Dafny.Rune> _out186;
            bool _out187;
            bool _out188;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out189;
            DCOMP.COMP.GenExpr((_740_values).Select(_741_i), selfIdent, @params, true, out _out186, out _out187, out _out188, out _out189);
            _742_recursiveGen = _out186;
            _743___v31 = _out187;
            _744_isErased = _out188;
            _745_recIdents = _out189;
            if (_744_isErased) {
              _742_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _745_recIdents);
            _741_i = (_741_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source25.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _746___mcc_h13 = _source25.dtor_path;
        Dafny.ISequence<DAST._IType> _747___mcc_h14 = _source25.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _748___mcc_h15 = _source25.dtor_args;
        Dafny.ISequence<DAST._IExpression> _749_args = _748___mcc_h15;
        Dafny.ISequence<DAST._IType> _750_typeArgs = _747___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _751_path = _746___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _752_path;
          Dafny.ISequence<Dafny.Rune> _out190;
          _out190 = DCOMP.COMP.GenPath(_751_path);
          _752_path = _out190;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _752_path);
          if ((new BigInteger((_750_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _753_i;
            _753_i = BigInteger.Zero;
            while ((_753_i) < (new BigInteger((_750_typeArgs).Count))) {
              if ((_753_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _754_typeString;
              Dafny.ISequence<Dafny.Rune> _out191;
              _out191 = DCOMP.COMP.GenType((_750_typeArgs).Select(_753_i), false, false);
              _754_typeString = _out191;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _754_typeString);
              _753_i = (_753_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _755_i;
          _755_i = BigInteger.Zero;
          while ((_755_i) < (new BigInteger((_749_args).Count))) {
            if ((_755_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _756_recursiveGen;
            bool _757___v32;
            bool _758_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _759_recIdents;
            Dafny.ISequence<Dafny.Rune> _out192;
            bool _out193;
            bool _out194;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out195;
            DCOMP.COMP.GenExpr((_749_args).Select(_755_i), selfIdent, @params, true, out _out192, out _out193, out _out194, out _out195);
            _756_recursiveGen = _out192;
            _757___v32 = _out193;
            _758_isErased = _out194;
            _759_recIdents = _out195;
            if (_758_isErased) {
              _756_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _756_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _756_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _759_recIdents);
            _755_i = (_755_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source25.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _760___mcc_h16 = _source25.dtor_dims;
        DAST._IType _761___mcc_h17 = _source25.dtor_typ;
        DAST._IType _762_typ = _761___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _763_dims = _760___mcc_h16;
        {
          BigInteger _764_i;
          _764_i = (new BigInteger((_763_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _765_genTyp;
          Dafny.ISequence<Dafny.Rune> _out196;
          _out196 = DCOMP.COMP.GenType(_762_typ, false, false);
          _765_genTyp = _out196;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _765_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_764_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _766_recursiveGen;
            bool _767___v33;
            bool _768_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _769_recIdents;
            Dafny.ISequence<Dafny.Rune> _out197;
            bool _out198;
            bool _out199;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out200;
            DCOMP.COMP.GenExpr((_763_dims).Select(_764_i), selfIdent, @params, true, out _out197, out _out198, out _out199, out _out200);
            _766_recursiveGen = _out197;
            _767___v33 = _out198;
            _768_isErased = _out199;
            _769_recIdents = _out200;
            if (!(_768_isErased)) {
              _766_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _766_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _766_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _769_recIdents);
            _764_i = (_764_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source25.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _770___mcc_h18 = _source25.dtor_path;
        Dafny.ISequence<DAST._IType> _771___mcc_h19 = _source25.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _772___mcc_h20 = _source25.dtor_variant;
        bool _773___mcc_h21 = _source25.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _774___mcc_h22 = _source25.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _775_values = _774___mcc_h22;
        bool _776_isCo = _773___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _777_variant = _772___mcc_h20;
        Dafny.ISequence<DAST._IType> _778_typeArgs = _771___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _779_path = _770___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _780_path;
          Dafny.ISequence<Dafny.Rune> _out201;
          _out201 = DCOMP.COMP.GenPath(_779_path);
          _780_path = _out201;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _780_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_778_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _781_i;
            _781_i = BigInteger.Zero;
            while ((_781_i) < (new BigInteger((_778_typeArgs).Count))) {
              if ((_781_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _782_typeString;
              Dafny.ISequence<Dafny.Rune> _out202;
              _out202 = DCOMP.COMP.GenType((_778_typeArgs).Select(_781_i), false, false);
              _782_typeString = _out202;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _782_typeString);
              _781_i = (_781_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_777_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _783_i;
          _783_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_783_i) < (new BigInteger((_775_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs0 = (_775_values).Select(_783_i);
            Dafny.ISequence<Dafny.Rune> _784_name = _let_tmp_rhs0.dtor__0;
            DAST._IExpression _785_value = _let_tmp_rhs0.dtor__1;
            if ((_783_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_776_isCo) {
              Dafny.ISequence<Dafny.Rune> _786_recursiveGen;
              bool _787___v34;
              bool _788_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _789_recIdents;
              Dafny.ISequence<Dafny.Rune> _out203;
              bool _out204;
              bool _out205;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out206;
              DCOMP.COMP.GenExpr(_785_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out203, out _out204, out _out205, out _out206);
              _786_recursiveGen = _out203;
              _787___v34 = _out204;
              _788_isErased = _out205;
              _789_recIdents = _out206;
              if (!(_788_isErased)) {
                _786_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _786_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _789_recIdents);
              Dafny.ISequence<Dafny.Rune> _790_allReadCloned;
              _790_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_789_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _791_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_789_recIdents).Elements) {
                  _791_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_789_recIdents).Contains(_791_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _790_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_790_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_791_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_791_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _789_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_789_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_791_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_784_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _790_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _792_recursiveGen;
              bool _793___v35;
              bool _794_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _795_recIdents;
              Dafny.ISequence<Dafny.Rune> _out207;
              bool _out208;
              bool _out209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out210;
              DCOMP.COMP.GenExpr(_785_value, selfIdent, @params, true, out _out207, out _out208, out _out209, out _out210);
              _792_recursiveGen = _out207;
              _793___v35 = _out208;
              _794_isErased = _out209;
              _795_recIdents = _out210;
              if (!(_794_isErased)) {
                _792_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _792_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_784_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _795_recIdents);
            }
            _783_i = (_783_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source25.is_Convert) {
        DAST._IExpression _796___mcc_h23 = _source25.dtor_value;
        DAST._IType _797___mcc_h24 = _source25.dtor_from;
        DAST._IType _798___mcc_h25 = _source25.dtor_typ;
        DAST._IType _799_toTpe = _798___mcc_h25;
        DAST._IType _800_fromTpe = _797___mcc_h24;
        DAST._IExpression _801_expr = _796___mcc_h23;
        {
          if (object.Equals(_800_fromTpe, _799_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _802_recursiveGen;
            bool _803_recOwned;
            bool _804_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _805_recIdents;
            Dafny.ISequence<Dafny.Rune> _out211;
            bool _out212;
            bool _out213;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
            DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out211, out _out212, out _out213, out _out214);
            _802_recursiveGen = _out211;
            _803_recOwned = _out212;
            _804_recErased = _out213;
            _805_recIdents = _out214;
            s = _802_recursiveGen;
            isOwned = _803_recOwned;
            isErased = _804_recErased;
            readIdents = _805_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source31 = _System.Tuple2<DAST._IType, DAST._IType>.create(_800_fromTpe, _799_toTpe);
            DAST._IType _806___mcc_h305 = _source31.dtor__0;
            DAST._IType _807___mcc_h306 = _source31.dtor__1;
            DAST._IType _source32 = _806___mcc_h305;
            if (_source32.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _808___mcc_h309 = _source32.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _809___mcc_h310 = _source32.dtor_typeArgs;
              DAST._IResolvedType _810___mcc_h311 = _source32.dtor_resolved;
              DAST._IResolvedType _source33 = _810___mcc_h311;
              if (_source33.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _811___mcc_h321 = _source33.dtor_path;
                DAST._IType _source34 = _807___mcc_h306;
                if (_source34.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _812___mcc_h325 = _source34.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _813___mcc_h326 = _source34.dtor_typeArgs;
                  DAST._IResolvedType _814___mcc_h327 = _source34.dtor_resolved;
                  DAST._IResolvedType _source35 = _814___mcc_h327;
                  if (_source35.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _815___mcc_h331 = _source35.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _816_recursiveGen;
                      bool _817_recOwned;
                      bool _818_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _819_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out215;
                      bool _out216;
                      bool _out217;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out218;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out215, out _out216, out _out217, out _out218);
                      _816_recursiveGen = _out215;
                      _817_recOwned = _out216;
                      _818_recErased = _out217;
                      _819_recIdents = _out218;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _816_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _817_recOwned;
                      isErased = _818_recErased;
                      readIdents = _819_recIdents;
                    }
                  } else if (_source35.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _820___mcc_h333 = _source35.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _821_recursiveGen;
                      bool _822_recOwned;
                      bool _823_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _824_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out219;
                      bool _out220;
                      bool _out221;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                      _821_recursiveGen = _out219;
                      _822_recOwned = _out220;
                      _823_recErased = _out221;
                      _824_recIdents = _out222;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _821_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _822_recOwned;
                      isErased = _823_recErased;
                      readIdents = _824_recIdents;
                    }
                  } else {
                    DAST._IType _825___mcc_h335 = _source35.dtor_Newtype_a0;
                    DAST._IType _826_b = _825___mcc_h335;
                    {
                      if (object.Equals(_800_fromTpe, _826_b)) {
                        Dafny.ISequence<Dafny.Rune> _827_recursiveGen;
                        bool _828_recOwned;
                        bool _829_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _830_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out223;
                        bool _out224;
                        bool _out225;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                        _827_recursiveGen = _out223;
                        _828_recOwned = _out224;
                        _829_recErased = _out225;
                        _830_recIdents = _out226;
                        Dafny.ISequence<Dafny.Rune> _831_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out227;
                        _out227 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                        _831_rhsType = _out227;
                        Dafny.ISequence<Dafny.Rune> _832_uneraseFn;
                        _832_uneraseFn = ((_828_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _831_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _832_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _828_recOwned;
                        isErased = false;
                        readIdents = _830_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out228;
                        bool _out229;
                        bool _out230;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out231;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _826_b), _826_b, _799_toTpe), selfIdent, @params, mustOwn, out _out228, out _out229, out _out230, out _out231);
                        s = _out228;
                        isOwned = _out229;
                        isErased = _out230;
                        readIdents = _out231;
                      }
                    }
                  }
                } else if (_source34.is_Nullable) {
                  DAST._IType _833___mcc_h337 = _source34.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _834_recursiveGen;
                    bool _835_recOwned;
                    bool _836_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _837_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out232;
                    bool _out233;
                    bool _out234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out232, out _out233, out _out234, out _out235);
                    _834_recursiveGen = _out232;
                    _835_recOwned = _out233;
                    _836_recErased = _out234;
                    _837_recIdents = _out235;
                    if (!(_835_recOwned)) {
                      _834_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_834_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _834_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _836_recErased;
                    readIdents = _837_recIdents;
                  }
                } else if (_source34.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _838___mcc_h339 = _source34.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _839_recursiveGen;
                    bool _840_recOwned;
                    bool _841_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _842_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out236;
                    bool _out237;
                    bool _out238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out239;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out236, out _out237, out _out238, out _out239);
                    _839_recursiveGen = _out236;
                    _840_recOwned = _out237;
                    _841_recErased = _out238;
                    _842_recIdents = _out239;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _839_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _840_recOwned;
                    isErased = _841_recErased;
                    readIdents = _842_recIdents;
                  }
                } else if (_source34.is_Array) {
                  DAST._IType _843___mcc_h341 = _source34.dtor_element;
                  BigInteger _844___mcc_h342 = _source34.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _845_recursiveGen;
                    bool _846_recOwned;
                    bool _847_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _848_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out240;
                    bool _out241;
                    bool _out242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out243;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out240, out _out241, out _out242, out _out243);
                    _845_recursiveGen = _out240;
                    _846_recOwned = _out241;
                    _847_recErased = _out242;
                    _848_recIdents = _out243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _845_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _846_recOwned;
                    isErased = _847_recErased;
                    readIdents = _848_recIdents;
                  }
                } else if (_source34.is_Seq) {
                  DAST._IType _849___mcc_h345 = _source34.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _850_recursiveGen;
                    bool _851_recOwned;
                    bool _852_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _853_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out244;
                    bool _out245;
                    bool _out246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out244, out _out245, out _out246, out _out247);
                    _850_recursiveGen = _out244;
                    _851_recOwned = _out245;
                    _852_recErased = _out246;
                    _853_recIdents = _out247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _850_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _851_recOwned;
                    isErased = _852_recErased;
                    readIdents = _853_recIdents;
                  }
                } else if (_source34.is_Set) {
                  DAST._IType _854___mcc_h347 = _source34.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _855_recursiveGen;
                    bool _856_recOwned;
                    bool _857_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _858_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out248;
                    bool _out249;
                    bool _out250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out248, out _out249, out _out250, out _out251);
                    _855_recursiveGen = _out248;
                    _856_recOwned = _out249;
                    _857_recErased = _out250;
                    _858_recIdents = _out251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _855_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _856_recOwned;
                    isErased = _857_recErased;
                    readIdents = _858_recIdents;
                  }
                } else if (_source34.is_Multiset) {
                  DAST._IType _859___mcc_h349 = _source34.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _860_recursiveGen;
                    bool _861_recOwned;
                    bool _862_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _863_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out252;
                    bool _out253;
                    bool _out254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out252, out _out253, out _out254, out _out255);
                    _860_recursiveGen = _out252;
                    _861_recOwned = _out253;
                    _862_recErased = _out254;
                    _863_recIdents = _out255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _860_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _861_recOwned;
                    isErased = _862_recErased;
                    readIdents = _863_recIdents;
                  }
                } else if (_source34.is_Map) {
                  DAST._IType _864___mcc_h351 = _source34.dtor_key;
                  DAST._IType _865___mcc_h352 = _source34.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _866_recursiveGen;
                    bool _867_recOwned;
                    bool _868_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _869_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out256;
                    bool _out257;
                    bool _out258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out256, out _out257, out _out258, out _out259);
                    _866_recursiveGen = _out256;
                    _867_recOwned = _out257;
                    _868_recErased = _out258;
                    _869_recIdents = _out259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _866_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _867_recOwned;
                    isErased = _868_recErased;
                    readIdents = _869_recIdents;
                  }
                } else if (_source34.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _870___mcc_h355 = _source34.dtor_args;
                  DAST._IType _871___mcc_h356 = _source34.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _872_recursiveGen;
                    bool _873_recOwned;
                    bool _874_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _875_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out260;
                    bool _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out260, out _out261, out _out262, out _out263);
                    _872_recursiveGen = _out260;
                    _873_recOwned = _out261;
                    _874_recErased = _out262;
                    _875_recIdents = _out263;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _872_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _873_recOwned;
                    isErased = _874_recErased;
                    readIdents = _875_recIdents;
                  }
                } else if (_source34.is_Primitive) {
                  DAST._IPrimitive _876___mcc_h359 = _source34.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _877_recursiveGen;
                    bool _878_recOwned;
                    bool _879_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _880_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out264;
                    bool _out265;
                    bool _out266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266, out _out267);
                    _877_recursiveGen = _out264;
                    _878_recOwned = _out265;
                    _879_recErased = _out266;
                    _880_recIdents = _out267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _877_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _878_recOwned;
                    isErased = _879_recErased;
                    readIdents = _880_recIdents;
                  }
                } else if (_source34.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _881___mcc_h361 = _source34.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _882_recursiveGen;
                    bool _883_recOwned;
                    bool _884_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _885_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out268;
                    bool _out269;
                    bool _out270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out268, out _out269, out _out270, out _out271);
                    _882_recursiveGen = _out268;
                    _883_recOwned = _out269;
                    _884_recErased = _out270;
                    _885_recIdents = _out271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _882_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _883_recOwned;
                    isErased = _884_recErased;
                    readIdents = _885_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _886___mcc_h363 = _source34.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _887_recursiveGen;
                    bool _888_recOwned;
                    bool _889_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _890_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out272;
                    bool _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out272, out _out273, out _out274, out _out275);
                    _887_recursiveGen = _out272;
                    _888_recOwned = _out273;
                    _889_recErased = _out274;
                    _890_recIdents = _out275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _888_recOwned;
                    isErased = _889_recErased;
                    readIdents = _890_recIdents;
                  }
                }
              } else if (_source33.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _891___mcc_h365 = _source33.dtor_path;
                DAST._IType _source36 = _807___mcc_h306;
                if (_source36.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _892___mcc_h369 = _source36.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _893___mcc_h370 = _source36.dtor_typeArgs;
                  DAST._IResolvedType _894___mcc_h371 = _source36.dtor_resolved;
                  DAST._IResolvedType _source37 = _894___mcc_h371;
                  if (_source37.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _895___mcc_h375 = _source37.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _896_recursiveGen;
                      bool _897_recOwned;
                      bool _898_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _899_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out276;
                      bool _out277;
                      bool _out278;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out279;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278, out _out279);
                      _896_recursiveGen = _out276;
                      _897_recOwned = _out277;
                      _898_recErased = _out278;
                      _899_recIdents = _out279;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _896_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _897_recOwned;
                      isErased = _898_recErased;
                      readIdents = _899_recIdents;
                    }
                  } else if (_source37.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _900___mcc_h377 = _source37.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _901_recursiveGen;
                      bool _902_recOwned;
                      bool _903_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _904_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out280;
                      bool _out281;
                      bool _out282;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                      _901_recursiveGen = _out280;
                      _902_recOwned = _out281;
                      _903_recErased = _out282;
                      _904_recIdents = _out283;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _902_recOwned;
                      isErased = _903_recErased;
                      readIdents = _904_recIdents;
                    }
                  } else {
                    DAST._IType _905___mcc_h379 = _source37.dtor_Newtype_a0;
                    DAST._IType _906_b = _905___mcc_h379;
                    {
                      if (object.Equals(_800_fromTpe, _906_b)) {
                        Dafny.ISequence<Dafny.Rune> _907_recursiveGen;
                        bool _908_recOwned;
                        bool _909_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _910_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out284;
                        bool _out285;
                        bool _out286;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                        _907_recursiveGen = _out284;
                        _908_recOwned = _out285;
                        _909_recErased = _out286;
                        _910_recIdents = _out287;
                        Dafny.ISequence<Dafny.Rune> _911_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out288;
                        _out288 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                        _911_rhsType = _out288;
                        Dafny.ISequence<Dafny.Rune> _912_uneraseFn;
                        _912_uneraseFn = ((_908_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _911_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _912_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _908_recOwned;
                        isErased = false;
                        readIdents = _910_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out289;
                        bool _out290;
                        bool _out291;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out292;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _906_b), _906_b, _799_toTpe), selfIdent, @params, mustOwn, out _out289, out _out290, out _out291, out _out292);
                        s = _out289;
                        isOwned = _out290;
                        isErased = _out291;
                        readIdents = _out292;
                      }
                    }
                  }
                } else if (_source36.is_Nullable) {
                  DAST._IType _913___mcc_h381 = _source36.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _914_recursiveGen;
                    bool _915_recOwned;
                    bool _916_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _917_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out293;
                    bool _out294;
                    bool _out295;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out293, out _out294, out _out295, out _out296);
                    _914_recursiveGen = _out293;
                    _915_recOwned = _out294;
                    _916_recErased = _out295;
                    _917_recIdents = _out296;
                    if (!(_915_recOwned)) {
                      _914_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_914_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _916_recErased;
                    readIdents = _917_recIdents;
                  }
                } else if (_source36.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _918___mcc_h383 = _source36.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _919_recursiveGen;
                    bool _920_recOwned;
                    bool _921_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _922_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out297;
                    bool _out298;
                    bool _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out297, out _out298, out _out299, out _out300);
                    _919_recursiveGen = _out297;
                    _920_recOwned = _out298;
                    _921_recErased = _out299;
                    _922_recIdents = _out300;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _920_recOwned;
                    isErased = _921_recErased;
                    readIdents = _922_recIdents;
                  }
                } else if (_source36.is_Array) {
                  DAST._IType _923___mcc_h385 = _source36.dtor_element;
                  BigInteger _924___mcc_h386 = _source36.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _925_recursiveGen;
                    bool _926_recOwned;
                    bool _927_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _928_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out301;
                    bool _out302;
                    bool _out303;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out304;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303, out _out304);
                    _925_recursiveGen = _out301;
                    _926_recOwned = _out302;
                    _927_recErased = _out303;
                    _928_recIdents = _out304;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _926_recOwned;
                    isErased = _927_recErased;
                    readIdents = _928_recIdents;
                  }
                } else if (_source36.is_Seq) {
                  DAST._IType _929___mcc_h389 = _source36.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _930_recursiveGen;
                    bool _931_recOwned;
                    bool _932_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _933_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out305;
                    bool _out306;
                    bool _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out305, out _out306, out _out307, out _out308);
                    _930_recursiveGen = _out305;
                    _931_recOwned = _out306;
                    _932_recErased = _out307;
                    _933_recIdents = _out308;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _931_recOwned;
                    isErased = _932_recErased;
                    readIdents = _933_recIdents;
                  }
                } else if (_source36.is_Set) {
                  DAST._IType _934___mcc_h391 = _source36.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _935_recursiveGen;
                    bool _936_recOwned;
                    bool _937_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _938_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out309;
                    bool _out310;
                    bool _out311;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out309, out _out310, out _out311, out _out312);
                    _935_recursiveGen = _out309;
                    _936_recOwned = _out310;
                    _937_recErased = _out311;
                    _938_recIdents = _out312;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _936_recOwned;
                    isErased = _937_recErased;
                    readIdents = _938_recIdents;
                  }
                } else if (_source36.is_Multiset) {
                  DAST._IType _939___mcc_h393 = _source36.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _940_recursiveGen;
                    bool _941_recOwned;
                    bool _942_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _943_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out313;
                    bool _out314;
                    bool _out315;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out313, out _out314, out _out315, out _out316);
                    _940_recursiveGen = _out313;
                    _941_recOwned = _out314;
                    _942_recErased = _out315;
                    _943_recIdents = _out316;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _940_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _941_recOwned;
                    isErased = _942_recErased;
                    readIdents = _943_recIdents;
                  }
                } else if (_source36.is_Map) {
                  DAST._IType _944___mcc_h395 = _source36.dtor_key;
                  DAST._IType _945___mcc_h396 = _source36.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _946_recursiveGen;
                    bool _947_recOwned;
                    bool _948_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _949_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out317;
                    bool _out318;
                    bool _out319;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out317, out _out318, out _out319, out _out320);
                    _946_recursiveGen = _out317;
                    _947_recOwned = _out318;
                    _948_recErased = _out319;
                    _949_recIdents = _out320;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _947_recOwned;
                    isErased = _948_recErased;
                    readIdents = _949_recIdents;
                  }
                } else if (_source36.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _950___mcc_h399 = _source36.dtor_args;
                  DAST._IType _951___mcc_h400 = _source36.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _952_recursiveGen;
                    bool _953_recOwned;
                    bool _954_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _955_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out321;
                    bool _out322;
                    bool _out323;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out321, out _out322, out _out323, out _out324);
                    _952_recursiveGen = _out321;
                    _953_recOwned = _out322;
                    _954_recErased = _out323;
                    _955_recIdents = _out324;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _952_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _953_recOwned;
                    isErased = _954_recErased;
                    readIdents = _955_recIdents;
                  }
                } else if (_source36.is_Primitive) {
                  DAST._IPrimitive _956___mcc_h403 = _source36.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _957_recursiveGen;
                    bool _958_recOwned;
                    bool _959_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _960_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out325;
                    bool _out326;
                    bool _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out325, out _out326, out _out327, out _out328);
                    _957_recursiveGen = _out325;
                    _958_recOwned = _out326;
                    _959_recErased = _out327;
                    _960_recIdents = _out328;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _958_recOwned;
                    isErased = _959_recErased;
                    readIdents = _960_recIdents;
                  }
                } else if (_source36.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _961___mcc_h405 = _source36.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _962_recursiveGen;
                    bool _963_recOwned;
                    bool _964_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _965_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out329;
                    bool _out330;
                    bool _out331;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out332;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out329, out _out330, out _out331, out _out332);
                    _962_recursiveGen = _out329;
                    _963_recOwned = _out330;
                    _964_recErased = _out331;
                    _965_recIdents = _out332;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _963_recOwned;
                    isErased = _964_recErased;
                    readIdents = _965_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _966___mcc_h407 = _source36.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _967_recursiveGen;
                    bool _968_recOwned;
                    bool _969_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _970_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out333;
                    bool _out334;
                    bool _out335;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out333, out _out334, out _out335, out _out336);
                    _967_recursiveGen = _out333;
                    _968_recOwned = _out334;
                    _969_recErased = _out335;
                    _970_recIdents = _out336;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _967_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _968_recOwned;
                    isErased = _969_recErased;
                    readIdents = _970_recIdents;
                  }
                }
              } else {
                DAST._IType _971___mcc_h409 = _source33.dtor_Newtype_a0;
                DAST._IType _source38 = _807___mcc_h306;
                if (_source38.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _972___mcc_h413 = _source38.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _973___mcc_h414 = _source38.dtor_typeArgs;
                  DAST._IResolvedType _974___mcc_h415 = _source38.dtor_resolved;
                  DAST._IResolvedType _source39 = _974___mcc_h415;
                  if (_source39.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _975___mcc_h422 = _source39.dtor_path;
                    DAST._IType _976_b = _971___mcc_h409;
                    {
                      if (object.Equals(_976_b, _799_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _977_recursiveGen;
                        bool _978_recOwned;
                        bool _979_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _980_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out337;
                        bool _out338;
                        bool _out339;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out337, out _out338, out _out339, out _out340);
                        _977_recursiveGen = _out337;
                        _978_recOwned = _out338;
                        _979_recErased = _out339;
                        _980_recIdents = _out340;
                        Dafny.ISequence<Dafny.Rune> _981_uneraseFn;
                        _981_uneraseFn = ((_978_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _981_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _977_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _978_recOwned;
                        isErased = true;
                        readIdents = _980_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out341;
                        bool _out342;
                        bool _out343;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out344;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _976_b), _976_b, _799_toTpe), selfIdent, @params, mustOwn, out _out341, out _out342, out _out343, out _out344);
                        s = _out341;
                        isOwned = _out342;
                        isErased = _out343;
                        readIdents = _out344;
                      }
                    }
                  } else if (_source39.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _982___mcc_h425 = _source39.dtor_path;
                    DAST._IType _983_b = _971___mcc_h409;
                    {
                      if (object.Equals(_983_b, _799_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _984_recursiveGen;
                        bool _985_recOwned;
                        bool _986_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _987_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out345;
                        bool _out346;
                        bool _out347;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out345, out _out346, out _out347, out _out348);
                        _984_recursiveGen = _out345;
                        _985_recOwned = _out346;
                        _986_recErased = _out347;
                        _987_recIdents = _out348;
                        Dafny.ISequence<Dafny.Rune> _988_uneraseFn;
                        _988_uneraseFn = ((_985_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _988_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _984_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _985_recOwned;
                        isErased = true;
                        readIdents = _987_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _983_b), _983_b, _799_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        s = _out349;
                        isOwned = _out350;
                        isErased = _out351;
                        readIdents = _out352;
                      }
                    }
                  } else {
                    DAST._IType _989___mcc_h428 = _source39.dtor_Newtype_a0;
                    DAST._IType _990_b = _989___mcc_h428;
                    {
                      if (object.Equals(_800_fromTpe, _990_b)) {
                        Dafny.ISequence<Dafny.Rune> _991_recursiveGen;
                        bool _992_recOwned;
                        bool _993_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _994_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out353;
                        bool _out354;
                        bool _out355;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                        _991_recursiveGen = _out353;
                        _992_recOwned = _out354;
                        _993_recErased = _out355;
                        _994_recIdents = _out356;
                        Dafny.ISequence<Dafny.Rune> _995_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out357;
                        _out357 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                        _995_rhsType = _out357;
                        Dafny.ISequence<Dafny.Rune> _996_uneraseFn;
                        _996_uneraseFn = ((_992_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _995_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _996_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _991_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _992_recOwned;
                        isErased = false;
                        readIdents = _994_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out358;
                        bool _out359;
                        bool _out360;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _990_b), _990_b, _799_toTpe), selfIdent, @params, mustOwn, out _out358, out _out359, out _out360, out _out361);
                        s = _out358;
                        isOwned = _out359;
                        isErased = _out360;
                        readIdents = _out361;
                      }
                    }
                  }
                } else if (_source38.is_Nullable) {
                  DAST._IType _997___mcc_h431 = _source38.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _998_recursiveGen;
                    bool _999_recOwned;
                    bool _1000_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1001_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out362;
                    bool _out363;
                    bool _out364;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out365;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out362, out _out363, out _out364, out _out365);
                    _998_recursiveGen = _out362;
                    _999_recOwned = _out363;
                    _1000_recErased = _out364;
                    _1001_recIdents = _out365;
                    if (!(_999_recOwned)) {
                      _998_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_998_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _998_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1000_recErased;
                    readIdents = _1001_recIdents;
                  }
                } else if (_source38.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1002___mcc_h434 = _source38.dtor_Tuple_a0;
                  DAST._IType _1003_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1003_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1004_recursiveGen;
                      bool _1005_recOwned;
                      bool _1006_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1007_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out366;
                      bool _out367;
                      bool _out368;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out366, out _out367, out _out368, out _out369);
                      _1004_recursiveGen = _out366;
                      _1005_recOwned = _out367;
                      _1006_recErased = _out368;
                      _1007_recIdents = _out369;
                      Dafny.ISequence<Dafny.Rune> _1008_uneraseFn;
                      _1008_uneraseFn = ((_1005_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1008_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1005_recOwned;
                      isErased = true;
                      readIdents = _1007_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out370;
                      bool _out371;
                      bool _out372;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1003_b), _1003_b, _799_toTpe), selfIdent, @params, mustOwn, out _out370, out _out371, out _out372, out _out373);
                      s = _out370;
                      isOwned = _out371;
                      isErased = _out372;
                      readIdents = _out373;
                    }
                  }
                } else if (_source38.is_Array) {
                  DAST._IType _1009___mcc_h437 = _source38.dtor_element;
                  BigInteger _1010___mcc_h438 = _source38.dtor_dims;
                  DAST._IType _1011_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1011_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1012_recursiveGen;
                      bool _1013_recOwned;
                      bool _1014_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1015_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out374;
                      bool _out375;
                      bool _out376;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out377;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out374, out _out375, out _out376, out _out377);
                      _1012_recursiveGen = _out374;
                      _1013_recOwned = _out375;
                      _1014_recErased = _out376;
                      _1015_recIdents = _out377;
                      Dafny.ISequence<Dafny.Rune> _1016_uneraseFn;
                      _1016_uneraseFn = ((_1013_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1016_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1012_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1013_recOwned;
                      isErased = true;
                      readIdents = _1015_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out378;
                      bool _out379;
                      bool _out380;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1011_b), _1011_b, _799_toTpe), selfIdent, @params, mustOwn, out _out378, out _out379, out _out380, out _out381);
                      s = _out378;
                      isOwned = _out379;
                      isErased = _out380;
                      readIdents = _out381;
                    }
                  }
                } else if (_source38.is_Seq) {
                  DAST._IType _1017___mcc_h443 = _source38.dtor_element;
                  DAST._IType _1018_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1018_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1019_recursiveGen;
                      bool _1020_recOwned;
                      bool _1021_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1022_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out382;
                      bool _out383;
                      bool _out384;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out382, out _out383, out _out384, out _out385);
                      _1019_recursiveGen = _out382;
                      _1020_recOwned = _out383;
                      _1021_recErased = _out384;
                      _1022_recIdents = _out385;
                      Dafny.ISequence<Dafny.Rune> _1023_uneraseFn;
                      _1023_uneraseFn = ((_1020_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1023_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1019_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1020_recOwned;
                      isErased = true;
                      readIdents = _1022_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out386;
                      bool _out387;
                      bool _out388;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1018_b), _1018_b, _799_toTpe), selfIdent, @params, mustOwn, out _out386, out _out387, out _out388, out _out389);
                      s = _out386;
                      isOwned = _out387;
                      isErased = _out388;
                      readIdents = _out389;
                    }
                  }
                } else if (_source38.is_Set) {
                  DAST._IType _1024___mcc_h446 = _source38.dtor_element;
                  DAST._IType _1025_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1025_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1026_recursiveGen;
                      bool _1027_recOwned;
                      bool _1028_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1029_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out390;
                      bool _out391;
                      bool _out392;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out390, out _out391, out _out392, out _out393);
                      _1026_recursiveGen = _out390;
                      _1027_recOwned = _out391;
                      _1028_recErased = _out392;
                      _1029_recIdents = _out393;
                      Dafny.ISequence<Dafny.Rune> _1030_uneraseFn;
                      _1030_uneraseFn = ((_1027_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1030_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1027_recOwned;
                      isErased = true;
                      readIdents = _1029_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out394;
                      bool _out395;
                      bool _out396;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1025_b), _1025_b, _799_toTpe), selfIdent, @params, mustOwn, out _out394, out _out395, out _out396, out _out397);
                      s = _out394;
                      isOwned = _out395;
                      isErased = _out396;
                      readIdents = _out397;
                    }
                  }
                } else if (_source38.is_Multiset) {
                  DAST._IType _1031___mcc_h449 = _source38.dtor_element;
                  DAST._IType _1032_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1032_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1033_recursiveGen;
                      bool _1034_recOwned;
                      bool _1035_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1036_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out398;
                      bool _out399;
                      bool _out400;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out398, out _out399, out _out400, out _out401);
                      _1033_recursiveGen = _out398;
                      _1034_recOwned = _out399;
                      _1035_recErased = _out400;
                      _1036_recIdents = _out401;
                      Dafny.ISequence<Dafny.Rune> _1037_uneraseFn;
                      _1037_uneraseFn = ((_1034_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1037_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1034_recOwned;
                      isErased = true;
                      readIdents = _1036_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out402;
                      bool _out403;
                      bool _out404;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1032_b), _1032_b, _799_toTpe), selfIdent, @params, mustOwn, out _out402, out _out403, out _out404, out _out405);
                      s = _out402;
                      isOwned = _out403;
                      isErased = _out404;
                      readIdents = _out405;
                    }
                  }
                } else if (_source38.is_Map) {
                  DAST._IType _1038___mcc_h452 = _source38.dtor_key;
                  DAST._IType _1039___mcc_h453 = _source38.dtor_value;
                  DAST._IType _1040_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1040_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1041_recursiveGen;
                      bool _1042_recOwned;
                      bool _1043_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1044_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out406;
                      bool _out407;
                      bool _out408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out406, out _out407, out _out408, out _out409);
                      _1041_recursiveGen = _out406;
                      _1042_recOwned = _out407;
                      _1043_recErased = _out408;
                      _1044_recIdents = _out409;
                      Dafny.ISequence<Dafny.Rune> _1045_uneraseFn;
                      _1045_uneraseFn = ((_1042_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1045_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1041_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1042_recOwned;
                      isErased = true;
                      readIdents = _1044_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out410;
                      bool _out411;
                      bool _out412;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1040_b), _1040_b, _799_toTpe), selfIdent, @params, mustOwn, out _out410, out _out411, out _out412, out _out413);
                      s = _out410;
                      isOwned = _out411;
                      isErased = _out412;
                      readIdents = _out413;
                    }
                  }
                } else if (_source38.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1046___mcc_h458 = _source38.dtor_args;
                  DAST._IType _1047___mcc_h459 = _source38.dtor_result;
                  DAST._IType _1048_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1048_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1049_recursiveGen;
                      bool _1050_recOwned;
                      bool _1051_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1052_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out414;
                      bool _out415;
                      bool _out416;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out417;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out414, out _out415, out _out416, out _out417);
                      _1049_recursiveGen = _out414;
                      _1050_recOwned = _out415;
                      _1051_recErased = _out416;
                      _1052_recIdents = _out417;
                      Dafny.ISequence<Dafny.Rune> _1053_uneraseFn;
                      _1053_uneraseFn = ((_1050_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1053_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1049_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1050_recOwned;
                      isErased = true;
                      readIdents = _1052_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out418;
                      bool _out419;
                      bool _out420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1048_b), _1048_b, _799_toTpe), selfIdent, @params, mustOwn, out _out418, out _out419, out _out420, out _out421);
                      s = _out418;
                      isOwned = _out419;
                      isErased = _out420;
                      readIdents = _out421;
                    }
                  }
                } else if (_source38.is_Primitive) {
                  DAST._IPrimitive _1054___mcc_h464 = _source38.dtor_Primitive_a0;
                  DAST._IType _1055_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1055_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1056_recursiveGen;
                      bool _1057_recOwned;
                      bool _1058_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1059_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out422;
                      bool _out423;
                      bool _out424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out422, out _out423, out _out424, out _out425);
                      _1056_recursiveGen = _out422;
                      _1057_recOwned = _out423;
                      _1058_recErased = _out424;
                      _1059_recIdents = _out425;
                      Dafny.ISequence<Dafny.Rune> _1060_uneraseFn;
                      _1060_uneraseFn = ((_1057_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1060_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1056_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1057_recOwned;
                      isErased = true;
                      readIdents = _1059_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out426;
                      bool _out427;
                      bool _out428;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1055_b), _1055_b, _799_toTpe), selfIdent, @params, mustOwn, out _out426, out _out427, out _out428, out _out429);
                      s = _out426;
                      isOwned = _out427;
                      isErased = _out428;
                      readIdents = _out429;
                    }
                  }
                } else if (_source38.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1061___mcc_h467 = _source38.dtor_Passthrough_a0;
                  DAST._IType _1062_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1062_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1063_recursiveGen;
                      bool _1064_recOwned;
                      bool _1065_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1066_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out430;
                      bool _out431;
                      bool _out432;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out430, out _out431, out _out432, out _out433);
                      _1063_recursiveGen = _out430;
                      _1064_recOwned = _out431;
                      _1065_recErased = _out432;
                      _1066_recIdents = _out433;
                      Dafny.ISequence<Dafny.Rune> _1067_uneraseFn;
                      _1067_uneraseFn = ((_1064_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1067_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1063_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1064_recOwned;
                      isErased = true;
                      readIdents = _1066_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out434;
                      bool _out435;
                      bool _out436;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1062_b), _1062_b, _799_toTpe), selfIdent, @params, mustOwn, out _out434, out _out435, out _out436, out _out437);
                      s = _out434;
                      isOwned = _out435;
                      isErased = _out436;
                      readIdents = _out437;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1068___mcc_h470 = _source38.dtor_TypeArg_a0;
                  DAST._IType _1069_b = _971___mcc_h409;
                  {
                    if (object.Equals(_1069_b, _799_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1070_recursiveGen;
                      bool _1071_recOwned;
                      bool _1072_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1073_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out438;
                      bool _out439;
                      bool _out440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out438, out _out439, out _out440, out _out441);
                      _1070_recursiveGen = _out438;
                      _1071_recOwned = _out439;
                      _1072_recErased = _out440;
                      _1073_recIdents = _out441;
                      Dafny.ISequence<Dafny.Rune> _1074_uneraseFn;
                      _1074_uneraseFn = ((_1071_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1074_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1071_recOwned;
                      isErased = true;
                      readIdents = _1073_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out442;
                      bool _out443;
                      bool _out444;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1069_b), _1069_b, _799_toTpe), selfIdent, @params, mustOwn, out _out442, out _out443, out _out444, out _out445);
                      s = _out442;
                      isOwned = _out443;
                      isErased = _out444;
                      readIdents = _out445;
                    }
                  }
                }
              }
            } else if (_source32.is_Nullable) {
              DAST._IType _1075___mcc_h473 = _source32.dtor_Nullable_a0;
              DAST._IType _source40 = _807___mcc_h306;
              if (_source40.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1076___mcc_h477 = _source40.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1077___mcc_h478 = _source40.dtor_typeArgs;
                DAST._IResolvedType _1078___mcc_h479 = _source40.dtor_resolved;
                DAST._IResolvedType _source41 = _1078___mcc_h479;
                if (_source41.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1079___mcc_h486 = _source41.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1080_recursiveGen;
                    bool _1081_recOwned;
                    bool _1082_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1083_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out446;
                    bool _out447;
                    bool _out448;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out446, out _out447, out _out448, out _out449);
                    _1080_recursiveGen = _out446;
                    _1081_recOwned = _out447;
                    _1082_recErased = _out448;
                    _1083_recIdents = _out449;
                    if (!(_1081_recOwned)) {
                      _1080_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1080_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1080_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1081_recOwned;
                    isErased = _1082_recErased;
                    readIdents = _1083_recIdents;
                  }
                } else if (_source41.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1084___mcc_h489 = _source41.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1085_recursiveGen;
                    bool _1086_recOwned;
                    bool _1087_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1088_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out450;
                    bool _out451;
                    bool _out452;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out450, out _out451, out _out452, out _out453);
                    _1085_recursiveGen = _out450;
                    _1086_recOwned = _out451;
                    _1087_recErased = _out452;
                    _1088_recIdents = _out453;
                    if (!(_1086_recOwned)) {
                      _1085_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1085_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1085_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1086_recOwned;
                    isErased = _1087_recErased;
                    readIdents = _1088_recIdents;
                  }
                } else {
                  DAST._IType _1089___mcc_h492 = _source41.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1090_recursiveGen;
                    bool _1091_recOwned;
                    bool _1092_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1093_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out454;
                    bool _out455;
                    bool _out456;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out454, out _out455, out _out456, out _out457);
                    _1090_recursiveGen = _out454;
                    _1091_recOwned = _out455;
                    _1092_recErased = _out456;
                    _1093_recIdents = _out457;
                    if (!(_1091_recOwned)) {
                      _1090_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1090_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1090_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1091_recOwned;
                    isErased = _1092_recErased;
                    readIdents = _1093_recIdents;
                  }
                }
              } else if (_source40.is_Nullable) {
                DAST._IType _1094___mcc_h495 = _source40.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1095_recursiveGen;
                  bool _1096_recOwned;
                  bool _1097_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1098_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out458;
                  bool _out459;
                  bool _out460;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460, out _out461);
                  _1095_recursiveGen = _out458;
                  _1096_recOwned = _out459;
                  _1097_recErased = _out460;
                  _1098_recIdents = _out461;
                  if (!(_1096_recOwned)) {
                    _1095_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1095_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1095_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1096_recOwned;
                  isErased = _1097_recErased;
                  readIdents = _1098_recIdents;
                }
              } else if (_source40.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1099___mcc_h498 = _source40.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1100_recursiveGen;
                  bool _1101_recOwned;
                  bool _1102_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1103_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out462;
                  bool _out463;
                  bool _out464;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out465;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out462, out _out463, out _out464, out _out465);
                  _1100_recursiveGen = _out462;
                  _1101_recOwned = _out463;
                  _1102_recErased = _out464;
                  _1103_recIdents = _out465;
                  if (!(_1101_recOwned)) {
                    _1100_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1100_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1100_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1101_recOwned;
                  isErased = _1102_recErased;
                  readIdents = _1103_recIdents;
                }
              } else if (_source40.is_Array) {
                DAST._IType _1104___mcc_h501 = _source40.dtor_element;
                BigInteger _1105___mcc_h502 = _source40.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1106_recursiveGen;
                  bool _1107_recOwned;
                  bool _1108_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1109_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out466;
                  bool _out467;
                  bool _out468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out466, out _out467, out _out468, out _out469);
                  _1106_recursiveGen = _out466;
                  _1107_recOwned = _out467;
                  _1108_recErased = _out468;
                  _1109_recIdents = _out469;
                  if (!(_1107_recOwned)) {
                    _1106_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1106_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1106_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1107_recOwned;
                  isErased = _1108_recErased;
                  readIdents = _1109_recIdents;
                }
              } else if (_source40.is_Seq) {
                DAST._IType _1110___mcc_h507 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1111_recursiveGen;
                  bool _1112_recOwned;
                  bool _1113_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1114_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out470;
                  bool _out471;
                  bool _out472;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out470, out _out471, out _out472, out _out473);
                  _1111_recursiveGen = _out470;
                  _1112_recOwned = _out471;
                  _1113_recErased = _out472;
                  _1114_recIdents = _out473;
                  if (!(_1112_recOwned)) {
                    _1111_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1111_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1111_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1112_recOwned;
                  isErased = _1113_recErased;
                  readIdents = _1114_recIdents;
                }
              } else if (_source40.is_Set) {
                DAST._IType _1115___mcc_h510 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1116_recursiveGen;
                  bool _1117_recOwned;
                  bool _1118_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1119_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out474;
                  bool _out475;
                  bool _out476;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476, out _out477);
                  _1116_recursiveGen = _out474;
                  _1117_recOwned = _out475;
                  _1118_recErased = _out476;
                  _1119_recIdents = _out477;
                  if (!(_1117_recOwned)) {
                    _1116_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1116_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1116_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1117_recOwned;
                  isErased = _1118_recErased;
                  readIdents = _1119_recIdents;
                }
              } else if (_source40.is_Multiset) {
                DAST._IType _1120___mcc_h513 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1121_recursiveGen;
                  bool _1122_recOwned;
                  bool _1123_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1124_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out478;
                  bool _out479;
                  bool _out480;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out478, out _out479, out _out480, out _out481);
                  _1121_recursiveGen = _out478;
                  _1122_recOwned = _out479;
                  _1123_recErased = _out480;
                  _1124_recIdents = _out481;
                  if (!(_1122_recOwned)) {
                    _1121_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1121_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1121_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1122_recOwned;
                  isErased = _1123_recErased;
                  readIdents = _1124_recIdents;
                }
              } else if (_source40.is_Map) {
                DAST._IType _1125___mcc_h516 = _source40.dtor_key;
                DAST._IType _1126___mcc_h517 = _source40.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1127_recursiveGen;
                  bool _1128_recOwned;
                  bool _1129_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1130_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out482;
                  bool _out483;
                  bool _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out482, out _out483, out _out484, out _out485);
                  _1127_recursiveGen = _out482;
                  _1128_recOwned = _out483;
                  _1129_recErased = _out484;
                  _1130_recIdents = _out485;
                  if (!(_1128_recOwned)) {
                    _1127_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1127_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1127_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1128_recOwned;
                  isErased = _1129_recErased;
                  readIdents = _1130_recIdents;
                }
              } else if (_source40.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1131___mcc_h522 = _source40.dtor_args;
                DAST._IType _1132___mcc_h523 = _source40.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1133_recursiveGen;
                  bool _1134_recOwned;
                  bool _1135_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1136_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out486;
                  bool _out487;
                  bool _out488;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out489;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488, out _out489);
                  _1133_recursiveGen = _out486;
                  _1134_recOwned = _out487;
                  _1135_recErased = _out488;
                  _1136_recIdents = _out489;
                  if (!(_1134_recOwned)) {
                    _1133_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1133_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1133_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1134_recOwned;
                  isErased = _1135_recErased;
                  readIdents = _1136_recIdents;
                }
              } else if (_source40.is_Primitive) {
                DAST._IPrimitive _1137___mcc_h528 = _source40.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1138_recursiveGen;
                  bool _1139_recOwned;
                  bool _1140_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1141_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out490;
                  bool _out491;
                  bool _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out490, out _out491, out _out492, out _out493);
                  _1138_recursiveGen = _out490;
                  _1139_recOwned = _out491;
                  _1140_recErased = _out492;
                  _1141_recIdents = _out493;
                  if (!(_1139_recOwned)) {
                    _1138_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1138_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1138_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1139_recOwned;
                  isErased = _1140_recErased;
                  readIdents = _1141_recIdents;
                }
              } else if (_source40.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1142___mcc_h531 = _source40.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1143_recursiveGen;
                  bool _1144_recOwned;
                  bool _1145_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1146_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out494;
                  bool _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out494, out _out495, out _out496, out _out497);
                  _1143_recursiveGen = _out494;
                  _1144_recOwned = _out495;
                  _1145_recErased = _out496;
                  _1146_recIdents = _out497;
                  if (!(_1144_recOwned)) {
                    _1143_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1143_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1143_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1144_recOwned;
                  isErased = _1145_recErased;
                  readIdents = _1146_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1147___mcc_h534 = _source40.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1148_recursiveGen;
                  bool _1149_recOwned;
                  bool _1150_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1151_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out498;
                  bool _out499;
                  bool _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500, out _out501);
                  _1148_recursiveGen = _out498;
                  _1149_recOwned = _out499;
                  _1150_recErased = _out500;
                  _1151_recIdents = _out501;
                  if (!(_1149_recOwned)) {
                    _1148_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1148_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1148_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1149_recOwned;
                  isErased = _1150_recErased;
                  readIdents = _1151_recIdents;
                }
              }
            } else if (_source32.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1152___mcc_h537 = _source32.dtor_Tuple_a0;
              DAST._IType _source42 = _807___mcc_h306;
              if (_source42.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1153___mcc_h541 = _source42.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1154___mcc_h542 = _source42.dtor_typeArgs;
                DAST._IResolvedType _1155___mcc_h543 = _source42.dtor_resolved;
                DAST._IResolvedType _source43 = _1155___mcc_h543;
                if (_source43.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1156___mcc_h547 = _source43.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1157_recursiveGen;
                    bool _1158_recOwned;
                    bool _1159_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1160_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out502;
                    bool _out503;
                    bool _out504;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out502, out _out503, out _out504, out _out505);
                    _1157_recursiveGen = _out502;
                    _1158_recOwned = _out503;
                    _1159_recErased = _out504;
                    _1160_recIdents = _out505;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1157_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1158_recOwned;
                    isErased = _1159_recErased;
                    readIdents = _1160_recIdents;
                  }
                } else if (_source43.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1161___mcc_h549 = _source43.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1162_recursiveGen;
                    bool _1163_recOwned;
                    bool _1164_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1165_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out506;
                    bool _out507;
                    bool _out508;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                    _1162_recursiveGen = _out506;
                    _1163_recOwned = _out507;
                    _1164_recErased = _out508;
                    _1165_recIdents = _out509;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1162_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1163_recOwned;
                    isErased = _1164_recErased;
                    readIdents = _1165_recIdents;
                  }
                } else {
                  DAST._IType _1166___mcc_h551 = _source43.dtor_Newtype_a0;
                  DAST._IType _1167_b = _1166___mcc_h551;
                  {
                    if (object.Equals(_800_fromTpe, _1167_b)) {
                      Dafny.ISequence<Dafny.Rune> _1168_recursiveGen;
                      bool _1169_recOwned;
                      bool _1170_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1171_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out510;
                      bool _out511;
                      bool _out512;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                      _1168_recursiveGen = _out510;
                      _1169_recOwned = _out511;
                      _1170_recErased = _out512;
                      _1171_recIdents = _out513;
                      Dafny.ISequence<Dafny.Rune> _1172_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out514;
                      _out514 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _1172_rhsType = _out514;
                      Dafny.ISequence<Dafny.Rune> _1173_uneraseFn;
                      _1173_uneraseFn = ((_1169_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1172_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1173_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1168_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1169_recOwned;
                      isErased = false;
                      readIdents = _1171_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out515;
                      bool _out516;
                      bool _out517;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out518;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1167_b), _1167_b, _799_toTpe), selfIdent, @params, mustOwn, out _out515, out _out516, out _out517, out _out518);
                      s = _out515;
                      isOwned = _out516;
                      isErased = _out517;
                      readIdents = _out518;
                    }
                  }
                }
              } else if (_source42.is_Nullable) {
                DAST._IType _1174___mcc_h553 = _source42.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1175_recursiveGen;
                  bool _1176_recOwned;
                  bool _1177_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1178_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out519;
                  bool _out520;
                  bool _out521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out519, out _out520, out _out521, out _out522);
                  _1175_recursiveGen = _out519;
                  _1176_recOwned = _out520;
                  _1177_recErased = _out521;
                  _1178_recIdents = _out522;
                  if (!(_1176_recOwned)) {
                    _1175_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1175_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1177_recErased;
                  readIdents = _1178_recIdents;
                }
              } else if (_source42.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1179___mcc_h555 = _source42.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1180_recursiveGen;
                  bool _1181_recOwned;
                  bool _1182_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1183_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out523;
                  bool _out524;
                  bool _out525;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525, out _out526);
                  _1180_recursiveGen = _out523;
                  _1181_recOwned = _out524;
                  _1182_recErased = _out525;
                  _1183_recIdents = _out526;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1180_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1181_recOwned;
                  isErased = _1182_recErased;
                  readIdents = _1183_recIdents;
                }
              } else if (_source42.is_Array) {
                DAST._IType _1184___mcc_h557 = _source42.dtor_element;
                BigInteger _1185___mcc_h558 = _source42.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1186_recursiveGen;
                  bool _1187_recOwned;
                  bool _1188_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1189_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out527;
                  bool _out528;
                  bool _out529;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out530;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out527, out _out528, out _out529, out _out530);
                  _1186_recursiveGen = _out527;
                  _1187_recOwned = _out528;
                  _1188_recErased = _out529;
                  _1189_recIdents = _out530;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1186_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1187_recOwned;
                  isErased = _1188_recErased;
                  readIdents = _1189_recIdents;
                }
              } else if (_source42.is_Seq) {
                DAST._IType _1190___mcc_h561 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1191_recursiveGen;
                  bool _1192_recOwned;
                  bool _1193_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1194_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out531;
                  bool _out532;
                  bool _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out531, out _out532, out _out533, out _out534);
                  _1191_recursiveGen = _out531;
                  _1192_recOwned = _out532;
                  _1193_recErased = _out533;
                  _1194_recIdents = _out534;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1191_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1192_recOwned;
                  isErased = _1193_recErased;
                  readIdents = _1194_recIdents;
                }
              } else if (_source42.is_Set) {
                DAST._IType _1195___mcc_h563 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1196_recursiveGen;
                  bool _1197_recOwned;
                  bool _1198_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1199_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out535;
                  bool _out536;
                  bool _out537;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537, out _out538);
                  _1196_recursiveGen = _out535;
                  _1197_recOwned = _out536;
                  _1198_recErased = _out537;
                  _1199_recIdents = _out538;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1197_recOwned;
                  isErased = _1198_recErased;
                  readIdents = _1199_recIdents;
                }
              } else if (_source42.is_Multiset) {
                DAST._IType _1200___mcc_h565 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1201_recursiveGen;
                  bool _1202_recOwned;
                  bool _1203_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1204_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out539;
                  bool _out540;
                  bool _out541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out539, out _out540, out _out541, out _out542);
                  _1201_recursiveGen = _out539;
                  _1202_recOwned = _out540;
                  _1203_recErased = _out541;
                  _1204_recIdents = _out542;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1201_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1202_recOwned;
                  isErased = _1203_recErased;
                  readIdents = _1204_recIdents;
                }
              } else if (_source42.is_Map) {
                DAST._IType _1205___mcc_h567 = _source42.dtor_key;
                DAST._IType _1206___mcc_h568 = _source42.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1207_recursiveGen;
                  bool _1208_recOwned;
                  bool _1209_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1210_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out543;
                  bool _out544;
                  bool _out545;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out543, out _out544, out _out545, out _out546);
                  _1207_recursiveGen = _out543;
                  _1208_recOwned = _out544;
                  _1209_recErased = _out545;
                  _1210_recIdents = _out546;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1207_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1208_recOwned;
                  isErased = _1209_recErased;
                  readIdents = _1210_recIdents;
                }
              } else if (_source42.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1211___mcc_h571 = _source42.dtor_args;
                DAST._IType _1212___mcc_h572 = _source42.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1213_recursiveGen;
                  bool _1214_recOwned;
                  bool _1215_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1216_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out547;
                  bool _out548;
                  bool _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549, out _out550);
                  _1213_recursiveGen = _out547;
                  _1214_recOwned = _out548;
                  _1215_recErased = _out549;
                  _1216_recIdents = _out550;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1213_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1214_recOwned;
                  isErased = _1215_recErased;
                  readIdents = _1216_recIdents;
                }
              } else if (_source42.is_Primitive) {
                DAST._IPrimitive _1217___mcc_h575 = _source42.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1218_recursiveGen;
                  bool _1219_recOwned;
                  bool _1220_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1221_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out551;
                  bool _out552;
                  bool _out553;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out551, out _out552, out _out553, out _out554);
                  _1218_recursiveGen = _out551;
                  _1219_recOwned = _out552;
                  _1220_recErased = _out553;
                  _1221_recIdents = _out554;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1218_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1219_recOwned;
                  isErased = _1220_recErased;
                  readIdents = _1221_recIdents;
                }
              } else if (_source42.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1222___mcc_h577 = _source42.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1223_recursiveGen;
                  bool _1224_recOwned;
                  bool _1225_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1226_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out555;
                  bool _out556;
                  bool _out557;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out555, out _out556, out _out557, out _out558);
                  _1223_recursiveGen = _out555;
                  _1224_recOwned = _out556;
                  _1225_recErased = _out557;
                  _1226_recIdents = _out558;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1223_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1224_recOwned;
                  isErased = _1225_recErased;
                  readIdents = _1226_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1227___mcc_h579 = _source42.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1228_recursiveGen;
                  bool _1229_recOwned;
                  bool _1230_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1231_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out559;
                  bool _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out559, out _out560, out _out561, out _out562);
                  _1228_recursiveGen = _out559;
                  _1229_recOwned = _out560;
                  _1230_recErased = _out561;
                  _1231_recIdents = _out562;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1228_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1229_recOwned;
                  isErased = _1230_recErased;
                  readIdents = _1231_recIdents;
                }
              }
            } else if (_source32.is_Array) {
              DAST._IType _1232___mcc_h581 = _source32.dtor_element;
              BigInteger _1233___mcc_h582 = _source32.dtor_dims;
              DAST._IType _source44 = _807___mcc_h306;
              if (_source44.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1234___mcc_h589 = _source44.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1235___mcc_h590 = _source44.dtor_typeArgs;
                DAST._IResolvedType _1236___mcc_h591 = _source44.dtor_resolved;
                DAST._IResolvedType _source45 = _1236___mcc_h591;
                if (_source45.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1237___mcc_h595 = _source45.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1238_recursiveGen;
                    bool _1239_recOwned;
                    bool _1240_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1241_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out563;
                    bool _out564;
                    bool _out565;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565, out _out566);
                    _1238_recursiveGen = _out563;
                    _1239_recOwned = _out564;
                    _1240_recErased = _out565;
                    _1241_recIdents = _out566;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1238_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1239_recOwned;
                    isErased = _1240_recErased;
                    readIdents = _1241_recIdents;
                  }
                } else if (_source45.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1242___mcc_h597 = _source45.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1243_recursiveGen;
                    bool _1244_recOwned;
                    bool _1245_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1246_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out567;
                    bool _out568;
                    bool _out569;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                    _1243_recursiveGen = _out567;
                    _1244_recOwned = _out568;
                    _1245_recErased = _out569;
                    _1246_recIdents = _out570;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1244_recOwned;
                    isErased = _1245_recErased;
                    readIdents = _1246_recIdents;
                  }
                } else {
                  DAST._IType _1247___mcc_h599 = _source45.dtor_Newtype_a0;
                  DAST._IType _1248_b = _1247___mcc_h599;
                  {
                    if (object.Equals(_800_fromTpe, _1248_b)) {
                      Dafny.ISequence<Dafny.Rune> _1249_recursiveGen;
                      bool _1250_recOwned;
                      bool _1251_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1252_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out571;
                      bool _out572;
                      bool _out573;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                      _1249_recursiveGen = _out571;
                      _1250_recOwned = _out572;
                      _1251_recErased = _out573;
                      _1252_recIdents = _out574;
                      Dafny.ISequence<Dafny.Rune> _1253_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out575;
                      _out575 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _1253_rhsType = _out575;
                      Dafny.ISequence<Dafny.Rune> _1254_uneraseFn;
                      _1254_uneraseFn = ((_1250_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1253_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1254_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1249_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1250_recOwned;
                      isErased = false;
                      readIdents = _1252_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out576;
                      bool _out577;
                      bool _out578;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1248_b), _1248_b, _799_toTpe), selfIdent, @params, mustOwn, out _out576, out _out577, out _out578, out _out579);
                      s = _out576;
                      isOwned = _out577;
                      isErased = _out578;
                      readIdents = _out579;
                    }
                  }
                }
              } else if (_source44.is_Nullable) {
                DAST._IType _1255___mcc_h601 = _source44.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1256_recursiveGen;
                  bool _1257_recOwned;
                  bool _1258_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1259_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out580;
                  bool _out581;
                  bool _out582;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out580, out _out581, out _out582, out _out583);
                  _1256_recursiveGen = _out580;
                  _1257_recOwned = _out581;
                  _1258_recErased = _out582;
                  _1259_recIdents = _out583;
                  if (!(_1257_recOwned)) {
                    _1256_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1256_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1258_recErased;
                  readIdents = _1259_recIdents;
                }
              } else if (_source44.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1260___mcc_h603 = _source44.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1261_recursiveGen;
                  bool _1262_recOwned;
                  bool _1263_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1264_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out584;
                  bool _out585;
                  bool _out586;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out587;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586, out _out587);
                  _1261_recursiveGen = _out584;
                  _1262_recOwned = _out585;
                  _1263_recErased = _out586;
                  _1264_recIdents = _out587;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1262_recOwned;
                  isErased = _1263_recErased;
                  readIdents = _1264_recIdents;
                }
              } else if (_source44.is_Array) {
                DAST._IType _1265___mcc_h605 = _source44.dtor_element;
                BigInteger _1266___mcc_h606 = _source44.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1267_recursiveGen;
                  bool _1268_recOwned;
                  bool _1269_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1270_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out588;
                  bool _out589;
                  bool _out590;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out591;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out588, out _out589, out _out590, out _out591);
                  _1267_recursiveGen = _out588;
                  _1268_recOwned = _out589;
                  _1269_recErased = _out590;
                  _1270_recIdents = _out591;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1268_recOwned;
                  isErased = _1269_recErased;
                  readIdents = _1270_recIdents;
                }
              } else if (_source44.is_Seq) {
                DAST._IType _1271___mcc_h609 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1272_recursiveGen;
                  bool _1273_recOwned;
                  bool _1274_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1275_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out592;
                  bool _out593;
                  bool _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out592, out _out593, out _out594, out _out595);
                  _1272_recursiveGen = _out592;
                  _1273_recOwned = _out593;
                  _1274_recErased = _out594;
                  _1275_recIdents = _out595;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1273_recOwned;
                  isErased = _1274_recErased;
                  readIdents = _1275_recIdents;
                }
              } else if (_source44.is_Set) {
                DAST._IType _1276___mcc_h611 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1277_recursiveGen;
                  bool _1278_recOwned;
                  bool _1279_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1280_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out596;
                  bool _out597;
                  bool _out598;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out599;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598, out _out599);
                  _1277_recursiveGen = _out596;
                  _1278_recOwned = _out597;
                  _1279_recErased = _out598;
                  _1280_recIdents = _out599;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1278_recOwned;
                  isErased = _1279_recErased;
                  readIdents = _1280_recIdents;
                }
              } else if (_source44.is_Multiset) {
                DAST._IType _1281___mcc_h613 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1282_recursiveGen;
                  bool _1283_recOwned;
                  bool _1284_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1285_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out600;
                  bool _out601;
                  bool _out602;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out603;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out600, out _out601, out _out602, out _out603);
                  _1282_recursiveGen = _out600;
                  _1283_recOwned = _out601;
                  _1284_recErased = _out602;
                  _1285_recIdents = _out603;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1282_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1283_recOwned;
                  isErased = _1284_recErased;
                  readIdents = _1285_recIdents;
                }
              } else if (_source44.is_Map) {
                DAST._IType _1286___mcc_h615 = _source44.dtor_key;
                DAST._IType _1287___mcc_h616 = _source44.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1288_recursiveGen;
                  bool _1289_recOwned;
                  bool _1290_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1291_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out604;
                  bool _out605;
                  bool _out606;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out604, out _out605, out _out606, out _out607);
                  _1288_recursiveGen = _out604;
                  _1289_recOwned = _out605;
                  _1290_recErased = _out606;
                  _1291_recIdents = _out607;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1289_recOwned;
                  isErased = _1290_recErased;
                  readIdents = _1291_recIdents;
                }
              } else if (_source44.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1292___mcc_h619 = _source44.dtor_args;
                DAST._IType _1293___mcc_h620 = _source44.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1294_recursiveGen;
                  bool _1295_recOwned;
                  bool _1296_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1297_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out608;
                  bool _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out608, out _out609, out _out610, out _out611);
                  _1294_recursiveGen = _out608;
                  _1295_recOwned = _out609;
                  _1296_recErased = _out610;
                  _1297_recIdents = _out611;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1295_recOwned;
                  isErased = _1296_recErased;
                  readIdents = _1297_recIdents;
                }
              } else if (_source44.is_Primitive) {
                DAST._IPrimitive _1298___mcc_h623 = _source44.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1299_recursiveGen;
                  bool _1300_recOwned;
                  bool _1301_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1302_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out612;
                  bool _out613;
                  bool _out614;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614, out _out615);
                  _1299_recursiveGen = _out612;
                  _1300_recOwned = _out613;
                  _1301_recErased = _out614;
                  _1302_recIdents = _out615;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1299_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1300_recOwned;
                  isErased = _1301_recErased;
                  readIdents = _1302_recIdents;
                }
              } else if (_source44.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1303___mcc_h625 = _source44.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1304_recursiveGen;
                  bool _1305_recOwned;
                  bool _1306_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1307_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out616;
                  bool _out617;
                  bool _out618;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out616, out _out617, out _out618, out _out619);
                  _1304_recursiveGen = _out616;
                  _1305_recOwned = _out617;
                  _1306_recErased = _out618;
                  _1307_recIdents = _out619;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1304_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1305_recOwned;
                  isErased = _1306_recErased;
                  readIdents = _1307_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1308___mcc_h627 = _source44.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1309_recursiveGen;
                  bool _1310_recOwned;
                  bool _1311_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1312_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out620;
                  bool _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out620, out _out621, out _out622, out _out623);
                  _1309_recursiveGen = _out620;
                  _1310_recOwned = _out621;
                  _1311_recErased = _out622;
                  _1312_recIdents = _out623;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1309_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1310_recOwned;
                  isErased = _1311_recErased;
                  readIdents = _1312_recIdents;
                }
              }
            } else if (_source32.is_Seq) {
              DAST._IType _1313___mcc_h629 = _source32.dtor_element;
              DAST._IType _source46 = _807___mcc_h306;
              if (_source46.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1314___mcc_h633 = _source46.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1315___mcc_h634 = _source46.dtor_typeArgs;
                DAST._IResolvedType _1316___mcc_h635 = _source46.dtor_resolved;
                DAST._IResolvedType _source47 = _1316___mcc_h635;
                if (_source47.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1317___mcc_h639 = _source47.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1318_recursiveGen;
                    bool _1319_recOwned;
                    bool _1320_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1321_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out624;
                    bool _out625;
                    bool _out626;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626, out _out627);
                    _1318_recursiveGen = _out624;
                    _1319_recOwned = _out625;
                    _1320_recErased = _out626;
                    _1321_recIdents = _out627;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1318_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1319_recOwned;
                    isErased = _1320_recErased;
                    readIdents = _1321_recIdents;
                  }
                } else if (_source47.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1322___mcc_h641 = _source47.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1323_recursiveGen;
                    bool _1324_recOwned;
                    bool _1325_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1326_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out628;
                    bool _out629;
                    bool _out630;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                    _1323_recursiveGen = _out628;
                    _1324_recOwned = _out629;
                    _1325_recErased = _out630;
                    _1326_recIdents = _out631;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1323_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1324_recOwned;
                    isErased = _1325_recErased;
                    readIdents = _1326_recIdents;
                  }
                } else {
                  DAST._IType _1327___mcc_h643 = _source47.dtor_Newtype_a0;
                  DAST._IType _1328_b = _1327___mcc_h643;
                  {
                    if (object.Equals(_800_fromTpe, _1328_b)) {
                      Dafny.ISequence<Dafny.Rune> _1329_recursiveGen;
                      bool _1330_recOwned;
                      bool _1331_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1332_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out632;
                      bool _out633;
                      bool _out634;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                      _1329_recursiveGen = _out632;
                      _1330_recOwned = _out633;
                      _1331_recErased = _out634;
                      _1332_recIdents = _out635;
                      Dafny.ISequence<Dafny.Rune> _1333_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out636;
                      _out636 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _1333_rhsType = _out636;
                      Dafny.ISequence<Dafny.Rune> _1334_uneraseFn;
                      _1334_uneraseFn = ((_1330_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1333_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1334_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1329_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1330_recOwned;
                      isErased = false;
                      readIdents = _1332_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out637;
                      bool _out638;
                      bool _out639;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1328_b), _1328_b, _799_toTpe), selfIdent, @params, mustOwn, out _out637, out _out638, out _out639, out _out640);
                      s = _out637;
                      isOwned = _out638;
                      isErased = _out639;
                      readIdents = _out640;
                    }
                  }
                }
              } else if (_source46.is_Nullable) {
                DAST._IType _1335___mcc_h645 = _source46.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1336_recursiveGen;
                  bool _1337_recOwned;
                  bool _1338_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1339_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out641;
                  bool _out642;
                  bool _out643;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out641, out _out642, out _out643, out _out644);
                  _1336_recursiveGen = _out641;
                  _1337_recOwned = _out642;
                  _1338_recErased = _out643;
                  _1339_recIdents = _out644;
                  if (!(_1337_recOwned)) {
                    _1336_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1336_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1336_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1338_recErased;
                  readIdents = _1339_recIdents;
                }
              } else if (_source46.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1340___mcc_h647 = _source46.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1341_recursiveGen;
                  bool _1342_recOwned;
                  bool _1343_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1344_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out645;
                  bool _out646;
                  bool _out647;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out645, out _out646, out _out647, out _out648);
                  _1341_recursiveGen = _out645;
                  _1342_recOwned = _out646;
                  _1343_recErased = _out647;
                  _1344_recIdents = _out648;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1341_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1342_recOwned;
                  isErased = _1343_recErased;
                  readIdents = _1344_recIdents;
                }
              } else if (_source46.is_Array) {
                DAST._IType _1345___mcc_h649 = _source46.dtor_element;
                BigInteger _1346___mcc_h650 = _source46.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1347_recursiveGen;
                  bool _1348_recOwned;
                  bool _1349_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1350_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out649;
                  bool _out650;
                  bool _out651;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651, out _out652);
                  _1347_recursiveGen = _out649;
                  _1348_recOwned = _out650;
                  _1349_recErased = _out651;
                  _1350_recIdents = _out652;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1347_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1348_recOwned;
                  isErased = _1349_recErased;
                  readIdents = _1350_recIdents;
                }
              } else if (_source46.is_Seq) {
                DAST._IType _1351___mcc_h653 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1352_recursiveGen;
                  bool _1353_recOwned;
                  bool _1354_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1355_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out653;
                  bool _out654;
                  bool _out655;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out653, out _out654, out _out655, out _out656);
                  _1352_recursiveGen = _out653;
                  _1353_recOwned = _out654;
                  _1354_recErased = _out655;
                  _1355_recIdents = _out656;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1352_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1353_recOwned;
                  isErased = _1354_recErased;
                  readIdents = _1355_recIdents;
                }
              } else if (_source46.is_Set) {
                DAST._IType _1356___mcc_h655 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1357_recursiveGen;
                  bool _1358_recOwned;
                  bool _1359_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1360_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out657;
                  bool _out658;
                  bool _out659;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out657, out _out658, out _out659, out _out660);
                  _1357_recursiveGen = _out657;
                  _1358_recOwned = _out658;
                  _1359_recErased = _out659;
                  _1360_recIdents = _out660;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1357_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1358_recOwned;
                  isErased = _1359_recErased;
                  readIdents = _1360_recIdents;
                }
              } else if (_source46.is_Multiset) {
                DAST._IType _1361___mcc_h657 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1362_recursiveGen;
                  bool _1363_recOwned;
                  bool _1364_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1365_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out661;
                  bool _out662;
                  bool _out663;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663, out _out664);
                  _1362_recursiveGen = _out661;
                  _1363_recOwned = _out662;
                  _1364_recErased = _out663;
                  _1365_recIdents = _out664;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1363_recOwned;
                  isErased = _1364_recErased;
                  readIdents = _1365_recIdents;
                }
              } else if (_source46.is_Map) {
                DAST._IType _1366___mcc_h659 = _source46.dtor_key;
                DAST._IType _1367___mcc_h660 = _source46.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1368_recursiveGen;
                  bool _1369_recOwned;
                  bool _1370_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1371_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out665;
                  bool _out666;
                  bool _out667;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out665, out _out666, out _out667, out _out668);
                  _1368_recursiveGen = _out665;
                  _1369_recOwned = _out666;
                  _1370_recErased = _out667;
                  _1371_recIdents = _out668;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1368_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1369_recOwned;
                  isErased = _1370_recErased;
                  readIdents = _1371_recIdents;
                }
              } else if (_source46.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1372___mcc_h663 = _source46.dtor_args;
                DAST._IType _1373___mcc_h664 = _source46.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1374_recursiveGen;
                  bool _1375_recOwned;
                  bool _1376_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1377_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out669;
                  bool _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out669, out _out670, out _out671, out _out672);
                  _1374_recursiveGen = _out669;
                  _1375_recOwned = _out670;
                  _1376_recErased = _out671;
                  _1377_recIdents = _out672;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1374_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1375_recOwned;
                  isErased = _1376_recErased;
                  readIdents = _1377_recIdents;
                }
              } else if (_source46.is_Primitive) {
                DAST._IPrimitive _1378___mcc_h667 = _source46.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1379_recursiveGen;
                  bool _1380_recOwned;
                  bool _1381_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1382_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out673;
                  bool _out674;
                  bool _out675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675, out _out676);
                  _1379_recursiveGen = _out673;
                  _1380_recOwned = _out674;
                  _1381_recErased = _out675;
                  _1382_recIdents = _out676;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1379_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1380_recOwned;
                  isErased = _1381_recErased;
                  readIdents = _1382_recIdents;
                }
              } else if (_source46.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1383___mcc_h669 = _source46.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1384_recursiveGen;
                  bool _1385_recOwned;
                  bool _1386_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1387_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out677;
                  bool _out678;
                  bool _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out677, out _out678, out _out679, out _out680);
                  _1384_recursiveGen = _out677;
                  _1385_recOwned = _out678;
                  _1386_recErased = _out679;
                  _1387_recIdents = _out680;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1384_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1385_recOwned;
                  isErased = _1386_recErased;
                  readIdents = _1387_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1388___mcc_h671 = _source46.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1389_recursiveGen;
                  bool _1390_recOwned;
                  bool _1391_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1392_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out681;
                  bool _out682;
                  bool _out683;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out681, out _out682, out _out683, out _out684);
                  _1389_recursiveGen = _out681;
                  _1390_recOwned = _out682;
                  _1391_recErased = _out683;
                  _1392_recIdents = _out684;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1389_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1390_recOwned;
                  isErased = _1391_recErased;
                  readIdents = _1392_recIdents;
                }
              }
            } else if (_source32.is_Set) {
              DAST._IType _1393___mcc_h673 = _source32.dtor_element;
              DAST._IType _source48 = _807___mcc_h306;
              if (_source48.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1394___mcc_h677 = _source48.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1395___mcc_h678 = _source48.dtor_typeArgs;
                DAST._IResolvedType _1396___mcc_h679 = _source48.dtor_resolved;
                DAST._IResolvedType _source49 = _1396___mcc_h679;
                if (_source49.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1397___mcc_h683 = _source49.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1398_recursiveGen;
                    bool _1399_recOwned;
                    bool _1400_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1401_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out685;
                    bool _out686;
                    bool _out687;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687, out _out688);
                    _1398_recursiveGen = _out685;
                    _1399_recOwned = _out686;
                    _1400_recErased = _out687;
                    _1401_recIdents = _out688;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1398_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1399_recOwned;
                    isErased = _1400_recErased;
                    readIdents = _1401_recIdents;
                  }
                } else if (_source49.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1402___mcc_h685 = _source49.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1403_recursiveGen;
                    bool _1404_recOwned;
                    bool _1405_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1406_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out689;
                    bool _out690;
                    bool _out691;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                    _1403_recursiveGen = _out689;
                    _1404_recOwned = _out690;
                    _1405_recErased = _out691;
                    _1406_recIdents = _out692;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1403_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1404_recOwned;
                    isErased = _1405_recErased;
                    readIdents = _1406_recIdents;
                  }
                } else {
                  DAST._IType _1407___mcc_h687 = _source49.dtor_Newtype_a0;
                  DAST._IType _1408_b = _1407___mcc_h687;
                  {
                    if (object.Equals(_800_fromTpe, _1408_b)) {
                      Dafny.ISequence<Dafny.Rune> _1409_recursiveGen;
                      bool _1410_recOwned;
                      bool _1411_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1412_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out693;
                      bool _out694;
                      bool _out695;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                      _1409_recursiveGen = _out693;
                      _1410_recOwned = _out694;
                      _1411_recErased = _out695;
                      _1412_recIdents = _out696;
                      Dafny.ISequence<Dafny.Rune> _1413_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out697;
                      _out697 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _1413_rhsType = _out697;
                      Dafny.ISequence<Dafny.Rune> _1414_uneraseFn;
                      _1414_uneraseFn = ((_1410_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1413_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1414_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1409_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1410_recOwned;
                      isErased = false;
                      readIdents = _1412_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out698;
                      bool _out699;
                      bool _out700;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1408_b), _1408_b, _799_toTpe), selfIdent, @params, mustOwn, out _out698, out _out699, out _out700, out _out701);
                      s = _out698;
                      isOwned = _out699;
                      isErased = _out700;
                      readIdents = _out701;
                    }
                  }
                }
              } else if (_source48.is_Nullable) {
                DAST._IType _1415___mcc_h689 = _source48.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1416_recursiveGen;
                  bool _1417_recOwned;
                  bool _1418_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1419_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out702;
                  bool _out703;
                  bool _out704;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out705;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out702, out _out703, out _out704, out _out705);
                  _1416_recursiveGen = _out702;
                  _1417_recOwned = _out703;
                  _1418_recErased = _out704;
                  _1419_recIdents = _out705;
                  if (!(_1417_recOwned)) {
                    _1416_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1416_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1416_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1418_recErased;
                  readIdents = _1419_recIdents;
                }
              } else if (_source48.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1420___mcc_h691 = _source48.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1421_recursiveGen;
                  bool _1422_recOwned;
                  bool _1423_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1424_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out706;
                  bool _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out706, out _out707, out _out708, out _out709);
                  _1421_recursiveGen = _out706;
                  _1422_recOwned = _out707;
                  _1423_recErased = _out708;
                  _1424_recIdents = _out709;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1421_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1422_recOwned;
                  isErased = _1423_recErased;
                  readIdents = _1424_recIdents;
                }
              } else if (_source48.is_Array) {
                DAST._IType _1425___mcc_h693 = _source48.dtor_element;
                BigInteger _1426___mcc_h694 = _source48.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1427_recursiveGen;
                  bool _1428_recOwned;
                  bool _1429_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1430_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out710;
                  bool _out711;
                  bool _out712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out713;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712, out _out713);
                  _1427_recursiveGen = _out710;
                  _1428_recOwned = _out711;
                  _1429_recErased = _out712;
                  _1430_recIdents = _out713;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1427_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1428_recOwned;
                  isErased = _1429_recErased;
                  readIdents = _1430_recIdents;
                }
              } else if (_source48.is_Seq) {
                DAST._IType _1431___mcc_h697 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1432_recursiveGen;
                  bool _1433_recOwned;
                  bool _1434_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1435_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out714;
                  bool _out715;
                  bool _out716;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out717;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out714, out _out715, out _out716, out _out717);
                  _1432_recursiveGen = _out714;
                  _1433_recOwned = _out715;
                  _1434_recErased = _out716;
                  _1435_recIdents = _out717;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1432_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1433_recOwned;
                  isErased = _1434_recErased;
                  readIdents = _1435_recIdents;
                }
              } else if (_source48.is_Set) {
                DAST._IType _1436___mcc_h699 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1437_recursiveGen;
                  bool _1438_recOwned;
                  bool _1439_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1440_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out718;
                  bool _out719;
                  bool _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out718, out _out719, out _out720, out _out721);
                  _1437_recursiveGen = _out718;
                  _1438_recOwned = _out719;
                  _1439_recErased = _out720;
                  _1440_recIdents = _out721;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1437_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1438_recOwned;
                  isErased = _1439_recErased;
                  readIdents = _1440_recIdents;
                }
              } else if (_source48.is_Multiset) {
                DAST._IType _1441___mcc_h701 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1442_recursiveGen;
                  bool _1443_recOwned;
                  bool _1444_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1445_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out722;
                  bool _out723;
                  bool _out724;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out725;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724, out _out725);
                  _1442_recursiveGen = _out722;
                  _1443_recOwned = _out723;
                  _1444_recErased = _out724;
                  _1445_recIdents = _out725;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1442_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1443_recOwned;
                  isErased = _1444_recErased;
                  readIdents = _1445_recIdents;
                }
              } else if (_source48.is_Map) {
                DAST._IType _1446___mcc_h703 = _source48.dtor_key;
                DAST._IType _1447___mcc_h704 = _source48.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1448_recursiveGen;
                  bool _1449_recOwned;
                  bool _1450_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1451_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out726;
                  bool _out727;
                  bool _out728;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out729;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out726, out _out727, out _out728, out _out729);
                  _1448_recursiveGen = _out726;
                  _1449_recOwned = _out727;
                  _1450_recErased = _out728;
                  _1451_recIdents = _out729;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1448_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1449_recOwned;
                  isErased = _1450_recErased;
                  readIdents = _1451_recIdents;
                }
              } else if (_source48.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1452___mcc_h707 = _source48.dtor_args;
                DAST._IType _1453___mcc_h708 = _source48.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1454_recursiveGen;
                  bool _1455_recOwned;
                  bool _1456_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1457_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out730;
                  bool _out731;
                  bool _out732;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out730, out _out731, out _out732, out _out733);
                  _1454_recursiveGen = _out730;
                  _1455_recOwned = _out731;
                  _1456_recErased = _out732;
                  _1457_recIdents = _out733;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1454_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1455_recOwned;
                  isErased = _1456_recErased;
                  readIdents = _1457_recIdents;
                }
              } else if (_source48.is_Primitive) {
                DAST._IPrimitive _1458___mcc_h711 = _source48.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1459_recursiveGen;
                  bool _1460_recOwned;
                  bool _1461_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1462_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out734;
                  bool _out735;
                  bool _out736;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736, out _out737);
                  _1459_recursiveGen = _out734;
                  _1460_recOwned = _out735;
                  _1461_recErased = _out736;
                  _1462_recIdents = _out737;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1459_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1460_recOwned;
                  isErased = _1461_recErased;
                  readIdents = _1462_recIdents;
                }
              } else if (_source48.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1463___mcc_h713 = _source48.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1464_recursiveGen;
                  bool _1465_recOwned;
                  bool _1466_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1467_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out738;
                  bool _out739;
                  bool _out740;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out738, out _out739, out _out740, out _out741);
                  _1464_recursiveGen = _out738;
                  _1465_recOwned = _out739;
                  _1466_recErased = _out740;
                  _1467_recIdents = _out741;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1464_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1465_recOwned;
                  isErased = _1466_recErased;
                  readIdents = _1467_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1468___mcc_h715 = _source48.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1469_recursiveGen;
                  bool _1470_recOwned;
                  bool _1471_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1472_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out742;
                  bool _out743;
                  bool _out744;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out742, out _out743, out _out744, out _out745);
                  _1469_recursiveGen = _out742;
                  _1470_recOwned = _out743;
                  _1471_recErased = _out744;
                  _1472_recIdents = _out745;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1469_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1470_recOwned;
                  isErased = _1471_recErased;
                  readIdents = _1472_recIdents;
                }
              }
            } else if (_source32.is_Multiset) {
              DAST._IType _1473___mcc_h717 = _source32.dtor_element;
              DAST._IType _source50 = _807___mcc_h306;
              if (_source50.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1474___mcc_h721 = _source50.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1475___mcc_h722 = _source50.dtor_typeArgs;
                DAST._IResolvedType _1476___mcc_h723 = _source50.dtor_resolved;
                DAST._IResolvedType _source51 = _1476___mcc_h723;
                if (_source51.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1477___mcc_h727 = _source51.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1478_recursiveGen;
                    bool _1479_recOwned;
                    bool _1480_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1481_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out746;
                    bool _out747;
                    bool _out748;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out746, out _out747, out _out748, out _out749);
                    _1478_recursiveGen = _out746;
                    _1479_recOwned = _out747;
                    _1480_recErased = _out748;
                    _1481_recIdents = _out749;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1478_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1479_recOwned;
                    isErased = _1480_recErased;
                    readIdents = _1481_recIdents;
                  }
                } else if (_source51.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1482___mcc_h729 = _source51.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1483_recursiveGen;
                    bool _1484_recOwned;
                    bool _1485_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1486_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out750;
                    bool _out751;
                    bool _out752;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                    _1483_recursiveGen = _out750;
                    _1484_recOwned = _out751;
                    _1485_recErased = _out752;
                    _1486_recIdents = _out753;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1483_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1484_recOwned;
                    isErased = _1485_recErased;
                    readIdents = _1486_recIdents;
                  }
                } else {
                  DAST._IType _1487___mcc_h731 = _source51.dtor_Newtype_a0;
                  DAST._IType _1488_b = _1487___mcc_h731;
                  {
                    if (object.Equals(_800_fromTpe, _1488_b)) {
                      Dafny.ISequence<Dafny.Rune> _1489_recursiveGen;
                      bool _1490_recOwned;
                      bool _1491_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1492_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out754;
                      bool _out755;
                      bool _out756;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                      _1489_recursiveGen = _out754;
                      _1490_recOwned = _out755;
                      _1491_recErased = _out756;
                      _1492_recIdents = _out757;
                      Dafny.ISequence<Dafny.Rune> _1493_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out758;
                      _out758 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _1493_rhsType = _out758;
                      Dafny.ISequence<Dafny.Rune> _1494_uneraseFn;
                      _1494_uneraseFn = ((_1490_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1493_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1494_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1489_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1490_recOwned;
                      isErased = false;
                      readIdents = _1492_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out759;
                      bool _out760;
                      bool _out761;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out762;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1488_b), _1488_b, _799_toTpe), selfIdent, @params, mustOwn, out _out759, out _out760, out _out761, out _out762);
                      s = _out759;
                      isOwned = _out760;
                      isErased = _out761;
                      readIdents = _out762;
                    }
                  }
                }
              } else if (_source50.is_Nullable) {
                DAST._IType _1495___mcc_h733 = _source50.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1496_recursiveGen;
                  bool _1497_recOwned;
                  bool _1498_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1499_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out763;
                  bool _out764;
                  bool _out765;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out763, out _out764, out _out765, out _out766);
                  _1496_recursiveGen = _out763;
                  _1497_recOwned = _out764;
                  _1498_recErased = _out765;
                  _1499_recIdents = _out766;
                  if (!(_1497_recOwned)) {
                    _1496_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1496_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1496_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1498_recErased;
                  readIdents = _1499_recIdents;
                }
              } else if (_source50.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1500___mcc_h735 = _source50.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1501_recursiveGen;
                  bool _1502_recOwned;
                  bool _1503_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1504_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out767;
                  bool _out768;
                  bool _out769;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out767, out _out768, out _out769, out _out770);
                  _1501_recursiveGen = _out767;
                  _1502_recOwned = _out768;
                  _1503_recErased = _out769;
                  _1504_recIdents = _out770;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1501_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1502_recOwned;
                  isErased = _1503_recErased;
                  readIdents = _1504_recIdents;
                }
              } else if (_source50.is_Array) {
                DAST._IType _1505___mcc_h737 = _source50.dtor_element;
                BigInteger _1506___mcc_h738 = _source50.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1507_recursiveGen;
                  bool _1508_recOwned;
                  bool _1509_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1510_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out771;
                  bool _out772;
                  bool _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773, out _out774);
                  _1507_recursiveGen = _out771;
                  _1508_recOwned = _out772;
                  _1509_recErased = _out773;
                  _1510_recIdents = _out774;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1507_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1508_recOwned;
                  isErased = _1509_recErased;
                  readIdents = _1510_recIdents;
                }
              } else if (_source50.is_Seq) {
                DAST._IType _1511___mcc_h741 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1512_recursiveGen;
                  bool _1513_recOwned;
                  bool _1514_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1515_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out775;
                  bool _out776;
                  bool _out777;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out775, out _out776, out _out777, out _out778);
                  _1512_recursiveGen = _out775;
                  _1513_recOwned = _out776;
                  _1514_recErased = _out777;
                  _1515_recIdents = _out778;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1512_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1513_recOwned;
                  isErased = _1514_recErased;
                  readIdents = _1515_recIdents;
                }
              } else if (_source50.is_Set) {
                DAST._IType _1516___mcc_h743 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1517_recursiveGen;
                  bool _1518_recOwned;
                  bool _1519_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1520_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out779;
                  bool _out780;
                  bool _out781;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out779, out _out780, out _out781, out _out782);
                  _1517_recursiveGen = _out779;
                  _1518_recOwned = _out780;
                  _1519_recErased = _out781;
                  _1520_recIdents = _out782;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1517_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1518_recOwned;
                  isErased = _1519_recErased;
                  readIdents = _1520_recIdents;
                }
              } else if (_source50.is_Multiset) {
                DAST._IType _1521___mcc_h745 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1522_recursiveGen;
                  bool _1523_recOwned;
                  bool _1524_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1525_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out783;
                  bool _out784;
                  bool _out785;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out786;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out783, out _out784, out _out785, out _out786);
                  _1522_recursiveGen = _out783;
                  _1523_recOwned = _out784;
                  _1524_recErased = _out785;
                  _1525_recIdents = _out786;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1522_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1523_recOwned;
                  isErased = _1524_recErased;
                  readIdents = _1525_recIdents;
                }
              } else if (_source50.is_Map) {
                DAST._IType _1526___mcc_h747 = _source50.dtor_key;
                DAST._IType _1527___mcc_h748 = _source50.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1528_recursiveGen;
                  bool _1529_recOwned;
                  bool _1530_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1531_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out787;
                  bool _out788;
                  bool _out789;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out787, out _out788, out _out789, out _out790);
                  _1528_recursiveGen = _out787;
                  _1529_recOwned = _out788;
                  _1530_recErased = _out789;
                  _1531_recIdents = _out790;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1528_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1529_recOwned;
                  isErased = _1530_recErased;
                  readIdents = _1531_recIdents;
                }
              } else if (_source50.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1532___mcc_h751 = _source50.dtor_args;
                DAST._IType _1533___mcc_h752 = _source50.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1534_recursiveGen;
                  bool _1535_recOwned;
                  bool _1536_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1537_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out791;
                  bool _out792;
                  bool _out793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793, out _out794);
                  _1534_recursiveGen = _out791;
                  _1535_recOwned = _out792;
                  _1536_recErased = _out793;
                  _1537_recIdents = _out794;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1534_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1535_recOwned;
                  isErased = _1536_recErased;
                  readIdents = _1537_recIdents;
                }
              } else if (_source50.is_Primitive) {
                DAST._IPrimitive _1538___mcc_h755 = _source50.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1539_recursiveGen;
                  bool _1540_recOwned;
                  bool _1541_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1542_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out795;
                  bool _out796;
                  bool _out797;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out798;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out795, out _out796, out _out797, out _out798);
                  _1539_recursiveGen = _out795;
                  _1540_recOwned = _out796;
                  _1541_recErased = _out797;
                  _1542_recIdents = _out798;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1539_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1540_recOwned;
                  isErased = _1541_recErased;
                  readIdents = _1542_recIdents;
                }
              } else if (_source50.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1543___mcc_h757 = _source50.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1544_recursiveGen;
                  bool _1545_recOwned;
                  bool _1546_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1547_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out799;
                  bool _out800;
                  bool _out801;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out799, out _out800, out _out801, out _out802);
                  _1544_recursiveGen = _out799;
                  _1545_recOwned = _out800;
                  _1546_recErased = _out801;
                  _1547_recIdents = _out802;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1544_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1545_recOwned;
                  isErased = _1546_recErased;
                  readIdents = _1547_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1548___mcc_h759 = _source50.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1549_recursiveGen;
                  bool _1550_recOwned;
                  bool _1551_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1552_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out803;
                  bool _out804;
                  bool _out805;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out803, out _out804, out _out805, out _out806);
                  _1549_recursiveGen = _out803;
                  _1550_recOwned = _out804;
                  _1551_recErased = _out805;
                  _1552_recIdents = _out806;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1549_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1550_recOwned;
                  isErased = _1551_recErased;
                  readIdents = _1552_recIdents;
                }
              }
            } else if (_source32.is_Map) {
              DAST._IType _1553___mcc_h761 = _source32.dtor_key;
              DAST._IType _1554___mcc_h762 = _source32.dtor_value;
              DAST._IType _source52 = _807___mcc_h306;
              if (_source52.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1555___mcc_h769 = _source52.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1556___mcc_h770 = _source52.dtor_typeArgs;
                DAST._IResolvedType _1557___mcc_h771 = _source52.dtor_resolved;
                DAST._IResolvedType _source53 = _1557___mcc_h771;
                if (_source53.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1558___mcc_h775 = _source53.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1559_recursiveGen;
                    bool _1560_recOwned;
                    bool _1561_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1562_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out807;
                    bool _out808;
                    bool _out809;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out810;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809, out _out810);
                    _1559_recursiveGen = _out807;
                    _1560_recOwned = _out808;
                    _1561_recErased = _out809;
                    _1562_recIdents = _out810;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1559_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1560_recOwned;
                    isErased = _1561_recErased;
                    readIdents = _1562_recIdents;
                  }
                } else if (_source53.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1563___mcc_h777 = _source53.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1564_recursiveGen;
                    bool _1565_recOwned;
                    bool _1566_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1567_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out811;
                    bool _out812;
                    bool _out813;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                    _1564_recursiveGen = _out811;
                    _1565_recOwned = _out812;
                    _1566_recErased = _out813;
                    _1567_recIdents = _out814;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1564_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1565_recOwned;
                    isErased = _1566_recErased;
                    readIdents = _1567_recIdents;
                  }
                } else {
                  DAST._IType _1568___mcc_h779 = _source53.dtor_Newtype_a0;
                  DAST._IType _1569_b = _1568___mcc_h779;
                  {
                    if (object.Equals(_800_fromTpe, _1569_b)) {
                      Dafny.ISequence<Dafny.Rune> _1570_recursiveGen;
                      bool _1571_recOwned;
                      bool _1572_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1573_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out815;
                      bool _out816;
                      bool _out817;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                      _1570_recursiveGen = _out815;
                      _1571_recOwned = _out816;
                      _1572_recErased = _out817;
                      _1573_recIdents = _out818;
                      Dafny.ISequence<Dafny.Rune> _1574_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out819;
                      _out819 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _1574_rhsType = _out819;
                      Dafny.ISequence<Dafny.Rune> _1575_uneraseFn;
                      _1575_uneraseFn = ((_1571_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1574_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1575_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1570_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1571_recOwned;
                      isErased = false;
                      readIdents = _1573_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out820;
                      bool _out821;
                      bool _out822;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out823;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1569_b), _1569_b, _799_toTpe), selfIdent, @params, mustOwn, out _out820, out _out821, out _out822, out _out823);
                      s = _out820;
                      isOwned = _out821;
                      isErased = _out822;
                      readIdents = _out823;
                    }
                  }
                }
              } else if (_source52.is_Nullable) {
                DAST._IType _1576___mcc_h781 = _source52.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1577_recursiveGen;
                  bool _1578_recOwned;
                  bool _1579_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1580_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out824;
                  bool _out825;
                  bool _out826;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out824, out _out825, out _out826, out _out827);
                  _1577_recursiveGen = _out824;
                  _1578_recOwned = _out825;
                  _1579_recErased = _out826;
                  _1580_recIdents = _out827;
                  if (!(_1578_recOwned)) {
                    _1577_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1577_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1577_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1579_recErased;
                  readIdents = _1580_recIdents;
                }
              } else if (_source52.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1581___mcc_h783 = _source52.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1582_recursiveGen;
                  bool _1583_recOwned;
                  bool _1584_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1585_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out828;
                  bool _out829;
                  bool _out830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out831;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830, out _out831);
                  _1582_recursiveGen = _out828;
                  _1583_recOwned = _out829;
                  _1584_recErased = _out830;
                  _1585_recIdents = _out831;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1582_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1583_recOwned;
                  isErased = _1584_recErased;
                  readIdents = _1585_recIdents;
                }
              } else if (_source52.is_Array) {
                DAST._IType _1586___mcc_h785 = _source52.dtor_element;
                BigInteger _1587___mcc_h786 = _source52.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1588_recursiveGen;
                  bool _1589_recOwned;
                  bool _1590_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1591_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out832;
                  bool _out833;
                  bool _out834;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out832, out _out833, out _out834, out _out835);
                  _1588_recursiveGen = _out832;
                  _1589_recOwned = _out833;
                  _1590_recErased = _out834;
                  _1591_recIdents = _out835;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1588_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1589_recOwned;
                  isErased = _1590_recErased;
                  readIdents = _1591_recIdents;
                }
              } else if (_source52.is_Seq) {
                DAST._IType _1592___mcc_h789 = _source52.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1593_recursiveGen;
                  bool _1594_recOwned;
                  bool _1595_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1596_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out836;
                  bool _out837;
                  bool _out838;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out836, out _out837, out _out838, out _out839);
                  _1593_recursiveGen = _out836;
                  _1594_recOwned = _out837;
                  _1595_recErased = _out838;
                  _1596_recIdents = _out839;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1593_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1594_recOwned;
                  isErased = _1595_recErased;
                  readIdents = _1596_recIdents;
                }
              } else if (_source52.is_Set) {
                DAST._IType _1597___mcc_h791 = _source52.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1598_recursiveGen;
                  bool _1599_recOwned;
                  bool _1600_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1601_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out840;
                  bool _out841;
                  bool _out842;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out843;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842, out _out843);
                  _1598_recursiveGen = _out840;
                  _1599_recOwned = _out841;
                  _1600_recErased = _out842;
                  _1601_recIdents = _out843;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1598_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1599_recOwned;
                  isErased = _1600_recErased;
                  readIdents = _1601_recIdents;
                }
              } else if (_source52.is_Multiset) {
                DAST._IType _1602___mcc_h793 = _source52.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1603_recursiveGen;
                  bool _1604_recOwned;
                  bool _1605_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1606_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out844;
                  bool _out845;
                  bool _out846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out844, out _out845, out _out846, out _out847);
                  _1603_recursiveGen = _out844;
                  _1604_recOwned = _out845;
                  _1605_recErased = _out846;
                  _1606_recIdents = _out847;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1603_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1604_recOwned;
                  isErased = _1605_recErased;
                  readIdents = _1606_recIdents;
                }
              } else if (_source52.is_Map) {
                DAST._IType _1607___mcc_h795 = _source52.dtor_key;
                DAST._IType _1608___mcc_h796 = _source52.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1609_recursiveGen;
                  bool _1610_recOwned;
                  bool _1611_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1612_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out848;
                  bool _out849;
                  bool _out850;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out848, out _out849, out _out850, out _out851);
                  _1609_recursiveGen = _out848;
                  _1610_recOwned = _out849;
                  _1611_recErased = _out850;
                  _1612_recIdents = _out851;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1609_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1610_recOwned;
                  isErased = _1611_recErased;
                  readIdents = _1612_recIdents;
                }
              } else if (_source52.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1613___mcc_h799 = _source52.dtor_args;
                DAST._IType _1614___mcc_h800 = _source52.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1615_recursiveGen;
                  bool _1616_recOwned;
                  bool _1617_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1618_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out852;
                  bool _out853;
                  bool _out854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854, out _out855);
                  _1615_recursiveGen = _out852;
                  _1616_recOwned = _out853;
                  _1617_recErased = _out854;
                  _1618_recIdents = _out855;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1616_recOwned;
                  isErased = _1617_recErased;
                  readIdents = _1618_recIdents;
                }
              } else if (_source52.is_Primitive) {
                DAST._IPrimitive _1619___mcc_h803 = _source52.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1620_recursiveGen;
                  bool _1621_recOwned;
                  bool _1622_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1623_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out856;
                  bool _out857;
                  bool _out858;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out856, out _out857, out _out858, out _out859);
                  _1620_recursiveGen = _out856;
                  _1621_recOwned = _out857;
                  _1622_recErased = _out858;
                  _1623_recIdents = _out859;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1621_recOwned;
                  isErased = _1622_recErased;
                  readIdents = _1623_recIdents;
                }
              } else if (_source52.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1624___mcc_h805 = _source52.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1625_recursiveGen;
                  bool _1626_recOwned;
                  bool _1627_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1628_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out860;
                  bool _out861;
                  bool _out862;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out860, out _out861, out _out862, out _out863);
                  _1625_recursiveGen = _out860;
                  _1626_recOwned = _out861;
                  _1627_recErased = _out862;
                  _1628_recIdents = _out863;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1626_recOwned;
                  isErased = _1627_recErased;
                  readIdents = _1628_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1629___mcc_h807 = _source52.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1630_recursiveGen;
                  bool _1631_recOwned;
                  bool _1632_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1633_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out864;
                  bool _out865;
                  bool _out866;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out864, out _out865, out _out866, out _out867);
                  _1630_recursiveGen = _out864;
                  _1631_recOwned = _out865;
                  _1632_recErased = _out866;
                  _1633_recIdents = _out867;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1631_recOwned;
                  isErased = _1632_recErased;
                  readIdents = _1633_recIdents;
                }
              }
            } else if (_source32.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1634___mcc_h809 = _source32.dtor_args;
              DAST._IType _1635___mcc_h810 = _source32.dtor_result;
              DAST._IType _source54 = _807___mcc_h306;
              if (_source54.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1636___mcc_h817 = _source54.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1637___mcc_h818 = _source54.dtor_typeArgs;
                DAST._IResolvedType _1638___mcc_h819 = _source54.dtor_resolved;
                DAST._IResolvedType _source55 = _1638___mcc_h819;
                if (_source55.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1639___mcc_h823 = _source55.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1640_recursiveGen;
                    bool _1641_recOwned;
                    bool _1642_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1643_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out868;
                    bool _out869;
                    bool _out870;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870, out _out871);
                    _1640_recursiveGen = _out868;
                    _1641_recOwned = _out869;
                    _1642_recErased = _out870;
                    _1643_recIdents = _out871;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1640_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1641_recOwned;
                    isErased = _1642_recErased;
                    readIdents = _1643_recIdents;
                  }
                } else if (_source55.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1644___mcc_h825 = _source55.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1645_recursiveGen;
                    bool _1646_recOwned;
                    bool _1647_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1648_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out872;
                    bool _out873;
                    bool _out874;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                    _1645_recursiveGen = _out872;
                    _1646_recOwned = _out873;
                    _1647_recErased = _out874;
                    _1648_recIdents = _out875;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1645_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1646_recOwned;
                    isErased = _1647_recErased;
                    readIdents = _1648_recIdents;
                  }
                } else {
                  DAST._IType _1649___mcc_h827 = _source55.dtor_Newtype_a0;
                  DAST._IType _1650_b = _1649___mcc_h827;
                  {
                    if (object.Equals(_800_fromTpe, _1650_b)) {
                      Dafny.ISequence<Dafny.Rune> _1651_recursiveGen;
                      bool _1652_recOwned;
                      bool _1653_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1654_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out876;
                      bool _out877;
                      bool _out878;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                      _1651_recursiveGen = _out876;
                      _1652_recOwned = _out877;
                      _1653_recErased = _out878;
                      _1654_recIdents = _out879;
                      Dafny.ISequence<Dafny.Rune> _1655_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out880;
                      _out880 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _1655_rhsType = _out880;
                      Dafny.ISequence<Dafny.Rune> _1656_uneraseFn;
                      _1656_uneraseFn = ((_1652_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1655_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1656_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1651_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1652_recOwned;
                      isErased = false;
                      readIdents = _1654_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out881;
                      bool _out882;
                      bool _out883;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out884;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1650_b), _1650_b, _799_toTpe), selfIdent, @params, mustOwn, out _out881, out _out882, out _out883, out _out884);
                      s = _out881;
                      isOwned = _out882;
                      isErased = _out883;
                      readIdents = _out884;
                    }
                  }
                }
              } else if (_source54.is_Nullable) {
                DAST._IType _1657___mcc_h829 = _source54.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1658_recursiveGen;
                  bool _1659_recOwned;
                  bool _1660_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1661_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out885;
                  bool _out886;
                  bool _out887;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out885, out _out886, out _out887, out _out888);
                  _1658_recursiveGen = _out885;
                  _1659_recOwned = _out886;
                  _1660_recErased = _out887;
                  _1661_recIdents = _out888;
                  if (!(_1659_recOwned)) {
                    _1658_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1658_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1660_recErased;
                  readIdents = _1661_recIdents;
                }
              } else if (_source54.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1662___mcc_h831 = _source54.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1663_recursiveGen;
                  bool _1664_recOwned;
                  bool _1665_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1666_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out889;
                  bool _out890;
                  bool _out891;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891, out _out892);
                  _1663_recursiveGen = _out889;
                  _1664_recOwned = _out890;
                  _1665_recErased = _out891;
                  _1666_recIdents = _out892;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1663_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1664_recOwned;
                  isErased = _1665_recErased;
                  readIdents = _1666_recIdents;
                }
              } else if (_source54.is_Array) {
                DAST._IType _1667___mcc_h833 = _source54.dtor_element;
                BigInteger _1668___mcc_h834 = _source54.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1669_recursiveGen;
                  bool _1670_recOwned;
                  bool _1671_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1672_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out893;
                  bool _out894;
                  bool _out895;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out896;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out893, out _out894, out _out895, out _out896);
                  _1669_recursiveGen = _out893;
                  _1670_recOwned = _out894;
                  _1671_recErased = _out895;
                  _1672_recIdents = _out896;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1669_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1670_recOwned;
                  isErased = _1671_recErased;
                  readIdents = _1672_recIdents;
                }
              } else if (_source54.is_Seq) {
                DAST._IType _1673___mcc_h837 = _source54.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1674_recursiveGen;
                  bool _1675_recOwned;
                  bool _1676_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1677_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out897;
                  bool _out898;
                  bool _out899;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out897, out _out898, out _out899, out _out900);
                  _1674_recursiveGen = _out897;
                  _1675_recOwned = _out898;
                  _1676_recErased = _out899;
                  _1677_recIdents = _out900;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1674_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1675_recOwned;
                  isErased = _1676_recErased;
                  readIdents = _1677_recIdents;
                }
              } else if (_source54.is_Set) {
                DAST._IType _1678___mcc_h839 = _source54.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1679_recursiveGen;
                  bool _1680_recOwned;
                  bool _1681_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1682_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out901;
                  bool _out902;
                  bool _out903;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out901, out _out902, out _out903, out _out904);
                  _1679_recursiveGen = _out901;
                  _1680_recOwned = _out902;
                  _1681_recErased = _out903;
                  _1682_recIdents = _out904;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1679_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1680_recOwned;
                  isErased = _1681_recErased;
                  readIdents = _1682_recIdents;
                }
              } else if (_source54.is_Multiset) {
                DAST._IType _1683___mcc_h841 = _source54.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1684_recursiveGen;
                  bool _1685_recOwned;
                  bool _1686_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1687_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out905;
                  bool _out906;
                  bool _out907;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907, out _out908);
                  _1684_recursiveGen = _out905;
                  _1685_recOwned = _out906;
                  _1686_recErased = _out907;
                  _1687_recIdents = _out908;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1684_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1685_recOwned;
                  isErased = _1686_recErased;
                  readIdents = _1687_recIdents;
                }
              } else if (_source54.is_Map) {
                DAST._IType _1688___mcc_h843 = _source54.dtor_key;
                DAST._IType _1689___mcc_h844 = _source54.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1690_recursiveGen;
                  bool _1691_recOwned;
                  bool _1692_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1693_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out909;
                  bool _out910;
                  bool _out911;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out909, out _out910, out _out911, out _out912);
                  _1690_recursiveGen = _out909;
                  _1691_recOwned = _out910;
                  _1692_recErased = _out911;
                  _1693_recIdents = _out912;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1690_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1691_recOwned;
                  isErased = _1692_recErased;
                  readIdents = _1693_recIdents;
                }
              } else if (_source54.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1694___mcc_h847 = _source54.dtor_args;
                DAST._IType _1695___mcc_h848 = _source54.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1696_recursiveGen;
                  bool _1697_recOwned;
                  bool _1698_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1699_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out913;
                  bool _out914;
                  bool _out915;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out913, out _out914, out _out915, out _out916);
                  _1696_recursiveGen = _out913;
                  _1697_recOwned = _out914;
                  _1698_recErased = _out915;
                  _1699_recIdents = _out916;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1697_recOwned;
                  isErased = _1698_recErased;
                  readIdents = _1699_recIdents;
                }
              } else if (_source54.is_Primitive) {
                DAST._IPrimitive _1700___mcc_h851 = _source54.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1701_recursiveGen;
                  bool _1702_recOwned;
                  bool _1703_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1704_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out917;
                  bool _out918;
                  bool _out919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919, out _out920);
                  _1701_recursiveGen = _out917;
                  _1702_recOwned = _out918;
                  _1703_recErased = _out919;
                  _1704_recIdents = _out920;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1701_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1702_recOwned;
                  isErased = _1703_recErased;
                  readIdents = _1704_recIdents;
                }
              } else if (_source54.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1705___mcc_h853 = _source54.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1706_recursiveGen;
                  bool _1707_recOwned;
                  bool _1708_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1709_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out921;
                  bool _out922;
                  bool _out923;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out924;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out921, out _out922, out _out923, out _out924);
                  _1706_recursiveGen = _out921;
                  _1707_recOwned = _out922;
                  _1708_recErased = _out923;
                  _1709_recIdents = _out924;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1706_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1707_recOwned;
                  isErased = _1708_recErased;
                  readIdents = _1709_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1710___mcc_h855 = _source54.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1711_recursiveGen;
                  bool _1712_recOwned;
                  bool _1713_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1714_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out925;
                  bool _out926;
                  bool _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out925, out _out926, out _out927, out _out928);
                  _1711_recursiveGen = _out925;
                  _1712_recOwned = _out926;
                  _1713_recErased = _out927;
                  _1714_recIdents = _out928;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1711_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1712_recOwned;
                  isErased = _1713_recErased;
                  readIdents = _1714_recIdents;
                }
              }
            } else if (_source32.is_Primitive) {
              DAST._IPrimitive _1715___mcc_h857 = _source32.dtor_Primitive_a0;
              DAST._IPrimitive _source56 = _1715___mcc_h857;
              if (_source56.is_Int) {
                DAST._IType _source57 = _807___mcc_h306;
                if (_source57.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1716___mcc_h861 = _source57.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1717___mcc_h862 = _source57.dtor_typeArgs;
                  DAST._IResolvedType _1718___mcc_h863 = _source57.dtor_resolved;
                  DAST._IResolvedType _source58 = _1718___mcc_h863;
                  if (_source58.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1719___mcc_h867 = _source58.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1720_recursiveGen;
                      bool _1721_recOwned;
                      bool _1722_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1723_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out929;
                      bool _out930;
                      bool _out931;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931, out _out932);
                      _1720_recursiveGen = _out929;
                      _1721_recOwned = _out930;
                      _1722_recErased = _out931;
                      _1723_recIdents = _out932;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1721_recOwned;
                      isErased = _1722_recErased;
                      readIdents = _1723_recIdents;
                    }
                  } else if (_source58.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1724___mcc_h869 = _source58.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1725_recursiveGen;
                      bool _1726_recOwned;
                      bool _1727_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1728_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out933;
                      bool _out934;
                      bool _out935;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                      _1725_recursiveGen = _out933;
                      _1726_recOwned = _out934;
                      _1727_recErased = _out935;
                      _1728_recIdents = _out936;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1726_recOwned;
                      isErased = _1727_recErased;
                      readIdents = _1728_recIdents;
                    }
                  } else {
                    DAST._IType _1729___mcc_h871 = _source58.dtor_Newtype_a0;
                    DAST._IType _1730_b = _1729___mcc_h871;
                    {
                      if (object.Equals(_800_fromTpe, _1730_b)) {
                        Dafny.ISequence<Dafny.Rune> _1731_recursiveGen;
                        bool _1732_recOwned;
                        bool _1733_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1734_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out937;
                        bool _out938;
                        bool _out939;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                        _1731_recursiveGen = _out937;
                        _1732_recOwned = _out938;
                        _1733_recErased = _out939;
                        _1734_recIdents = _out940;
                        Dafny.ISequence<Dafny.Rune> _1735_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out941;
                        _out941 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                        _1735_rhsType = _out941;
                        Dafny.ISequence<Dafny.Rune> _1736_uneraseFn;
                        _1736_uneraseFn = ((_1732_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1735_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1736_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1732_recOwned;
                        isErased = false;
                        readIdents = _1734_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out942;
                        bool _out943;
                        bool _out944;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out945;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1730_b), _1730_b, _799_toTpe), selfIdent, @params, mustOwn, out _out942, out _out943, out _out944, out _out945);
                        s = _out942;
                        isOwned = _out943;
                        isErased = _out944;
                        readIdents = _out945;
                      }
                    }
                  }
                } else if (_source57.is_Nullable) {
                  DAST._IType _1737___mcc_h873 = _source57.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1738_recursiveGen;
                    bool _1739_recOwned;
                    bool _1740_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1741_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out946;
                    bool _out947;
                    bool _out948;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out946, out _out947, out _out948, out _out949);
                    _1738_recursiveGen = _out946;
                    _1739_recOwned = _out947;
                    _1740_recErased = _out948;
                    _1741_recIdents = _out949;
                    if (!(_1739_recOwned)) {
                      _1738_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1738_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1738_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1740_recErased;
                    readIdents = _1741_recIdents;
                  }
                } else if (_source57.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1742___mcc_h875 = _source57.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1743_recursiveGen;
                    bool _1744_recOwned;
                    bool _1745_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1746_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out950;
                    bool _out951;
                    bool _out952;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out950, out _out951, out _out952, out _out953);
                    _1743_recursiveGen = _out950;
                    _1744_recOwned = _out951;
                    _1745_recErased = _out952;
                    _1746_recIdents = _out953;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1744_recOwned;
                    isErased = _1745_recErased;
                    readIdents = _1746_recIdents;
                  }
                } else if (_source57.is_Array) {
                  DAST._IType _1747___mcc_h877 = _source57.dtor_element;
                  BigInteger _1748___mcc_h878 = _source57.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1749_recursiveGen;
                    bool _1750_recOwned;
                    bool _1751_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1752_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out954;
                    bool _out955;
                    bool _out956;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out957;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956, out _out957);
                    _1749_recursiveGen = _out954;
                    _1750_recOwned = _out955;
                    _1751_recErased = _out956;
                    _1752_recIdents = _out957;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1749_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1750_recOwned;
                    isErased = _1751_recErased;
                    readIdents = _1752_recIdents;
                  }
                } else if (_source57.is_Seq) {
                  DAST._IType _1753___mcc_h881 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1754_recursiveGen;
                    bool _1755_recOwned;
                    bool _1756_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1757_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out958;
                    bool _out959;
                    bool _out960;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out961;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out958, out _out959, out _out960, out _out961);
                    _1754_recursiveGen = _out958;
                    _1755_recOwned = _out959;
                    _1756_recErased = _out960;
                    _1757_recIdents = _out961;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1755_recOwned;
                    isErased = _1756_recErased;
                    readIdents = _1757_recIdents;
                  }
                } else if (_source57.is_Set) {
                  DAST._IType _1758___mcc_h883 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1759_recursiveGen;
                    bool _1760_recOwned;
                    bool _1761_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1762_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out962;
                    bool _out963;
                    bool _out964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out962, out _out963, out _out964, out _out965);
                    _1759_recursiveGen = _out962;
                    _1760_recOwned = _out963;
                    _1761_recErased = _out964;
                    _1762_recIdents = _out965;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1760_recOwned;
                    isErased = _1761_recErased;
                    readIdents = _1762_recIdents;
                  }
                } else if (_source57.is_Multiset) {
                  DAST._IType _1763___mcc_h885 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1764_recursiveGen;
                    bool _1765_recOwned;
                    bool _1766_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1767_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out966;
                    bool _out967;
                    bool _out968;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968, out _out969);
                    _1764_recursiveGen = _out966;
                    _1765_recOwned = _out967;
                    _1766_recErased = _out968;
                    _1767_recIdents = _out969;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1765_recOwned;
                    isErased = _1766_recErased;
                    readIdents = _1767_recIdents;
                  }
                } else if (_source57.is_Map) {
                  DAST._IType _1768___mcc_h887 = _source57.dtor_key;
                  DAST._IType _1769___mcc_h888 = _source57.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1770_recursiveGen;
                    bool _1771_recOwned;
                    bool _1772_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1773_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out970;
                    bool _out971;
                    bool _out972;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out970, out _out971, out _out972, out _out973);
                    _1770_recursiveGen = _out970;
                    _1771_recOwned = _out971;
                    _1772_recErased = _out972;
                    _1773_recIdents = _out973;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1770_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1771_recOwned;
                    isErased = _1772_recErased;
                    readIdents = _1773_recIdents;
                  }
                } else if (_source57.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1774___mcc_h891 = _source57.dtor_args;
                  DAST._IType _1775___mcc_h892 = _source57.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1776_recursiveGen;
                    bool _1777_recOwned;
                    bool _1778_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1779_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out974;
                    bool _out975;
                    bool _out976;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out974, out _out975, out _out976, out _out977);
                    _1776_recursiveGen = _out974;
                    _1777_recOwned = _out975;
                    _1778_recErased = _out976;
                    _1779_recIdents = _out977;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1776_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1777_recOwned;
                    isErased = _1778_recErased;
                    readIdents = _1779_recIdents;
                  }
                } else if (_source57.is_Primitive) {
                  DAST._IPrimitive _1780___mcc_h895 = _source57.dtor_Primitive_a0;
                  DAST._IPrimitive _source59 = _1780___mcc_h895;
                  if (_source59.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1781_recursiveGen;
                      bool _1782_recOwned;
                      bool _1783_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1784_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out978;
                      bool _out979;
                      bool _out980;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out978, out _out979, out _out980, out _out981);
                      _1781_recursiveGen = _out978;
                      _1782_recOwned = _out979;
                      _1783_recErased = _out980;
                      _1784_recIdents = _out981;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1781_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1782_recOwned;
                      isErased = _1783_recErased;
                      readIdents = _1784_recIdents;
                    }
                  } else if (_source59.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1785_recursiveGen;
                      bool _1786___v46;
                      bool _1787___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1788_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out982;
                      bool _out983;
                      bool _out984;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, true, out _out982, out _out983, out _out984, out _out985);
                      _1785_recursiveGen = _out982;
                      _1786___v46 = _out983;
                      _1787___v47 = _out984;
                      _1788_recIdents = _out985;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _1785_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1788_recIdents;
                    }
                  } else if (_source59.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1789_recursiveGen;
                      bool _1790_recOwned;
                      bool _1791_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1792_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out986, out _out987, out _out988, out _out989);
                      _1789_recursiveGen = _out986;
                      _1790_recOwned = _out987;
                      _1791_recErased = _out988;
                      _1792_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1789_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1790_recOwned;
                      isErased = _1791_recErased;
                      readIdents = _1792_recIdents;
                    }
                  } else if (_source59.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1793_recursiveGen;
                      bool _1794_recOwned;
                      bool _1795_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1796_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out990;
                      bool _out991;
                      bool _out992;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out990, out _out991, out _out992, out _out993);
                      _1793_recursiveGen = _out990;
                      _1794_recOwned = _out991;
                      _1795_recErased = _out992;
                      _1796_recIdents = _out993;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1793_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1794_recOwned;
                      isErased = _1795_recErased;
                      readIdents = _1796_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1797_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out994;
                      _out994 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _1797_rhsType = _out994;
                      Dafny.ISequence<Dafny.Rune> _1798_recursiveGen;
                      bool _1799___v56;
                      bool _1800___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1801_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out995;
                      bool _out996;
                      bool _out997;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, true, out _out995, out _out996, out _out997, out _out998);
                      _1798_recursiveGen = _out995;
                      _1799___v56 = _out996;
                      _1800___v57 = _out997;
                      _1801_recIdents = _out998;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _1798_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1801_recIdents;
                    }
                  }
                } else if (_source57.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1802___mcc_h897 = _source57.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1803_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out999;
                    _out999 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                    _1803_rhsType = _out999;
                    Dafny.ISequence<Dafny.Rune> _1804_recursiveGen;
                    bool _1805___v51;
                    bool _1806___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1807_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1000;
                    bool _out1001;
                    bool _out1002;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1003;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, true, out _out1000, out _out1001, out _out1002, out _out1003);
                    _1804_recursiveGen = _out1000;
                    _1805___v51 = _out1001;
                    _1806___v52 = _out1002;
                    _1807_recIdents = _out1003;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1803_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _1804_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _1807_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1808___mcc_h899 = _source57.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1809_recursiveGen;
                    bool _1810_recOwned;
                    bool _1811_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1812_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1004;
                    bool _out1005;
                    bool _out1006;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1007;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1004, out _out1005, out _out1006, out _out1007);
                    _1809_recursiveGen = _out1004;
                    _1810_recOwned = _out1005;
                    _1811_recErased = _out1006;
                    _1812_recIdents = _out1007;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1809_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1810_recOwned;
                    isErased = _1811_recErased;
                    readIdents = _1812_recIdents;
                  }
                }
              } else if (_source56.is_Real) {
                DAST._IType _source60 = _807___mcc_h306;
                if (_source60.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1813___mcc_h901 = _source60.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1814___mcc_h902 = _source60.dtor_typeArgs;
                  DAST._IResolvedType _1815___mcc_h903 = _source60.dtor_resolved;
                  DAST._IResolvedType _source61 = _1815___mcc_h903;
                  if (_source61.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1816___mcc_h907 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1817_recursiveGen;
                      bool _1818_recOwned;
                      bool _1819_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1820_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1008;
                      bool _out1009;
                      bool _out1010;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1011;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1008, out _out1009, out _out1010, out _out1011);
                      _1817_recursiveGen = _out1008;
                      _1818_recOwned = _out1009;
                      _1819_recErased = _out1010;
                      _1820_recIdents = _out1011;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1818_recOwned;
                      isErased = _1819_recErased;
                      readIdents = _1820_recIdents;
                    }
                  } else if (_source61.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1821___mcc_h909 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1822_recursiveGen;
                      bool _1823_recOwned;
                      bool _1824_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1825_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1012;
                      bool _out1013;
                      bool _out1014;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                      _1822_recursiveGen = _out1012;
                      _1823_recOwned = _out1013;
                      _1824_recErased = _out1014;
                      _1825_recIdents = _out1015;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1823_recOwned;
                      isErased = _1824_recErased;
                      readIdents = _1825_recIdents;
                    }
                  } else {
                    DAST._IType _1826___mcc_h911 = _source61.dtor_Newtype_a0;
                    DAST._IType _1827_b = _1826___mcc_h911;
                    {
                      if (object.Equals(_800_fromTpe, _1827_b)) {
                        Dafny.ISequence<Dafny.Rune> _1828_recursiveGen;
                        bool _1829_recOwned;
                        bool _1830_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1831_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1016;
                        bool _out1017;
                        bool _out1018;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                        _1828_recursiveGen = _out1016;
                        _1829_recOwned = _out1017;
                        _1830_recErased = _out1018;
                        _1831_recIdents = _out1019;
                        Dafny.ISequence<Dafny.Rune> _1832_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1020;
                        _out1020 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                        _1832_rhsType = _out1020;
                        Dafny.ISequence<Dafny.Rune> _1833_uneraseFn;
                        _1833_uneraseFn = ((_1829_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1832_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1833_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1828_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1829_recOwned;
                        isErased = false;
                        readIdents = _1831_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1021;
                        bool _out1022;
                        bool _out1023;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1827_b), _1827_b, _799_toTpe), selfIdent, @params, mustOwn, out _out1021, out _out1022, out _out1023, out _out1024);
                        s = _out1021;
                        isOwned = _out1022;
                        isErased = _out1023;
                        readIdents = _out1024;
                      }
                    }
                  }
                } else if (_source60.is_Nullable) {
                  DAST._IType _1834___mcc_h913 = _source60.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1835_recursiveGen;
                    bool _1836_recOwned;
                    bool _1837_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1838_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1025;
                    bool _out1026;
                    bool _out1027;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027, out _out1028);
                    _1835_recursiveGen = _out1025;
                    _1836_recOwned = _out1026;
                    _1837_recErased = _out1027;
                    _1838_recIdents = _out1028;
                    if (!(_1836_recOwned)) {
                      _1835_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1835_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1835_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1837_recErased;
                    readIdents = _1838_recIdents;
                  }
                } else if (_source60.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1839___mcc_h915 = _source60.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1840_recursiveGen;
                    bool _1841_recOwned;
                    bool _1842_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1843_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1029;
                    bool _out1030;
                    bool _out1031;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1029, out _out1030, out _out1031, out _out1032);
                    _1840_recursiveGen = _out1029;
                    _1841_recOwned = _out1030;
                    _1842_recErased = _out1031;
                    _1843_recIdents = _out1032;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1840_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1841_recOwned;
                    isErased = _1842_recErased;
                    readIdents = _1843_recIdents;
                  }
                } else if (_source60.is_Array) {
                  DAST._IType _1844___mcc_h917 = _source60.dtor_element;
                  BigInteger _1845___mcc_h918 = _source60.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1846_recursiveGen;
                    bool _1847_recOwned;
                    bool _1848_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1849_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1033;
                    bool _out1034;
                    bool _out1035;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                    _1846_recursiveGen = _out1033;
                    _1847_recOwned = _out1034;
                    _1848_recErased = _out1035;
                    _1849_recIdents = _out1036;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1846_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1847_recOwned;
                    isErased = _1848_recErased;
                    readIdents = _1849_recIdents;
                  }
                } else if (_source60.is_Seq) {
                  DAST._IType _1850___mcc_h921 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1851_recursiveGen;
                    bool _1852_recOwned;
                    bool _1853_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1854_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1037;
                    bool _out1038;
                    bool _out1039;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                    _1851_recursiveGen = _out1037;
                    _1852_recOwned = _out1038;
                    _1853_recErased = _out1039;
                    _1854_recIdents = _out1040;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1851_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1852_recOwned;
                    isErased = _1853_recErased;
                    readIdents = _1854_recIdents;
                  }
                } else if (_source60.is_Set) {
                  DAST._IType _1855___mcc_h923 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1856_recursiveGen;
                    bool _1857_recOwned;
                    bool _1858_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1859_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1041;
                    bool _out1042;
                    bool _out1043;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1044;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1041, out _out1042, out _out1043, out _out1044);
                    _1856_recursiveGen = _out1041;
                    _1857_recOwned = _out1042;
                    _1858_recErased = _out1043;
                    _1859_recIdents = _out1044;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1856_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1857_recOwned;
                    isErased = _1858_recErased;
                    readIdents = _1859_recIdents;
                  }
                } else if (_source60.is_Multiset) {
                  DAST._IType _1860___mcc_h925 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1861_recursiveGen;
                    bool _1862_recOwned;
                    bool _1863_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1864_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1045;
                    bool _out1046;
                    bool _out1047;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1048;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1045, out _out1046, out _out1047, out _out1048);
                    _1861_recursiveGen = _out1045;
                    _1862_recOwned = _out1046;
                    _1863_recErased = _out1047;
                    _1864_recIdents = _out1048;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1861_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1862_recOwned;
                    isErased = _1863_recErased;
                    readIdents = _1864_recIdents;
                  }
                } else if (_source60.is_Map) {
                  DAST._IType _1865___mcc_h927 = _source60.dtor_key;
                  DAST._IType _1866___mcc_h928 = _source60.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1867_recursiveGen;
                    bool _1868_recOwned;
                    bool _1869_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1870_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1049;
                    bool _out1050;
                    bool _out1051;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1049, out _out1050, out _out1051, out _out1052);
                    _1867_recursiveGen = _out1049;
                    _1868_recOwned = _out1050;
                    _1869_recErased = _out1051;
                    _1870_recIdents = _out1052;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1867_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1868_recOwned;
                    isErased = _1869_recErased;
                    readIdents = _1870_recIdents;
                  }
                } else if (_source60.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1871___mcc_h931 = _source60.dtor_args;
                  DAST._IType _1872___mcc_h932 = _source60.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1873_recursiveGen;
                    bool _1874_recOwned;
                    bool _1875_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1876_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1053;
                    bool _out1054;
                    bool _out1055;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1053, out _out1054, out _out1055, out _out1056);
                    _1873_recursiveGen = _out1053;
                    _1874_recOwned = _out1054;
                    _1875_recErased = _out1055;
                    _1876_recIdents = _out1056;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1873_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1874_recOwned;
                    isErased = _1875_recErased;
                    readIdents = _1876_recIdents;
                  }
                } else if (_source60.is_Primitive) {
                  DAST._IPrimitive _1877___mcc_h935 = _source60.dtor_Primitive_a0;
                  DAST._IPrimitive _source62 = _1877___mcc_h935;
                  if (_source62.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1878_recursiveGen;
                      bool _1879___v48;
                      bool _1880___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1881_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1057;
                      bool _out1058;
                      bool _out1059;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, false, out _out1057, out _out1058, out _out1059, out _out1060);
                      _1878_recursiveGen = _out1057;
                      _1879___v48 = _out1058;
                      _1880___v49 = _out1059;
                      _1881_recIdents = _out1060;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _1878_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1881_recIdents;
                    }
                  } else if (_source62.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1882_recursiveGen;
                      bool _1883_recOwned;
                      bool _1884_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1885_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1061;
                      bool _out1062;
                      bool _out1063;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1061, out _out1062, out _out1063, out _out1064);
                      _1882_recursiveGen = _out1061;
                      _1883_recOwned = _out1062;
                      _1884_recErased = _out1063;
                      _1885_recIdents = _out1064;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1882_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1883_recOwned;
                      isErased = _1884_recErased;
                      readIdents = _1885_recIdents;
                    }
                  } else if (_source62.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1886_recursiveGen;
                      bool _1887_recOwned;
                      bool _1888_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1889_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1065;
                      bool _out1066;
                      bool _out1067;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1068;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1065, out _out1066, out _out1067, out _out1068);
                      _1886_recursiveGen = _out1065;
                      _1887_recOwned = _out1066;
                      _1888_recErased = _out1067;
                      _1889_recIdents = _out1068;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1886_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1887_recOwned;
                      isErased = _1888_recErased;
                      readIdents = _1889_recIdents;
                    }
                  } else if (_source62.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1890_recursiveGen;
                      bool _1891_recOwned;
                      bool _1892_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1893_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1069;
                      bool _out1070;
                      bool _out1071;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1069, out _out1070, out _out1071, out _out1072);
                      _1890_recursiveGen = _out1069;
                      _1891_recOwned = _out1070;
                      _1892_recErased = _out1071;
                      _1893_recIdents = _out1072;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1890_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1891_recOwned;
                      isErased = _1892_recErased;
                      readIdents = _1893_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1894_recursiveGen;
                      bool _1895_recOwned;
                      bool _1896_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1897_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1073;
                      bool _out1074;
                      bool _out1075;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1076;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075, out _out1076);
                      _1894_recursiveGen = _out1073;
                      _1895_recOwned = _out1074;
                      _1896_recErased = _out1075;
                      _1897_recIdents = _out1076;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1894_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1895_recOwned;
                      isErased = _1896_recErased;
                      readIdents = _1897_recIdents;
                    }
                  }
                } else if (_source60.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1898___mcc_h937 = _source60.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1899_recursiveGen;
                    bool _1900_recOwned;
                    bool _1901_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1902_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1077;
                    bool _out1078;
                    bool _out1079;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1077, out _out1078, out _out1079, out _out1080);
                    _1899_recursiveGen = _out1077;
                    _1900_recOwned = _out1078;
                    _1901_recErased = _out1079;
                    _1902_recIdents = _out1080;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1899_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1900_recOwned;
                    isErased = _1901_recErased;
                    readIdents = _1902_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1903___mcc_h939 = _source60.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1904_recursiveGen;
                    bool _1905_recOwned;
                    bool _1906_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1907_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1081;
                    bool _out1082;
                    bool _out1083;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1081, out _out1082, out _out1083, out _out1084);
                    _1904_recursiveGen = _out1081;
                    _1905_recOwned = _out1082;
                    _1906_recErased = _out1083;
                    _1907_recIdents = _out1084;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1904_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1905_recOwned;
                    isErased = _1906_recErased;
                    readIdents = _1907_recIdents;
                  }
                }
              } else if (_source56.is_String) {
                DAST._IType _source63 = _807___mcc_h306;
                if (_source63.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1908___mcc_h941 = _source63.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1909___mcc_h942 = _source63.dtor_typeArgs;
                  DAST._IResolvedType _1910___mcc_h943 = _source63.dtor_resolved;
                  DAST._IResolvedType _source64 = _1910___mcc_h943;
                  if (_source64.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1911___mcc_h947 = _source64.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1912_recursiveGen;
                      bool _1913_recOwned;
                      bool _1914_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1915_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1085;
                      bool _out1086;
                      bool _out1087;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1085, out _out1086, out _out1087, out _out1088);
                      _1912_recursiveGen = _out1085;
                      _1913_recOwned = _out1086;
                      _1914_recErased = _out1087;
                      _1915_recIdents = _out1088;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1912_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1913_recOwned;
                      isErased = _1914_recErased;
                      readIdents = _1915_recIdents;
                    }
                  } else if (_source64.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1916___mcc_h949 = _source64.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1917_recursiveGen;
                      bool _1918_recOwned;
                      bool _1919_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1920_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1089;
                      bool _out1090;
                      bool _out1091;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                      _1917_recursiveGen = _out1089;
                      _1918_recOwned = _out1090;
                      _1919_recErased = _out1091;
                      _1920_recIdents = _out1092;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1917_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1918_recOwned;
                      isErased = _1919_recErased;
                      readIdents = _1920_recIdents;
                    }
                  } else {
                    DAST._IType _1921___mcc_h951 = _source64.dtor_Newtype_a0;
                    DAST._IType _1922_b = _1921___mcc_h951;
                    {
                      if (object.Equals(_800_fromTpe, _1922_b)) {
                        Dafny.ISequence<Dafny.Rune> _1923_recursiveGen;
                        bool _1924_recOwned;
                        bool _1925_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1926_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1093;
                        bool _out1094;
                        bool _out1095;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                        _1923_recursiveGen = _out1093;
                        _1924_recOwned = _out1094;
                        _1925_recErased = _out1095;
                        _1926_recIdents = _out1096;
                        Dafny.ISequence<Dafny.Rune> _1927_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1097;
                        _out1097 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                        _1927_rhsType = _out1097;
                        Dafny.ISequence<Dafny.Rune> _1928_uneraseFn;
                        _1928_uneraseFn = ((_1924_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1927_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1928_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1923_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1924_recOwned;
                        isErased = false;
                        readIdents = _1926_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1098;
                        bool _out1099;
                        bool _out1100;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1101;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _1922_b), _1922_b, _799_toTpe), selfIdent, @params, mustOwn, out _out1098, out _out1099, out _out1100, out _out1101);
                        s = _out1098;
                        isOwned = _out1099;
                        isErased = _out1100;
                        readIdents = _out1101;
                      }
                    }
                  }
                } else if (_source63.is_Nullable) {
                  DAST._IType _1929___mcc_h953 = _source63.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1930_recursiveGen;
                    bool _1931_recOwned;
                    bool _1932_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1933_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1102;
                    bool _out1103;
                    bool _out1104;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1102, out _out1103, out _out1104, out _out1105);
                    _1930_recursiveGen = _out1102;
                    _1931_recOwned = _out1103;
                    _1932_recErased = _out1104;
                    _1933_recIdents = _out1105;
                    if (!(_1931_recOwned)) {
                      _1930_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1930_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1932_recErased;
                    readIdents = _1933_recIdents;
                  }
                } else if (_source63.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1934___mcc_h955 = _source63.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1935_recursiveGen;
                    bool _1936_recOwned;
                    bool _1937_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1938_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1106;
                    bool _out1107;
                    bool _out1108;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1109;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1106, out _out1107, out _out1108, out _out1109);
                    _1935_recursiveGen = _out1106;
                    _1936_recOwned = _out1107;
                    _1937_recErased = _out1108;
                    _1938_recIdents = _out1109;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1936_recOwned;
                    isErased = _1937_recErased;
                    readIdents = _1938_recIdents;
                  }
                } else if (_source63.is_Array) {
                  DAST._IType _1939___mcc_h957 = _source63.dtor_element;
                  BigInteger _1940___mcc_h958 = _source63.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1941_recursiveGen;
                    bool _1942_recOwned;
                    bool _1943_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1944_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1110;
                    bool _out1111;
                    bool _out1112;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1113;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1110, out _out1111, out _out1112, out _out1113);
                    _1941_recursiveGen = _out1110;
                    _1942_recOwned = _out1111;
                    _1943_recErased = _out1112;
                    _1944_recIdents = _out1113;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1941_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1942_recOwned;
                    isErased = _1943_recErased;
                    readIdents = _1944_recIdents;
                  }
                } else if (_source63.is_Seq) {
                  DAST._IType _1945___mcc_h961 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1946_recursiveGen;
                    bool _1947_recOwned;
                    bool _1948_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1949_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1114;
                    bool _out1115;
                    bool _out1116;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1114, out _out1115, out _out1116, out _out1117);
                    _1946_recursiveGen = _out1114;
                    _1947_recOwned = _out1115;
                    _1948_recErased = _out1116;
                    _1949_recIdents = _out1117;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1947_recOwned;
                    isErased = _1948_recErased;
                    readIdents = _1949_recIdents;
                  }
                } else if (_source63.is_Set) {
                  DAST._IType _1950___mcc_h963 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1951_recursiveGen;
                    bool _1952_recOwned;
                    bool _1953_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1954_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1118;
                    bool _out1119;
                    bool _out1120;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1118, out _out1119, out _out1120, out _out1121);
                    _1951_recursiveGen = _out1118;
                    _1952_recOwned = _out1119;
                    _1953_recErased = _out1120;
                    _1954_recIdents = _out1121;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1952_recOwned;
                    isErased = _1953_recErased;
                    readIdents = _1954_recIdents;
                  }
                } else if (_source63.is_Multiset) {
                  DAST._IType _1955___mcc_h965 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1956_recursiveGen;
                    bool _1957_recOwned;
                    bool _1958_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1959_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1122;
                    bool _out1123;
                    bool _out1124;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1125;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1122, out _out1123, out _out1124, out _out1125);
                    _1956_recursiveGen = _out1122;
                    _1957_recOwned = _out1123;
                    _1958_recErased = _out1124;
                    _1959_recIdents = _out1125;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1957_recOwned;
                    isErased = _1958_recErased;
                    readIdents = _1959_recIdents;
                  }
                } else if (_source63.is_Map) {
                  DAST._IType _1960___mcc_h967 = _source63.dtor_key;
                  DAST._IType _1961___mcc_h968 = _source63.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1962_recursiveGen;
                    bool _1963_recOwned;
                    bool _1964_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1965_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1126;
                    bool _out1127;
                    bool _out1128;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1126, out _out1127, out _out1128, out _out1129);
                    _1962_recursiveGen = _out1126;
                    _1963_recOwned = _out1127;
                    _1964_recErased = _out1128;
                    _1965_recIdents = _out1129;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1963_recOwned;
                    isErased = _1964_recErased;
                    readIdents = _1965_recIdents;
                  }
                } else if (_source63.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1966___mcc_h971 = _source63.dtor_args;
                  DAST._IType _1967___mcc_h972 = _source63.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1968_recursiveGen;
                    bool _1969_recOwned;
                    bool _1970_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1971_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1130;
                    bool _out1131;
                    bool _out1132;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1130, out _out1131, out _out1132, out _out1133);
                    _1968_recursiveGen = _out1130;
                    _1969_recOwned = _out1131;
                    _1970_recErased = _out1132;
                    _1971_recIdents = _out1133;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1969_recOwned;
                    isErased = _1970_recErased;
                    readIdents = _1971_recIdents;
                  }
                } else if (_source63.is_Primitive) {
                  DAST._IPrimitive _1972___mcc_h975 = _source63.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1973_recursiveGen;
                    bool _1974_recOwned;
                    bool _1975_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1976_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1134;
                    bool _out1135;
                    bool _out1136;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1134, out _out1135, out _out1136, out _out1137);
                    _1973_recursiveGen = _out1134;
                    _1974_recOwned = _out1135;
                    _1975_recErased = _out1136;
                    _1976_recIdents = _out1137;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1973_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1974_recOwned;
                    isErased = _1975_recErased;
                    readIdents = _1976_recIdents;
                  }
                } else if (_source63.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1977___mcc_h977 = _source63.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1978_recursiveGen;
                    bool _1979_recOwned;
                    bool _1980_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1981_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1138;
                    bool _out1139;
                    bool _out1140;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1138, out _out1139, out _out1140, out _out1141);
                    _1978_recursiveGen = _out1138;
                    _1979_recOwned = _out1139;
                    _1980_recErased = _out1140;
                    _1981_recIdents = _out1141;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1979_recOwned;
                    isErased = _1980_recErased;
                    readIdents = _1981_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1982___mcc_h979 = _source63.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1983_recursiveGen;
                    bool _1984_recOwned;
                    bool _1985_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1986_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1142;
                    bool _out1143;
                    bool _out1144;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1142, out _out1143, out _out1144, out _out1145);
                    _1983_recursiveGen = _out1142;
                    _1984_recOwned = _out1143;
                    _1985_recErased = _out1144;
                    _1986_recIdents = _out1145;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1983_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1984_recOwned;
                    isErased = _1985_recErased;
                    readIdents = _1986_recIdents;
                  }
                }
              } else if (_source56.is_Bool) {
                DAST._IType _source65 = _807___mcc_h306;
                if (_source65.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1987___mcc_h981 = _source65.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1988___mcc_h982 = _source65.dtor_typeArgs;
                  DAST._IResolvedType _1989___mcc_h983 = _source65.dtor_resolved;
                  DAST._IResolvedType _source66 = _1989___mcc_h983;
                  if (_source66.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1990___mcc_h987 = _source66.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1991_recursiveGen;
                      bool _1992_recOwned;
                      bool _1993_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1994_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1146;
                      bool _out1147;
                      bool _out1148;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1146, out _out1147, out _out1148, out _out1149);
                      _1991_recursiveGen = _out1146;
                      _1992_recOwned = _out1147;
                      _1993_recErased = _out1148;
                      _1994_recIdents = _out1149;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1991_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1992_recOwned;
                      isErased = _1993_recErased;
                      readIdents = _1994_recIdents;
                    }
                  } else if (_source66.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1995___mcc_h989 = _source66.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1996_recursiveGen;
                      bool _1997_recOwned;
                      bool _1998_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1999_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1150;
                      bool _out1151;
                      bool _out1152;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                      _1996_recursiveGen = _out1150;
                      _1997_recOwned = _out1151;
                      _1998_recErased = _out1152;
                      _1999_recIdents = _out1153;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1996_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1997_recOwned;
                      isErased = _1998_recErased;
                      readIdents = _1999_recIdents;
                    }
                  } else {
                    DAST._IType _2000___mcc_h991 = _source66.dtor_Newtype_a0;
                    DAST._IType _2001_b = _2000___mcc_h991;
                    {
                      if (object.Equals(_800_fromTpe, _2001_b)) {
                        Dafny.ISequence<Dafny.Rune> _2002_recursiveGen;
                        bool _2003_recOwned;
                        bool _2004_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2005_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1154;
                        bool _out1155;
                        bool _out1156;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                        _2002_recursiveGen = _out1154;
                        _2003_recOwned = _out1155;
                        _2004_recErased = _out1156;
                        _2005_recIdents = _out1157;
                        Dafny.ISequence<Dafny.Rune> _2006_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1158;
                        _out1158 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                        _2006_rhsType = _out1158;
                        Dafny.ISequence<Dafny.Rune> _2007_uneraseFn;
                        _2007_uneraseFn = ((_2003_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2006_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2007_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2002_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2003_recOwned;
                        isErased = false;
                        readIdents = _2005_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1159;
                        bool _out1160;
                        bool _out1161;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1162;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _2001_b), _2001_b, _799_toTpe), selfIdent, @params, mustOwn, out _out1159, out _out1160, out _out1161, out _out1162);
                        s = _out1159;
                        isOwned = _out1160;
                        isErased = _out1161;
                        readIdents = _out1162;
                      }
                    }
                  }
                } else if (_source65.is_Nullable) {
                  DAST._IType _2008___mcc_h993 = _source65.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2009_recursiveGen;
                    bool _2010_recOwned;
                    bool _2011_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2012_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1163;
                    bool _out1164;
                    bool _out1165;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1163, out _out1164, out _out1165, out _out1166);
                    _2009_recursiveGen = _out1163;
                    _2010_recOwned = _out1164;
                    _2011_recErased = _out1165;
                    _2012_recIdents = _out1166;
                    if (!(_2010_recOwned)) {
                      _2009_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2009_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2009_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2011_recErased;
                    readIdents = _2012_recIdents;
                  }
                } else if (_source65.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2013___mcc_h995 = _source65.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2014_recursiveGen;
                    bool _2015_recOwned;
                    bool _2016_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2017_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1167;
                    bool _out1168;
                    bool _out1169;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1167, out _out1168, out _out1169, out _out1170);
                    _2014_recursiveGen = _out1167;
                    _2015_recOwned = _out1168;
                    _2016_recErased = _out1169;
                    _2017_recIdents = _out1170;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2014_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2015_recOwned;
                    isErased = _2016_recErased;
                    readIdents = _2017_recIdents;
                  }
                } else if (_source65.is_Array) {
                  DAST._IType _2018___mcc_h997 = _source65.dtor_element;
                  BigInteger _2019___mcc_h998 = _source65.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2020_recursiveGen;
                    bool _2021_recOwned;
                    bool _2022_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2023_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1171;
                    bool _out1172;
                    bool _out1173;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1174;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1171, out _out1172, out _out1173, out _out1174);
                    _2020_recursiveGen = _out1171;
                    _2021_recOwned = _out1172;
                    _2022_recErased = _out1173;
                    _2023_recIdents = _out1174;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2020_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2021_recOwned;
                    isErased = _2022_recErased;
                    readIdents = _2023_recIdents;
                  }
                } else if (_source65.is_Seq) {
                  DAST._IType _2024___mcc_h1001 = _source65.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2025_recursiveGen;
                    bool _2026_recOwned;
                    bool _2027_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2028_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1175;
                    bool _out1176;
                    bool _out1177;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1175, out _out1176, out _out1177, out _out1178);
                    _2025_recursiveGen = _out1175;
                    _2026_recOwned = _out1176;
                    _2027_recErased = _out1177;
                    _2028_recIdents = _out1178;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2025_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2026_recOwned;
                    isErased = _2027_recErased;
                    readIdents = _2028_recIdents;
                  }
                } else if (_source65.is_Set) {
                  DAST._IType _2029___mcc_h1003 = _source65.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2030_recursiveGen;
                    bool _2031_recOwned;
                    bool _2032_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2033_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1179;
                    bool _out1180;
                    bool _out1181;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1179, out _out1180, out _out1181, out _out1182);
                    _2030_recursiveGen = _out1179;
                    _2031_recOwned = _out1180;
                    _2032_recErased = _out1181;
                    _2033_recIdents = _out1182;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2030_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2031_recOwned;
                    isErased = _2032_recErased;
                    readIdents = _2033_recIdents;
                  }
                } else if (_source65.is_Multiset) {
                  DAST._IType _2034___mcc_h1005 = _source65.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2035_recursiveGen;
                    bool _2036_recOwned;
                    bool _2037_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2038_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1183;
                    bool _out1184;
                    bool _out1185;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1183, out _out1184, out _out1185, out _out1186);
                    _2035_recursiveGen = _out1183;
                    _2036_recOwned = _out1184;
                    _2037_recErased = _out1185;
                    _2038_recIdents = _out1186;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2035_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2036_recOwned;
                    isErased = _2037_recErased;
                    readIdents = _2038_recIdents;
                  }
                } else if (_source65.is_Map) {
                  DAST._IType _2039___mcc_h1007 = _source65.dtor_key;
                  DAST._IType _2040___mcc_h1008 = _source65.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2041_recursiveGen;
                    bool _2042_recOwned;
                    bool _2043_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2044_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1187;
                    bool _out1188;
                    bool _out1189;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1187, out _out1188, out _out1189, out _out1190);
                    _2041_recursiveGen = _out1187;
                    _2042_recOwned = _out1188;
                    _2043_recErased = _out1189;
                    _2044_recIdents = _out1190;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2041_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2042_recOwned;
                    isErased = _2043_recErased;
                    readIdents = _2044_recIdents;
                  }
                } else if (_source65.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2045___mcc_h1011 = _source65.dtor_args;
                  DAST._IType _2046___mcc_h1012 = _source65.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2047_recursiveGen;
                    bool _2048_recOwned;
                    bool _2049_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2050_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1191;
                    bool _out1192;
                    bool _out1193;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1191, out _out1192, out _out1193, out _out1194);
                    _2047_recursiveGen = _out1191;
                    _2048_recOwned = _out1192;
                    _2049_recErased = _out1193;
                    _2050_recIdents = _out1194;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2047_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2048_recOwned;
                    isErased = _2049_recErased;
                    readIdents = _2050_recIdents;
                  }
                } else if (_source65.is_Primitive) {
                  DAST._IPrimitive _2051___mcc_h1015 = _source65.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2052_recursiveGen;
                    bool _2053_recOwned;
                    bool _2054_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2055_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1195;
                    bool _out1196;
                    bool _out1197;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1198;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1195, out _out1196, out _out1197, out _out1198);
                    _2052_recursiveGen = _out1195;
                    _2053_recOwned = _out1196;
                    _2054_recErased = _out1197;
                    _2055_recIdents = _out1198;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2052_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2053_recOwned;
                    isErased = _2054_recErased;
                    readIdents = _2055_recIdents;
                  }
                } else if (_source65.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2056___mcc_h1017 = _source65.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2057_recursiveGen;
                    bool _2058_recOwned;
                    bool _2059_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2060_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1199;
                    bool _out1200;
                    bool _out1201;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1199, out _out1200, out _out1201, out _out1202);
                    _2057_recursiveGen = _out1199;
                    _2058_recOwned = _out1200;
                    _2059_recErased = _out1201;
                    _2060_recIdents = _out1202;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2057_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2058_recOwned;
                    isErased = _2059_recErased;
                    readIdents = _2060_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2061___mcc_h1019 = _source65.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2062_recursiveGen;
                    bool _2063_recOwned;
                    bool _2064_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2065_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1203;
                    bool _out1204;
                    bool _out1205;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1203, out _out1204, out _out1205, out _out1206);
                    _2062_recursiveGen = _out1203;
                    _2063_recOwned = _out1204;
                    _2064_recErased = _out1205;
                    _2065_recIdents = _out1206;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2062_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2063_recOwned;
                    isErased = _2064_recErased;
                    readIdents = _2065_recIdents;
                  }
                }
              } else {
                DAST._IType _source67 = _807___mcc_h306;
                if (_source67.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2066___mcc_h1021 = _source67.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2067___mcc_h1022 = _source67.dtor_typeArgs;
                  DAST._IResolvedType _2068___mcc_h1023 = _source67.dtor_resolved;
                  DAST._IResolvedType _source68 = _2068___mcc_h1023;
                  if (_source68.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2069___mcc_h1027 = _source68.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2070_recursiveGen;
                      bool _2071_recOwned;
                      bool _2072_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2073_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1207;
                      bool _out1208;
                      bool _out1209;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1210;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1207, out _out1208, out _out1209, out _out1210);
                      _2070_recursiveGen = _out1207;
                      _2071_recOwned = _out1208;
                      _2072_recErased = _out1209;
                      _2073_recIdents = _out1210;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2071_recOwned;
                      isErased = _2072_recErased;
                      readIdents = _2073_recIdents;
                    }
                  } else if (_source68.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2074___mcc_h1029 = _source68.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2075_recursiveGen;
                      bool _2076_recOwned;
                      bool _2077_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2078_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1211;
                      bool _out1212;
                      bool _out1213;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                      _2075_recursiveGen = _out1211;
                      _2076_recOwned = _out1212;
                      _2077_recErased = _out1213;
                      _2078_recIdents = _out1214;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2076_recOwned;
                      isErased = _2077_recErased;
                      readIdents = _2078_recIdents;
                    }
                  } else {
                    DAST._IType _2079___mcc_h1031 = _source68.dtor_Newtype_a0;
                    DAST._IType _2080_b = _2079___mcc_h1031;
                    {
                      if (object.Equals(_800_fromTpe, _2080_b)) {
                        Dafny.ISequence<Dafny.Rune> _2081_recursiveGen;
                        bool _2082_recOwned;
                        bool _2083_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2084_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1215;
                        bool _out1216;
                        bool _out1217;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                        DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                        _2081_recursiveGen = _out1215;
                        _2082_recOwned = _out1216;
                        _2083_recErased = _out1217;
                        _2084_recIdents = _out1218;
                        Dafny.ISequence<Dafny.Rune> _2085_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1219;
                        _out1219 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                        _2085_rhsType = _out1219;
                        Dafny.ISequence<Dafny.Rune> _2086_uneraseFn;
                        _2086_uneraseFn = ((_2082_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2085_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2086_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2081_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2082_recOwned;
                        isErased = false;
                        readIdents = _2084_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1220;
                        bool _out1221;
                        bool _out1222;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1223;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _2080_b), _2080_b, _799_toTpe), selfIdent, @params, mustOwn, out _out1220, out _out1221, out _out1222, out _out1223);
                        s = _out1220;
                        isOwned = _out1221;
                        isErased = _out1222;
                        readIdents = _out1223;
                      }
                    }
                  }
                } else if (_source67.is_Nullable) {
                  DAST._IType _2087___mcc_h1033 = _source67.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2088_recursiveGen;
                    bool _2089_recOwned;
                    bool _2090_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2091_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1224;
                    bool _out1225;
                    bool _out1226;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1224, out _out1225, out _out1226, out _out1227);
                    _2088_recursiveGen = _out1224;
                    _2089_recOwned = _out1225;
                    _2090_recErased = _out1226;
                    _2091_recIdents = _out1227;
                    if (!(_2089_recOwned)) {
                      _2088_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2088_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2088_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2090_recErased;
                    readIdents = _2091_recIdents;
                  }
                } else if (_source67.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2092___mcc_h1035 = _source67.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2093_recursiveGen;
                    bool _2094_recOwned;
                    bool _2095_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2096_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1228;
                    bool _out1229;
                    bool _out1230;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1231;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1228, out _out1229, out _out1230, out _out1231);
                    _2093_recursiveGen = _out1228;
                    _2094_recOwned = _out1229;
                    _2095_recErased = _out1230;
                    _2096_recIdents = _out1231;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2093_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2094_recOwned;
                    isErased = _2095_recErased;
                    readIdents = _2096_recIdents;
                  }
                } else if (_source67.is_Array) {
                  DAST._IType _2097___mcc_h1037 = _source67.dtor_element;
                  BigInteger _2098___mcc_h1038 = _source67.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2099_recursiveGen;
                    bool _2100_recOwned;
                    bool _2101_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2102_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1232;
                    bool _out1233;
                    bool _out1234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1232, out _out1233, out _out1234, out _out1235);
                    _2099_recursiveGen = _out1232;
                    _2100_recOwned = _out1233;
                    _2101_recErased = _out1234;
                    _2102_recIdents = _out1235;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2100_recOwned;
                    isErased = _2101_recErased;
                    readIdents = _2102_recIdents;
                  }
                } else if (_source67.is_Seq) {
                  DAST._IType _2103___mcc_h1041 = _source67.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2104_recursiveGen;
                    bool _2105_recOwned;
                    bool _2106_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2107_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1236;
                    bool _out1237;
                    bool _out1238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1239;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1236, out _out1237, out _out1238, out _out1239);
                    _2104_recursiveGen = _out1236;
                    _2105_recOwned = _out1237;
                    _2106_recErased = _out1238;
                    _2107_recIdents = _out1239;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2104_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2105_recOwned;
                    isErased = _2106_recErased;
                    readIdents = _2107_recIdents;
                  }
                } else if (_source67.is_Set) {
                  DAST._IType _2108___mcc_h1043 = _source67.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2109_recursiveGen;
                    bool _2110_recOwned;
                    bool _2111_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2112_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1240;
                    bool _out1241;
                    bool _out1242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1243;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1240, out _out1241, out _out1242, out _out1243);
                    _2109_recursiveGen = _out1240;
                    _2110_recOwned = _out1241;
                    _2111_recErased = _out1242;
                    _2112_recIdents = _out1243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2109_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2110_recOwned;
                    isErased = _2111_recErased;
                    readIdents = _2112_recIdents;
                  }
                } else if (_source67.is_Multiset) {
                  DAST._IType _2113___mcc_h1045 = _source67.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2114_recursiveGen;
                    bool _2115_recOwned;
                    bool _2116_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2117_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1244;
                    bool _out1245;
                    bool _out1246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1244, out _out1245, out _out1246, out _out1247);
                    _2114_recursiveGen = _out1244;
                    _2115_recOwned = _out1245;
                    _2116_recErased = _out1246;
                    _2117_recIdents = _out1247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2114_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2115_recOwned;
                    isErased = _2116_recErased;
                    readIdents = _2117_recIdents;
                  }
                } else if (_source67.is_Map) {
                  DAST._IType _2118___mcc_h1047 = _source67.dtor_key;
                  DAST._IType _2119___mcc_h1048 = _source67.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2120_recursiveGen;
                    bool _2121_recOwned;
                    bool _2122_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2123_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1248;
                    bool _out1249;
                    bool _out1250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1248, out _out1249, out _out1250, out _out1251);
                    _2120_recursiveGen = _out1248;
                    _2121_recOwned = _out1249;
                    _2122_recErased = _out1250;
                    _2123_recIdents = _out1251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2120_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2121_recOwned;
                    isErased = _2122_recErased;
                    readIdents = _2123_recIdents;
                  }
                } else if (_source67.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2124___mcc_h1051 = _source67.dtor_args;
                  DAST._IType _2125___mcc_h1052 = _source67.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2126_recursiveGen;
                    bool _2127_recOwned;
                    bool _2128_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2129_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1252;
                    bool _out1253;
                    bool _out1254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                    _2126_recursiveGen = _out1252;
                    _2127_recOwned = _out1253;
                    _2128_recErased = _out1254;
                    _2129_recIdents = _out1255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2126_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2127_recOwned;
                    isErased = _2128_recErased;
                    readIdents = _2129_recIdents;
                  }
                } else if (_source67.is_Primitive) {
                  DAST._IPrimitive _2130___mcc_h1055 = _source67.dtor_Primitive_a0;
                  DAST._IPrimitive _source69 = _2130___mcc_h1055;
                  if (_source69.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2131_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1256;
                      _out1256 = DCOMP.COMP.GenType(_800_fromTpe, true, false);
                      _2131_rhsType = _out1256;
                      Dafny.ISequence<Dafny.Rune> _2132_recursiveGen;
                      bool _2133___v58;
                      bool _2134___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2135_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1257;
                      bool _out1258;
                      bool _out1259;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1260;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, true, out _out1257, out _out1258, out _out1259, out _out1260);
                      _2132_recursiveGen = _out1257;
                      _2133___v58 = _out1258;
                      _2134___v59 = _out1259;
                      _2135_recIdents = _out1260;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2132_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2135_recIdents;
                    }
                  } else if (_source69.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2136_recursiveGen;
                      bool _2137_recOwned;
                      bool _2138_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2139_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1261;
                      bool _out1262;
                      bool _out1263;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1264;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1261, out _out1262, out _out1263, out _out1264);
                      _2136_recursiveGen = _out1261;
                      _2137_recOwned = _out1262;
                      _2138_recErased = _out1263;
                      _2139_recIdents = _out1264;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2136_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2137_recOwned;
                      isErased = _2138_recErased;
                      readIdents = _2139_recIdents;
                    }
                  } else if (_source69.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2140_recursiveGen;
                      bool _2141_recOwned;
                      bool _2142_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2143_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1265;
                      bool _out1266;
                      bool _out1267;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1265, out _out1266, out _out1267, out _out1268);
                      _2140_recursiveGen = _out1265;
                      _2141_recOwned = _out1266;
                      _2142_recErased = _out1267;
                      _2143_recIdents = _out1268;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2140_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2141_recOwned;
                      isErased = _2142_recErased;
                      readIdents = _2143_recIdents;
                    }
                  } else if (_source69.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2144_recursiveGen;
                      bool _2145_recOwned;
                      bool _2146_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2147_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1269;
                      bool _out1270;
                      bool _out1271;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1269, out _out1270, out _out1271, out _out1272);
                      _2144_recursiveGen = _out1269;
                      _2145_recOwned = _out1270;
                      _2146_recErased = _out1271;
                      _2147_recIdents = _out1272;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2144_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2145_recOwned;
                      isErased = _2146_recErased;
                      readIdents = _2147_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2148_recursiveGen;
                      bool _2149_recOwned;
                      bool _2150_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2151_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1273;
                      bool _out1274;
                      bool _out1275;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1276;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1273, out _out1274, out _out1275, out _out1276);
                      _2148_recursiveGen = _out1273;
                      _2149_recOwned = _out1274;
                      _2150_recErased = _out1275;
                      _2151_recIdents = _out1276;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2149_recOwned;
                      isErased = _2150_recErased;
                      readIdents = _2151_recIdents;
                    }
                  }
                } else if (_source67.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2152___mcc_h1057 = _source67.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2153_recursiveGen;
                    bool _2154_recOwned;
                    bool _2155_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2156_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1277;
                    bool _out1278;
                    bool _out1279;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1277, out _out1278, out _out1279, out _out1280);
                    _2153_recursiveGen = _out1277;
                    _2154_recOwned = _out1278;
                    _2155_recErased = _out1279;
                    _2156_recIdents = _out1280;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2154_recOwned;
                    isErased = _2155_recErased;
                    readIdents = _2156_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2157___mcc_h1059 = _source67.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2158_recursiveGen;
                    bool _2159_recOwned;
                    bool _2160_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2161_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1281;
                    bool _out1282;
                    bool _out1283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1281, out _out1282, out _out1283, out _out1284);
                    _2158_recursiveGen = _out1281;
                    _2159_recOwned = _out1282;
                    _2160_recErased = _out1283;
                    _2161_recIdents = _out1284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2158_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2159_recOwned;
                    isErased = _2160_recErased;
                    readIdents = _2161_recIdents;
                  }
                }
              }
            } else if (_source32.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2162___mcc_h1061 = _source32.dtor_Passthrough_a0;
              DAST._IType _source70 = _807___mcc_h306;
              if (_source70.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2163___mcc_h1065 = _source70.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2164___mcc_h1066 = _source70.dtor_typeArgs;
                DAST._IResolvedType _2165___mcc_h1067 = _source70.dtor_resolved;
                DAST._IResolvedType _source71 = _2165___mcc_h1067;
                if (_source71.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2166___mcc_h1071 = _source71.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2167_recursiveGen;
                    bool _2168_recOwned;
                    bool _2169_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2170_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1285;
                    bool _out1286;
                    bool _out1287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1285, out _out1286, out _out1287, out _out1288);
                    _2167_recursiveGen = _out1285;
                    _2168_recOwned = _out1286;
                    _2169_recErased = _out1287;
                    _2170_recIdents = _out1288;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2167_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2168_recOwned;
                    isErased = _2169_recErased;
                    readIdents = _2170_recIdents;
                  }
                } else if (_source71.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2171___mcc_h1073 = _source71.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2172_recursiveGen;
                    bool _2173_recOwned;
                    bool _2174_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2175_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1289;
                    bool _out1290;
                    bool _out1291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                    _2172_recursiveGen = _out1289;
                    _2173_recOwned = _out1290;
                    _2174_recErased = _out1291;
                    _2175_recIdents = _out1292;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2172_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2173_recOwned;
                    isErased = _2174_recErased;
                    readIdents = _2175_recIdents;
                  }
                } else {
                  DAST._IType _2176___mcc_h1075 = _source71.dtor_Newtype_a0;
                  DAST._IType _2177_b = _2176___mcc_h1075;
                  {
                    if (object.Equals(_800_fromTpe, _2177_b)) {
                      Dafny.ISequence<Dafny.Rune> _2178_recursiveGen;
                      bool _2179_recOwned;
                      bool _2180_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2181_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1293;
                      bool _out1294;
                      bool _out1295;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                      _2178_recursiveGen = _out1293;
                      _2179_recOwned = _out1294;
                      _2180_recErased = _out1295;
                      _2181_recIdents = _out1296;
                      Dafny.ISequence<Dafny.Rune> _2182_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1297;
                      _out1297 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _2182_rhsType = _out1297;
                      Dafny.ISequence<Dafny.Rune> _2183_uneraseFn;
                      _2183_uneraseFn = ((_2179_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2182_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2183_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2178_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2179_recOwned;
                      isErased = false;
                      readIdents = _2181_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1298;
                      bool _out1299;
                      bool _out1300;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1301;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _2177_b), _2177_b, _799_toTpe), selfIdent, @params, mustOwn, out _out1298, out _out1299, out _out1300, out _out1301);
                      s = _out1298;
                      isOwned = _out1299;
                      isErased = _out1300;
                      readIdents = _out1301;
                    }
                  }
                }
              } else if (_source70.is_Nullable) {
                DAST._IType _2184___mcc_h1077 = _source70.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2185_recursiveGen;
                  bool _2186_recOwned;
                  bool _2187_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2188_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1302;
                  bool _out1303;
                  bool _out1304;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1302, out _out1303, out _out1304, out _out1305);
                  _2185_recursiveGen = _out1302;
                  _2186_recOwned = _out1303;
                  _2187_recErased = _out1304;
                  _2188_recIdents = _out1305;
                  if (!(_2186_recOwned)) {
                    _2185_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2185_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2185_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2187_recErased;
                  readIdents = _2188_recIdents;
                }
              } else if (_source70.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2189___mcc_h1079 = _source70.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2190_recursiveGen;
                  bool _2191_recOwned;
                  bool _2192_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2193_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1306;
                  bool _out1307;
                  bool _out1308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1309;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1306, out _out1307, out _out1308, out _out1309);
                  _2190_recursiveGen = _out1306;
                  _2191_recOwned = _out1307;
                  _2192_recErased = _out1308;
                  _2193_recIdents = _out1309;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2190_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2191_recOwned;
                  isErased = _2192_recErased;
                  readIdents = _2193_recIdents;
                }
              } else if (_source70.is_Array) {
                DAST._IType _2194___mcc_h1081 = _source70.dtor_element;
                BigInteger _2195___mcc_h1082 = _source70.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2196_recursiveGen;
                  bool _2197_recOwned;
                  bool _2198_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2199_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1310;
                  bool _out1311;
                  bool _out1312;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1310, out _out1311, out _out1312, out _out1313);
                  _2196_recursiveGen = _out1310;
                  _2197_recOwned = _out1311;
                  _2198_recErased = _out1312;
                  _2199_recIdents = _out1313;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2197_recOwned;
                  isErased = _2198_recErased;
                  readIdents = _2199_recIdents;
                }
              } else if (_source70.is_Seq) {
                DAST._IType _2200___mcc_h1085 = _source70.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2201_recursiveGen;
                  bool _2202_recOwned;
                  bool _2203_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2204_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1314;
                  bool _out1315;
                  bool _out1316;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1317;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1314, out _out1315, out _out1316, out _out1317);
                  _2201_recursiveGen = _out1314;
                  _2202_recOwned = _out1315;
                  _2203_recErased = _out1316;
                  _2204_recIdents = _out1317;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2201_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2202_recOwned;
                  isErased = _2203_recErased;
                  readIdents = _2204_recIdents;
                }
              } else if (_source70.is_Set) {
                DAST._IType _2205___mcc_h1087 = _source70.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2206_recursiveGen;
                  bool _2207_recOwned;
                  bool _2208_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2209_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1318;
                  bool _out1319;
                  bool _out1320;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1318, out _out1319, out _out1320, out _out1321);
                  _2206_recursiveGen = _out1318;
                  _2207_recOwned = _out1319;
                  _2208_recErased = _out1320;
                  _2209_recIdents = _out1321;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2206_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2207_recOwned;
                  isErased = _2208_recErased;
                  readIdents = _2209_recIdents;
                }
              } else if (_source70.is_Multiset) {
                DAST._IType _2210___mcc_h1089 = _source70.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2211_recursiveGen;
                  bool _2212_recOwned;
                  bool _2213_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2214_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1322;
                  bool _out1323;
                  bool _out1324;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1322, out _out1323, out _out1324, out _out1325);
                  _2211_recursiveGen = _out1322;
                  _2212_recOwned = _out1323;
                  _2213_recErased = _out1324;
                  _2214_recIdents = _out1325;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2211_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2212_recOwned;
                  isErased = _2213_recErased;
                  readIdents = _2214_recIdents;
                }
              } else if (_source70.is_Map) {
                DAST._IType _2215___mcc_h1091 = _source70.dtor_key;
                DAST._IType _2216___mcc_h1092 = _source70.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2217_recursiveGen;
                  bool _2218_recOwned;
                  bool _2219_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2220_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1326;
                  bool _out1327;
                  bool _out1328;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1326, out _out1327, out _out1328, out _out1329);
                  _2217_recursiveGen = _out1326;
                  _2218_recOwned = _out1327;
                  _2219_recErased = _out1328;
                  _2220_recIdents = _out1329;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2217_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2218_recOwned;
                  isErased = _2219_recErased;
                  readIdents = _2220_recIdents;
                }
              } else if (_source70.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2221___mcc_h1095 = _source70.dtor_args;
                DAST._IType _2222___mcc_h1096 = _source70.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2223_recursiveGen;
                  bool _2224_recOwned;
                  bool _2225_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2226_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1330;
                  bool _out1331;
                  bool _out1332;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                  _2223_recursiveGen = _out1330;
                  _2224_recOwned = _out1331;
                  _2225_recErased = _out1332;
                  _2226_recIdents = _out1333;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2223_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2224_recOwned;
                  isErased = _2225_recErased;
                  readIdents = _2226_recIdents;
                }
              } else if (_source70.is_Primitive) {
                DAST._IPrimitive _2227___mcc_h1099 = _source70.dtor_Primitive_a0;
                DAST._IPrimitive _source72 = _2227___mcc_h1099;
                if (_source72.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2228_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1334;
                    _out1334 = DCOMP.COMP.GenType(_800_fromTpe, true, false);
                    _2228_rhsType = _out1334;
                    Dafny.ISequence<Dafny.Rune> _2229_recursiveGen;
                    bool _2230___v54;
                    bool _2231___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2232_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1335;
                    bool _out1336;
                    bool _out1337;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, true, out _out1335, out _out1336, out _out1337, out _out1338);
                    _2229_recursiveGen = _out1335;
                    _2230___v54 = _out1336;
                    _2231___v55 = _out1337;
                    _2232_recIdents = _out1338;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2229_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2232_recIdents;
                  }
                } else if (_source72.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2233_recursiveGen;
                    bool _2234_recOwned;
                    bool _2235_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2236_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1339;
                    bool _out1340;
                    bool _out1341;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1342;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1339, out _out1340, out _out1341, out _out1342);
                    _2233_recursiveGen = _out1339;
                    _2234_recOwned = _out1340;
                    _2235_recErased = _out1341;
                    _2236_recIdents = _out1342;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2233_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2234_recOwned;
                    isErased = _2235_recErased;
                    readIdents = _2236_recIdents;
                  }
                } else if (_source72.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2237_recursiveGen;
                    bool _2238_recOwned;
                    bool _2239_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2240_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1343;
                    bool _out1344;
                    bool _out1345;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1343, out _out1344, out _out1345, out _out1346);
                    _2237_recursiveGen = _out1343;
                    _2238_recOwned = _out1344;
                    _2239_recErased = _out1345;
                    _2240_recIdents = _out1346;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2237_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2238_recOwned;
                    isErased = _2239_recErased;
                    readIdents = _2240_recIdents;
                  }
                } else if (_source72.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2241_recursiveGen;
                    bool _2242_recOwned;
                    bool _2243_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2244_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1347;
                    bool _out1348;
                    bool _out1349;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1347, out _out1348, out _out1349, out _out1350);
                    _2241_recursiveGen = _out1347;
                    _2242_recOwned = _out1348;
                    _2243_recErased = _out1349;
                    _2244_recIdents = _out1350;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2242_recOwned;
                    isErased = _2243_recErased;
                    readIdents = _2244_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2245_recursiveGen;
                    bool _2246_recOwned;
                    bool _2247_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2248_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1351;
                    bool _out1352;
                    bool _out1353;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                    _2245_recursiveGen = _out1351;
                    _2246_recOwned = _out1352;
                    _2247_recErased = _out1353;
                    _2248_recIdents = _out1354;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2245_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2246_recOwned;
                    isErased = _2247_recErased;
                    readIdents = _2248_recIdents;
                  }
                }
              } else if (_source70.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2249___mcc_h1101 = _source70.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2250_recursiveGen;
                  bool _2251___v62;
                  bool _2252___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2253_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1355;
                  bool _out1356;
                  bool _out1357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, true, out _out1355, out _out1356, out _out1357, out _out1358);
                  _2250_recursiveGen = _out1355;
                  _2251___v62 = _out1356;
                  _2252___v63 = _out1357;
                  _2253_recIdents = _out1358;
                  Dafny.ISequence<Dafny.Rune> _2254_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1359;
                  _out1359 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                  _2254_toTpeGen = _out1359;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2250_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2254_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2253_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2255___mcc_h1103 = _source70.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2256_recursiveGen;
                  bool _2257_recOwned;
                  bool _2258_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2259_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1360;
                  bool _out1361;
                  bool _out1362;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1360, out _out1361, out _out1362, out _out1363);
                  _2256_recursiveGen = _out1360;
                  _2257_recOwned = _out1361;
                  _2258_recErased = _out1362;
                  _2259_recIdents = _out1363;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2257_recOwned;
                  isErased = _2258_recErased;
                  readIdents = _2259_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2260___mcc_h1105 = _source32.dtor_TypeArg_a0;
              DAST._IType _source73 = _807___mcc_h306;
              if (_source73.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2261___mcc_h1109 = _source73.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2262___mcc_h1110 = _source73.dtor_typeArgs;
                DAST._IResolvedType _2263___mcc_h1111 = _source73.dtor_resolved;
                DAST._IResolvedType _source74 = _2263___mcc_h1111;
                if (_source74.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2264___mcc_h1115 = _source74.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2265_recursiveGen;
                    bool _2266_recOwned;
                    bool _2267_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2268_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1364;
                    bool _out1365;
                    bool _out1366;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1367;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1364, out _out1365, out _out1366, out _out1367);
                    _2265_recursiveGen = _out1364;
                    _2266_recOwned = _out1365;
                    _2267_recErased = _out1366;
                    _2268_recIdents = _out1367;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2266_recOwned;
                    isErased = _2267_recErased;
                    readIdents = _2268_recIdents;
                  }
                } else if (_source74.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2269___mcc_h1117 = _source74.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2270_recursiveGen;
                    bool _2271_recOwned;
                    bool _2272_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2273_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1368;
                    bool _out1369;
                    bool _out1370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                    DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                    _2270_recursiveGen = _out1368;
                    _2271_recOwned = _out1369;
                    _2272_recErased = _out1370;
                    _2273_recIdents = _out1371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2270_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2271_recOwned;
                    isErased = _2272_recErased;
                    readIdents = _2273_recIdents;
                  }
                } else {
                  DAST._IType _2274___mcc_h1119 = _source74.dtor_Newtype_a0;
                  DAST._IType _2275_b = _2274___mcc_h1119;
                  {
                    if (object.Equals(_800_fromTpe, _2275_b)) {
                      Dafny.ISequence<Dafny.Rune> _2276_recursiveGen;
                      bool _2277_recOwned;
                      bool _2278_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2279_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1372;
                      bool _out1373;
                      bool _out1374;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                      DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                      _2276_recursiveGen = _out1372;
                      _2277_recOwned = _out1373;
                      _2278_recErased = _out1374;
                      _2279_recIdents = _out1375;
                      Dafny.ISequence<Dafny.Rune> _2280_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1376;
                      _out1376 = DCOMP.COMP.GenType(_799_toTpe, true, false);
                      _2280_rhsType = _out1376;
                      Dafny.ISequence<Dafny.Rune> _2281_uneraseFn;
                      _2281_uneraseFn = ((_2277_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2280_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2281_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2276_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2277_recOwned;
                      isErased = false;
                      readIdents = _2279_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1377;
                      bool _out1378;
                      bool _out1379;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1380;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_801_expr, _800_fromTpe, _2275_b), _2275_b, _799_toTpe), selfIdent, @params, mustOwn, out _out1377, out _out1378, out _out1379, out _out1380);
                      s = _out1377;
                      isOwned = _out1378;
                      isErased = _out1379;
                      readIdents = _out1380;
                    }
                  }
                }
              } else if (_source73.is_Nullable) {
                DAST._IType _2282___mcc_h1121 = _source73.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2283_recursiveGen;
                  bool _2284_recOwned;
                  bool _2285_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2286_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1381;
                  bool _out1382;
                  bool _out1383;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1381, out _out1382, out _out1383, out _out1384);
                  _2283_recursiveGen = _out1381;
                  _2284_recOwned = _out1382;
                  _2285_recErased = _out1383;
                  _2286_recIdents = _out1384;
                  if (!(_2284_recOwned)) {
                    _2283_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2283_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2285_recErased;
                  readIdents = _2286_recIdents;
                }
              } else if (_source73.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2287___mcc_h1123 = _source73.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2288_recursiveGen;
                  bool _2289_recOwned;
                  bool _2290_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2291_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1385;
                  bool _out1386;
                  bool _out1387;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1385, out _out1386, out _out1387, out _out1388);
                  _2288_recursiveGen = _out1385;
                  _2289_recOwned = _out1386;
                  _2290_recErased = _out1387;
                  _2291_recIdents = _out1388;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2289_recOwned;
                  isErased = _2290_recErased;
                  readIdents = _2291_recIdents;
                }
              } else if (_source73.is_Array) {
                DAST._IType _2292___mcc_h1125 = _source73.dtor_element;
                BigInteger _2293___mcc_h1126 = _source73.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2294_recursiveGen;
                  bool _2295_recOwned;
                  bool _2296_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2297_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1389;
                  bool _out1390;
                  bool _out1391;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1392;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1389, out _out1390, out _out1391, out _out1392);
                  _2294_recursiveGen = _out1389;
                  _2295_recOwned = _out1390;
                  _2296_recErased = _out1391;
                  _2297_recIdents = _out1392;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2295_recOwned;
                  isErased = _2296_recErased;
                  readIdents = _2297_recIdents;
                }
              } else if (_source73.is_Seq) {
                DAST._IType _2298___mcc_h1129 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2299_recursiveGen;
                  bool _2300_recOwned;
                  bool _2301_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2302_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1393;
                  bool _out1394;
                  bool _out1395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1396;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1393, out _out1394, out _out1395, out _out1396);
                  _2299_recursiveGen = _out1393;
                  _2300_recOwned = _out1394;
                  _2301_recErased = _out1395;
                  _2302_recIdents = _out1396;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2299_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2300_recOwned;
                  isErased = _2301_recErased;
                  readIdents = _2302_recIdents;
                }
              } else if (_source73.is_Set) {
                DAST._IType _2303___mcc_h1131 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2304_recursiveGen;
                  bool _2305_recOwned;
                  bool _2306_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2307_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1397;
                  bool _out1398;
                  bool _out1399;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1400;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1397, out _out1398, out _out1399, out _out1400);
                  _2304_recursiveGen = _out1397;
                  _2305_recOwned = _out1398;
                  _2306_recErased = _out1399;
                  _2307_recIdents = _out1400;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2305_recOwned;
                  isErased = _2306_recErased;
                  readIdents = _2307_recIdents;
                }
              } else if (_source73.is_Multiset) {
                DAST._IType _2308___mcc_h1133 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2309_recursiveGen;
                  bool _2310_recOwned;
                  bool _2311_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2312_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1401;
                  bool _out1402;
                  bool _out1403;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1401, out _out1402, out _out1403, out _out1404);
                  _2309_recursiveGen = _out1401;
                  _2310_recOwned = _out1402;
                  _2311_recErased = _out1403;
                  _2312_recIdents = _out1404;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2309_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2310_recOwned;
                  isErased = _2311_recErased;
                  readIdents = _2312_recIdents;
                }
              } else if (_source73.is_Map) {
                DAST._IType _2313___mcc_h1135 = _source73.dtor_key;
                DAST._IType _2314___mcc_h1136 = _source73.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2315_recursiveGen;
                  bool _2316_recOwned;
                  bool _2317_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2318_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1405;
                  bool _out1406;
                  bool _out1407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1405, out _out1406, out _out1407, out _out1408);
                  _2315_recursiveGen = _out1405;
                  _2316_recOwned = _out1406;
                  _2317_recErased = _out1407;
                  _2318_recIdents = _out1408;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2315_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2316_recOwned;
                  isErased = _2317_recErased;
                  readIdents = _2318_recIdents;
                }
              } else if (_source73.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2319___mcc_h1139 = _source73.dtor_args;
                DAST._IType _2320___mcc_h1140 = _source73.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2321_recursiveGen;
                  bool _2322_recOwned;
                  bool _2323_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2324_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1409;
                  bool _out1410;
                  bool _out1411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1409, out _out1410, out _out1411, out _out1412);
                  _2321_recursiveGen = _out1409;
                  _2322_recOwned = _out1410;
                  _2323_recErased = _out1411;
                  _2324_recIdents = _out1412;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2321_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2322_recOwned;
                  isErased = _2323_recErased;
                  readIdents = _2324_recIdents;
                }
              } else if (_source73.is_Primitive) {
                DAST._IPrimitive _2325___mcc_h1143 = _source73.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2326_recursiveGen;
                  bool _2327_recOwned;
                  bool _2328_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2329_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1413;
                  bool _out1414;
                  bool _out1415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1413, out _out1414, out _out1415, out _out1416);
                  _2326_recursiveGen = _out1413;
                  _2327_recOwned = _out1414;
                  _2328_recErased = _out1415;
                  _2329_recIdents = _out1416;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2326_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2327_recOwned;
                  isErased = _2328_recErased;
                  readIdents = _2329_recIdents;
                }
              } else if (_source73.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2330___mcc_h1145 = _source73.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2331_recursiveGen;
                  bool _2332_recOwned;
                  bool _2333_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2334_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1417;
                  bool _out1418;
                  bool _out1419;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1420;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1417, out _out1418, out _out1419, out _out1420);
                  _2331_recursiveGen = _out1417;
                  _2332_recOwned = _out1418;
                  _2333_recErased = _out1419;
                  _2334_recIdents = _out1420;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2331_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2332_recOwned;
                  isErased = _2333_recErased;
                  readIdents = _2334_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2335___mcc_h1147 = _source73.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2336_recursiveGen;
                  bool _2337_recOwned;
                  bool _2338_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2339_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1421;
                  bool _out1422;
                  bool _out1423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                  DCOMP.COMP.GenExpr(_801_expr, selfIdent, @params, mustOwn, out _out1421, out _out1422, out _out1423, out _out1424);
                  _2336_recursiveGen = _out1421;
                  _2337_recOwned = _out1422;
                  _2338_recErased = _out1423;
                  _2339_recIdents = _out1424;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2336_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2337_recOwned;
                  isErased = _2338_recErased;
                  readIdents = _2339_recIdents;
                }
              }
            }
          }
        }
      } else if (_source25.is_SeqConstruct) {
        DAST._IExpression _2340___mcc_h26 = _source25.dtor_length;
        DAST._IExpression _2341___mcc_h27 = _source25.dtor_elem;
        DAST._IExpression _2342_expr = _2341___mcc_h27;
        DAST._IExpression _2343_length = _2340___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2344_recursiveGen;
          bool _2345___v65;
          bool _2346_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2347_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1425;
          bool _out1426;
          bool _out1427;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
          DCOMP.COMP.GenExpr(_2342_expr, selfIdent, @params, true, out _out1425, out _out1426, out _out1427, out _out1428);
          _2344_recursiveGen = _out1425;
          _2345___v65 = _out1426;
          _2346_eErased = _out1427;
          _2347_recIdents = _out1428;
          Dafny.ISequence<Dafny.Rune> _2348_lengthGen;
          bool _2349___v66;
          bool _2350_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2351_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1429;
          bool _out1430;
          bool _out1431;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
          DCOMP.COMP.GenExpr(_2343_length, selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
          _2348_lengthGen = _out1429;
          _2349___v66 = _out1430;
          _2350_lengthErased = _out1431;
          _2351_lengthIdents = _out1432;
          if (!(_2350_lengthErased)) {
            _2348_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2348_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2344_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2348_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2347_recIdents, _2351_lengthIdents);
          isOwned = true;
          isErased = _2346_eErased;
        }
      } else if (_source25.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2352___mcc_h28 = _source25.dtor_elements;
        DAST._IType _2353___mcc_h29 = _source25.dtor_typ;
        DAST._IType _2354_typ = _2353___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2355_exprs = _2352___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2356_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1433;
          _out1433 = DCOMP.COMP.GenType(_2354_typ, false, false);
          _2356_genTpe = _out1433;
          BigInteger _2357_i;
          _2357_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2357_i = BigInteger.Zero;
          while ((_2357_i) < (new BigInteger((_2355_exprs).Count))) {
            if ((_2357_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2358_recursiveGen;
            bool _2359___v67;
            bool _2360_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2361_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1434;
            bool _out1435;
            bool _out1436;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1437;
            DCOMP.COMP.GenExpr((_2355_exprs).Select(_2357_i), selfIdent, @params, true, out _out1434, out _out1435, out _out1436, out _out1437);
            _2358_recursiveGen = _out1434;
            _2359___v67 = _out1435;
            _2360_isErased = _out1436;
            _2361_recIdents = _out1437;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2361_recIdents);
            if (_2360_isErased) {
              _2358_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2358_recursiveGen);
            _2357_i = (_2357_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2356_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source25.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2362___mcc_h30 = _source25.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2363_exprs = _2362___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2364_generatedValues;
          _2364_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2365_i;
          _2365_i = BigInteger.Zero;
          bool _2366_allErased;
          _2366_allErased = true;
          while ((_2365_i) < (new BigInteger((_2363_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2367_recursiveGen;
            bool _2368___v68;
            bool _2369_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2370_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1438;
            bool _out1439;
            bool _out1440;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1441;
            DCOMP.COMP.GenExpr((_2363_exprs).Select(_2365_i), selfIdent, @params, true, out _out1438, out _out1439, out _out1440, out _out1441);
            _2367_recursiveGen = _out1438;
            _2368___v68 = _out1439;
            _2369_isErased = _out1440;
            _2370_recIdents = _out1441;
            _2366_allErased = (_2366_allErased) && (_2369_isErased);
            _2364_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2364_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2367_recursiveGen, _2369_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2370_recIdents);
            _2365_i = (_2365_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2365_i = BigInteger.Zero;
          while ((_2365_i) < (new BigInteger((_2364_generatedValues).Count))) {
            if ((_2365_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2371_gen;
            _2371_gen = ((_2364_generatedValues).Select(_2365_i)).dtor__0;
            if ((((_2364_generatedValues).Select(_2365_i)).dtor__1) && (!(_2366_allErased))) {
              _2371_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2371_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2371_gen);
            _2365_i = (_2365_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2366_allErased;
        }
      } else if (_source25.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2372___mcc_h31 = _source25.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2373_mapElems = _2372___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2374_generatedValues;
          _2374_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2375_i;
          _2375_i = BigInteger.Zero;
          bool _2376_allErased;
          _2376_allErased = true;
          while ((_2375_i) < (new BigInteger((_2373_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2377_recursiveGenKey;
            bool _2378___v69;
            bool _2379_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2380_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1442;
            bool _out1443;
            bool _out1444;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
            DCOMP.COMP.GenExpr(((_2373_mapElems).Select(_2375_i)).dtor__0, selfIdent, @params, true, out _out1442, out _out1443, out _out1444, out _out1445);
            _2377_recursiveGenKey = _out1442;
            _2378___v69 = _out1443;
            _2379_isErasedKey = _out1444;
            _2380_recIdentsKey = _out1445;
            Dafny.ISequence<Dafny.Rune> _2381_recursiveGenValue;
            bool _2382___v70;
            bool _2383_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2384_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1446;
            bool _out1447;
            bool _out1448;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
            DCOMP.COMP.GenExpr(((_2373_mapElems).Select(_2375_i)).dtor__1, selfIdent, @params, true, out _out1446, out _out1447, out _out1448, out _out1449);
            _2381_recursiveGenValue = _out1446;
            _2382___v70 = _out1447;
            _2383_isErasedValue = _out1448;
            _2384_recIdentsValue = _out1449;
            _2376_allErased = ((_2376_allErased) && (_2379_isErasedKey)) && (_2383_isErasedValue);
            _2374_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2374_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2377_recursiveGenKey, _2381_recursiveGenValue, _2379_isErasedKey, _2383_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2380_recIdentsKey), _2384_recIdentsValue);
            _2375_i = (_2375_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2375_i = BigInteger.Zero;
          while ((_2375_i) < (new BigInteger((_2374_generatedValues).Count))) {
            if ((_2375_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2385_genKey;
            _2385_genKey = ((_2374_generatedValues).Select(_2375_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2386_genValue;
            _2386_genValue = ((_2374_generatedValues).Select(_2375_i)).dtor__1;
            if ((((_2374_generatedValues).Select(_2375_i)).dtor__2) && (!(_2376_allErased))) {
              _2385_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2385_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2374_generatedValues).Select(_2375_i)).dtor__3) && (!(_2376_allErased))) {
              _2386_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2386_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2385_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2386_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2375_i = (_2375_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2376_allErased;
        }
      } else if (_source25.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source75 = selfIdent;
          if (_source75.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2387___mcc_h1149 = _source75.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2388_id = _2387___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2388_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2388_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2388_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2388_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source25.is_Ite) {
        DAST._IExpression _2389___mcc_h32 = _source25.dtor_cond;
        DAST._IExpression _2390___mcc_h33 = _source25.dtor_thn;
        DAST._IExpression _2391___mcc_h34 = _source25.dtor_els;
        DAST._IExpression _2392_f = _2391___mcc_h34;
        DAST._IExpression _2393_t = _2390___mcc_h33;
        DAST._IExpression _2394_cond = _2389___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2395_condString;
          bool _2396___v71;
          bool _2397_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2398_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1450;
          bool _out1451;
          bool _out1452;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1453;
          DCOMP.COMP.GenExpr(_2394_cond, selfIdent, @params, true, out _out1450, out _out1451, out _out1452, out _out1453);
          _2395_condString = _out1450;
          _2396___v71 = _out1451;
          _2397_condErased = _out1452;
          _2398_recIdentsCond = _out1453;
          if (!(_2397_condErased)) {
            _2395_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2395_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2399___v72;
          bool _2400_tHasToBeOwned;
          bool _2401___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2402___v74;
          Dafny.ISequence<Dafny.Rune> _out1454;
          bool _out1455;
          bool _out1456;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
          DCOMP.COMP.GenExpr(_2393_t, selfIdent, @params, mustOwn, out _out1454, out _out1455, out _out1456, out _out1457);
          _2399___v72 = _out1454;
          _2400_tHasToBeOwned = _out1455;
          _2401___v73 = _out1456;
          _2402___v74 = _out1457;
          Dafny.ISequence<Dafny.Rune> _2403_fString;
          bool _2404_fOwned;
          bool _2405_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2406_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1458;
          bool _out1459;
          bool _out1460;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
          DCOMP.COMP.GenExpr(_2392_f, selfIdent, @params, _2400_tHasToBeOwned, out _out1458, out _out1459, out _out1460, out _out1461);
          _2403_fString = _out1458;
          _2404_fOwned = _out1459;
          _2405_fErased = _out1460;
          _2406_recIdentsF = _out1461;
          Dafny.ISequence<Dafny.Rune> _2407_tString;
          bool _2408___v75;
          bool _2409_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2410_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1462;
          bool _out1463;
          bool _out1464;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1465;
          DCOMP.COMP.GenExpr(_2393_t, selfIdent, @params, _2404_fOwned, out _out1462, out _out1463, out _out1464, out _out1465);
          _2407_tString = _out1462;
          _2408___v75 = _out1463;
          _2409_tErased = _out1464;
          _2410_recIdentsT = _out1465;
          if ((!(_2405_fErased)) || (!(_2409_tErased))) {
            if (_2405_fErased) {
              _2403_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2403_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2409_tErased) {
              _2407_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2407_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2395_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2407_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2403_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2404_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2398_recIdentsCond, _2410_recIdentsT), _2406_recIdentsF);
          isErased = (_2405_fErased) || (_2409_tErased);
        }
      } else if (_source25.is_UnOp) {
        DAST._IUnaryOp _2411___mcc_h35 = _source25.dtor_unOp;
        DAST._IExpression _2412___mcc_h36 = _source25.dtor_expr;
        DAST._IUnaryOp _source76 = _2411___mcc_h35;
        if (_source76.is_Not) {
          DAST._IExpression _2413_e = _2412___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2414_recursiveGen;
            bool _2415___v76;
            bool _2416_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2417_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1466;
            bool _out1467;
            bool _out1468;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
            DCOMP.COMP.GenExpr(_2413_e, selfIdent, @params, true, out _out1466, out _out1467, out _out1468, out _out1469);
            _2414_recursiveGen = _out1466;
            _2415___v76 = _out1467;
            _2416_recErased = _out1468;
            _2417_recIdents = _out1469;
            if (!(_2416_recErased)) {
              _2414_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2414_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2414_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2417_recIdents;
            isErased = true;
          }
        } else if (_source76.is_BitwiseNot) {
          DAST._IExpression _2418_e = _2412___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2419_recursiveGen;
            bool _2420___v77;
            bool _2421_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2422_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1470;
            bool _out1471;
            bool _out1472;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
            DCOMP.COMP.GenExpr(_2418_e, selfIdent, @params, true, out _out1470, out _out1471, out _out1472, out _out1473);
            _2419_recursiveGen = _out1470;
            _2420___v77 = _out1471;
            _2421_recErased = _out1472;
            _2422_recIdents = _out1473;
            if (!(_2421_recErased)) {
              _2419_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2419_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2419_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2422_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2423_e = _2412___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2424_recursiveGen;
            bool _2425_recOwned;
            bool _2426_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2427_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1474;
            bool _out1475;
            bool _out1476;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1477;
            DCOMP.COMP.GenExpr(_2423_e, selfIdent, @params, false, out _out1474, out _out1475, out _out1476, out _out1477);
            _2424_recursiveGen = _out1474;
            _2425_recOwned = _out1475;
            _2426_recErased = _out1476;
            _2427_recIdents = _out1477;
            if (!(_2426_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2428_eraseFn;
              _2428_eraseFn = ((_2425_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2424_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2428_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2424_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2424_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2427_recIdents;
            isErased = true;
          }
        }
      } else if (_source25.is_BinOp) {
        DAST._IBinOp _2429___mcc_h37 = _source25.dtor_op;
        DAST._IExpression _2430___mcc_h38 = _source25.dtor_left;
        DAST._IExpression _2431___mcc_h39 = _source25.dtor_right;
        DAST._IExpression _2432_r = _2431___mcc_h39;
        DAST._IExpression _2433_l = _2430___mcc_h38;
        DAST._IBinOp _2434_op = _2429___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2435_left;
          bool _2436___v78;
          bool _2437_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2438_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1478;
          bool _out1479;
          bool _out1480;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
          DCOMP.COMP.GenExpr(_2433_l, selfIdent, @params, true, out _out1478, out _out1479, out _out1480, out _out1481);
          _2435_left = _out1478;
          _2436___v78 = _out1479;
          _2437_leftErased = _out1480;
          _2438_recIdentsL = _out1481;
          Dafny.ISequence<Dafny.Rune> _2439_right;
          bool _2440___v79;
          bool _2441_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2442_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1482;
          bool _out1483;
          bool _out1484;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
          DCOMP.COMP.GenExpr(_2432_r, selfIdent, @params, true, out _out1482, out _out1483, out _out1484, out _out1485);
          _2439_right = _out1482;
          _2440___v79 = _out1483;
          _2441_rightErased = _out1484;
          _2442_recIdentsR = _out1485;
          DAST._IBinOp _source77 = _2434_op;
          if (_source77.is_Eq) {
            bool _2443___mcc_h1150 = _source77.dtor_referential;
            bool _2444___mcc_h1151 = _source77.dtor_nullable;
            {
              if (!(_2437_leftErased)) {
                _2435_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2441_rightErased)) {
                _2439_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source78 = _2434_op;
              if (_source78.is_Eq) {
                bool _2445___mcc_h1160 = _source78.dtor_referential;
                bool _2446___mcc_h1161 = _source78.dtor_nullable;
                bool _2447_nullable = _2446___mcc_h1161;
                bool _2448_referential = _2445___mcc_h1160;
                {
                  if (_2448_referential) {
                    if (_2447_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2439_right);
                  }
                }
              } else if (_source78.is_Neq) {
                bool _2449___mcc_h1162 = _source78.dtor_referential;
                bool _2450___mcc_h1163 = _source78.dtor_nullable;
                bool _2451_nullable = _2450___mcc_h1163;
                bool _2452_referential = _2449___mcc_h1162;
                {
                  if (_2452_referential) {
                    if (_2451_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2439_right);
                  }
                }
              } else if (_source78.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2453___mcc_h1164 = _source78.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2454_op = _2453___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2454_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source77.is_Neq) {
            bool _2455___mcc_h1154 = _source77.dtor_referential;
            bool _2456___mcc_h1155 = _source77.dtor_nullable;
            {
              if (!(_2437_leftErased)) {
                _2435_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2441_rightErased)) {
                _2439_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source79 = _2434_op;
              if (_source79.is_Eq) {
                bool _2457___mcc_h1165 = _source79.dtor_referential;
                bool _2458___mcc_h1166 = _source79.dtor_nullable;
                bool _2459_nullable = _2458___mcc_h1166;
                bool _2460_referential = _2457___mcc_h1165;
                {
                  if (_2460_referential) {
                    if (_2459_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2439_right);
                  }
                }
              } else if (_source79.is_Neq) {
                bool _2461___mcc_h1167 = _source79.dtor_referential;
                bool _2462___mcc_h1168 = _source79.dtor_nullable;
                bool _2463_nullable = _2462___mcc_h1168;
                bool _2464_referential = _2461___mcc_h1167;
                {
                  if (_2464_referential) {
                    if (_2463_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2439_right);
                  }
                }
              } else if (_source79.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2465___mcc_h1169 = _source79.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2466_op = _2465___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2466_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source77.is_Div) {
            {
              if (!(_2437_leftErased)) {
                _2435_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2441_rightErased)) {
                _2439_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source80 = _2434_op;
              if (_source80.is_Eq) {
                bool _2467___mcc_h1170 = _source80.dtor_referential;
                bool _2468___mcc_h1171 = _source80.dtor_nullable;
                bool _2469_nullable = _2468___mcc_h1171;
                bool _2470_referential = _2467___mcc_h1170;
                {
                  if (_2470_referential) {
                    if (_2469_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2439_right);
                  }
                }
              } else if (_source80.is_Neq) {
                bool _2471___mcc_h1172 = _source80.dtor_referential;
                bool _2472___mcc_h1173 = _source80.dtor_nullable;
                bool _2473_nullable = _2472___mcc_h1173;
                bool _2474_referential = _2471___mcc_h1172;
                {
                  if (_2474_referential) {
                    if (_2473_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2439_right);
                  }
                }
              } else if (_source80.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2475___mcc_h1174 = _source80.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2476_op = _2475___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2476_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source77.is_EuclidianDiv) {
            {
              if (!(_2437_leftErased)) {
                _2435_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2441_rightErased)) {
                _2439_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source81 = _2434_op;
              if (_source81.is_Eq) {
                bool _2477___mcc_h1175 = _source81.dtor_referential;
                bool _2478___mcc_h1176 = _source81.dtor_nullable;
                bool _2479_nullable = _2478___mcc_h1176;
                bool _2480_referential = _2477___mcc_h1175;
                {
                  if (_2480_referential) {
                    if (_2479_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2439_right);
                  }
                }
              } else if (_source81.is_Neq) {
                bool _2481___mcc_h1177 = _source81.dtor_referential;
                bool _2482___mcc_h1178 = _source81.dtor_nullable;
                bool _2483_nullable = _2482___mcc_h1178;
                bool _2484_referential = _2481___mcc_h1177;
                {
                  if (_2484_referential) {
                    if (_2483_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2439_right);
                  }
                }
              } else if (_source81.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source81.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source81.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source81.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2485___mcc_h1179 = _source81.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2486_op = _2485___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2486_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source77.is_Mod) {
            {
              if (!(_2437_leftErased)) {
                _2435_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2441_rightErased)) {
                _2439_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source82 = _2434_op;
              if (_source82.is_Eq) {
                bool _2487___mcc_h1180 = _source82.dtor_referential;
                bool _2488___mcc_h1181 = _source82.dtor_nullable;
                bool _2489_nullable = _2488___mcc_h1181;
                bool _2490_referential = _2487___mcc_h1180;
                {
                  if (_2490_referential) {
                    if (_2489_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2439_right);
                  }
                }
              } else if (_source82.is_Neq) {
                bool _2491___mcc_h1182 = _source82.dtor_referential;
                bool _2492___mcc_h1183 = _source82.dtor_nullable;
                bool _2493_nullable = _2492___mcc_h1183;
                bool _2494_referential = _2491___mcc_h1182;
                {
                  if (_2494_referential) {
                    if (_2493_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2439_right);
                  }
                }
              } else if (_source82.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source82.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source82.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source82.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2495___mcc_h1184 = _source82.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2496_op = _2495___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2496_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source77.is_EuclidianMod) {
            {
              if (!(_2437_leftErased)) {
                _2435_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2441_rightErased)) {
                _2439_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source83 = _2434_op;
              if (_source83.is_Eq) {
                bool _2497___mcc_h1185 = _source83.dtor_referential;
                bool _2498___mcc_h1186 = _source83.dtor_nullable;
                bool _2499_nullable = _2498___mcc_h1186;
                bool _2500_referential = _2497___mcc_h1185;
                {
                  if (_2500_referential) {
                    if (_2499_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2439_right);
                  }
                }
              } else if (_source83.is_Neq) {
                bool _2501___mcc_h1187 = _source83.dtor_referential;
                bool _2502___mcc_h1188 = _source83.dtor_nullable;
                bool _2503_nullable = _2502___mcc_h1188;
                bool _2504_referential = _2501___mcc_h1187;
                {
                  if (_2504_referential) {
                    if (_2503_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2439_right);
                  }
                }
              } else if (_source83.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source83.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source83.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source83.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2505___mcc_h1189 = _source83.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2506_op = _2505___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2506_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source77.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2439_right);
            }
          } else if (_source77.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2439_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source77.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source77.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source77.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2507___mcc_h1158 = _source77.dtor_Passthrough_a0;
            {
              if (!(_2437_leftErased)) {
                _2435_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2441_rightErased)) {
                _2439_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source84 = _2434_op;
              if (_source84.is_Eq) {
                bool _2508___mcc_h1190 = _source84.dtor_referential;
                bool _2509___mcc_h1191 = _source84.dtor_nullable;
                bool _2510_nullable = _2509___mcc_h1191;
                bool _2511_referential = _2508___mcc_h1190;
                {
                  if (_2511_referential) {
                    if (_2510_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2439_right);
                  }
                }
              } else if (_source84.is_Neq) {
                bool _2512___mcc_h1192 = _source84.dtor_referential;
                bool _2513___mcc_h1193 = _source84.dtor_nullable;
                bool _2514_nullable = _2513___mcc_h1193;
                bool _2515_referential = _2512___mcc_h1192;
                {
                  if (_2515_referential) {
                    if (_2514_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2435_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2439_right);
                  }
                }
              } else if (_source84.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source84.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source84.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source84.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2516___mcc_h1194 = _source84.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2517_op = _2516___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2517_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2439_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2438_recIdentsL, _2442_recIdentsR);
          isErased = true;
        }
      } else if (_source25.is_ArrayLen) {
        DAST._IExpression _2518___mcc_h40 = _source25.dtor_expr;
        BigInteger _2519___mcc_h41 = _source25.dtor_dim;
        BigInteger _2520_dim = _2519___mcc_h41;
        DAST._IExpression _2521_expr = _2518___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2522_recursiveGen;
          bool _2523___v81;
          bool _2524_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2525_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1486;
          bool _out1487;
          bool _out1488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
          DCOMP.COMP.GenExpr(_2521_expr, selfIdent, @params, true, out _out1486, out _out1487, out _out1488, out _out1489);
          _2522_recursiveGen = _out1486;
          _2523___v81 = _out1487;
          _2524_recErased = _out1488;
          _2525_recIdents = _out1489;
          if ((_2520_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2522_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2526_i;
            _2526_i = BigInteger.One;
            while ((_2526_i) < (_2520_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2526_i = (_2526_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2522_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2525_recIdents;
          isErased = true;
        }
      } else if (_source25.is_Select) {
        DAST._IExpression _2527___mcc_h42 = _source25.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2528___mcc_h43 = _source25.dtor_field;
        bool _2529___mcc_h44 = _source25.dtor_isConstant;
        bool _2530___mcc_h45 = _source25.dtor_onDatatype;
        DAST._IExpression _source85 = _2527___mcc_h42;
        if (_source85.is_Literal) {
          DAST._ILiteral _2531___mcc_h46 = _source85.dtor_Literal_a0;
          bool _2532_isDatatype = _2530___mcc_h45;
          bool _2533_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2534_field = _2528___mcc_h43;
          DAST._IExpression _2535_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2536_onString;
            bool _2537_onOwned;
            bool _2538_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2539_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1490;
            bool _out1491;
            bool _out1492;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
            DCOMP.COMP.GenExpr(_2535_on, selfIdent, @params, false, out _out1490, out _out1491, out _out1492, out _out1493);
            _2536_onString = _out1490;
            _2537_onOwned = _out1491;
            _2538_onErased = _out1492;
            _2539_recIdents = _out1493;
            if ((_2532_isDatatype) || (_2533_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2536_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2534_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2533_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2536_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2534_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2539_recIdents;
          }
        } else if (_source85.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2540___mcc_h48 = _source85.dtor_Ident_a0;
          bool _2541_isDatatype = _2530___mcc_h45;
          bool _2542_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2543_field = _2528___mcc_h43;
          DAST._IExpression _2544_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2545_onString;
            bool _2546_onOwned;
            bool _2547_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2548_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1494;
            bool _out1495;
            bool _out1496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
            DCOMP.COMP.GenExpr(_2544_on, selfIdent, @params, false, out _out1494, out _out1495, out _out1496, out _out1497);
            _2545_onString = _out1494;
            _2546_onOwned = _out1495;
            _2547_onErased = _out1496;
            _2548_recIdents = _out1497;
            if ((_2541_isDatatype) || (_2542_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2545_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2543_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2542_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2545_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2543_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2548_recIdents;
          }
        } else if (_source85.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2549___mcc_h50 = _source85.dtor_Companion_a0;
          bool _2550_isDatatype = _2530___mcc_h45;
          bool _2551_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2552_field = _2528___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2553_c = _2549___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2554_onString;
            bool _2555_onOwned;
            bool _2556_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1498;
            bool _out1499;
            bool _out1500;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1501;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2553_c), selfIdent, @params, false, out _out1498, out _out1499, out _out1500, out _out1501);
            _2554_onString = _out1498;
            _2555_onOwned = _out1499;
            _2556_onErased = _out1500;
            _2557_recIdents = _out1501;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2554_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2552_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _2557_recIdents;
          }
        } else if (_source85.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _2558___mcc_h52 = _source85.dtor_Tuple_a0;
          bool _2559_isDatatype = _2530___mcc_h45;
          bool _2560_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2561_field = _2528___mcc_h43;
          DAST._IExpression _2562_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2563_onString;
            bool _2564_onOwned;
            bool _2565_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2566_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1502;
            bool _out1503;
            bool _out1504;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
            DCOMP.COMP.GenExpr(_2562_on, selfIdent, @params, false, out _out1502, out _out1503, out _out1504, out _out1505);
            _2563_onString = _out1502;
            _2564_onOwned = _out1503;
            _2565_onErased = _out1504;
            _2566_recIdents = _out1505;
            if ((_2559_isDatatype) || (_2560_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2563_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2561_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2560_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2563_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2561_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2566_recIdents;
          }
        } else if (_source85.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2567___mcc_h54 = _source85.dtor_path;
          Dafny.ISequence<DAST._IType> _2568___mcc_h55 = _source85.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2569___mcc_h56 = _source85.dtor_args;
          bool _2570_isDatatype = _2530___mcc_h45;
          bool _2571_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2572_field = _2528___mcc_h43;
          DAST._IExpression _2573_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2574_onString;
            bool _2575_onOwned;
            bool _2576_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2577_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1506;
            bool _out1507;
            bool _out1508;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
            DCOMP.COMP.GenExpr(_2573_on, selfIdent, @params, false, out _out1506, out _out1507, out _out1508, out _out1509);
            _2574_onString = _out1506;
            _2575_onOwned = _out1507;
            _2576_onErased = _out1508;
            _2577_recIdents = _out1509;
            if ((_2570_isDatatype) || (_2571_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2574_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2572_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2571_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2574_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2572_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2577_recIdents;
          }
        } else if (_source85.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _2578___mcc_h60 = _source85.dtor_dims;
          DAST._IType _2579___mcc_h61 = _source85.dtor_typ;
          bool _2580_isDatatype = _2530___mcc_h45;
          bool _2581_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2582_field = _2528___mcc_h43;
          DAST._IExpression _2583_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2584_onString;
            bool _2585_onOwned;
            bool _2586_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2587_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1510;
            bool _out1511;
            bool _out1512;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
            DCOMP.COMP.GenExpr(_2583_on, selfIdent, @params, false, out _out1510, out _out1511, out _out1512, out _out1513);
            _2584_onString = _out1510;
            _2585_onOwned = _out1511;
            _2586_onErased = _out1512;
            _2587_recIdents = _out1513;
            if ((_2580_isDatatype) || (_2581_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2584_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2582_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2581_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2584_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2582_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2587_recIdents;
          }
        } else if (_source85.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2588___mcc_h64 = _source85.dtor_path;
          Dafny.ISequence<DAST._IType> _2589___mcc_h65 = _source85.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _2590___mcc_h66 = _source85.dtor_variant;
          bool _2591___mcc_h67 = _source85.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2592___mcc_h68 = _source85.dtor_contents;
          bool _2593_isDatatype = _2530___mcc_h45;
          bool _2594_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2595_field = _2528___mcc_h43;
          DAST._IExpression _2596_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2597_onString;
            bool _2598_onOwned;
            bool _2599_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2600_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1514;
            bool _out1515;
            bool _out1516;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
            DCOMP.COMP.GenExpr(_2596_on, selfIdent, @params, false, out _out1514, out _out1515, out _out1516, out _out1517);
            _2597_onString = _out1514;
            _2598_onOwned = _out1515;
            _2599_onErased = _out1516;
            _2600_recIdents = _out1517;
            if ((_2593_isDatatype) || (_2594_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2597_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2595_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2594_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2597_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2595_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2600_recIdents;
          }
        } else if (_source85.is_Convert) {
          DAST._IExpression _2601___mcc_h74 = _source85.dtor_value;
          DAST._IType _2602___mcc_h75 = _source85.dtor_from;
          DAST._IType _2603___mcc_h76 = _source85.dtor_typ;
          bool _2604_isDatatype = _2530___mcc_h45;
          bool _2605_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2606_field = _2528___mcc_h43;
          DAST._IExpression _2607_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2608_onString;
            bool _2609_onOwned;
            bool _2610_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2611_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1518;
            bool _out1519;
            bool _out1520;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1521;
            DCOMP.COMP.GenExpr(_2607_on, selfIdent, @params, false, out _out1518, out _out1519, out _out1520, out _out1521);
            _2608_onString = _out1518;
            _2609_onOwned = _out1519;
            _2610_onErased = _out1520;
            _2611_recIdents = _out1521;
            if ((_2604_isDatatype) || (_2605_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2608_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2605_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2608_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2611_recIdents;
          }
        } else if (_source85.is_SeqConstruct) {
          DAST._IExpression _2612___mcc_h80 = _source85.dtor_length;
          DAST._IExpression _2613___mcc_h81 = _source85.dtor_elem;
          bool _2614_isDatatype = _2530___mcc_h45;
          bool _2615_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2616_field = _2528___mcc_h43;
          DAST._IExpression _2617_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2618_onString;
            bool _2619_onOwned;
            bool _2620_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2621_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1522;
            bool _out1523;
            bool _out1524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
            DCOMP.COMP.GenExpr(_2617_on, selfIdent, @params, false, out _out1522, out _out1523, out _out1524, out _out1525);
            _2618_onString = _out1522;
            _2619_onOwned = _out1523;
            _2620_onErased = _out1524;
            _2621_recIdents = _out1525;
            if ((_2614_isDatatype) || (_2615_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2618_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2616_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2615_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2618_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2616_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2621_recIdents;
          }
        } else if (_source85.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _2622___mcc_h84 = _source85.dtor_elements;
          DAST._IType _2623___mcc_h85 = _source85.dtor_typ;
          bool _2624_isDatatype = _2530___mcc_h45;
          bool _2625_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2626_field = _2528___mcc_h43;
          DAST._IExpression _2627_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2628_onString;
            bool _2629_onOwned;
            bool _2630_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2631_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1526;
            bool _out1527;
            bool _out1528;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
            DCOMP.COMP.GenExpr(_2627_on, selfIdent, @params, false, out _out1526, out _out1527, out _out1528, out _out1529);
            _2628_onString = _out1526;
            _2629_onOwned = _out1527;
            _2630_onErased = _out1528;
            _2631_recIdents = _out1529;
            if ((_2624_isDatatype) || (_2625_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2628_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2626_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2625_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2628_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2626_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2631_recIdents;
          }
        } else if (_source85.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _2632___mcc_h88 = _source85.dtor_elements;
          bool _2633_isDatatype = _2530___mcc_h45;
          bool _2634_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2635_field = _2528___mcc_h43;
          DAST._IExpression _2636_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2637_onString;
            bool _2638_onOwned;
            bool _2639_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2640_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1530;
            bool _out1531;
            bool _out1532;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
            DCOMP.COMP.GenExpr(_2636_on, selfIdent, @params, false, out _out1530, out _out1531, out _out1532, out _out1533);
            _2637_onString = _out1530;
            _2638_onOwned = _out1531;
            _2639_onErased = _out1532;
            _2640_recIdents = _out1533;
            if ((_2633_isDatatype) || (_2634_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2637_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2635_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2634_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2637_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2635_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2640_recIdents;
          }
        } else if (_source85.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2641___mcc_h90 = _source85.dtor_mapElems;
          bool _2642_isDatatype = _2530___mcc_h45;
          bool _2643_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2644_field = _2528___mcc_h43;
          DAST._IExpression _2645_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2646_onString;
            bool _2647_onOwned;
            bool _2648_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2649_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1534;
            bool _out1535;
            bool _out1536;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
            DCOMP.COMP.GenExpr(_2645_on, selfIdent, @params, false, out _out1534, out _out1535, out _out1536, out _out1537);
            _2646_onString = _out1534;
            _2647_onOwned = _out1535;
            _2648_onErased = _out1536;
            _2649_recIdents = _out1537;
            if ((_2642_isDatatype) || (_2643_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2646_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2644_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2643_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2646_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2644_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2649_recIdents;
          }
        } else if (_source85.is_This) {
          bool _2650_isDatatype = _2530___mcc_h45;
          bool _2651_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2652_field = _2528___mcc_h43;
          DAST._IExpression _2653_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2654_onString;
            bool _2655_onOwned;
            bool _2656_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2657_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1538;
            bool _out1539;
            bool _out1540;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
            DCOMP.COMP.GenExpr(_2653_on, selfIdent, @params, false, out _out1538, out _out1539, out _out1540, out _out1541);
            _2654_onString = _out1538;
            _2655_onOwned = _out1539;
            _2656_onErased = _out1540;
            _2657_recIdents = _out1541;
            if ((_2650_isDatatype) || (_2651_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2654_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2652_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2651_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2654_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2652_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2657_recIdents;
          }
        } else if (_source85.is_Ite) {
          DAST._IExpression _2658___mcc_h92 = _source85.dtor_cond;
          DAST._IExpression _2659___mcc_h93 = _source85.dtor_thn;
          DAST._IExpression _2660___mcc_h94 = _source85.dtor_els;
          bool _2661_isDatatype = _2530___mcc_h45;
          bool _2662_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2663_field = _2528___mcc_h43;
          DAST._IExpression _2664_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2665_onString;
            bool _2666_onOwned;
            bool _2667_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2668_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1542;
            bool _out1543;
            bool _out1544;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
            DCOMP.COMP.GenExpr(_2664_on, selfIdent, @params, false, out _out1542, out _out1543, out _out1544, out _out1545);
            _2665_onString = _out1542;
            _2666_onOwned = _out1543;
            _2667_onErased = _out1544;
            _2668_recIdents = _out1545;
            if ((_2661_isDatatype) || (_2662_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2665_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2663_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2662_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2665_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2663_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2668_recIdents;
          }
        } else if (_source85.is_UnOp) {
          DAST._IUnaryOp _2669___mcc_h98 = _source85.dtor_unOp;
          DAST._IExpression _2670___mcc_h99 = _source85.dtor_expr;
          bool _2671_isDatatype = _2530___mcc_h45;
          bool _2672_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2673_field = _2528___mcc_h43;
          DAST._IExpression _2674_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2675_onString;
            bool _2676_onOwned;
            bool _2677_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2678_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1546;
            bool _out1547;
            bool _out1548;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1549;
            DCOMP.COMP.GenExpr(_2674_on, selfIdent, @params, false, out _out1546, out _out1547, out _out1548, out _out1549);
            _2675_onString = _out1546;
            _2676_onOwned = _out1547;
            _2677_onErased = _out1548;
            _2678_recIdents = _out1549;
            if ((_2671_isDatatype) || (_2672_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2675_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2673_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2672_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2675_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2673_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2678_recIdents;
          }
        } else if (_source85.is_BinOp) {
          DAST._IBinOp _2679___mcc_h102 = _source85.dtor_op;
          DAST._IExpression _2680___mcc_h103 = _source85.dtor_left;
          DAST._IExpression _2681___mcc_h104 = _source85.dtor_right;
          bool _2682_isDatatype = _2530___mcc_h45;
          bool _2683_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2684_field = _2528___mcc_h43;
          DAST._IExpression _2685_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2686_onString;
            bool _2687_onOwned;
            bool _2688_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2689_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1550;
            bool _out1551;
            bool _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            DCOMP.COMP.GenExpr(_2685_on, selfIdent, @params, false, out _out1550, out _out1551, out _out1552, out _out1553);
            _2686_onString = _out1550;
            _2687_onOwned = _out1551;
            _2688_onErased = _out1552;
            _2689_recIdents = _out1553;
            if ((_2682_isDatatype) || (_2683_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2686_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2684_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2683_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2686_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2684_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2689_recIdents;
          }
        } else if (_source85.is_ArrayLen) {
          DAST._IExpression _2690___mcc_h108 = _source85.dtor_expr;
          BigInteger _2691___mcc_h109 = _source85.dtor_dim;
          bool _2692_isDatatype = _2530___mcc_h45;
          bool _2693_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2694_field = _2528___mcc_h43;
          DAST._IExpression _2695_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2696_onString;
            bool _2697_onOwned;
            bool _2698_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2699_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1554;
            bool _out1555;
            bool _out1556;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
            DCOMP.COMP.GenExpr(_2695_on, selfIdent, @params, false, out _out1554, out _out1555, out _out1556, out _out1557);
            _2696_onString = _out1554;
            _2697_onOwned = _out1555;
            _2698_onErased = _out1556;
            _2699_recIdents = _out1557;
            if ((_2692_isDatatype) || (_2693_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2696_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2694_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2693_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2696_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2694_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2699_recIdents;
          }
        } else if (_source85.is_Select) {
          DAST._IExpression _2700___mcc_h112 = _source85.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2701___mcc_h113 = _source85.dtor_field;
          bool _2702___mcc_h114 = _source85.dtor_isConstant;
          bool _2703___mcc_h115 = _source85.dtor_onDatatype;
          bool _2704_isDatatype = _2530___mcc_h45;
          bool _2705_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2706_field = _2528___mcc_h43;
          DAST._IExpression _2707_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2708_onString;
            bool _2709_onOwned;
            bool _2710_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2711_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1558;
            bool _out1559;
            bool _out1560;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1561;
            DCOMP.COMP.GenExpr(_2707_on, selfIdent, @params, false, out _out1558, out _out1559, out _out1560, out _out1561);
            _2708_onString = _out1558;
            _2709_onOwned = _out1559;
            _2710_onErased = _out1560;
            _2711_recIdents = _out1561;
            if ((_2704_isDatatype) || (_2705_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2708_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2706_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2705_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2708_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2706_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2711_recIdents;
          }
        } else if (_source85.is_SelectFn) {
          DAST._IExpression _2712___mcc_h120 = _source85.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2713___mcc_h121 = _source85.dtor_field;
          bool _2714___mcc_h122 = _source85.dtor_onDatatype;
          bool _2715___mcc_h123 = _source85.dtor_isStatic;
          BigInteger _2716___mcc_h124 = _source85.dtor_arity;
          bool _2717_isDatatype = _2530___mcc_h45;
          bool _2718_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2719_field = _2528___mcc_h43;
          DAST._IExpression _2720_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2721_onString;
            bool _2722_onOwned;
            bool _2723_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2724_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1562;
            bool _out1563;
            bool _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            DCOMP.COMP.GenExpr(_2720_on, selfIdent, @params, false, out _out1562, out _out1563, out _out1564, out _out1565);
            _2721_onString = _out1562;
            _2722_onOwned = _out1563;
            _2723_onErased = _out1564;
            _2724_recIdents = _out1565;
            if ((_2717_isDatatype) || (_2718_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2721_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2719_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2718_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2721_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2719_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2724_recIdents;
          }
        } else if (_source85.is_Index) {
          DAST._IExpression _2725___mcc_h130 = _source85.dtor_expr;
          DAST._ICollKind _2726___mcc_h131 = _source85.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _2727___mcc_h132 = _source85.dtor_indices;
          bool _2728_isDatatype = _2530___mcc_h45;
          bool _2729_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2730_field = _2528___mcc_h43;
          DAST._IExpression _2731_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2732_onString;
            bool _2733_onOwned;
            bool _2734_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2735_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1566;
            bool _out1567;
            bool _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            DCOMP.COMP.GenExpr(_2731_on, selfIdent, @params, false, out _out1566, out _out1567, out _out1568, out _out1569);
            _2732_onString = _out1566;
            _2733_onOwned = _out1567;
            _2734_onErased = _out1568;
            _2735_recIdents = _out1569;
            if ((_2728_isDatatype) || (_2729_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2732_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2730_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2729_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2732_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2730_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2735_recIdents;
          }
        } else if (_source85.is_IndexRange) {
          DAST._IExpression _2736___mcc_h136 = _source85.dtor_expr;
          bool _2737___mcc_h137 = _source85.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _2738___mcc_h138 = _source85.dtor_low;
          DAST._IOptional<DAST._IExpression> _2739___mcc_h139 = _source85.dtor_high;
          bool _2740_isDatatype = _2530___mcc_h45;
          bool _2741_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2742_field = _2528___mcc_h43;
          DAST._IExpression _2743_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2744_onString;
            bool _2745_onOwned;
            bool _2746_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2747_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1570;
            bool _out1571;
            bool _out1572;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1573;
            DCOMP.COMP.GenExpr(_2743_on, selfIdent, @params, false, out _out1570, out _out1571, out _out1572, out _out1573);
            _2744_onString = _out1570;
            _2745_onOwned = _out1571;
            _2746_onErased = _out1572;
            _2747_recIdents = _out1573;
            if ((_2740_isDatatype) || (_2741_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2744_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2742_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2741_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2744_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2742_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2747_recIdents;
          }
        } else if (_source85.is_TupleSelect) {
          DAST._IExpression _2748___mcc_h144 = _source85.dtor_expr;
          BigInteger _2749___mcc_h145 = _source85.dtor_index;
          bool _2750_isDatatype = _2530___mcc_h45;
          bool _2751_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2752_field = _2528___mcc_h43;
          DAST._IExpression _2753_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2754_onString;
            bool _2755_onOwned;
            bool _2756_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2757_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1574;
            bool _out1575;
            bool _out1576;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
            DCOMP.COMP.GenExpr(_2753_on, selfIdent, @params, false, out _out1574, out _out1575, out _out1576, out _out1577);
            _2754_onString = _out1574;
            _2755_onOwned = _out1575;
            _2756_onErased = _out1576;
            _2757_recIdents = _out1577;
            if ((_2750_isDatatype) || (_2751_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2754_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2752_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2751_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2754_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2752_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2757_recIdents;
          }
        } else if (_source85.is_Call) {
          DAST._IExpression _2758___mcc_h148 = _source85.dtor_on;
          Dafny.ISequence<Dafny.Rune> _2759___mcc_h149 = _source85.dtor_name;
          Dafny.ISequence<DAST._IType> _2760___mcc_h150 = _source85.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2761___mcc_h151 = _source85.dtor_args;
          bool _2762_isDatatype = _2530___mcc_h45;
          bool _2763_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2764_field = _2528___mcc_h43;
          DAST._IExpression _2765_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2766_onString;
            bool _2767_onOwned;
            bool _2768_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2769_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1578;
            bool _out1579;
            bool _out1580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1581;
            DCOMP.COMP.GenExpr(_2765_on, selfIdent, @params, false, out _out1578, out _out1579, out _out1580, out _out1581);
            _2766_onString = _out1578;
            _2767_onOwned = _out1579;
            _2768_onErased = _out1580;
            _2769_recIdents = _out1581;
            if ((_2762_isDatatype) || (_2763_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2766_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2764_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2763_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2766_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2764_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2769_recIdents;
          }
        } else if (_source85.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _2770___mcc_h156 = _source85.dtor_params;
          DAST._IType _2771___mcc_h157 = _source85.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _2772___mcc_h158 = _source85.dtor_body;
          bool _2773_isDatatype = _2530___mcc_h45;
          bool _2774_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2775_field = _2528___mcc_h43;
          DAST._IExpression _2776_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2777_onString;
            bool _2778_onOwned;
            bool _2779_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2780_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1582;
            bool _out1583;
            bool _out1584;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
            DCOMP.COMP.GenExpr(_2776_on, selfIdent, @params, false, out _out1582, out _out1583, out _out1584, out _out1585);
            _2777_onString = _out1582;
            _2778_onOwned = _out1583;
            _2779_onErased = _out1584;
            _2780_recIdents = _out1585;
            if ((_2773_isDatatype) || (_2774_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2777_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2775_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2774_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2777_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2775_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2780_recIdents;
          }
        } else if (_source85.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2781___mcc_h162 = _source85.dtor_values;
          DAST._IType _2782___mcc_h163 = _source85.dtor_retType;
          DAST._IExpression _2783___mcc_h164 = _source85.dtor_expr;
          bool _2784_isDatatype = _2530___mcc_h45;
          bool _2785_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2786_field = _2528___mcc_h43;
          DAST._IExpression _2787_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2788_onString;
            bool _2789_onOwned;
            bool _2790_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2791_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1586;
            bool _out1587;
            bool _out1588;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1589;
            DCOMP.COMP.GenExpr(_2787_on, selfIdent, @params, false, out _out1586, out _out1587, out _out1588, out _out1589);
            _2788_onString = _out1586;
            _2789_onOwned = _out1587;
            _2790_onErased = _out1588;
            _2791_recIdents = _out1589;
            if ((_2784_isDatatype) || (_2785_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2788_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2786_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2785_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2788_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2786_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2791_recIdents;
          }
        } else if (_source85.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _2792___mcc_h168 = _source85.dtor_name;
          DAST._IType _2793___mcc_h169 = _source85.dtor_typ;
          DAST._IExpression _2794___mcc_h170 = _source85.dtor_value;
          DAST._IExpression _2795___mcc_h171 = _source85.dtor_iifeBody;
          bool _2796_isDatatype = _2530___mcc_h45;
          bool _2797_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2798_field = _2528___mcc_h43;
          DAST._IExpression _2799_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2800_onString;
            bool _2801_onOwned;
            bool _2802_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2803_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1590;
            bool _out1591;
            bool _out1592;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
            DCOMP.COMP.GenExpr(_2799_on, selfIdent, @params, false, out _out1590, out _out1591, out _out1592, out _out1593);
            _2800_onString = _out1590;
            _2801_onOwned = _out1591;
            _2802_onErased = _out1592;
            _2803_recIdents = _out1593;
            if ((_2796_isDatatype) || (_2797_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2800_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2798_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2797_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2800_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2798_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2803_recIdents;
          }
        } else if (_source85.is_Apply) {
          DAST._IExpression _2804___mcc_h176 = _source85.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _2805___mcc_h177 = _source85.dtor_args;
          bool _2806_isDatatype = _2530___mcc_h45;
          bool _2807_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2808_field = _2528___mcc_h43;
          DAST._IExpression _2809_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2810_onString;
            bool _2811_onOwned;
            bool _2812_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2813_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1594;
            bool _out1595;
            bool _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            DCOMP.COMP.GenExpr(_2809_on, selfIdent, @params, false, out _out1594, out _out1595, out _out1596, out _out1597);
            _2810_onString = _out1594;
            _2811_onOwned = _out1595;
            _2812_onErased = _out1596;
            _2813_recIdents = _out1597;
            if ((_2806_isDatatype) || (_2807_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2810_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2808_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2807_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2810_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2808_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2813_recIdents;
          }
        } else if (_source85.is_TypeTest) {
          DAST._IExpression _2814___mcc_h180 = _source85.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2815___mcc_h181 = _source85.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _2816___mcc_h182 = _source85.dtor_variant;
          bool _2817_isDatatype = _2530___mcc_h45;
          bool _2818_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2819_field = _2528___mcc_h43;
          DAST._IExpression _2820_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2821_onString;
            bool _2822_onOwned;
            bool _2823_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2824_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1598;
            bool _out1599;
            bool _out1600;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
            DCOMP.COMP.GenExpr(_2820_on, selfIdent, @params, false, out _out1598, out _out1599, out _out1600, out _out1601);
            _2821_onString = _out1598;
            _2822_onOwned = _out1599;
            _2823_onErased = _out1600;
            _2824_recIdents = _out1601;
            if ((_2817_isDatatype) || (_2818_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2819_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2818_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2821_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2819_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2824_recIdents;
          }
        } else if (_source85.is_InitializationValue) {
          DAST._IType _2825___mcc_h186 = _source85.dtor_typ;
          bool _2826_isDatatype = _2530___mcc_h45;
          bool _2827_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2828_field = _2528___mcc_h43;
          DAST._IExpression _2829_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2830_onString;
            bool _2831_onOwned;
            bool _2832_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2833_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1602;
            bool _out1603;
            bool _out1604;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
            DCOMP.COMP.GenExpr(_2829_on, selfIdent, @params, false, out _out1602, out _out1603, out _out1604, out _out1605);
            _2830_onString = _out1602;
            _2831_onOwned = _out1603;
            _2832_onErased = _out1604;
            _2833_recIdents = _out1605;
            if ((_2826_isDatatype) || (_2827_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2830_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2828_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2827_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2830_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2828_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2833_recIdents;
          }
        } else if (_source85.is_BoolBoundedPool) {
          bool _2834_isDatatype = _2530___mcc_h45;
          bool _2835_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2836_field = _2528___mcc_h43;
          DAST._IExpression _2837_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2838_onString;
            bool _2839_onOwned;
            bool _2840_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2841_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1606;
            bool _out1607;
            bool _out1608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1609;
            DCOMP.COMP.GenExpr(_2837_on, selfIdent, @params, false, out _out1606, out _out1607, out _out1608, out _out1609);
            _2838_onString = _out1606;
            _2839_onOwned = _out1607;
            _2840_onErased = _out1608;
            _2841_recIdents = _out1609;
            if ((_2834_isDatatype) || (_2835_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2838_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2836_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2835_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2838_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2836_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2841_recIdents;
          }
        } else if (_source85.is_SetBoundedPool) {
          DAST._IExpression _2842___mcc_h188 = _source85.dtor_of;
          bool _2843_isDatatype = _2530___mcc_h45;
          bool _2844_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2845_field = _2528___mcc_h43;
          DAST._IExpression _2846_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2847_onString;
            bool _2848_onOwned;
            bool _2849_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2850_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1610;
            bool _out1611;
            bool _out1612;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
            DCOMP.COMP.GenExpr(_2846_on, selfIdent, @params, false, out _out1610, out _out1611, out _out1612, out _out1613);
            _2847_onString = _out1610;
            _2848_onOwned = _out1611;
            _2849_onErased = _out1612;
            _2850_recIdents = _out1613;
            if ((_2843_isDatatype) || (_2844_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2847_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2845_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2844_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2847_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2845_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2850_recIdents;
          }
        } else if (_source85.is_SeqBoundedPool) {
          DAST._IExpression _2851___mcc_h190 = _source85.dtor_of;
          bool _2852___mcc_h191 = _source85.dtor_includeDuplicates;
          bool _2853_isDatatype = _2530___mcc_h45;
          bool _2854_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2855_field = _2528___mcc_h43;
          DAST._IExpression _2856_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2857_onString;
            bool _2858_onOwned;
            bool _2859_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2860_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1614;
            bool _out1615;
            bool _out1616;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1617;
            DCOMP.COMP.GenExpr(_2856_on, selfIdent, @params, false, out _out1614, out _out1615, out _out1616, out _out1617);
            _2857_onString = _out1614;
            _2858_onOwned = _out1615;
            _2859_onErased = _out1616;
            _2860_recIdents = _out1617;
            if ((_2853_isDatatype) || (_2854_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2857_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2855_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2854_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2857_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2855_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2860_recIdents;
          }
        } else {
          DAST._IExpression _2861___mcc_h194 = _source85.dtor_lo;
          DAST._IExpression _2862___mcc_h195 = _source85.dtor_hi;
          bool _2863_isDatatype = _2530___mcc_h45;
          bool _2864_isConstant = _2529___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2865_field = _2528___mcc_h43;
          DAST._IExpression _2866_on = _2527___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2867_onString;
            bool _2868_onOwned;
            bool _2869_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2870_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1618;
            bool _out1619;
            bool _out1620;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
            DCOMP.COMP.GenExpr(_2866_on, selfIdent, @params, false, out _out1618, out _out1619, out _out1620, out _out1621);
            _2867_onString = _out1618;
            _2868_onOwned = _out1619;
            _2869_onErased = _out1620;
            _2870_recIdents = _out1621;
            if ((_2863_isDatatype) || (_2864_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2867_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2865_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2864_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2867_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2865_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2870_recIdents;
          }
        }
      } else if (_source25.is_SelectFn) {
        DAST._IExpression _2871___mcc_h198 = _source25.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2872___mcc_h199 = _source25.dtor_field;
        bool _2873___mcc_h200 = _source25.dtor_onDatatype;
        bool _2874___mcc_h201 = _source25.dtor_isStatic;
        BigInteger _2875___mcc_h202 = _source25.dtor_arity;
        BigInteger _2876_arity = _2875___mcc_h202;
        bool _2877_isStatic = _2874___mcc_h201;
        bool _2878_isDatatype = _2873___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _2879_field = _2872___mcc_h199;
        DAST._IExpression _2880_on = _2871___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _2881_onString;
          bool _2882_onOwned;
          bool _2883___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2884_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1622;
          bool _out1623;
          bool _out1624;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
          DCOMP.COMP.GenExpr(_2880_on, selfIdent, @params, false, out _out1622, out _out1623, out _out1624, out _out1625);
          _2881_onString = _out1622;
          _2882_onOwned = _out1623;
          _2883___v82 = _out1624;
          _2884_recIdents = _out1625;
          if (_2877_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2881_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2879_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _2881_onString), ((_2882_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _2885_args;
            _2885_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _2886_i;
            _2886_i = BigInteger.Zero;
            while ((_2886_i) < (_2876_arity)) {
              if ((_2886_i).Sign == 1) {
                _2885_args = Dafny.Sequence<Dafny.Rune>.Concat(_2885_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2885_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2885_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_2886_i));
              _2886_i = (_2886_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _2885_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _2879_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2885_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _2887_typeShape;
          _2887_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _2888_i;
          _2888_i = BigInteger.Zero;
          while ((_2888_i) < (_2876_arity)) {
            if ((_2888_i).Sign == 1) {
              _2887_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2887_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _2887_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2887_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _2888_i = (_2888_i) + (BigInteger.One);
          }
          _2887_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2887_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _2887_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _2884_recIdents;
        }
      } else if (_source25.is_Index) {
        DAST._IExpression _2889___mcc_h203 = _source25.dtor_expr;
        DAST._ICollKind _2890___mcc_h204 = _source25.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _2891___mcc_h205 = _source25.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2892_indices = _2891___mcc_h205;
        DAST._ICollKind _2893_collKind = _2890___mcc_h204;
        DAST._IExpression _2894_on = _2889___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _2895_onString;
          bool _2896_onOwned;
          bool _2897_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2898_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1626;
          bool _out1627;
          bool _out1628;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1629;
          DCOMP.COMP.GenExpr(_2894_on, selfIdent, @params, false, out _out1626, out _out1627, out _out1628, out _out1629);
          _2895_onString = _out1626;
          _2896_onOwned = _out1627;
          _2897_onErased = _out1628;
          _2898_recIdents = _out1629;
          readIdents = _2898_recIdents;
          s = _2895_onString;
          BigInteger _2899_i;
          _2899_i = BigInteger.Zero;
          while ((_2899_i) < (new BigInteger((_2892_indices).Count))) {
            if (object.Equals(_2893_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_2893_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _2900_idx;
              bool _2901_idxOwned;
              bool _2902_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2903_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1630;
              bool _out1631;
              bool _out1632;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
              DCOMP.COMP.GenExpr((_2892_indices).Select(_2899_i), selfIdent, @params, false, out _out1630, out _out1631, out _out1632, out _out1633);
              _2900_idx = _out1630;
              _2901_idxOwned = _out1631;
              _2902_idxErased = _out1632;
              _2903_recIdentsIdx = _out1633;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_2901_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2900_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2903_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _2904_idx;
              bool _2905___v83;
              bool _2906_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2907_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1634;
              bool _out1635;
              bool _out1636;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1637;
              DCOMP.COMP.GenExpr((_2892_indices).Select(_2899_i), selfIdent, @params, true, out _out1634, out _out1635, out _out1636, out _out1637);
              _2904_idx = _out1634;
              _2905___v83 = _out1635;
              _2906_idxErased = _out1636;
              _2907_recIdentsIdx = _out1637;
              if (!(_2906_idxErased)) {
                _2904_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2904_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _2904_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2907_recIdentsIdx);
            }
            _2899_i = (_2899_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _2897_onErased;
        }
      } else if (_source25.is_IndexRange) {
        DAST._IExpression _2908___mcc_h206 = _source25.dtor_expr;
        bool _2909___mcc_h207 = _source25.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _2910___mcc_h208 = _source25.dtor_low;
        DAST._IOptional<DAST._IExpression> _2911___mcc_h209 = _source25.dtor_high;
        DAST._IOptional<DAST._IExpression> _2912_high = _2911___mcc_h209;
        DAST._IOptional<DAST._IExpression> _2913_low = _2910___mcc_h208;
        bool _2914_isArray = _2909___mcc_h207;
        DAST._IExpression _2915_on = _2908___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _2916_onString;
          bool _2917_onOwned;
          bool _2918_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2919_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1638;
          bool _out1639;
          bool _out1640;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
          DCOMP.COMP.GenExpr(_2915_on, selfIdent, @params, false, out _out1638, out _out1639, out _out1640, out _out1641);
          _2916_onString = _out1638;
          _2917_onOwned = _out1639;
          _2918_onErased = _out1640;
          _2919_recIdents = _out1641;
          readIdents = _2919_recIdents;
          s = _2916_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2920_lowString;
          _2920_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source86 = _2913_low;
          if (_source86.is_Some) {
            DAST._IExpression _2921___mcc_h1195 = _source86.dtor_Some_a0;
            DAST._IExpression _2922_l = _2921___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _2923_lString;
              bool _2924___v84;
              bool _2925_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2926_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1642;
              bool _out1643;
              bool _out1644;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1645;
              DCOMP.COMP.GenExpr(_2922_l, selfIdent, @params, true, out _out1642, out _out1643, out _out1644, out _out1645);
              _2923_lString = _out1642;
              _2924___v84 = _out1643;
              _2925_lErased = _out1644;
              _2926_recIdentsL = _out1645;
              if (!(_2925_lErased)) {
                _2923_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2923_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2920_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2923_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2926_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2927_highString;
          _2927_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source87 = _2912_high;
          if (_source87.is_Some) {
            DAST._IExpression _2928___mcc_h1196 = _source87.dtor_Some_a0;
            DAST._IExpression _2929_h = _2928___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _2930_hString;
              bool _2931___v85;
              bool _2932_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2933_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1646;
              bool _out1647;
              bool _out1648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
              DCOMP.COMP.GenExpr(_2929_h, selfIdent, @params, true, out _out1646, out _out1647, out _out1648, out _out1649);
              _2930_hString = _out1646;
              _2931___v85 = _out1647;
              _2932_hErased = _out1648;
              _2933_recIdentsH = _out1649;
              if (!(_2932_hErased)) {
                _2930_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2930_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2927_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2930_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2933_recIdentsH);
            }
          } else {
          }
          if (_2914_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source88) => {
            if (_source88.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2934___mcc_h1197 = _source88.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2935_l = _2934___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2935_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2920_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source89) => {
            if (_source89.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2936___mcc_h1198 = _source89.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2937_h = _2936___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2937_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2927_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _2918_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source25.is_TupleSelect) {
        DAST._IExpression _2938___mcc_h210 = _source25.dtor_expr;
        BigInteger _2939___mcc_h211 = _source25.dtor_index;
        BigInteger _2940_idx = _2939___mcc_h211;
        DAST._IExpression _2941_on = _2938___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _2942_onString;
          bool _2943___v86;
          bool _2944_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2945_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_2941_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _2942_onString = _out1650;
          _2943___v86 = _out1651;
          _2944_tupErased = _out1652;
          _2945_recIdents = _out1653;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2942_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_2940_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _2944_tupErased;
          readIdents = _2945_recIdents;
        }
      } else if (_source25.is_Call) {
        DAST._IExpression _2946___mcc_h212 = _source25.dtor_on;
        Dafny.ISequence<Dafny.Rune> _2947___mcc_h213 = _source25.dtor_name;
        Dafny.ISequence<DAST._IType> _2948___mcc_h214 = _source25.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2949___mcc_h215 = _source25.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2950_args = _2949___mcc_h215;
        Dafny.ISequence<DAST._IType> _2951_typeArgs = _2948___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _2952_name = _2947___mcc_h213;
        DAST._IExpression _2953_on = _2946___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2954_typeArgString;
          _2954_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2951_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2955_typeI;
            _2955_typeI = BigInteger.Zero;
            _2954_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_2955_typeI) < (new BigInteger((_2951_typeArgs).Count))) {
              if ((_2955_typeI).Sign == 1) {
                _2954_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2954_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2956_typeString;
              Dafny.ISequence<Dafny.Rune> _out1654;
              _out1654 = DCOMP.COMP.GenType((_2951_typeArgs).Select(_2955_typeI), false, false);
              _2956_typeString = _out1654;
              _2954_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2954_typeArgString, _2956_typeString);
              _2955_typeI = (_2955_typeI) + (BigInteger.One);
            }
            _2954_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2954_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _2957_argString;
          _2957_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2958_i;
          _2958_i = BigInteger.Zero;
          while ((_2958_i) < (new BigInteger((_2950_args).Count))) {
            if ((_2958_i).Sign == 1) {
              _2957_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2957_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2959_argExpr;
            bool _2960_isOwned;
            bool _2961_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2962_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1655;
            bool _out1656;
            bool _out1657;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1658;
            DCOMP.COMP.GenExpr((_2950_args).Select(_2958_i), selfIdent, @params, false, out _out1655, out _out1656, out _out1657, out _out1658);
            _2959_argExpr = _out1655;
            _2960_isOwned = _out1656;
            _2961_argErased = _out1657;
            _2962_argIdents = _out1658;
            if (_2960_isOwned) {
              _2959_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2959_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_2961_argErased)) {
              _2959_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _2959_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _2959_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _2959_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2957_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2957_argString, _2959_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2962_argIdents);
            _2958_i = (_2958_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2963_enclosingString;
          bool _2964___v87;
          bool _2965___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2966_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1659;
          bool _out1660;
          bool _out1661;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
          DCOMP.COMP.GenExpr(_2953_on, selfIdent, @params, false, out _out1659, out _out1660, out _out1661, out _out1662);
          _2963_enclosingString = _out1659;
          _2964___v87 = _out1660;
          _2965___v88 = _out1661;
          _2966_recIdents = _out1662;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2966_recIdents);
          DAST._IExpression _source90 = _2953_on;
          if (_source90.is_Literal) {
            DAST._ILiteral _2967___mcc_h1199 = _source90.dtor_Literal_a0;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2968___mcc_h1201 = _source90.dtor_Ident_a0;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2969___mcc_h1203 = _source90.dtor_Companion_a0;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2963_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2970___mcc_h1205 = _source90.dtor_Tuple_a0;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2971___mcc_h1207 = _source90.dtor_path;
            Dafny.ISequence<DAST._IType> _2972___mcc_h1208 = _source90.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2973___mcc_h1209 = _source90.dtor_args;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2974___mcc_h1213 = _source90.dtor_dims;
            DAST._IType _2975___mcc_h1214 = _source90.dtor_typ;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2976___mcc_h1217 = _source90.dtor_path;
            Dafny.ISequence<DAST._IType> _2977___mcc_h1218 = _source90.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2978___mcc_h1219 = _source90.dtor_variant;
            bool _2979___mcc_h1220 = _source90.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2980___mcc_h1221 = _source90.dtor_contents;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Convert) {
            DAST._IExpression _2981___mcc_h1227 = _source90.dtor_value;
            DAST._IType _2982___mcc_h1228 = _source90.dtor_from;
            DAST._IType _2983___mcc_h1229 = _source90.dtor_typ;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_SeqConstruct) {
            DAST._IExpression _2984___mcc_h1233 = _source90.dtor_length;
            DAST._IExpression _2985___mcc_h1234 = _source90.dtor_elem;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2986___mcc_h1237 = _source90.dtor_elements;
            DAST._IType _2987___mcc_h1238 = _source90.dtor_typ;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2988___mcc_h1241 = _source90.dtor_elements;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2989___mcc_h1243 = _source90.dtor_mapElems;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_This) {
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Ite) {
            DAST._IExpression _2990___mcc_h1245 = _source90.dtor_cond;
            DAST._IExpression _2991___mcc_h1246 = _source90.dtor_thn;
            DAST._IExpression _2992___mcc_h1247 = _source90.dtor_els;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_UnOp) {
            DAST._IUnaryOp _2993___mcc_h1251 = _source90.dtor_unOp;
            DAST._IExpression _2994___mcc_h1252 = _source90.dtor_expr;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_BinOp) {
            DAST._IBinOp _2995___mcc_h1255 = _source90.dtor_op;
            DAST._IExpression _2996___mcc_h1256 = _source90.dtor_left;
            DAST._IExpression _2997___mcc_h1257 = _source90.dtor_right;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_ArrayLen) {
            DAST._IExpression _2998___mcc_h1261 = _source90.dtor_expr;
            BigInteger _2999___mcc_h1262 = _source90.dtor_dim;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Select) {
            DAST._IExpression _3000___mcc_h1265 = _source90.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3001___mcc_h1266 = _source90.dtor_field;
            bool _3002___mcc_h1267 = _source90.dtor_isConstant;
            bool _3003___mcc_h1268 = _source90.dtor_onDatatype;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_SelectFn) {
            DAST._IExpression _3004___mcc_h1273 = _source90.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3005___mcc_h1274 = _source90.dtor_field;
            bool _3006___mcc_h1275 = _source90.dtor_onDatatype;
            bool _3007___mcc_h1276 = _source90.dtor_isStatic;
            BigInteger _3008___mcc_h1277 = _source90.dtor_arity;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Index) {
            DAST._IExpression _3009___mcc_h1283 = _source90.dtor_expr;
            DAST._ICollKind _3010___mcc_h1284 = _source90.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3011___mcc_h1285 = _source90.dtor_indices;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_IndexRange) {
            DAST._IExpression _3012___mcc_h1289 = _source90.dtor_expr;
            bool _3013___mcc_h1290 = _source90.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3014___mcc_h1291 = _source90.dtor_low;
            DAST._IOptional<DAST._IExpression> _3015___mcc_h1292 = _source90.dtor_high;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_TupleSelect) {
            DAST._IExpression _3016___mcc_h1297 = _source90.dtor_expr;
            BigInteger _3017___mcc_h1298 = _source90.dtor_index;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Call) {
            DAST._IExpression _3018___mcc_h1301 = _source90.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3019___mcc_h1302 = _source90.dtor_name;
            Dafny.ISequence<DAST._IType> _3020___mcc_h1303 = _source90.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3021___mcc_h1304 = _source90.dtor_args;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3022___mcc_h1309 = _source90.dtor_params;
            DAST._IType _3023___mcc_h1310 = _source90.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3024___mcc_h1311 = _source90.dtor_body;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3025___mcc_h1315 = _source90.dtor_values;
            DAST._IType _3026___mcc_h1316 = _source90.dtor_retType;
            DAST._IExpression _3027___mcc_h1317 = _source90.dtor_expr;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3028___mcc_h1321 = _source90.dtor_name;
            DAST._IType _3029___mcc_h1322 = _source90.dtor_typ;
            DAST._IExpression _3030___mcc_h1323 = _source90.dtor_value;
            DAST._IExpression _3031___mcc_h1324 = _source90.dtor_iifeBody;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_Apply) {
            DAST._IExpression _3032___mcc_h1329 = _source90.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3033___mcc_h1330 = _source90.dtor_args;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_TypeTest) {
            DAST._IExpression _3034___mcc_h1333 = _source90.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3035___mcc_h1334 = _source90.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3036___mcc_h1335 = _source90.dtor_variant;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_InitializationValue) {
            DAST._IType _3037___mcc_h1339 = _source90.dtor_typ;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_BoolBoundedPool) {
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_SetBoundedPool) {
            DAST._IExpression _3038___mcc_h1341 = _source90.dtor_of;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else if (_source90.is_SeqBoundedPool) {
            DAST._IExpression _3039___mcc_h1343 = _source90.dtor_of;
            bool _3040___mcc_h1344 = _source90.dtor_includeDuplicates;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          } else {
            DAST._IExpression _3041___mcc_h1347 = _source90.dtor_lo;
            DAST._IExpression _3042___mcc_h1348 = _source90.dtor_hi;
            {
              _2963_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2952_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2963_enclosingString, _2954_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2957_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source25.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3043___mcc_h216 = _source25.dtor_params;
        DAST._IType _3044___mcc_h217 = _source25.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3045___mcc_h218 = _source25.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3046_body = _3045___mcc_h218;
        DAST._IType _3047_retType = _3044___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3048_params = _3043___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3049_paramNames;
          _3049_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3050_i;
          _3050_i = BigInteger.Zero;
          while ((_3050_i) < (new BigInteger((_3048_params).Count))) {
            _3049_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3049_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3048_params).Select(_3050_i)).dtor_name));
            _3050_i = (_3050_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3051_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3052_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1664;
          DCOMP.COMP.GenStmts(_3046_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3049_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1663, out _out1664);
          _3051_recursiveGen = _out1663;
          _3052_recIdents = _out1664;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3053_allReadCloned;
          _3053_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3052_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3054_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3052_recIdents).Elements) {
              _3054_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3052_recIdents).Contains(_3054_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3054_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3053_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3053_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3049_paramNames).Contains(_3054_next))) {
              _3053_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3053_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3054_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3054_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3054_next));
            }
            _3052_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3052_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3054_next));
          }
          Dafny.ISequence<Dafny.Rune> _3055_paramsString;
          _3055_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3056_paramTypes;
          _3056_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3050_i = BigInteger.Zero;
          while ((_3050_i) < (new BigInteger((_3048_params).Count))) {
            if ((_3050_i).Sign == 1) {
              _3055_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3055_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3056_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3056_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3057_typStr;
            Dafny.ISequence<Dafny.Rune> _out1665;
            _out1665 = DCOMP.COMP.GenType(((_3048_params).Select(_3050_i)).dtor_typ, false, true);
            _3057_typStr = _out1665;
            _3055_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3055_paramsString, ((_3048_params).Select(_3050_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3057_typStr);
            _3056_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3056_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3057_typStr);
            _3050_i = (_3050_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3058_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1666;
          _out1666 = DCOMP.COMP.GenType(_3047_retType, false, true);
          _3058_retTypeGen = _out1666;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3056_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3058_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3053_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3055_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3058_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3051_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source25.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3059___mcc_h219 = _source25.dtor_values;
        DAST._IType _3060___mcc_h220 = _source25.dtor_retType;
        DAST._IExpression _3061___mcc_h221 = _source25.dtor_expr;
        DAST._IExpression _3062_expr = _3061___mcc_h221;
        DAST._IType _3063_retType = _3060___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3064_values = _3059___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3065_paramNames;
          _3065_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3066_paramNamesSet;
          _3066_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3067_i;
          _3067_i = BigInteger.Zero;
          while ((_3067_i) < (new BigInteger((_3064_values).Count))) {
            _3065_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3065_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3064_values).Select(_3067_i)).dtor__0).dtor_name));
            _3066_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3066_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3064_values).Select(_3067_i)).dtor__0).dtor_name));
            _3067_i = (_3067_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3068_paramsString;
          _3068_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3067_i = BigInteger.Zero;
          while ((_3067_i) < (new BigInteger((_3064_values).Count))) {
            if ((_3067_i).Sign == 1) {
              _3068_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3068_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3069_typStr;
            Dafny.ISequence<Dafny.Rune> _out1667;
            _out1667 = DCOMP.COMP.GenType((((_3064_values).Select(_3067_i)).dtor__0).dtor_typ, false, true);
            _3069_typStr = _out1667;
            Dafny.ISequence<Dafny.Rune> _3070_valueGen;
            bool _3071___v91;
            bool _3072_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3073_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1668;
            bool _out1669;
            bool _out1670;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1671;
            DCOMP.COMP.GenExpr(((_3064_values).Select(_3067_i)).dtor__1, selfIdent, @params, true, out _out1668, out _out1669, out _out1670, out _out1671);
            _3070_valueGen = _out1668;
            _3071___v91 = _out1669;
            _3072_valueErased = _out1670;
            _3073_recIdents = _out1671;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3064_values).Select(_3067_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3069_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3073_recIdents);
            if (_3072_valueErased) {
              _3070_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3070_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3070_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3067_i = (_3067_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3074_recGen;
          bool _3075_recOwned;
          bool _3076_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3077_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1672;
          bool _out1673;
          bool _out1674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
          DCOMP.COMP.GenExpr(_3062_expr, selfIdent, _3065_paramNames, mustOwn, out _out1672, out _out1673, out _out1674, out _out1675);
          _3074_recGen = _out1672;
          _3075_recOwned = _out1673;
          _3076_recErased = _out1674;
          _3077_recIdents = _out1675;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3077_recIdents, _3066_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3074_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3075_recOwned;
          isErased = _3076_recErased;
        }
      } else if (_source25.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3078___mcc_h222 = _source25.dtor_name;
        DAST._IType _3079___mcc_h223 = _source25.dtor_typ;
        DAST._IExpression _3080___mcc_h224 = _source25.dtor_value;
        DAST._IExpression _3081___mcc_h225 = _source25.dtor_iifeBody;
        DAST._IExpression _3082_iifeBody = _3081___mcc_h225;
        DAST._IExpression _3083_value = _3080___mcc_h224;
        DAST._IType _3084_tpe = _3079___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3085_name = _3078___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3086_valueGen;
          bool _3087___v92;
          bool _3088_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3089_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_3083_value, selfIdent, @params, true, out _out1676, out _out1677, out _out1678, out _out1679);
          _3086_valueGen = _out1676;
          _3087___v92 = _out1677;
          _3088_valueErased = _out1678;
          _3089_recIdents = _out1679;
          if (_3088_valueErased) {
            _3086_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3086_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3089_recIdents;
          Dafny.ISequence<Dafny.Rune> _3090_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1680;
          _out1680 = DCOMP.COMP.GenType(_3084_tpe, false, true);
          _3090_valueTypeGen = _out1680;
          Dafny.ISequence<Dafny.Rune> _3091_bodyGen;
          bool _3092___v93;
          bool _3093_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3094_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1681;
          bool _out1682;
          bool _out1683;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
          DCOMP.COMP.GenExpr(_3082_iifeBody, selfIdent, @params, true, out _out1681, out _out1682, out _out1683, out _out1684);
          _3091_bodyGen = _out1681;
          _3092___v93 = _out1682;
          _3093_bodyErased = _out1683;
          _3094_bodyIdents = _out1684;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3094_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3085_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3085_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3090_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3086_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3091_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3093_bodyErased;
        }
      } else if (_source25.is_Apply) {
        DAST._IExpression _3095___mcc_h226 = _source25.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3096___mcc_h227 = _source25.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3097_args = _3096___mcc_h227;
        DAST._IExpression _3098_func = _3095___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3099_funcString;
          bool _3100___v94;
          bool _3101_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3102_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1685;
          bool _out1686;
          bool _out1687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
          DCOMP.COMP.GenExpr(_3098_func, selfIdent, @params, false, out _out1685, out _out1686, out _out1687, out _out1688);
          _3099_funcString = _out1685;
          _3100___v94 = _out1686;
          _3101_funcErased = _out1687;
          _3102_recIdents = _out1688;
          readIdents = _3102_recIdents;
          Dafny.ISequence<Dafny.Rune> _3103_argString;
          _3103_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3104_i;
          _3104_i = BigInteger.Zero;
          while ((_3104_i) < (new BigInteger((_3097_args).Count))) {
            if ((_3104_i).Sign == 1) {
              _3103_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3103_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3105_argExpr;
            bool _3106_isOwned;
            bool _3107_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3108_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1689;
            bool _out1690;
            bool _out1691;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
            DCOMP.COMP.GenExpr((_3097_args).Select(_3104_i), selfIdent, @params, false, out _out1689, out _out1690, out _out1691, out _out1692);
            _3105_argExpr = _out1689;
            _3106_isOwned = _out1690;
            _3107_argErased = _out1691;
            _3108_argIdents = _out1692;
            if (_3106_isOwned) {
              _3105_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3105_argExpr);
            }
            _3103_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3103_argString, _3105_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3108_argIdents);
            _3104_i = (_3104_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3099_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3103_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source25.is_TypeTest) {
        DAST._IExpression _3109___mcc_h228 = _source25.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3110___mcc_h229 = _source25.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3111___mcc_h230 = _source25.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3112_variant = _3111___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3113_dType = _3110___mcc_h229;
        DAST._IExpression _3114_on = _3109___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3115_exprGen;
          bool _3116___v95;
          bool _3117_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3118_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1693;
          bool _out1694;
          bool _out1695;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1696;
          DCOMP.COMP.GenExpr(_3114_on, selfIdent, @params, false, out _out1693, out _out1694, out _out1695, out _out1696);
          _3115_exprGen = _out1693;
          _3116___v95 = _out1694;
          _3117_exprErased = _out1695;
          _3118_recIdents = _out1696;
          Dafny.ISequence<Dafny.Rune> _3119_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1697;
          _out1697 = DCOMP.COMP.GenPath(_3113_dType);
          _3119_dTypePath = _out1697;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3115_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3119_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3112_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3118_recIdents;
        }
      } else if (_source25.is_InitializationValue) {
        DAST._IType _3120___mcc_h231 = _source25.dtor_typ;
        DAST._IType _3121_typ = _3120___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3122_typString;
          Dafny.ISequence<Dafny.Rune> _out1698;
          _out1698 = DCOMP.COMP.GenType(_3121_typ, false, false);
          _3122_typString = _out1698;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3122_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source25.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source25.is_SetBoundedPool) {
        DAST._IExpression _3123___mcc_h232 = _source25.dtor_of;
        DAST._IExpression _3124_of = _3123___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3125_exprGen;
          bool _3126___v96;
          bool _3127_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3128_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1699;
          bool _out1700;
          bool _out1701;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1702;
          DCOMP.COMP.GenExpr(_3124_of, selfIdent, @params, false, out _out1699, out _out1700, out _out1701, out _out1702);
          _3125_exprGen = _out1699;
          _3126___v96 = _out1700;
          _3127_exprErased = _out1701;
          _3128_recIdents = _out1702;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3125_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3127_exprErased;
          readIdents = _3128_recIdents;
        }
      } else if (_source25.is_SeqBoundedPool) {
        DAST._IExpression _3129___mcc_h233 = _source25.dtor_of;
        bool _3130___mcc_h234 = _source25.dtor_includeDuplicates;
        bool _3131_includeDuplicates = _3130___mcc_h234;
        DAST._IExpression _3132_of = _3129___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3133_exprGen;
          bool _3134___v97;
          bool _3135_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3136_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1703;
          bool _out1704;
          bool _out1705;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1706;
          DCOMP.COMP.GenExpr(_3132_of, selfIdent, @params, false, out _out1703, out _out1704, out _out1705, out _out1706);
          _3133_exprGen = _out1703;
          _3134___v97 = _out1704;
          _3135_exprErased = _out1705;
          _3136_recIdents = _out1706;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3133_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3131_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3135_exprErased;
          readIdents = _3136_recIdents;
        }
      } else {
        DAST._IExpression _3137___mcc_h235 = _source25.dtor_lo;
        DAST._IExpression _3138___mcc_h236 = _source25.dtor_hi;
        DAST._IExpression _3139_hi = _3138___mcc_h236;
        DAST._IExpression _3140_lo = _3137___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3141_loString;
          bool _3142___v98;
          bool _3143_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3144_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1707;
          bool _out1708;
          bool _out1709;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1710;
          DCOMP.COMP.GenExpr(_3140_lo, selfIdent, @params, true, out _out1707, out _out1708, out _out1709, out _out1710);
          _3141_loString = _out1707;
          _3142___v98 = _out1708;
          _3143_loErased = _out1709;
          _3144_recIdentsLo = _out1710;
          Dafny.ISequence<Dafny.Rune> _3145_hiString;
          bool _3146___v99;
          bool _3147_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3148_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1711;
          bool _out1712;
          bool _out1713;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1714;
          DCOMP.COMP.GenExpr(_3139_hi, selfIdent, @params, true, out _out1711, out _out1712, out _out1713, out _out1714);
          _3145_hiString = _out1711;
          _3146___v99 = _out1712;
          _3147_hiErased = _out1713;
          _3148_recIdentsHi = _out1714;
          if (!(_3143_loErased)) {
            _3141_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3141_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3147_hiErased)) {
            _3145_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3145_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3141_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3145_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3144_recIdentsLo, _3148_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3149_i;
      _3149_i = BigInteger.Zero;
      while ((_3149_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3150_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1715;
        _out1715 = DCOMP.COMP.GenModule((p).Select(_3149_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3150_generated = _out1715;
        if ((_3149_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3150_generated);
        _3149_i = (_3149_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3151_i;
      _3151_i = BigInteger.Zero;
      while ((_3151_i) < (new BigInteger((fullName).Count))) {
        if ((_3151_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3151_i));
        _3151_i = (_3151_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP
namespace _module {

  public partial class __default {
    public static _IClosure Eval(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> env, _IVal val) {
      _IVal _source91 = val;
      if (_source91.is_Var) {
        Dafny.ISequence<Dafny.Rune> _3152___mcc_h0 = _source91.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _3153_x = _3152___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, _IClosure>.Select(env, _3153_x);
      } else if (_source91.is_Bool) {
        bool _3154___mcc_h1 = _source91.dtor_Bool_a0;
        bool _3155_b = _3154___mcc_h1;
        return Closure.create_Bool(_3155_b);
      } else if (_source91.is_Int) {
        BigInteger _3156___mcc_h2 = _source91.dtor_Int_a0;
        BigInteger _3157_i = _3156___mcc_h2;
        return Closure.create_Int(_3157_i);
      } else {
        Dafny.ISequence<Dafny.Rune> _3158___mcc_h3 = _source91.dtor_Lambda_a0;
        _IComp _3159___mcc_h4 = _source91.dtor_Lambda_a1;
        _IComp _3160_f = _3159___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _3161_b = _3158___mcc_h3;
        return Closure.create_Lambda(env, _3161_b, _3160_f);
      }
    }
    public static _IOut Step(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> state) {
      _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> _let_tmp_rhs1 = state;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> _3162_env = _let_tmp_rhs1.dtor__0;
      _IComp _3163_comp = _let_tmp_rhs1.dtor__1;
      _IStack _3164_stack = _let_tmp_rhs1.dtor__2;
      _IComp _source92 = _3163_comp;
      if (_source92.is_Pure) {
        _IVal _3165___mcc_h0 = _source92.dtor_Pure_a0;
        _IVal _3166_val = _3165___mcc_h0;
        _IOption<_System._ITuple2<_IFrame, _IStack>> _source93 = (_3164_stack).Pop();
        if (_source93.is_None) {
          return Out.create_Terminal();
        } else {
          _System._ITuple2<_IFrame, _IStack> _3167___mcc_h12 = _source93.dtor_value;
          _System._ITuple2<_IFrame, _IStack> _source94 = _3167___mcc_h12;
          _IFrame _3168___mcc_h13 = _source94.dtor__0;
          _IStack _3169___mcc_h14 = _source94.dtor__1;
          _IFrame _source95 = _3168___mcc_h13;
          if (_source95.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _3170___mcc_h17 = _source95.dtor_var__;
            _IComp _3171___mcc_h18 = _source95.dtor_rhs;
            _IStack _3172_stack = _3169___mcc_h14;
            _IComp _3173_rhs = _3171___mcc_h18;
            Dafny.ISequence<Dafny.Rune> _3174_var__ = _3170___mcc_h17;
            return Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, _IClosure>.Update(_3162_env, _3174_var__, __default.Eval(_3162_env, _3166_val)), _3173_rhs, _3172_stack));
          } else {
            _IVal _3175___mcc_h21 = _source95.dtor_arg;
            return Out.create_Stuck();
          }
        }
      } else if (_source92.is_Bind) {
        _IComp _3176___mcc_h1 = _source92.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _3177___mcc_h2 = _source92.dtor_var__;
        _IComp _3178___mcc_h3 = _source92.dtor_rhs;
        _IComp _3179_rhs = _3178___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _3180_var__ = _3177___mcc_h2;
        _IComp _3181_lhs = _3176___mcc_h1;
        return Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>.create(_3162_env, _3181_lhs, Stack.create_Push(Frame.create_Bind(_3180_var__, _3179_rhs), _3164_stack)));
      } else if (_source92.is_Ite) {
        _IVal _3182___mcc_h4 = _source92.dtor_guard;
        _IComp _3183___mcc_h5 = _source92.dtor_then__;
        _IComp _3184___mcc_h6 = _source92.dtor_else__;
        _IComp _3185_else__ = _3184___mcc_h6;
        _IComp _3186_then__ = _3183___mcc_h5;
        _IVal _3187_guard = _3182___mcc_h4;
        _IClosure _source96 = __default.Eval(_3162_env, _3187_guard);
        if (_source96.is_Bool) {
          bool _3188___mcc_h23 = _source96.dtor_Bool_a0;
          bool _3189_guard = _3188___mcc_h23;
          return Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>.create(_3162_env, ((_3189_guard) ? (_3186_then__) : (_3185_else__)), _3164_stack));
        } else if (_source96.is_Int) {
          BigInteger _3190___mcc_h25 = _source96.dtor_Int_a0;
          return Out.create_Stuck();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> _3191___mcc_h27 = _source96.dtor_Lambda_a0;
          Dafny.ISequence<Dafny.Rune> _3192___mcc_h28 = _source96.dtor_Lambda_a1;
          _IComp _3193___mcc_h29 = _source96.dtor_Lambda_a2;
          return Out.create_Stuck();
        }
      } else if (_source92.is_Func) {
        Dafny.ISequence<Dafny.Rune> _3194___mcc_h7 = _source92.dtor_bound;
        _IComp _3195___mcc_h8 = _source92.dtor_body;
        _IComp _3196_body = _3195___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _3197_bound = _3194___mcc_h7;
        _IOption<_System._ITuple2<_IFrame, _IStack>> _source97 = (_3164_stack).Pop();
        if (_source97.is_None) {
          return Out.create_Terminal();
        } else {
          _System._ITuple2<_IFrame, _IStack> _3198___mcc_h33 = _source97.dtor_value;
          _System._ITuple2<_IFrame, _IStack> _source98 = _3198___mcc_h33;
          _IFrame _3199___mcc_h34 = _source98.dtor__0;
          _IStack _3200___mcc_h35 = _source98.dtor__1;
          _IFrame _source99 = _3199___mcc_h34;
          if (_source99.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _3201___mcc_h38 = _source99.dtor_var__;
            _IComp _3202___mcc_h39 = _source99.dtor_rhs;
            return Out.create_Stuck();
          } else {
            _IVal _3203___mcc_h42 = _source99.dtor_arg;
            _IStack _3204_stack = _3200___mcc_h35;
            _IVal _3205_arg = _3203___mcc_h42;
            return Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, _IClosure>.Update(_3162_env, _3197_bound, __default.Eval(_3162_env, _3205_arg)), _3196_body, _3204_stack));
          }
        }
      } else if (_source92.is_Call) {
        _IComp _3206___mcc_h9 = _source92.dtor_func;
        _IVal _3207___mcc_h10 = _source92.dtor_arg;
        _IVal _3208_arg = _3207___mcc_h10;
        _IComp _3209_func = _3206___mcc_h9;
        return Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>.create(_3162_env, _3209_func, Stack.create_Push(Frame.create_Call(_3208_arg), _3164_stack)));
      } else {
        _IVal _3210___mcc_h11 = _source92.dtor_ref;
        _IVal _3211_ref = _3210___mcc_h11;
        _IClosure _source100 = __default.Eval(_3162_env, _3211_ref);
        if (_source100.is_Bool) {
          bool _3212___mcc_h44 = _source100.dtor_Bool_a0;
          return Out.create_Stuck();
        } else if (_source100.is_Int) {
          BigInteger _3213___mcc_h46 = _source100.dtor_Int_a0;
          return Out.create_Stuck();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> _3214___mcc_h48 = _source100.dtor_Lambda_a0;
          Dafny.ISequence<Dafny.Rune> _3215___mcc_h49 = _source100.dtor_Lambda_a1;
          _IComp _3216___mcc_h50 = _source100.dtor_Lambda_a2;
          _IComp _3217_f = _3216___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _3218_b = _3215___mcc_h49;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> _3219_env = _3214___mcc_h48;
          return Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>.create(_3219_env, Comp.create_Func(_3218_b, _3217_f), _3164_stack));
        }
      }
    }
    public static void Run(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> s) {
    TAIL_CALL_START:;
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      _IOut _source101 = __default.Step(s);
      if (_source101.is_Next) {
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> _3220___mcc_h0 = _source101.dtor_Next_a0;
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> _3221_s = _3220___mcc_h0;
        Dafny.Helpers.Print((_System.Tuple2<_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>, Dafny.ISequence<Dafny.Rune>>.create(_3221_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"))));
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> _in2 = _3221_s;
        s = _in2;
        goto TAIL_CALL_START;
      } else if (_source101.is_Stuck) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done/stuck\n")).ToVerbatimString(false));
        return;
      } else {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done/stuck\n")).ToVerbatimString(false));
        return;
      }
    }
    public static _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> Initial(_IComp comp) {
      return _System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, _IClosure>.FromElements(), comp, Stack.create_Empty());
    }
    public static void _Main(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> __noArgsParameter) {
      _IVal _3222_fv;
      _3222_fv = Val.create_Lambda(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("y"), Comp.create_Pure(Val.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"))));
      _IComp _3223_fc;
      _3223_fc = Comp.create_Force(Val.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")));
      _IVal _3224_x1;
      _3224_x1 = Val.create_Int(BigInteger.One);
      _IVal _3225_x2;
      _3225_x2 = Val.create_Int(new BigInteger(2));
      _IVal _3226_z;
      _3226_z = Val.create_Int(BigInteger.Zero);
      __default.Run(__default.Initial(Comp.create_Call(Comp.create_Call(Comp.create_Call(Comp.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), Comp.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), Comp.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), Comp.create_Call(_3223_fc, _3226_z)))), _3225_x2), _3222_fv), _3224_x1)));
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    _IOption<A> PropagateFailure();
    A Extract();
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static _IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<_IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<_IOption<A>>(Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public _IOption<A> PropagateFailure() {
      return Option<A>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public partial class Ptr<A> {
    public Ptr() {
      this.deref = default(A);
    }
    public A deref { get; set; }
    public void __ctor(A val) {
      (this).deref = val;
    }
  }

  public interface _IVal {
    bool is_Var { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Lambda { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Lambda_a0 { get; }
    _IComp dtor_Lambda_a1 { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly _IVal theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static _IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<_IVal> _TYPE = new Dafny.TypeDescriptor<_IVal>(Val.Default());
    public static Dafny.TypeDescriptor<_IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Val_Var(_a0);
    }
    public static _IVal create_Bool(bool _a0) {
      return new Val_Bool(_a0);
    }
    public static _IVal create_Int(BigInteger _a0) {
      return new Val_Int(_a0);
    }
    public static _IVal create_Lambda(Dafny.ISequence<Dafny.Rune> _a0, _IComp _a1) {
      return new Val_Lambda(_a0, _a1);
    }
    public bool is_Var { get { return this is Val_Var; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Lambda { get { return this is Val_Lambda; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Val_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Val_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Val_Int)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Lambda_a0 {
      get {
        var d = this;
        return ((Val_Lambda)d)._a0;
      }
    }
    public _IComp dtor_Lambda_a1 {
      get {
        var d = this;
        return ((Val_Lambda)d)._a1;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Var : Val {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Val_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as Val_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Val.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _a0;
    public Val_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as Val_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _a0;
    public Val_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as Val_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Lambda : Val {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly _IComp _a1;
    public Val_Lambda(Dafny.ISequence<Dafny.Rune> _a0, _IComp _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Lambda(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as Val_Lambda;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Val.Lambda";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }

  public interface _IComp {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Force { get; }
    _IVal dtor_Pure_a0 { get; }
    _IComp dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _IComp dtor_rhs { get; }
    _IVal dtor_guard { get; }
    _IComp dtor_then__ { get; }
    _IComp dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    _IComp dtor_body { get; }
    _IComp dtor_func { get; }
    _IVal dtor_arg { get; }
    _IVal dtor_ref { get; }
    _IComp DowncastClone();
  }
  public abstract class Comp : _IComp {
    public Comp() {
    }
    private static readonly _IComp theDefault = create_Pure(Val.Default());
    public static _IComp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<_IComp> _TYPE = new Dafny.TypeDescriptor<_IComp>(Comp.Default());
    public static Dafny.TypeDescriptor<_IComp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IComp create_Pure(_IVal _a0) {
      return new Comp_Pure(_a0);
    }
    public static _IComp create_Bind(_IComp lhs, Dafny.ISequence<Dafny.Rune> var__, _IComp rhs) {
      return new Comp_Bind(lhs, var__, rhs);
    }
    public static _IComp create_Ite(_IVal guard, _IComp then__, _IComp else__) {
      return new Comp_Ite(guard, then__, else__);
    }
    public static _IComp create_Func(Dafny.ISequence<Dafny.Rune> bound, _IComp body) {
      return new Comp_Func(bound, body);
    }
    public static _IComp create_Call(_IComp func, _IVal arg) {
      return new Comp_Call(func, arg);
    }
    public static _IComp create_Force(_IVal @ref) {
      return new Comp_Force(@ref);
    }
    public bool is_Pure { get { return this is Comp_Pure; } }
    public bool is_Bind { get { return this is Comp_Bind; } }
    public bool is_Ite { get { return this is Comp_Ite; } }
    public bool is_Func { get { return this is Comp_Func; } }
    public bool is_Call { get { return this is Comp_Call; } }
    public bool is_Force { get { return this is Comp_Force; } }
    public _IVal dtor_Pure_a0 {
      get {
        var d = this;
        return ((Comp_Pure)d)._a0;
      }
    }
    public _IComp dtor_lhs {
      get {
        var d = this;
        return ((Comp_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Comp_Bind)d)._var__;
      }
    }
    public _IComp dtor_rhs {
      get {
        var d = this;
        return ((Comp_Bind)d)._rhs;
      }
    }
    public _IVal dtor_guard {
      get {
        var d = this;
        return ((Comp_Ite)d)._guard;
      }
    }
    public _IComp dtor_then__ {
      get {
        var d = this;
        return ((Comp_Ite)d)._then__;
      }
    }
    public _IComp dtor_else__ {
      get {
        var d = this;
        return ((Comp_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        return ((Comp_Func)d)._bound;
      }
    }
    public _IComp dtor_body {
      get {
        var d = this;
        return ((Comp_Func)d)._body;
      }
    }
    public _IComp dtor_func {
      get {
        var d = this;
        return ((Comp_Call)d)._func;
      }
    }
    public _IVal dtor_arg {
      get {
        var d = this;
        return ((Comp_Call)d)._arg;
      }
    }
    public _IVal dtor_ref {
      get {
        var d = this;
        return ((Comp_Force)d)._ref;
      }
    }
    public abstract _IComp DowncastClone();
  }
  public class Comp_Pure : Comp {
    public readonly _IVal _a0;
    public Comp_Pure(_IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IComp DowncastClone() {
      if (this is _IComp dt) { return dt; }
      return new Comp_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as Comp_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Comp.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Comp_Bind : Comp {
    public readonly _IComp _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _IComp _rhs;
    public Comp_Bind(_IComp lhs, Dafny.ISequence<Dafny.Rune> var__, _IComp rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IComp DowncastClone() {
      if (this is _IComp dt) { return dt; }
      return new Comp_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as Comp_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Comp.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Comp_Ite : Comp {
    public readonly _IVal _guard;
    public readonly _IComp _then__;
    public readonly _IComp _else__;
    public Comp_Ite(_IVal guard, _IComp then__, _IComp else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IComp DowncastClone() {
      if (this is _IComp dt) { return dt; }
      return new Comp_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as Comp_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Comp.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Comp_Func : Comp {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly _IComp _body;
    public Comp_Func(Dafny.ISequence<Dafny.Rune> bound, _IComp body) : base() {
      this._bound = bound;
      this._body = body;
    }
    public override _IComp DowncastClone() {
      if (this is _IComp dt) { return dt; }
      return new Comp_Func(_bound, _body);
    }
    public override bool Equals(object other) {
      var oth = other as Comp_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Comp.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Comp_Call : Comp {
    public readonly _IComp _func;
    public readonly _IVal _arg;
    public Comp_Call(_IComp func, _IVal arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IComp DowncastClone() {
      if (this is _IComp dt) { return dt; }
      return new Comp_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as Comp_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Comp.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Comp_Force : Comp {
    public readonly _IVal _ref;
    public Comp_Force(_IVal @ref) : base() {
      this._ref = @ref;
    }
    public override _IComp DowncastClone() {
      if (this is _IComp dt) { return dt; }
      return new Comp_Force(_ref);
    }
    public override bool Equals(object other) {
      var oth = other as Comp_Force;
      return oth != null && object.Equals(this._ref, oth._ref);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Comp.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _IComp dtor_rhs { get; }
    _IVal dtor_arg { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly _IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, Comp.Default());
    public static _IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<_IFrame> _TYPE = new Dafny.TypeDescriptor<_IFrame>(Frame.Default());
    public static Dafny.TypeDescriptor<_IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, _IComp rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(_IVal arg) {
      return new Frame_Call(arg);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public _IComp dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public _IVal dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _IComp _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, _IComp rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly _IVal _arg;
    public Frame_Call(_IVal arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    _IFrame dtor_top { get; }
    _IStack dtor_rest { get; }
    _IStack DowncastClone();
    _IOption<_System._ITuple2<_IFrame, _IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly _IStack theDefault = create_Empty();
    public static _IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<_IStack> _TYPE = new Dafny.TypeDescriptor<_IStack>(Stack.Default());
    public static Dafny.TypeDescriptor<_IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(_IFrame top, _IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public _IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public _IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public _IOption<_System._ITuple2<_IFrame, _IStack>> Pop() {
      _IStack _source102 = this;
      if (_source102.is_Empty) {
        return Option<_System._ITuple2<_IFrame, _IStack>>.create_None();
      } else {
        _IFrame _3227___mcc_h0 = _source102.dtor_top;
        _IStack _3228___mcc_h1 = _source102.dtor_rest;
        _IStack _3229_r = _3228___mcc_h1;
        _IFrame _3230_t = _3227___mcc_h0;
        return Option<_System._ITuple2<_IFrame, _IStack>>.create_Some(_System.Tuple2<_IFrame, _IStack>.create(_3230_t, _3229_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly _IFrame _top;
    public readonly _IStack _rest;
    public Stack_Push(_IFrame top, _IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IClosure {
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Lambda { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> dtor_Lambda_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Lambda_a1 { get; }
    _IComp dtor_Lambda_a2 { get; }
    _IClosure DowncastClone();
  }
  public abstract class Closure : _IClosure {
    public Closure() {
    }
    private static readonly _IClosure theDefault = create_Bool(false);
    public static _IClosure Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<_IClosure> _TYPE = new Dafny.TypeDescriptor<_IClosure>(Closure.Default());
    public static Dafny.TypeDescriptor<_IClosure> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClosure create_Bool(bool _a0) {
      return new Closure_Bool(_a0);
    }
    public static _IClosure create_Int(BigInteger _a0) {
      return new Closure_Int(_a0);
    }
    public static _IClosure create_Lambda(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> _a0, Dafny.ISequence<Dafny.Rune> _a1, _IComp _a2) {
      return new Closure_Lambda(_a0, _a1, _a2);
    }
    public bool is_Bool { get { return this is Closure_Bool; } }
    public bool is_Int { get { return this is Closure_Int; } }
    public bool is_Lambda { get { return this is Closure_Lambda; } }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Closure_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Closure_Int)d)._a0;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> dtor_Lambda_a0 {
      get {
        var d = this;
        return ((Closure_Lambda)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Lambda_a1 {
      get {
        var d = this;
        return ((Closure_Lambda)d)._a1;
      }
    }
    public _IComp dtor_Lambda_a2 {
      get {
        var d = this;
        return ((Closure_Lambda)d)._a2;
      }
    }
    public abstract _IClosure DowncastClone();
  }
  public class Closure_Bool : Closure {
    public readonly bool _a0;
    public Closure_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IClosure DowncastClone() {
      if (this is _IClosure dt) { return dt; }
      return new Closure_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as Closure_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Closure.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Closure_Int : Closure {
    public readonly BigInteger _a0;
    public Closure_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IClosure DowncastClone() {
      if (this is _IClosure dt) { return dt; }
      return new Closure_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as Closure_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Closure.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Closure_Lambda : Closure {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly _IComp _a2;
    public Closure_Lambda(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure> _a0, Dafny.ISequence<Dafny.Rune> _a1, _IComp _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _IClosure DowncastClone() {
      if (this is _IClosure dt) { return dt; }
      return new Closure_Lambda(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as Closure_Lambda;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Closure.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }

  public interface _IOut {
    bool is_Next { get; }
    bool is_Stuck { get; }
    bool is_Terminal { get; }
    _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> dtor_Next_a0 { get; }
    _IOut DowncastClone();
  }
  public abstract class Out : _IOut {
    public Out() {
    }
    private static readonly _IOut theDefault = create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, _IClosure>.Empty, Comp.Default(), Stack.Default()));
    public static _IOut Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<_IOut> _TYPE = new Dafny.TypeDescriptor<_IOut>(Out.Default());
    public static Dafny.TypeDescriptor<_IOut> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOut create_Next(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> _a0) {
      return new Out_Next(_a0);
    }
    public static _IOut create_Stuck() {
      return new Out_Stuck();
    }
    public static _IOut create_Terminal() {
      return new Out_Terminal();
    }
    public bool is_Next { get { return this is Out_Next; } }
    public bool is_Stuck { get { return this is Out_Stuck; } }
    public bool is_Terminal { get { return this is Out_Terminal; } }
    public _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> dtor_Next_a0 {
      get {
        var d = this;
        return ((Out_Next)d)._a0;
      }
    }
    public abstract _IOut DowncastClone();
  }
  public class Out_Next : Out {
    public readonly _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> _a0;
    public Out_Next(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, _IClosure>, _IComp, _IStack> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Next(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as Out_Next;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Out.Next";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Out_Stuck : Out {
    public Out_Stuck() : base() {
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Stuck();
    }
    public override bool Equals(object other) {
      var oth = other as Out_Stuck;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Out.Stuck";
      return s;
    }
  }
  public class Out_Terminal : Out {
    public Out_Terminal() : base() {
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Terminal();
    }
    public override bool Equals(object other) {
      var oth = other as Out_Terminal;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Out.Terminal";
      return s;
    }
  }
} // end of namespace _module
class __CallToMain {
  public static void Main(string[] args) {
    Dafny.Helpers.WithHaltHandling(() => _module.__default._Main(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.UnicodeFromMainArguments(args)));
  }
}
