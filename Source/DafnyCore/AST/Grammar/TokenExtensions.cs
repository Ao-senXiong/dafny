using System.IO;
using Microsoft.Dafny;
using OmniSharp.Extensions.LanguageServer.Protocol.Models;

namespace DafnyCore.AST.Grammar;


public interface ICanFormat : INode {
  /// Sets the indentation of individual tokens owned by this node, given
  /// the new indentation set by the tokens preceding this node
  /// Returns if further traverse needs to occur (true) or if it already happened (false)
  bool SetIndent(int indentBefore, TokenNewIndentCollector formatter);
}

public static class TokenExtensions {
  
  public static RangeToken MakeAutoGenerated(this RangeToken rangeToken) {
    return new RangeToken(new AutoGeneratedToken(rangeToken.StartToken), rangeToken.EndToken);
  }

  public static RangeToken MakeRefined(this RangeToken rangeToken, ModuleDefinition module) {
    return new RangeToken(new RefinementToken(rangeToken.StartToken, module), rangeToken.EndToken);
  }
  public static Name Prepend(this Name name, string prefix) {
    return new Name(name.RangeToken.MakeAutoGenerated(), prefix + name.Value);
  }
  
  public static string TokenToString(this IToken tok, DafnyOptions options) {
    if (tok == Token.Cli) {
      return "CLI";
    }

    if (tok.Uri == null) {
      return $"({tok.line},{tok.col - 1})";
    }

    var currentDirectory = Directory.GetCurrentDirectory();
    string filename = tok.Uri.Scheme switch {
      "stdin" => "<stdin>",
      "transcript" => Path.GetFileName(tok.Filepath),
      _ => options.UseBaseNameForFileName
        ? Path.GetFileName(tok.Filepath)
        : (tok.Filepath.StartsWith(currentDirectory) ? Path.GetRelativePath(currentDirectory, tok.Filepath) : tok.Filepath)
    };

    return $"{filename}({tok.line},{tok.col - 1})";
  }
}