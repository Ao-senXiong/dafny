// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;

namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2453___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2453___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _2453___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2453___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _2453___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2453___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2454___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2454___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _2454___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2454___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _2454___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2454___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i))) && (!(DCOMP.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeName(Dafny.ISequence<Dafny.Rune> n) {
      return DCOMP.__default.escapeIdent((n));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _2455_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _2455_r);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> AddAssignedPrefix(Dafny.ISequence<Dafny.Rune> rustName) {
      if (((new BigInteger((rustName).Count)) >= (new BigInteger(2))) && (((rustName).Subsequence(BigInteger.Zero, new BigInteger(2))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#")))) {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.ASSIGNED__PREFIX, (rustName).Drop(new BigInteger(2)));
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.ASSIGNED__PREFIX, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_")), rustName);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static Dafny.ISequence<Dafny.Rune> ASSIGNED__PREFIX { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_set");
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
    public static DAST._IAttribute AttributeOwned { get {
      return DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("owned"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipOwnedBox { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipOwnedBox() {
      return new Ownership_OwnershipOwnedBox();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipOwnedBox { get { return this is Ownership_OwnershipOwnedBox; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipOwnedBox();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipOwnedBox : Ownership {
    public Ownership_OwnershipOwnedBox() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwnedBox();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwnedBox;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwnedBox";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> dtor_types { get; }
    _IEnvironment DowncastClone();
    bool CanReadWithoutClone(Dafny.ISequence<Dafny.Rune> name);
    bool HasCloneSemantics(Dafny.ISequence<Dafny.Rune> name);
    Std.Wrappers._IOption<RAST._IType> GetType(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMP._IEnvironment AddAssigned(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe);
    DCOMP._IEnvironment RemoveAssigned(Dafny.ISequence<Dafny.Rune> name);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _i_names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _i_types;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> types) {
      this._i_names = names;
      this._i_types = types;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_i_names, _i_types);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Environment;
      return oth != null && object.Equals(this._i_names, oth._i_names) && object.Equals(this._i_types, oth._i_types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._i_names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._i_types);
      s += ")";
      return s;
    }
    private static readonly DCOMP._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Empty);
    public static DCOMP._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMP._IEnvironment>(DCOMP.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMP._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> types) {
      return new Environment(names, types);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> types) {
      return create(names, types);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._i_names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> dtor_types {
      get {
        return this._i_types;
      }
    }
    public static DCOMP._IEnvironment Empty() {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements());
    }
    public bool CanReadWithoutClone(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_types).Contains(name)) && ((Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((this).dtor_types,name)).CanReadWithoutClone());
    }
    public bool HasCloneSemantics(Dafny.ISequence<Dafny.Rune> name) {
      return !((this).CanReadWithoutClone(name));
    }
    public Std.Wrappers._IOption<RAST._IType> GetType(Dafny.ISequence<Dafny.Rune> name) {
      if (((this).dtor_types).Contains(name)) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((this).dtor_types,name));
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_types).Contains(name)) && ((Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((this).dtor_types,name)).is_Borrowed);
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_types).Contains(name)) && ((Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((this).dtor_types,name)).is_BorrowedMut);
    }
    public DCOMP._IEnvironment AddAssigned(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe)
    {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update((this).dtor_types, name, tpe));
    }
    public DCOMP._IEnvironment RemoveAssigned(Dafny.ISequence<Dafny.Rune> name) {
      BigInteger _2456_indexInEnv = Std.Collections.Seq.__default.IndexOf<Dafny.ISequence<Dafny.Rune>>((this).dtor_names, name);
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(((this).dtor_names).Subsequence(BigInteger.Zero, _2456_indexInEnv), ((this).dtor_names).Drop((_2456_indexInEnv) + (BigInteger.One))), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Subtract((this).dtor_types, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(name)));
    }
  }

  public interface _IObjectType {
    bool is_RawPointers { get; }
    bool is_RcMut { get; }
    _IObjectType DowncastClone();
  }
  public abstract class ObjectType : _IObjectType {
    public ObjectType() {
    }
    private static readonly DCOMP._IObjectType theDefault = create_RawPointers();
    public static DCOMP._IObjectType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IObjectType> _TYPE = new Dafny.TypeDescriptor<DCOMP._IObjectType>(DCOMP.ObjectType.Default());
    public static Dafny.TypeDescriptor<DCOMP._IObjectType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IObjectType create_RawPointers() {
      return new ObjectType_RawPointers();
    }
    public static _IObjectType create_RcMut() {
      return new ObjectType_RcMut();
    }
    public bool is_RawPointers { get { return this is ObjectType_RawPointers; } }
    public bool is_RcMut { get { return this is ObjectType_RcMut; } }
    public static System.Collections.Generic.IEnumerable<_IObjectType> AllSingletonConstructors {
      get {
        yield return ObjectType.create_RawPointers();
        yield return ObjectType.create_RcMut();
      }
    }
    public abstract _IObjectType DowncastClone();
  }
  public class ObjectType_RawPointers : ObjectType {
    public ObjectType_RawPointers() : base() {
    }
    public override _IObjectType DowncastClone() {
      if (this is _IObjectType dt) { return dt; }
      return new ObjectType_RawPointers();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.ObjectType_RawPointers;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.ObjectType.RawPointers";
      return s;
    }
  }
  public class ObjectType_RcMut : ObjectType {
    public ObjectType_RcMut() : base() {
    }
    public override _IObjectType DowncastClone() {
      if (this is _IObjectType dt) { return dt; }
      return new ObjectType_RcMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.ObjectType_RcMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.ObjectType.RcMut";
      return s;
    }
  }

  public partial class COMP {
    public COMP() {
      this.error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.Default();
      this._i_UnicodeChars = false;
      this._i_ObjectType = DCOMP.ObjectType.Default();
    }
    public RAST._IType Object(RAST._IType underlying) {
      if (((this).ObjectType).is_RawPointers) {
        return RAST.Type.create_PointerMut(underlying);
      } else {
        return RAST.__default.ObjectType(underlying);
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> error {get; set;}
    public void __ctor(bool unicodeChars, DCOMP._IObjectType objectType)
    {
      (this)._i_UnicodeChars = unicodeChars;
      (this)._i_ObjectType = objectType;
      (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
    }
    public RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<Dafny.Rune> _2457_modName;
      _2457_modName = DCOMP.__default.escapeName((mod).dtor_name);
      if (((mod).dtor_body).is_None) {
        s = RAST.Mod.create_ExternMod(_2457_modName);
      } else {
        Dafny.ISequence<RAST._IModDecl> _2458_body;
        Dafny.ISequence<RAST._IModDecl> _out15;
        _out15 = (this).GenModuleBody(((mod).dtor_body).dtor_value, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
        _2458_body = _out15;
        s = RAST.Mod.create_Mod(_2457_modName, _2458_body);
      }
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _hi5 = new BigInteger((body).Count);
      for (BigInteger _2459_i = BigInteger.Zero; _2459_i < _hi5; _2459_i++) {
        Dafny.ISequence<RAST._IModDecl> _2460_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source82 = (body).Select(_2459_i);
        if (_source82.is_Module) {
          DAST._IModule _2461___mcc_h0 = _source82.dtor_Module_i_a0;
          DAST._IModule _2462_m = _2461___mcc_h0;
          RAST._IMod _2463_mm;
          RAST._IMod _out16;
          _out16 = (this).GenModule(_2462_m, containingPath);
          _2463_mm = _out16;
          _2460_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_2463_mm));
        } else if (_source82.is_Class) {
          DAST._IClass _2464___mcc_h1 = _source82.dtor_Class_i_a0;
          DAST._IClass _2465_c = _2464___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = (this).GenClass(_2465_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_2465_c).dtor_name)));
          _2460_generated = _out17;
        } else if (_source82.is_Trait) {
          DAST._ITrait _2466___mcc_h2 = _source82.dtor_Trait_i_a0;
          DAST._ITrait _2467_t = _2466___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _2468_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = (this).GenTrait(_2467_t, containingPath);
          _2468_tt = _out18;
          _2460_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_2468_tt));
        } else if (_source82.is_Newtype) {
          DAST._INewtype _2469___mcc_h3 = _source82.dtor_Newtype_i_a0;
          DAST._INewtype _2470_n = _2469___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = (this).GenNewtype(_2470_n);
          _2460_generated = _out19;
        } else if (_source82.is_SynonymType) {
          DAST._ISynonymType _2471___mcc_h4 = _source82.dtor_SynonymType_i_a0;
          DAST._ISynonymType _2472_s = _2471___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = (this).GenSynonymType(_2472_s);
          _2460_generated = _out20;
        } else {
          DAST._IDatatype _2473___mcc_h5 = _source82.dtor_Datatype_i_a0;
          DAST._IDatatype _2474_d = _2473___mcc_h5;
          Dafny.ISequence<RAST._IModDecl> _out21;
          _out21 = (this).GenDatatype(_2474_d);
          _2460_generated = _out21;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _2460_generated);
      }
      return s;
    }
    public void GenTypeParam(DAST._ITypeArgDecl tp, out DAST._IType typeArg, out RAST._ITypeParamDecl typeParam)
    {
      typeArg = DAST.Type.Default();
      typeParam = RAST.TypeParamDecl.Default();
      typeArg = DAST.Type.create_TypeArg((tp).dtor_name);
      Dafny.ISequence<RAST._IType> _2475_genTpConstraint;
      _2475_genTpConstraint = ((((tp).dtor_bounds).Contains(DAST.TypeArgBound.create_SupportsEquality())) ? (Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DafnyTypeEq)) : (Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DafnyType)));
      if (((tp).dtor_bounds).Contains(DAST.TypeArgBound.create_SupportsDefault())) {
        _2475_genTpConstraint = Dafny.Sequence<RAST._IType>.Concat(_2475_genTpConstraint, Dafny.Sequence<RAST._IType>.FromElements(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Default"))));
      }
      typeParam = RAST.TypeParamDecl.create(DCOMP.__default.escapeName(((tp).dtor_name)), _2475_genTpConstraint);
    }
    public void GenTypeParameters(Dafny.ISequence<DAST._ITypeArgDecl> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._IType> typeParams, out Dafny.ISequence<RAST._ITypeParamDecl> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._IType>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParamDecl>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParamDecl>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((@params).Count)).Sign == 1) {
        BigInteger _hi6 = new BigInteger((@params).Count);
        for (BigInteger _2476_tpI = BigInteger.Zero; _2476_tpI < _hi6; _2476_tpI++) {
          DAST._ITypeArgDecl _2477_tp;
          _2477_tp = (@params).Select(_2476_tpI);
          DAST._IType _2478_typeArg;
          RAST._ITypeParamDecl _2479_typeParam;
          DAST._IType _out22;
          RAST._ITypeParamDecl _out23;
          (this).GenTypeParam(_2477_tp, out _out22, out _out23);
          _2478_typeArg = _out22;
          _2479_typeParam = _out23;
          RAST._IType _2480_rType;
          RAST._IType _out24;
          _out24 = (this).GenType(_2478_typeArg, false, false);
          _2480_rType = _out24;
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2478_typeArg));
          typeParams = Dafny.Sequence<RAST._IType>.Concat(typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2480_rType));
          constrainedTypeParams = Dafny.Sequence<RAST._ITypeParamDecl>.Concat(constrainedTypeParams, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(_2479_typeParam));
        }
      }
    }
    public Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2481_typeParamsSet;
      Dafny.ISequence<RAST._IType> _2482_rTypeParams;
      Dafny.ISequence<RAST._ITypeParamDecl> _2483_rTypeParamsDecls;
      Dafny.ISequence<Dafny.Rune> _2484_whereConstraints;
      Dafny.ISet<DAST._IType> _out25;
      Dafny.ISequence<RAST._IType> _out26;
      Dafny.ISequence<RAST._ITypeParamDecl> _out27;
      Dafny.ISequence<Dafny.Rune> _out28;
      (this).GenTypeParameters((c).dtor_typeParams, out _out25, out _out26, out _out27, out _out28);
      _2481_typeParamsSet = _out25;
      _2482_rTypeParams = _out26;
      _2483_rTypeParamsDecls = _out27;
      _2484_whereConstraints = _out28;
      Dafny.ISequence<Dafny.Rune> _2485_constrainedTypeParams;
      _2485_constrainedTypeParams = RAST.TypeParamDecl.ToStringMultiple(_2483_rTypeParamsDecls, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IField> _2486_fields;
      _2486_fields = Dafny.Sequence<RAST._IField>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _2487_fieldInits;
      _2487_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _hi7 = new BigInteger(((c).dtor_fields).Count);
      for (BigInteger _2488_fieldI = BigInteger.Zero; _2488_fieldI < _hi7; _2488_fieldI++) {
        DAST._IField _2489_field;
        _2489_field = ((c).dtor_fields).Select(_2488_fieldI);
        RAST._IType _2490_fieldType;
        RAST._IType _out29;
        _out29 = (this).GenType(((_2489_field).dtor_formal).dtor_typ, false, false);
        _2490_fieldType = _out29;
        Dafny.ISequence<Dafny.Rune> _2491_fieldRustName;
        _2491_fieldRustName = DCOMP.__default.escapeName(((_2489_field).dtor_formal).dtor_name);
        _2486_fields = Dafny.Sequence<RAST._IField>.Concat(_2486_fields, Dafny.Sequence<RAST._IField>.FromElements(RAST.Field.create(RAST.Visibility.create_PUB(), RAST.Formal.create(_2491_fieldRustName, _2490_fieldType))));
        Std.Wrappers._IOption<DAST._IExpression> _source83 = (_2489_field).dtor_defaultValue;
        if (_source83.is_None) {
          {
            RAST._IExpr _2492_default;
            _2492_default = RAST.__default.std__Default__default;
            if ((_2490_fieldType).IsObjectOrPointer()) {
              _2492_default = (_2490_fieldType).ToNullExpr();
            }
            _2487_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2487_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(_2491_fieldRustName, _2492_default)));
          }
        } else {
          DAST._IExpression _2493___mcc_h0 = _source83.dtor_value;
          DAST._IExpression _2494_e = _2493___mcc_h0;
          {
            RAST._IExpr _2495_expr;
            DCOMP._IOwnership _2496___v41;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2497___v42;
            RAST._IExpr _out30;
            DCOMP._IOwnership _out31;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out32;
            (this).GenExpr(_2494_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out30, out _out31, out _out32);
            _2495_expr = _out30;
            _2496___v41 = _out31;
            _2497___v42 = _out32;
            _2487_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2487_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(_2491_fieldRustName, _2495_expr)));
          }
        }
      }
      BigInteger _hi8 = new BigInteger(((c).dtor_typeParams).Count);
      for (BigInteger _2498_typeParamI = BigInteger.Zero; _2498_typeParamI < _hi8; _2498_typeParamI++) {
        DAST._IType _2499_typeArg;
        RAST._ITypeParamDecl _2500_typeParam;
        DAST._IType _out33;
        RAST._ITypeParamDecl _out34;
        (this).GenTypeParam(((c).dtor_typeParams).Select(_2498_typeParamI), out _out33, out _out34);
        _2499_typeArg = _out33;
        _2500_typeParam = _out34;
        RAST._IType _2501_rTypeArg;
        RAST._IType _out35;
        _out35 = (this).GenType(_2499_typeArg, false, false);
        _2501_rTypeArg = _out35;
        _2486_fields = Dafny.Sequence<RAST._IField>.Concat(_2486_fields, Dafny.Sequence<RAST._IField>.FromElements(RAST.Field.create(RAST.Visibility.create_PRIV(), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2498_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2501_rTypeArg))))));
        _2487_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2487_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2498_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
      }
      Dafny.ISequence<Dafny.Rune> _2502_datatypeName;
      _2502_datatypeName = DCOMP.__default.escapeName((c).dtor_name);
      RAST._IStruct _2503_struct;
      _2503_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _2502_datatypeName, _2483_rTypeParamsDecls, RAST.Fields.create_NamedFields(_2486_fields));
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_2503_struct));
      DAST._IType _2504_underlyingDatatype;
      _2504_underlyingDatatype = DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes)));
      Dafny.ISequence<RAST._IImplMember> _2505_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2506_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out36;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out37;
      (this).GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_AllocatedDatatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _2481_typeParamsSet, out _out36, out _out37);
      _2505_implBodyRaw = _out36;
      _2506_traitBodies = _out37;
      Dafny.ISequence<RAST._IImplMember> _2507_implBody;
      _2507_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create((this).allocate__fn, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some((this).Object(RAST.Type.create_SelfOwned())), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some((((RAST.__default.dafny__runtime).MSel((this).allocate)).ApplyType1(RAST.Type.create_SelfOwned())).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()))))), _2505_implBodyRaw);
      RAST._IImpl _2508_i;
      _2508_i = RAST.Impl.create_Impl(_2483_rTypeParamsDecls, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2502_datatypeName), _2482_rTypeParams), _2484_whereConstraints, _2507_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2508_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _2509_i;
        _2509_i = BigInteger.Zero;
        while ((_2509_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _2510_superClass;
          _2510_superClass = ((c).dtor_superClasses).Select(_2509_i);
          DAST._IType _source84 = _2510_superClass;
          if (_source84.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2511___mcc_h1 = _source84.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _2512___mcc_h2 = _source84.dtor_typeArgs;
            DAST._IResolvedType _2513___mcc_h3 = _source84.dtor_resolved;
            DAST._IResolvedType _source85 = _2513___mcc_h3;
            if (_source85.is_AllocatedDatatype) {
              DAST._IDatatypeType _2514___mcc_h7 = _source85.dtor_datatypeType;
            } else if (_source85.is_Datatype) {
              DAST._IDatatypeType _2515___mcc_h9 = _source85.dtor_datatypeType;
            } else if (_source85.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2516___mcc_h11 = _source85.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _2517___mcc_h12 = _source85.dtor_attributes;
              Dafny.ISequence<DAST._IType> _2518_typeArgs = _2512___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2519_traitPath = _2511___mcc_h1;
              {
                RAST._IType _2520_pathStr;
                RAST._IType _out38;
                _out38 = DCOMP.COMP.GenPath(_2519_traitPath);
                _2520_pathStr = _out38;
                Dafny.ISequence<RAST._IType> _2521_typeArgs;
                Dafny.ISequence<RAST._IType> _out39;
                _out39 = (this).GenTypeArgs(_2518_typeArgs, false, false);
                _2521_typeArgs = _out39;
                Dafny.ISequence<RAST._IImplMember> _2522_body;
                _2522_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_2506_traitBodies).Contains(_2519_traitPath)) {
                  _2522_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_2506_traitBodies,_2519_traitPath);
                }
                RAST._IType _2523_genSelfPath;
                RAST._IType _out40;
                _out40 = DCOMP.COMP.GenPath(path);
                _2523_genSelfPath = _out40;
                RAST._IModDecl _2524_x;
                _2524_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2483_rTypeParamsDecls, RAST.Type.create_TypeApp(_2520_pathStr, _2521_typeArgs), RAST.Type.create_TypeApp(_2523_genSelfPath, _2482_rTypeParams), _2484_whereConstraints, _2522_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_2524_x));
              }
            } else {
              DAST._IType _2525___mcc_h15 = _source85.dtor_baseType;
              DAST._INewtypeRange _2526___mcc_h16 = _source85.dtor_range;
              bool _2527___mcc_h17 = _source85.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _2528___mcc_h18 = _source85.dtor_attributes;
            }
          } else if (_source84.is_Nullable) {
            DAST._IType _2529___mcc_h23 = _source84.dtor_Nullable_i_a0;
          } else if (_source84.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2530___mcc_h25 = _source84.dtor_Tuple_i_a0;
          } else if (_source84.is_Array) {
            DAST._IType _2531___mcc_h27 = _source84.dtor_element;
            BigInteger _2532___mcc_h28 = _source84.dtor_dims;
          } else if (_source84.is_Seq) {
            DAST._IType _2533___mcc_h31 = _source84.dtor_element;
          } else if (_source84.is_Set) {
            DAST._IType _2534___mcc_h33 = _source84.dtor_element;
          } else if (_source84.is_Multiset) {
            DAST._IType _2535___mcc_h35 = _source84.dtor_element;
          } else if (_source84.is_Map) {
            DAST._IType _2536___mcc_h37 = _source84.dtor_key;
            DAST._IType _2537___mcc_h38 = _source84.dtor_value;
          } else if (_source84.is_SetBuilder) {
            DAST._IType _2538___mcc_h41 = _source84.dtor_element;
          } else if (_source84.is_MapBuilder) {
            DAST._IType _2539___mcc_h43 = _source84.dtor_key;
            DAST._IType _2540___mcc_h44 = _source84.dtor_value;
          } else if (_source84.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2541___mcc_h47 = _source84.dtor_args;
            DAST._IType _2542___mcc_h48 = _source84.dtor_result;
          } else if (_source84.is_Primitive) {
            DAST._IPrimitive _2543___mcc_h51 = _source84.dtor_Primitive_i_a0;
          } else if (_source84.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2544___mcc_h53 = _source84.dtor_Passthrough_i_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _2545___mcc_h55 = _source84.dtor_TypeArg_i_a0;
          }
          _2509_i = (_2509_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _2546_typeParamsSet;
      _2546_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._ITypeParamDecl> _2547_typeParamDecls;
      _2547_typeParamDecls = Dafny.Sequence<RAST._ITypeParamDecl>.FromElements();
      Dafny.ISequence<RAST._IType> _2548_typeParams;
      _2548_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2549_tpI;
      _2549_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_2549_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._ITypeArgDecl _2550_tp;
          _2550_tp = ((t).dtor_typeParams).Select(_2549_tpI);
          DAST._IType _2551_typeArg;
          RAST._ITypeParamDecl _2552_typeParamDecl;
          DAST._IType _out41;
          RAST._ITypeParamDecl _out42;
          (this).GenTypeParam(_2550_tp, out _out41, out _out42);
          _2551_typeArg = _out41;
          _2552_typeParamDecl = _out42;
          _2546_typeParamsSet = Dafny.Set<DAST._IType>.Union(_2546_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2551_typeArg));
          _2547_typeParamDecls = Dafny.Sequence<RAST._ITypeParamDecl>.Concat(_2547_typeParamDecls, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(_2552_typeParamDecl));
          RAST._IType _2553_typeParam;
          RAST._IType _out43;
          _out43 = (this).GenType(_2551_typeArg, false, false);
          _2553_typeParam = _out43;
          _2548_typeParams = Dafny.Sequence<RAST._IType>.Concat(_2548_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2553_typeParam));
          _2549_tpI = (_2549_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2554_fullPath;
      _2554_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _2555_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2556___v46;
      Dafny.ISequence<RAST._IImplMember> _out44;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out45;
      (this).GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_2554_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_2554_fullPath, (t).dtor_attributes)), _2546_typeParamsSet, out _out44, out _out45);
      _2555_implBody = _out44;
      _2556___v46 = _out45;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(_2547_typeParamDecls, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeName((t).dtor_name)), _2548_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2555_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2557_typeParamsSet;
      Dafny.ISequence<RAST._IType> _2558_rTypeParams;
      Dafny.ISequence<RAST._ITypeParamDecl> _2559_rTypeParamsDecls;
      Dafny.ISequence<Dafny.Rune> _2560_whereConstraints;
      Dafny.ISet<DAST._IType> _out46;
      Dafny.ISequence<RAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParamDecl> _out48;
      Dafny.ISequence<Dafny.Rune> _out49;
      (this).GenTypeParameters((c).dtor_typeParams, out _out46, out _out47, out _out48, out _out49);
      _2557_typeParamsSet = _out46;
      _2558_rTypeParams = _out47;
      _2559_rTypeParamsDecls = _out48;
      _2560_whereConstraints = _out49;
      Dafny.ISequence<Dafny.Rune> _2561_constrainedTypeParams;
      _2561_constrainedTypeParams = RAST.TypeParamDecl.ToStringMultiple(_2559_rTypeParamsDecls, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _2562_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source86 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source86.is_None) {
        RAST._IType _out50;
        _out50 = (this).GenType((c).dtor_base, false, false);
        _2562_underlyingType = _out50;
      } else {
        RAST._IType _2563___mcc_h0 = _source86.dtor_value;
        RAST._IType _2564_v = _2563___mcc_h0;
        _2562_underlyingType = _2564_v;
      }
      DAST._IType _2565_resultingType;
      _2565_resultingType = DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Newtype((c).dtor_base, (c).dtor_range, false, (c).dtor_attributes));
      Dafny.ISequence<Dafny.Rune> _2566_newtypeName;
      _2566_newtypeName = DCOMP.__default.escapeName((c).dtor_name);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), _2566_newtypeName, _2559_rTypeParamsDecls, RAST.Fields.create_NamelessFields(Dafny.Sequence<RAST._INamelessField>.FromElements(RAST.NamelessField.create(RAST.Visibility.create_PUB(), _2562_underlyingType))))));
      RAST._IExpr _2567_fnBody;
      _2567_fnBody = RAST.Expr.create_Identifier(_2566_newtypeName);
      Std.Wrappers._IOption<DAST._IExpression> _source87 = (c).dtor_witnessExpr;
      if (_source87.is_None) {
        {
          _2567_fnBody = (_2567_fnBody).Apply1(RAST.__default.std__Default__default);
        }
      } else {
        DAST._IExpression _2568___mcc_h1 = _source87.dtor_value;
        DAST._IExpression _2569_e = _2568___mcc_h1;
        {
          DAST._IExpression _2570_e;
          _2570_e = ((object.Equals((c).dtor_base, _2565_resultingType)) ? (_2569_e) : (DAST.Expression.create_Convert(_2569_e, (c).dtor_base, _2565_resultingType)));
          RAST._IExpr _2571_eStr;
          DCOMP._IOwnership _2572___v47;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2573___v48;
          RAST._IExpr _out51;
          DCOMP._IOwnership _out52;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out53;
          (this).GenExpr(_2570_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out51, out _out52, out _out53);
          _2571_eStr = _out51;
          _2572___v47 = _out52;
          _2573___v48 = _out53;
          _2567_fnBody = (_2567_fnBody).Apply1(_2571_eStr);
        }
      }
      RAST._IImplMember _2574_body;
      _2574_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2567_fnBody)));
      Std.Wrappers._IOption<DAST._INewtypeConstraint> _source88 = (c).dtor_constraint;
      if (_source88.is_None) {
      } else {
        DAST._INewtypeConstraint _2575___mcc_h2 = _source88.dtor_value;
        DAST._INewtypeConstraint _source89 = _2575___mcc_h2;
        DAST._IFormal _2576___mcc_h3 = _source89.dtor_variable;
        Dafny.ISequence<DAST._IStatement> _2577___mcc_h4 = _source89.dtor_constraintStmts;
        Dafny.ISequence<DAST._IStatement> _2578_constraintStmts = _2577___mcc_h4;
        DAST._IFormal _2579_formal = _2576___mcc_h3;
        RAST._IExpr _2580_rStmts;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2581___v49;
        DCOMP._IEnvironment _2582_newEnv;
        RAST._IExpr _out54;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out55;
        DCOMP._IEnvironment _out56;
        (this).GenStmts(_2578_constraintStmts, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), false, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out54, out _out55, out _out56);
        _2580_rStmts = _out54;
        _2581___v49 = _out55;
        _2582_newEnv = _out56;
        Dafny.ISequence<RAST._IFormal> _2583_rFormals;
        Dafny.ISequence<RAST._IFormal> _out57;
        _out57 = (this).GenParams(Dafny.Sequence<DAST._IFormal>.FromElements(_2579_formal));
        _2583_rFormals = _out57;
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2559_rTypeParamsDecls, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2566_newtypeName), _2558_rTypeParams), _2560_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("is"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), _2583_rFormals, Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Bool()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2580_rStmts))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2559_rTypeParamsDecls, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2566_newtypeName), _2558_rTypeParams), _2560_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_2574_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2559_rTypeParamsDecls, RAST.__default.DafnyPrint, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2566_newtypeName), _2558_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.Type.create_Bool())), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2559_rTypeParamsDecls, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2566_newtypeName), _2558_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_2562_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some((RAST.__default.SelfBorrowed).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenSynonymType(DAST._ISynonymType c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2584_typeParamsSet;
      Dafny.ISequence<RAST._IType> _2585_rTypeParams;
      Dafny.ISequence<RAST._ITypeParamDecl> _2586_rTypeParamsDecls;
      Dafny.ISequence<Dafny.Rune> _2587_whereConstraints;
      Dafny.ISet<DAST._IType> _out58;
      Dafny.ISequence<RAST._IType> _out59;
      Dafny.ISequence<RAST._ITypeParamDecl> _out60;
      Dafny.ISequence<Dafny.Rune> _out61;
      (this).GenTypeParameters((c).dtor_typeParams, out _out58, out _out59, out _out60, out _out61);
      _2584_typeParamsSet = _out58;
      _2585_rTypeParams = _out59;
      _2586_rTypeParamsDecls = _out60;
      _2587_whereConstraints = _out61;
      Dafny.ISequence<Dafny.Rune> _2588_constrainedTypeParams;
      _2588_constrainedTypeParams = RAST.TypeParamDecl.ToStringMultiple(_2586_rTypeParamsDecls, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _2589_synonymTypeName;
      _2589_synonymTypeName = DCOMP.__default.escapeName((c).dtor_name);
      RAST._IType _2590_resultingType;
      RAST._IType _out62;
      _out62 = (this).GenType((c).dtor_base, false, false);
      _2590_resultingType = _out62;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_TypeDecl(RAST.TypeSynonym.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _2589_synonymTypeName, _2586_rTypeParamsDecls, _2590_resultingType)));
      Std.Wrappers._IOption<DAST._IExpression> _source90 = (c).dtor_witnessExpr;
      if (_source90.is_None) {
      } else {
        DAST._IExpression _2591___mcc_h0 = _source90.dtor_value;
        DAST._IExpression _2592_e = _2591___mcc_h0;
        {
          RAST._IExpr _2593_rStmts;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2594___v50;
          DCOMP._IEnvironment _2595_newEnv;
          RAST._IExpr _out63;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out64;
          DCOMP._IEnvironment _out65;
          (this).GenStmts((c).dtor_witnessStmts, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), false, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out63, out _out64, out _out65);
          _2593_rStmts = _out63;
          _2594___v50 = _out64;
          _2595_newEnv = _out65;
          RAST._IExpr _2596_rExpr;
          DCOMP._IOwnership _2597___v51;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2598___v52;
          RAST._IExpr _out66;
          DCOMP._IOwnership _out67;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out68;
          (this).GenExpr(_2592_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), _2595_newEnv, DCOMP.Ownership.create_OwnershipOwned(), out _out66, out _out67, out _out68);
          _2596_rExpr = _out66;
          _2597___v51 = _out67;
          _2598___v52 = _out68;
          Dafny.ISequence<Dafny.Rune> _2599_constantName;
          _2599_constantName = DCOMP.__default.escapeName(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_init_"), ((c).dtor_name)));
          s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_TopFnDecl(RAST.TopFnDecl.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), RAST.Visibility.create_PUB(), RAST.Fn.create(_2599_constantName, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_2590_resultingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some((_2593_rStmts).Then(_2596_rExpr)))))));
        }
      }
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2600_typeParamsSet;
      Dafny.ISequence<RAST._IType> _2601_rTypeParams;
      Dafny.ISequence<RAST._ITypeParamDecl> _2602_rTypeParamsDecls;
      Dafny.ISequence<Dafny.Rune> _2603_whereConstraints;
      Dafny.ISet<DAST._IType> _out69;
      Dafny.ISequence<RAST._IType> _out70;
      Dafny.ISequence<RAST._ITypeParamDecl> _out71;
      Dafny.ISequence<Dafny.Rune> _out72;
      (this).GenTypeParameters((c).dtor_typeParams, out _out69, out _out70, out _out71, out _out72);
      _2600_typeParamsSet = _out69;
      _2601_rTypeParams = _out70;
      _2602_rTypeParamsDecls = _out71;
      _2603_whereConstraints = _out72;
      Dafny.ISequence<Dafny.Rune> _2604_datatypeName;
      _2604_datatypeName = DCOMP.__default.escapeName((c).dtor_name);
      Dafny.ISequence<RAST._IEnumCase> _2605_ctors;
      _2605_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _hi9 = new BigInteger(((c).dtor_ctors).Count);
      for (BigInteger _2606_i = BigInteger.Zero; _2606_i < _hi9; _2606_i++) {
        DAST._IDatatypeCtor _2607_ctor;
        _2607_ctor = ((c).dtor_ctors).Select(_2606_i);
        Dafny.ISequence<RAST._IField> _2608_ctorArgs;
        _2608_ctorArgs = Dafny.Sequence<RAST._IField>.FromElements();
        BigInteger _hi10 = new BigInteger(((_2607_ctor).dtor_args).Count);
        for (BigInteger _2609_j = BigInteger.Zero; _2609_j < _hi10; _2609_j++) {
          DAST._IFormal _2610_formal;
          _2610_formal = ((_2607_ctor).dtor_args).Select(_2609_j);
          RAST._IType _2611_formalType;
          RAST._IType _out73;
          _out73 = (this).GenType((_2610_formal).dtor_typ, false, false);
          _2611_formalType = _out73;
          if ((c).dtor_isCo) {
            _2608_ctorArgs = Dafny.Sequence<RAST._IField>.Concat(_2608_ctorArgs, Dafny.Sequence<RAST._IField>.FromElements(RAST.Field.create(RAST.Visibility.create_PRIV(), RAST.Formal.create(DCOMP.__default.escapeName((_2610_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_2611_formalType))))));
          } else {
            _2608_ctorArgs = Dafny.Sequence<RAST._IField>.Concat(_2608_ctorArgs, Dafny.Sequence<RAST._IField>.FromElements(RAST.Field.create(RAST.Visibility.create_PRIV(), RAST.Formal.create(DCOMP.__default.escapeName((_2610_formal).dtor_name), _2611_formalType))));
          }
        }
        _2605_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2605_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeName((_2607_ctor).dtor_name), RAST.Fields.create_NamedFields(_2608_ctorArgs))));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2612_selfPath;
      _2612_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _2613_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2614_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out74;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out75;
      (this).GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_2612_selfPath, (c).dtor_attributes))), _2600_typeParamsSet, out _out74, out _out75);
      _2613_implBodyRaw = _out74;
      _2614_traitBodies = _out75;
      Dafny.ISequence<RAST._IImplMember> _2615_implBody;
      _2615_implBody = _2613_implBodyRaw;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2616_emittedFields;
      _2616_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _hi11 = new BigInteger(((c).dtor_ctors).Count);
      for (BigInteger _2617_i = BigInteger.Zero; _2617_i < _hi11; _2617_i++) {
        DAST._IDatatypeCtor _2618_ctor;
        _2618_ctor = ((c).dtor_ctors).Select(_2617_i);
        BigInteger _hi12 = new BigInteger(((_2618_ctor).dtor_args).Count);
        for (BigInteger _2619_j = BigInteger.Zero; _2619_j < _hi12; _2619_j++) {
          DAST._IFormal _2620_formal;
          _2620_formal = ((_2618_ctor).dtor_args).Select(_2619_j);
          if (!((_2616_emittedFields).Contains((_2620_formal).dtor_name))) {
            _2616_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2616_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2620_formal).dtor_name));
            RAST._IType _2621_formalType;
            RAST._IType _out76;
            _out76 = (this).GenType((_2620_formal).dtor_typ, false, false);
            _2621_formalType = _out76;
            Dafny.ISequence<RAST._IMatchCase> _2622_cases;
            _2622_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _hi13 = new BigInteger(((c).dtor_ctors).Count);
            for (BigInteger _2623_k = BigInteger.Zero; _2623_k < _hi13; _2623_k++) {
              DAST._IDatatypeCtor _2624_ctor2;
              _2624_ctor2 = ((c).dtor_ctors).Select(_2623_k);
              Dafny.ISequence<Dafny.Rune> _2625_pattern;
              _2625_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2604_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeName((_2624_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _2626_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              bool _2627_hasMatchingField;
              _2627_hasMatchingField = false;
              BigInteger _hi14 = new BigInteger(((_2624_ctor2).dtor_args).Count);
              for (BigInteger _2628_l = BigInteger.Zero; _2628_l < _hi14; _2628_l++) {
                DAST._IFormal _2629_formal2;
                _2629_formal2 = ((_2624_ctor2).dtor_args).Select(_2628_l);
                if (object.Equals((_2620_formal).dtor_name, (_2629_formal2).dtor_name)) {
                  _2627_hasMatchingField = true;
                }
                _2625_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2625_pattern, DCOMP.__default.escapeName((_2629_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2625_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_2625_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_2627_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _2626_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeName((_2620_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _2626_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeName((_2620_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _2626_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _2630_ctorMatch;
              _2630_ctorMatch = RAST.MatchCase.create(_2625_pattern, RAST.Expr.create_RawExpr(_2626_rhs));
              _2622_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2622_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_2630_ctorMatch));
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _2622_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2622_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2604_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _2631_methodBody;
            _2631_methodBody = RAST.Expr.create_Match(RAST.__default.self, _2622_cases);
            _2615_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_2615_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeName((_2620_formal).dtor_name), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_2621_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2631_methodBody)))));
          }
        }
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        Dafny.ISequence<RAST._IType> _2632_types;
        _2632_types = Dafny.Sequence<RAST._IType>.FromElements();
        BigInteger _hi15 = new BigInteger(((c).dtor_typeParams).Count);
        for (BigInteger _2633_typeI = BigInteger.Zero; _2633_typeI < _hi15; _2633_typeI++) {
          DAST._IType _2634_typeArg;
          RAST._ITypeParamDecl _2635_rTypeParamDecl;
          DAST._IType _out77;
          RAST._ITypeParamDecl _out78;
          (this).GenTypeParam(((c).dtor_typeParams).Select(_2633_typeI), out _out77, out _out78);
          _2634_typeArg = _out77;
          _2635_rTypeParamDecl = _out78;
          RAST._IType _2636_rTypeArg;
          RAST._IType _out79;
          _out79 = (this).GenType(_2634_typeArg, false, false);
          _2636_rTypeArg = _out79;
          _2632_types = Dafny.Sequence<RAST._IType>.Concat(_2632_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2636_rTypeArg))));
        }
        _2605_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2605_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Fields.create_NamelessFields(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessField>(((System.Func<RAST._IType, RAST._INamelessField>)((_2637_tpe) => {
  return RAST.NamelessField.create(RAST.Visibility.create_PRIV(), _2637_tpe);
})), _2632_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _2638_enumBody;
      _2638_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq, Clone)]")), _2604_datatypeName, _2602_rTypeParamsDecls, _2605_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2602_rTypeParamsDecls, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2604_datatypeName), _2601_rTypeParams), _2603_whereConstraints, _2615_implBody)));
      Dafny.ISequence<RAST._IMatchCase> _2639_printImplBodyCases;
      _2639_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      Dafny.ISequence<RAST._IMatchCase> _2640_hashImplBodyCases;
      _2640_hashImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      BigInteger _hi16 = new BigInteger(((c).dtor_ctors).Count);
      for (BigInteger _2641_i = BigInteger.Zero; _2641_i < _hi16; _2641_i++) {
        DAST._IDatatypeCtor _2642_ctor;
        _2642_ctor = ((c).dtor_ctors).Select(_2641_i);
        Dafny.ISequence<Dafny.Rune> _2643_ctorMatch;
        _2643_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeName((_2642_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _2644_modulePrefix;
        _2644_modulePrefix = ((((((c).dtor_enclosingModule))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeName(((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _2645_printRhs;
        _2645_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _2644_modulePrefix), DCOMP.__default.escapeName((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeName((_2642_ctor).dtor_name)), (((_2642_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        RAST._IExpr _2646_hashRhs;
        _2646_hashRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        BigInteger _hi17 = new BigInteger(((_2642_ctor).dtor_args).Count);
        for (BigInteger _2647_j = BigInteger.Zero; _2647_j < _hi17; _2647_j++) {
          DAST._IFormal _2648_formal;
          _2648_formal = ((_2642_ctor).dtor_args).Select(_2647_j);
          Dafny.ISequence<Dafny.Rune> _2649_formalName;
          _2649_formalName = DCOMP.__default.escapeName((_2648_formal).dtor_name);
          _2643_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2643_ctorMatch, _2649_formalName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _2646_hashRhs = (_2646_hashRhs).Then(((RAST.Expr.create_Identifier(_2649_formalName)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("hash"))).Apply1(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_state"))));
          if ((_2647_j).Sign == 1) {
            _2645_printRhs = (_2645_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _2645_printRhs = (_2645_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeName((_2648_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
        }
        _2643_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_2643_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_2642_ctor).dtor_hasAnyArgs) {
          _2645_printRhs = (_2645_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _2645_printRhs = (_2645_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _2639_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2639_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2604_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2643_ctorMatch), RAST.Expr.create_Block(_2645_printRhs))));
        _2640_hashImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2640_hashImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2604_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2643_ctorMatch), RAST.Expr.create_Block(_2646_hashRhs))));
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _2639_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2639_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2604_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
        _2640_hashImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2640_hashImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2604_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      Dafny.ISequence<RAST._ITypeParamDecl> _2650_defaultConstrainedTypeParams;
      _2650_defaultConstrainedTypeParams = RAST.TypeParamDecl.AddConstraintsMultiple(_2602_rTypeParamsDecls, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
      Dafny.ISequence<RAST._ITypeParamDecl> _2651_rTypeParamsDeclsWithEq;
      _2651_rTypeParamsDeclsWithEq = RAST.TypeParamDecl.AddConstraintsMultiple(_2602_rTypeParamsDecls, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.Eq));
      Dafny.ISequence<RAST._ITypeParamDecl> _2652_rTypeParamsDeclsWithHash;
      _2652_rTypeParamsDeclsWithHash = RAST.TypeParamDecl.AddConstraintsMultiple(_2602_rTypeParamsDecls, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.Hash));
      RAST._IExpr _2653_printImplBody;
      _2653_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _2639_printImplBodyCases);
      RAST._IExpr _2654_hashImplBody;
      _2654_hashImplBody = RAST.Expr.create_Match(RAST.__default.self, _2640_hashImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _2655_printImpl;
      _2655_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2602_rTypeParamsDecls, ((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Debug")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2604_datatypeName), _2601_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), RAST.Type.create_BorrowedMut(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Formatter"))))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyPrint"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.self, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")), RAST.Expr.create_LiteralBool(true))))))))), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2602_rTypeParamsDecls, RAST.__default.DafnyPrint, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2604_datatypeName), _2601_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_BorrowedMut(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Formatter")))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.Type.create_Bool())), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2653_printImplBody)))))), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2651_rTypeParamsDeclsWithEq, RAST.__default.Eq, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2604_datatypeName), _2601_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements())), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2652_rTypeParamsDeclsWithHash, RAST.__default.Hash, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2604_datatypeName), _2601_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("hash"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(RAST.TypeParamDecl.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_H"), Dafny.Sequence<RAST._IType>.FromElements(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("hash"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Hasher"))))), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_state"), RAST.Type.create_BorrowedMut(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_H"))))), Std.Wrappers.Option<RAST._IType>.create_None(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2654_hashImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _2656_defaultImpl;
      _2656_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      Dafny.ISequence<RAST._IModDecl> _2657_asRefImpl;
      _2657_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        RAST._IExpr _2658_structName;
        _2658_structName = (RAST.Expr.create_Identifier(_2604_datatypeName)).MSel(DCOMP.__default.escapeName((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _2659_structAssignments;
        _2659_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        BigInteger _hi18 = new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count);
        for (BigInteger _2660_i = BigInteger.Zero; _2660_i < _hi18; _2660_i++) {
          DAST._IFormal _2661_formal;
          _2661_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_2660_i);
          _2659_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2659_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeName((_2661_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
        }
        Dafny.ISequence<RAST._ITypeParamDecl> _2662_defaultConstrainedTypeParams;
        _2662_defaultConstrainedTypeParams = RAST.TypeParamDecl.AddConstraintsMultiple(_2602_rTypeParamsDecls, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        RAST._IType _2663_fullType;
        _2663_fullType = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2604_datatypeName), _2601_rTypeParams);
        _2656_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2662_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, _2663_fullType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_2663_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_2658_structName, _2659_structAssignments))))))));
        _2657_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2602_rTypeParamsDecls, (((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("convert"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AsRef"))).Apply1(_2663_fullType), RAST.Type.create_Borrowed(_2663_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.self)))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_2638_enumBody, _2655_printImpl), _2656_defaultImpl), _2657_asRefImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = ((((((p).Select(BigInteger.Zero)))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (((((((p).Select(BigInteger.Zero)))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"))) ? (RAST.__default.dafny__runtime__type) : (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))))));
        BigInteger _hi19 = new BigInteger((p).Count);
        for (BigInteger _2664_i = BigInteger.Zero; _2664_i < _hi19; _2664_i++) {
          r = (r).MSel(DCOMP.__default.escapeName(((p).Select(_2664_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = ((((((p).Select(BigInteger.Zero)))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (((((((p).Select(BigInteger.Zero)))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"))) ? (RAST.__default.dafny__runtime) : (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))))));
        BigInteger _hi20 = new BigInteger((p).Count);
        for (BigInteger _2665_i = BigInteger.Zero; _2665_i < _hi20; _2665_i++) {
          r = (r).MSel(DCOMP.__default.escapeName(((p).Select(_2665_i))));
        }
      }
      return r;
    }
    public Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _2666_i;
        _2666_i = BigInteger.Zero;
        while ((_2666_i) < (new BigInteger((args).Count))) {
          RAST._IType _2667_genTp;
          RAST._IType _out80;
          _out80 = (this).GenType((args).Select(_2666_i), inBinding, inFn);
          _2667_genTp = _out80;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_2667_genTp));
          _2666_i = (_2666_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source91 = c;
      if (_source91.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2668___mcc_h0 = _source91.dtor_Path_i_a0;
        Dafny.ISequence<DAST._IType> _2669___mcc_h1 = _source91.dtor_typeArgs;
        DAST._IResolvedType _2670___mcc_h2 = _source91.dtor_resolved;
        DAST._IResolvedType _2671_resolved = _2670___mcc_h2;
        Dafny.ISequence<DAST._IType> _2672_args = _2669___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2673_p = _2668___mcc_h0;
        {
          RAST._IType _2674_t;
          RAST._IType _out81;
          _out81 = DCOMP.COMP.GenPath(_2673_p);
          _2674_t = _out81;
          Dafny.ISequence<RAST._IType> _2675_typeArgs;
          Dafny.ISequence<RAST._IType> _out82;
          _out82 = (this).GenTypeArgs(_2672_args, inBinding, inFn);
          _2675_typeArgs = _out82;
          s = RAST.Type.create_TypeApp(_2674_t, _2675_typeArgs);
          DAST._IResolvedType _source92 = _2671_resolved;
          if (_source92.is_AllocatedDatatype) {
            DAST._IDatatypeType _2676___mcc_h21 = _source92.dtor_datatypeType;
            DAST._IDatatypeType _source93 = _2676___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2677___mcc_h22 = _source93.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2678___mcc_h23 = _source93.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2679_attributes = _2678___mcc_h23;
            {
              s = (this).Object(s);
            }
          } else if (_source92.is_Datatype) {
            DAST._IDatatypeType _2680___mcc_h24 = _source92.dtor_datatypeType;
            DAST._IDatatypeType _source94 = _2680___mcc_h24;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2681___mcc_h25 = _source94.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2682___mcc_h26 = _source94.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2683_attributes = _2682___mcc_h26;
            {
              if ((this).IsRcWrapped(_2683_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source92.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2684___mcc_h27 = _source92.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2685___mcc_h28 = _source92.dtor_attributes;
            {
              if ((_2673_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = ((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("any"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Any"));
              }
              s = (this).Object(RAST.Type.create_DynType(s));
            }
          } else {
            DAST._IType _2686___mcc_h29 = _source92.dtor_baseType;
            DAST._INewtypeRange _2687___mcc_h30 = _source92.dtor_range;
            bool _2688___mcc_h31 = _source92.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _2689___mcc_h32 = _source92.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2690_attributes = _2689___mcc_h32;
            bool _2691_erased = _2688___mcc_h31;
            DAST._INewtypeRange _2692_range = _2687___mcc_h30;
            DAST._IType _2693_t = _2686___mcc_h29;
            {
              if (_2691_erased) {
                Std.Wrappers._IOption<RAST._IType> _source95 = DCOMP.COMP.NewtypeToRustType(_2693_t, _2692_range);
                if (_source95.is_None) {
                } else {
                  RAST._IType _2694___mcc_h33 = _source95.dtor_value;
                  RAST._IType _2695_v = _2694___mcc_h33;
                  s = _2695_v;
                }
              }
            }
          }
        }
      } else if (_source91.is_Nullable) {
        DAST._IType _2696___mcc_h3 = _source91.dtor_Nullable_i_a0;
        DAST._IType _2697_inner = _2696___mcc_h3;
        {
          RAST._IType _2698_innerExpr;
          RAST._IType _out83;
          _out83 = (this).GenType(_2697_inner, inBinding, inFn);
          _2698_innerExpr = _out83;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_2698_innerExpr));
        }
      } else if (_source91.is_Tuple) {
        Dafny.ISequence<DAST._IType> _2699___mcc_h4 = _source91.dtor_Tuple_i_a0;
        Dafny.ISequence<DAST._IType> _2700_types = _2699___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _2701_args;
          _2701_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2702_i;
          _2702_i = BigInteger.Zero;
          while ((_2702_i) < (new BigInteger((_2700_types).Count))) {
            RAST._IType _2703_generated;
            RAST._IType _out84;
            _out84 = (this).GenType((_2700_types).Select(_2702_i), inBinding, inFn);
            _2703_generated = _out84;
            _2701_args = Dafny.Sequence<RAST._IType>.Concat(_2701_args, Dafny.Sequence<RAST._IType>.FromElements(_2703_generated));
            _2702_i = (_2702_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_2701_args);
        }
      } else if (_source91.is_Array) {
        DAST._IType _2704___mcc_h5 = _source91.dtor_element;
        BigInteger _2705___mcc_h6 = _source91.dtor_dims;
        BigInteger _2706_dims = _2705___mcc_h6;
        DAST._IType _2707_element = _2704___mcc_h5;
        {
          if ((_2706_dims) > (new BigInteger(16))) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<i>Array of dimensions greater than 16</i>"));
          } else {
            RAST._IType _2708_elem;
            RAST._IType _out85;
            _out85 = (this).GenType(_2707_element, inBinding, inFn);
            _2708_elem = _out85;
            if ((_2706_dims) == (BigInteger.One)) {
              s = RAST.Type.create_Array(_2708_elem, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
              s = (this).Object(s);
            } else {
              Dafny.ISequence<Dafny.Rune> _2709_n;
              _2709_n = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Array"), Std.Strings.__default.OfNat(_2706_dims));
              s = ((RAST.__default.dafny__runtime__type).MSel(_2709_n)).Apply(Dafny.Sequence<RAST._IType>.FromElements(_2708_elem));
              s = (this).Object(s);
            }
          }
        }
      } else if (_source91.is_Seq) {
        DAST._IType _2710___mcc_h7 = _source91.dtor_element;
        DAST._IType _2711_element = _2710___mcc_h7;
        {
          RAST._IType _2712_elem;
          RAST._IType _out86;
          _out86 = (this).GenType(_2711_element, inBinding, inFn);
          _2712_elem = _out86;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_2712_elem));
        }
      } else if (_source91.is_Set) {
        DAST._IType _2713___mcc_h8 = _source91.dtor_element;
        DAST._IType _2714_element = _2713___mcc_h8;
        {
          RAST._IType _2715_elem;
          RAST._IType _out87;
          _out87 = (this).GenType(_2714_element, inBinding, inFn);
          _2715_elem = _out87;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_2715_elem));
        }
      } else if (_source91.is_Multiset) {
        DAST._IType _2716___mcc_h9 = _source91.dtor_element;
        DAST._IType _2717_element = _2716___mcc_h9;
        {
          RAST._IType _2718_elem;
          RAST._IType _out88;
          _out88 = (this).GenType(_2717_element, inBinding, inFn);
          _2718_elem = _out88;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_2718_elem));
        }
      } else if (_source91.is_Map) {
        DAST._IType _2719___mcc_h10 = _source91.dtor_key;
        DAST._IType _2720___mcc_h11 = _source91.dtor_value;
        DAST._IType _2721_value = _2720___mcc_h11;
        DAST._IType _2722_key = _2719___mcc_h10;
        {
          RAST._IType _2723_keyType;
          RAST._IType _out89;
          _out89 = (this).GenType(_2722_key, inBinding, inFn);
          _2723_keyType = _out89;
          RAST._IType _2724_valueType;
          RAST._IType _out90;
          _out90 = (this).GenType(_2721_value, inBinding, inFn);
          _2724_valueType = _out90;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_2723_keyType, _2724_valueType));
        }
      } else if (_source91.is_SetBuilder) {
        DAST._IType _2725___mcc_h12 = _source91.dtor_element;
        DAST._IType _2726_elem = _2725___mcc_h12;
        {
          RAST._IType _2727_elemType;
          RAST._IType _out91;
          _out91 = (this).GenType(_2726_elem, inBinding, inFn);
          _2727_elemType = _out91;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2727_elemType));
        }
      } else if (_source91.is_MapBuilder) {
        DAST._IType _2728___mcc_h13 = _source91.dtor_key;
        DAST._IType _2729___mcc_h14 = _source91.dtor_value;
        DAST._IType _2730_value = _2729___mcc_h14;
        DAST._IType _2731_key = _2728___mcc_h13;
        {
          RAST._IType _2732_keyType;
          RAST._IType _out92;
          _out92 = (this).GenType(_2731_key, inBinding, inFn);
          _2732_keyType = _out92;
          RAST._IType _2733_valueType;
          RAST._IType _out93;
          _out93 = (this).GenType(_2730_value, inBinding, inFn);
          _2733_valueType = _out93;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2732_keyType, _2733_valueType));
        }
      } else if (_source91.is_Arrow) {
        Dafny.ISequence<DAST._IType> _2734___mcc_h15 = _source91.dtor_args;
        DAST._IType _2735___mcc_h16 = _source91.dtor_result;
        DAST._IType _2736_result = _2735___mcc_h16;
        Dafny.ISequence<DAST._IType> _2737_args = _2734___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _2738_argTypes;
          _2738_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2739_i;
          _2739_i = BigInteger.Zero;
          while ((_2739_i) < (new BigInteger((_2737_args).Count))) {
            RAST._IType _2740_generated;
            RAST._IType _out94;
            _out94 = (this).GenType((_2737_args).Select(_2739_i), inBinding, true);
            _2740_generated = _out94;
            _2738_argTypes = Dafny.Sequence<RAST._IType>.Concat(_2738_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_2740_generated)));
            _2739_i = (_2739_i) + (BigInteger.One);
          }
          RAST._IType _2741_resultType;
          RAST._IType _out95;
          _out95 = (this).GenType(_2736_result, inBinding, (inFn) || (inBinding));
          _2741_resultType = _out95;
          s = RAST.__default.Rc(RAST.Type.create_DynType(RAST.Type.create_FnType(_2738_argTypes, _2741_resultType)));
        }
      } else if (_source91.is_Primitive) {
        DAST._IPrimitive _2742___mcc_h17 = _source91.dtor_Primitive_i_a0;
        DAST._IPrimitive _2743_p = _2742___mcc_h17;
        {
          DAST._IPrimitive _source96 = _2743_p;
          if (_source96.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source96.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source96.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel((this).DafnyChar)));
          } else if (_source96.is_Bool) {
            s = RAST.Type.create_Bool();
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel((this).DafnyChar);
          }
        }
      } else if (_source91.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _2744___mcc_h18 = _source91.dtor_Passthrough_i_a0;
        Dafny.ISequence<Dafny.Rune> _2745_v = _2744___mcc_h18;
        s = RAST.__default.RawType(_2745_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _2746___mcc_h19 = _source91.dtor_TypeArg_i_a0;
        Dafny.ISequence<Dafny.Rune> _source97 = _2746___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _2747___mcc_h20 = _source97;
        Dafny.ISequence<Dafny.Rune> _2748_name = _2747___mcc_h20;
        s = RAST.Type.create_TIdentifier(DCOMP.__default.escapeName(_2748_name));
      }
      return s;
    }
    public void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _hi21 = new BigInteger((body).Count);
      for (BigInteger _2749_i = BigInteger.Zero; _2749_i < _hi21; _2749_i++) {
        DAST._IMethod _source98 = (body).Select(_2749_i);
        DAST._IMethod _2750___mcc_h0 = _source98;
        DAST._IMethod _2751_m = _2750___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source99 = (_2751_m).dtor_overridingPath;
          if (_source99.is_None) {
            {
              RAST._IImplMember _2752_generated;
              RAST._IImplMember _out96;
              _out96 = (this).GenMethod(_2751_m, forTrait, enclosingType, enclosingTypeParams);
              _2752_generated = _out96;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_2752_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2753___mcc_h1 = _source99.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2754_p = _2753___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _2755_existing;
              _2755_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_2754_p)) {
                _2755_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_2754_p);
              }
              RAST._IImplMember _2756_genMethod;
              RAST._IImplMember _out97;
              _out97 = (this).GenMethod(_2751_m, true, enclosingType, enclosingTypeParams);
              _2756_genMethod = _out97;
              _2755_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_2755_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_2756_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_2754_p, _2755_existing)));
            }
          }
        }
      }
    }
    public Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _hi22 = new BigInteger((@params).Count);
      for (BigInteger _2757_i = BigInteger.Zero; _2757_i < _hi22; _2757_i++) {
        DAST._IFormal _2758_param;
        _2758_param = (@params).Select(_2757_i);
        RAST._IType _2759_paramType;
        RAST._IType _out98;
        _out98 = (this).GenType((_2758_param).dtor_typ, false, false);
        _2759_paramType = _out98;
        if ((!((_2759_paramType).CanReadWithoutClone())) && (!((_2758_param).dtor_attributes).Contains(DCOMP.__default.AttributeOwned))) {
          _2759_paramType = RAST.Type.create_Borrowed(_2759_paramType);
        }
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeName((_2758_param).dtor_name), _2759_paramType)));
      }
      return s;
    }
    public RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _2760_params;
      Dafny.ISequence<RAST._IFormal> _out99;
      _out99 = (this).GenParams((m).dtor_params);
      _2760_params = _out99;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2761_paramNames;
      _2761_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _2762_paramTypes;
      _2762_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements();
      BigInteger _hi23 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _2763_paramI = BigInteger.Zero; _2763_paramI < _hi23; _2763_paramI++) {
        DAST._IFormal _2764_dafny__formal;
        _2764_dafny__formal = ((m).dtor_params).Select(_2763_paramI);
        RAST._IFormal _2765_formal;
        _2765_formal = (_2760_params).Select(_2763_paramI);
        Dafny.ISequence<Dafny.Rune> _2766_name;
        _2766_name = (_2765_formal).dtor_name;
        _2761_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2761_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2766_name));
        _2762_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_2762_paramTypes, _2766_name, (_2765_formal).dtor_tpe);
      }
      Dafny.ISequence<Dafny.Rune> _2767_fnName;
      _2767_fnName = DCOMP.__default.escapeName((m).dtor_name);
      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2768_selfIdentifier;
      _2768_selfIdentifier = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      if (!((m).dtor_isStatic)) {
        Dafny.ISequence<Dafny.Rune> _2769_selfId;
        _2769_selfId = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
        if ((_2767_fnName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_ctor"))) {
          _2769_selfId = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this");
        }
        if (forTrait) {
          RAST._IFormal _2770_selfFormal;
          _2770_selfFormal = (((m).dtor_wasFunction) ? (RAST.Formal.selfBorrowed) : (RAST.Formal.selfBorrowedMut));
          _2760_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(_2770_selfFormal), _2760_params);
        } else {
          RAST._IType _2771_tpe;
          RAST._IType _out100;
          _out100 = (this).GenType(enclosingType, false, false);
          _2771_tpe = _out100;
          if (((_2769_selfId).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && ((_2771_tpe).IsObjectOrPointer())) {
            if ((m).dtor_wasFunction) {
              _2771_tpe = RAST.__default.SelfBorrowed;
            } else {
              _2771_tpe = RAST.__default.SelfBorrowedMut;
            }
          } else {
            if (!((_2771_tpe).CanReadWithoutClone())) {
              _2771_tpe = RAST.Type.create_Borrowed(_2771_tpe);
            }
          }
          _2760_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(_2769_selfId, _2771_tpe)), _2760_params);
        }
        _2768_selfIdentifier = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_2769_selfId);
      }
      Dafny.ISequence<RAST._IType> _2772_retTypeArgs;
      _2772_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2773_typeI;
      _2773_typeI = BigInteger.Zero;
      while ((_2773_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _2774_typeExpr;
        RAST._IType _out101;
        _out101 = (this).GenType(((m).dtor_outTypes).Select(_2773_typeI), false, false);
        _2774_typeExpr = _out101;
        _2772_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_2772_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_2774_typeExpr));
        _2773_typeI = (_2773_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _2775_visibility;
      _2775_visibility = ((forTrait) ? (RAST.Visibility.create_PRIV()) : (RAST.Visibility.create_PUB()));
      Dafny.ISequence<DAST._ITypeArgDecl> _2776_typeParamsFiltered;
      _2776_typeParamsFiltered = Dafny.Sequence<DAST._ITypeArgDecl>.FromElements();
      BigInteger _hi24 = new BigInteger(((m).dtor_typeParams).Count);
      for (BigInteger _2777_typeParamI = BigInteger.Zero; _2777_typeParamI < _hi24; _2777_typeParamI++) {
        DAST._ITypeArgDecl _2778_typeParam;
        _2778_typeParam = ((m).dtor_typeParams).Select(_2777_typeParamI);
        if (!((enclosingTypeParams).Contains(DAST.Type.create_TypeArg((_2778_typeParam).dtor_name)))) {
          _2776_typeParamsFiltered = Dafny.Sequence<DAST._ITypeArgDecl>.Concat(_2776_typeParamsFiltered, Dafny.Sequence<DAST._ITypeArgDecl>.FromElements(_2778_typeParam));
        }
      }
      Dafny.ISequence<RAST._ITypeParamDecl> _2779_typeParams;
      _2779_typeParams = Dafny.Sequence<RAST._ITypeParamDecl>.FromElements();
      if ((new BigInteger((_2776_typeParamsFiltered).Count)).Sign == 1) {
        BigInteger _hi25 = new BigInteger((_2776_typeParamsFiltered).Count);
        for (BigInteger _2780_i = BigInteger.Zero; _2780_i < _hi25; _2780_i++) {
          DAST._IType _2781_typeArg;
          RAST._ITypeParamDecl _2782_rTypeParamDecl;
          DAST._IType _out102;
          RAST._ITypeParamDecl _out103;
          (this).GenTypeParam((_2776_typeParamsFiltered).Select(_2780_i), out _out102, out _out103);
          _2781_typeArg = _out102;
          _2782_rTypeParamDecl = _out103;
          _2779_typeParams = Dafny.Sequence<RAST._ITypeParamDecl>.Concat(_2779_typeParams, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(_2782_rTypeParamDecl));
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _2783_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      DCOMP._IEnvironment _2784_env = DCOMP.Environment.Default();
      RAST._IExpr _2785_preBody;
      _2785_preBody = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2786_preAssignNames;
      _2786_preAssignNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _2787_preAssignTypes;
      _2787_preAssignTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements();
      if ((m).dtor_hasBody) {
        RAST._IExpr _2788_earlyReturn;
        _2788_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source100 = (m).dtor_outVars;
        if (_source100.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2789___mcc_h0 = _source100.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2790_outVars = _2789___mcc_h0;
          {
            if ((m).dtor_outVarsAreUninitFieldsToAssign) {
              _2788_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(Dafny.Sequence<RAST._IExpr>.FromElements())));
              BigInteger _hi26 = new BigInteger((_2790_outVars).Count);
              for (BigInteger _2791_outI = BigInteger.Zero; _2791_outI < _hi26; _2791_outI++) {
                Dafny.ISequence<Dafny.Rune> _2792_outVar;
                _2792_outVar = (_2790_outVars).Select(_2791_outI);
                Dafny.ISequence<Dafny.Rune> _2793_outName;
                _2793_outName = DCOMP.__default.escapeName((_2792_outVar));
                Dafny.ISequence<Dafny.Rune> _2794_tracker__name;
                _2794_tracker__name = DCOMP.__default.AddAssignedPrefix(_2793_outName);
                _2786_preAssignNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2786_preAssignNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2794_tracker__name));
                _2787_preAssignTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_2787_preAssignTypes, _2794_tracker__name, RAST.Type.create_Bool());
                _2785_preBody = (_2785_preBody).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), _2794_tracker__name, Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Bool()), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_LiteralBool(false))));
              }
            } else {
              Dafny.ISequence<RAST._IExpr> _2795_tupleArgs;
              _2795_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
              BigInteger _hi27 = new BigInteger((_2790_outVars).Count);
              for (BigInteger _2796_outI = BigInteger.Zero; _2796_outI < _hi27; _2796_outI++) {
                Dafny.ISequence<Dafny.Rune> _2797_outVar;
                _2797_outVar = (_2790_outVars).Select(_2796_outI);
                RAST._IType _2798_outType;
                RAST._IType _out104;
                _out104 = (this).GenType(((m).dtor_outTypes).Select(_2796_outI), false, false);
                _2798_outType = _out104;
                Dafny.ISequence<Dafny.Rune> _2799_outName;
                _2799_outName = DCOMP.__default.escapeName((_2797_outVar));
                _2761_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2761_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2799_outName));
                RAST._IType _2800_outMaybeType;
                _2800_outMaybeType = (((_2798_outType).CanReadWithoutClone()) ? (_2798_outType) : (RAST.__default.MaybePlaceboType(_2798_outType)));
                _2762_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_2762_paramTypes, _2799_outName, _2800_outMaybeType);
                RAST._IExpr _2801_outVarReturn;
                DCOMP._IOwnership _2802___v57;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2803___v58;
                RAST._IExpr _out105;
                DCOMP._IOwnership _out106;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
                (this).GenExpr(DAST.Expression.create_Ident((_2797_outVar)), Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2799_outName), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, RAST._IType>(_2799_outName, _2800_outMaybeType))), DCOMP.Ownership.create_OwnershipOwned(), out _out105, out _out106, out _out107);
                _2801_outVarReturn = _out105;
                _2802___v57 = _out106;
                _2803___v58 = _out107;
                _2795_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_2795_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(_2801_outVarReturn));
              }
              if ((new BigInteger((_2795_tupleArgs).Count)) == (BigInteger.One)) {
                _2788_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some((_2795_tupleArgs).Select(BigInteger.Zero)));
              } else {
                _2788_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_2795_tupleArgs)));
              }
            }
          }
        }
        _2784_env = DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2786_preAssignNames, _2761_paramNames), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Merge(_2787_preAssignTypes, _2762_paramTypes));
        RAST._IExpr _2804_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2805___v59;
        DCOMP._IEnvironment _2806___v60;
        RAST._IExpr _out108;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
        DCOMP._IEnvironment _out110;
        (this).GenStmts((m).dtor_body, _2768_selfIdentifier, _2784_env, true, _2788_earlyReturn, out _out108, out _out109, out _out110);
        _2804_body = _out108;
        _2805___v59 = _out109;
        _2806___v60 = _out110;
        _2783_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some((_2785_preBody).Then(_2804_body));
      } else {
        _2784_env = DCOMP.Environment.create(_2761_paramNames, _2762_paramTypes);
        _2783_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_2775_visibility, RAST.Fn.create(_2767_fnName, _2779_typeParams, _2760_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_2772_retTypeArgs).Count)) == (BigInteger.One)) ? ((_2772_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_2772_retTypeArgs)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2783_fBody));
      return s;
    }
    public void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents, out DCOMP._IEnvironment newEnv)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      newEnv = DCOMP.Environment.Default();
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2807_declarations;
      _2807_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2808_i;
      _2808_i = BigInteger.Zero;
      newEnv = env;
      Dafny.ISequence<DAST._IStatement> _2809_stmts;
      _2809_stmts = stmts;
      while ((_2808_i) < (new BigInteger((_2809_stmts).Count))) {
        DAST._IStatement _2810_stmt;
        _2810_stmt = (_2809_stmts).Select(_2808_i);
        DAST._IStatement _source101 = _2810_stmt;
        if (_source101.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2811___mcc_h0 = _source101.dtor_name;
          DAST._IType _2812___mcc_h1 = _source101.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2813___mcc_h2 = _source101.dtor_maybeValue;
          Std.Wrappers._IOption<DAST._IExpression> _source102 = _2813___mcc_h2;
          if (_source102.is_None) {
            DAST._IType _2814_optType = _2812___mcc_h1;
            Dafny.ISequence<Dafny.Rune> _2815_name = _2811___mcc_h0;
            if (((_2808_i) + (BigInteger.One)) < (new BigInteger((_2809_stmts).Count))) {
              DAST._IStatement _source103 = (_2809_stmts).Select((_2808_i) + (BigInteger.One));
              if (_source103.is_DeclareVar) {
                Dafny.ISequence<Dafny.Rune> _2816___mcc_h54 = _source103.dtor_name;
                DAST._IType _2817___mcc_h55 = _source103.dtor_typ;
                Std.Wrappers._IOption<DAST._IExpression> _2818___mcc_h56 = _source103.dtor_maybeValue;
              } else if (_source103.is_Assign) {
                DAST._IAssignLhs _2819___mcc_h60 = _source103.dtor_lhs;
                DAST._IExpression _2820___mcc_h61 = _source103.dtor_value;
                DAST._IAssignLhs _source104 = _2819___mcc_h60;
                if (_source104.is_Ident) {
                  Dafny.ISequence<Dafny.Rune> _2821___mcc_h64 = _source104.dtor_ident;
                  Dafny.ISequence<Dafny.Rune> _source105 = _2821___mcc_h64;
                  Dafny.ISequence<Dafny.Rune> _2822___mcc_h66 = _source105;
                  DAST._IExpression _2823_rhs = _2820___mcc_h61;
                  Dafny.ISequence<Dafny.Rune> _2824_name2 = _2822___mcc_h66;
                  if (object.Equals(_2824_name2, _2815_name)) {
                    _2809_stmts = Dafny.Sequence<DAST._IStatement>.Concat(Dafny.Sequence<DAST._IStatement>.Concat((_2809_stmts).Subsequence(BigInteger.Zero, _2808_i), Dafny.Sequence<DAST._IStatement>.FromElements(DAST.Statement.create_DeclareVar(_2815_name, _2814_optType, Std.Wrappers.Option<DAST._IExpression>.create_Some(_2823_rhs)))), (_2809_stmts).Drop((_2808_i) + (BigInteger.One)));
                    _2810_stmt = (_2809_stmts).Select(_2808_i);
                  }
                } else if (_source104.is_Select) {
                  DAST._IExpression _2825___mcc_h68 = _source104.dtor_expr;
                  Dafny.ISequence<Dafny.Rune> _2826___mcc_h69 = _source104.dtor_field;
                } else {
                  DAST._IExpression _2827___mcc_h72 = _source104.dtor_expr;
                  Dafny.ISequence<DAST._IExpression> _2828___mcc_h73 = _source104.dtor_indices;
                }
              } else if (_source103.is_If) {
                DAST._IExpression _2829___mcc_h76 = _source103.dtor_cond;
                Dafny.ISequence<DAST._IStatement> _2830___mcc_h77 = _source103.dtor_thn;
                Dafny.ISequence<DAST._IStatement> _2831___mcc_h78 = _source103.dtor_els;
              } else if (_source103.is_Labeled) {
                Dafny.ISequence<Dafny.Rune> _2832___mcc_h82 = _source103.dtor_lbl;
                Dafny.ISequence<DAST._IStatement> _2833___mcc_h83 = _source103.dtor_body;
              } else if (_source103.is_While) {
                DAST._IExpression _2834___mcc_h86 = _source103.dtor_cond;
                Dafny.ISequence<DAST._IStatement> _2835___mcc_h87 = _source103.dtor_body;
              } else if (_source103.is_Foreach) {
                Dafny.ISequence<Dafny.Rune> _2836___mcc_h90 = _source103.dtor_boundName;
                DAST._IType _2837___mcc_h91 = _source103.dtor_boundType;
                DAST._IExpression _2838___mcc_h92 = _source103.dtor_over;
                Dafny.ISequence<DAST._IStatement> _2839___mcc_h93 = _source103.dtor_body;
              } else if (_source103.is_Call) {
                DAST._IExpression _2840___mcc_h98 = _source103.dtor_on;
                DAST._ICallName _2841___mcc_h99 = _source103.dtor_callName;
                Dafny.ISequence<DAST._IType> _2842___mcc_h100 = _source103.dtor_typeArgs;
                Dafny.ISequence<DAST._IExpression> _2843___mcc_h101 = _source103.dtor_args;
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2844___mcc_h102 = _source103.dtor_outs;
              } else if (_source103.is_Return) {
                DAST._IExpression _2845___mcc_h108 = _source103.dtor_expr;
              } else if (_source103.is_EarlyReturn) {
              } else if (_source103.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2846___mcc_h110 = _source103.dtor_toLabel;
              } else if (_source103.is_TailRecursive) {
                Dafny.ISequence<DAST._IStatement> _2847___mcc_h112 = _source103.dtor_body;
              } else if (_source103.is_JumpTailCallStart) {
              } else if (_source103.is_Halt) {
              } else if (_source103.is_Print) {
                DAST._IExpression _2848___mcc_h114 = _source103.dtor_Print_i_a0;
              } else {
                Dafny.ISequence<DAST._IFormal> _2849___mcc_h116 = _source103.dtor_fields;
              }
            }
          } else {
            DAST._IExpression _2850___mcc_h6 = _source102.dtor_value;
          }
        } else if (_source101.is_Assign) {
          DAST._IAssignLhs _2851___mcc_h8 = _source101.dtor_lhs;
          DAST._IExpression _2852___mcc_h9 = _source101.dtor_value;
        } else if (_source101.is_If) {
          DAST._IExpression _2853___mcc_h12 = _source101.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2854___mcc_h13 = _source101.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2855___mcc_h14 = _source101.dtor_els;
        } else if (_source101.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2856___mcc_h18 = _source101.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2857___mcc_h19 = _source101.dtor_body;
        } else if (_source101.is_While) {
          DAST._IExpression _2858___mcc_h22 = _source101.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2859___mcc_h23 = _source101.dtor_body;
        } else if (_source101.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2860___mcc_h26 = _source101.dtor_boundName;
          DAST._IType _2861___mcc_h27 = _source101.dtor_boundType;
          DAST._IExpression _2862___mcc_h28 = _source101.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2863___mcc_h29 = _source101.dtor_body;
        } else if (_source101.is_Call) {
          DAST._IExpression _2864___mcc_h34 = _source101.dtor_on;
          DAST._ICallName _2865___mcc_h35 = _source101.dtor_callName;
          Dafny.ISequence<DAST._IType> _2866___mcc_h36 = _source101.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2867___mcc_h37 = _source101.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2868___mcc_h38 = _source101.dtor_outs;
        } else if (_source101.is_Return) {
          DAST._IExpression _2869___mcc_h44 = _source101.dtor_expr;
        } else if (_source101.is_EarlyReturn) {
        } else if (_source101.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2870___mcc_h46 = _source101.dtor_toLabel;
        } else if (_source101.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2871___mcc_h48 = _source101.dtor_body;
        } else if (_source101.is_JumpTailCallStart) {
        } else if (_source101.is_Halt) {
        } else if (_source101.is_Print) {
          DAST._IExpression _2872___mcc_h50 = _source101.dtor_Print_i_a0;
        } else {
          Dafny.ISequence<DAST._IFormal> _2873___mcc_h52 = _source101.dtor_fields;
        }
        RAST._IExpr _2874_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2875_recIdents;
        DCOMP._IEnvironment _2876_newEnv2;
        RAST._IExpr _out111;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
        DCOMP._IEnvironment _out113;
        (this).GenStmt(_2810_stmt, selfIdent, newEnv, (isLast) && ((_2808_i) == ((new BigInteger((_2809_stmts).Count)) - (BigInteger.One))), earlyReturn, out _out111, out _out112, out _out113);
        _2874_stmtExpr = _out111;
        _2875_recIdents = _out112;
        _2876_newEnv2 = _out113;
        newEnv = _2876_newEnv2;
        DAST._IStatement _source106 = _2810_stmt;
        if (_source106.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2877___mcc_h118 = _source106.dtor_name;
          DAST._IType _2878___mcc_h119 = _source106.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2879___mcc_h120 = _source106.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2880_name = _2877___mcc_h118;
          {
            _2807_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2807_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(DCOMP.__default.escapeName(_2880_name)));
          }
        } else if (_source106.is_Assign) {
          DAST._IAssignLhs _2881___mcc_h124 = _source106.dtor_lhs;
          DAST._IExpression _2882___mcc_h125 = _source106.dtor_value;
        } else if (_source106.is_If) {
          DAST._IExpression _2883___mcc_h128 = _source106.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2884___mcc_h129 = _source106.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2885___mcc_h130 = _source106.dtor_els;
        } else if (_source106.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2886___mcc_h134 = _source106.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2887___mcc_h135 = _source106.dtor_body;
        } else if (_source106.is_While) {
          DAST._IExpression _2888___mcc_h138 = _source106.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2889___mcc_h139 = _source106.dtor_body;
        } else if (_source106.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2890___mcc_h142 = _source106.dtor_boundName;
          DAST._IType _2891___mcc_h143 = _source106.dtor_boundType;
          DAST._IExpression _2892___mcc_h144 = _source106.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2893___mcc_h145 = _source106.dtor_body;
        } else if (_source106.is_Call) {
          DAST._IExpression _2894___mcc_h150 = _source106.dtor_on;
          DAST._ICallName _2895___mcc_h151 = _source106.dtor_callName;
          Dafny.ISequence<DAST._IType> _2896___mcc_h152 = _source106.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2897___mcc_h153 = _source106.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2898___mcc_h154 = _source106.dtor_outs;
        } else if (_source106.is_Return) {
          DAST._IExpression _2899___mcc_h160 = _source106.dtor_expr;
        } else if (_source106.is_EarlyReturn) {
        } else if (_source106.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2900___mcc_h162 = _source106.dtor_toLabel;
        } else if (_source106.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2901___mcc_h164 = _source106.dtor_body;
        } else if (_source106.is_JumpTailCallStart) {
        } else if (_source106.is_Halt) {
        } else if (_source106.is_Print) {
          DAST._IExpression _2902___mcc_h166 = _source106.dtor_Print_i_a0;
        } else {
          Dafny.ISequence<DAST._IFormal> _2903___mcc_h168 = _source106.dtor_fields;
        }
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2875_recIdents, _2807_declarations));
        generated = (generated).Then(_2874_stmtExpr);
        _2808_i = (_2808_i) + (BigInteger.One);
      }
    }
    public void GenAssignLhs(DAST._IAssignLhs lhs, RAST._IExpr rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, out RAST._IExpr generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents, out DCOMP._IEnvironment newEnv)
    {
      generated = RAST.Expr.Default();
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      newEnv = DCOMP.Environment.Default();
      newEnv = env;
      DAST._IAssignLhs _source107 = lhs;
      if (_source107.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2904___mcc_h0 = _source107.dtor_ident;
        Dafny.ISequence<Dafny.Rune> _source108 = _2904___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2905___mcc_h1 = _source108;
        Dafny.ISequence<Dafny.Rune> _2906_id = _2905___mcc_h1;
        {
          Dafny.ISequence<Dafny.Rune> _2907_idRust;
          _2907_idRust = DCOMP.__default.escapeName(_2906_id);
          if (((env).IsBorrowed(_2907_idRust)) || ((env).IsBorrowedMut(_2907_idRust))) {
            generated = RAST.__default.AssignVar(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), _2907_idRust), rhs);
          } else {
            generated = RAST.__default.AssignVar(_2907_idRust, rhs);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2907_idRust);
          needsIIFE = false;
        }
      } else if (_source107.is_Select) {
        DAST._IExpression _2908___mcc_h2 = _source107.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2909___mcc_h3 = _source107.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2910_field = _2909___mcc_h3;
        DAST._IExpression _2911_on = _2908___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _2912_fieldName;
          _2912_fieldName = DCOMP.__default.escapeName(_2910_field);
          RAST._IExpr _2913_onExpr;
          DCOMP._IOwnership _2914_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2915_recIdents;
          RAST._IExpr _out114;
          DCOMP._IOwnership _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          (this).GenExpr(_2911_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowedMut(), out _out114, out _out115, out _out116);
          _2913_onExpr = _out114;
          _2914_onOwned = _out115;
          _2915_recIdents = _out116;
          generated = RAST.__default.AssignMember(_2913_onExpr, _2912_fieldName, rhs);
          RAST._IExpr _source109 = _2913_onExpr;
          if (_source109.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _2916___mcc_h6 = _source109.dtor_content;
          } else if (_source109.is_ExprFromType) {
            RAST._IType _2917___mcc_h8 = _source109.dtor_tpe;
          } else if (_source109.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _2918___mcc_h10 = _source109.dtor_name;
            if (object.Equals(_2918___mcc_h10, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
              Dafny.ISequence<Dafny.Rune> _2919_isAssignedVar;
              _2919_isAssignedVar = DCOMP.__default.AddAssignedPrefix(_2912_fieldName);
              if (((newEnv).dtor_names).Contains(_2919_isAssignedVar)) {
                generated = ((RAST.__default.dafny__runtime).MSel((this).update__field__uninit__macro)).Apply(Dafny.Sequence<RAST._IExpr>.FromElements((this).thisInConstructor, RAST.Expr.create_Identifier(_2912_fieldName), RAST.Expr.create_Identifier(_2919_isAssignedVar), rhs));
                newEnv = (newEnv).RemoveAssigned(_2919_isAssignedVar);
              }
            } else {
            }
          } else if (_source109.is_Match) {
            RAST._IExpr _2920___mcc_h12 = _source109.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _2921___mcc_h13 = _source109.dtor_cases;
          } else if (_source109.is_StmtExpr) {
            RAST._IExpr _2922___mcc_h16 = _source109.dtor_stmt;
            RAST._IExpr _2923___mcc_h17 = _source109.dtor_rhs;
          } else if (_source109.is_Block) {
            RAST._IExpr _2924___mcc_h20 = _source109.dtor_underlying;
          } else if (_source109.is_StructBuild) {
            RAST._IExpr _2925___mcc_h22 = _source109.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _2926___mcc_h23 = _source109.dtor_assignments;
          } else if (_source109.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _2927___mcc_h26 = _source109.dtor_arguments;
          } else if (_source109.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _2928___mcc_h28 = _source109.dtor_op1;
            RAST._IExpr _2929___mcc_h29 = _source109.dtor_underlying;
            DAST.Format._IUnaryOpFormat _2930___mcc_h30 = _source109.dtor_format;
            if (object.Equals(_2928___mcc_h28, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
              RAST._IExpr _source110 = _2929___mcc_h29;
              if (_source110.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _2931___mcc_h34 = _source110.dtor_content;
              } else if (_source110.is_ExprFromType) {
                RAST._IType _2932___mcc_h36 = _source110.dtor_tpe;
              } else if (_source110.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _2933___mcc_h38 = _source110.dtor_name;
                if (object.Equals(_2933___mcc_h38, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                  Dafny.ISequence<Dafny.Rune> _2934_isAssignedVar;
                  _2934_isAssignedVar = DCOMP.__default.AddAssignedPrefix(_2912_fieldName);
                  if (((newEnv).dtor_names).Contains(_2934_isAssignedVar)) {
                    generated = ((RAST.__default.dafny__runtime).MSel((this).update__field__uninit__macro)).Apply(Dafny.Sequence<RAST._IExpr>.FromElements((this).thisInConstructor, RAST.Expr.create_Identifier(_2912_fieldName), RAST.Expr.create_Identifier(_2934_isAssignedVar), rhs));
                    newEnv = (newEnv).RemoveAssigned(_2934_isAssignedVar);
                  }
                } else {
                }
              } else if (_source110.is_Match) {
                RAST._IExpr _2935___mcc_h40 = _source110.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _2936___mcc_h41 = _source110.dtor_cases;
              } else if (_source110.is_StmtExpr) {
                RAST._IExpr _2937___mcc_h44 = _source110.dtor_stmt;
                RAST._IExpr _2938___mcc_h45 = _source110.dtor_rhs;
              } else if (_source110.is_Block) {
                RAST._IExpr _2939___mcc_h48 = _source110.dtor_underlying;
              } else if (_source110.is_StructBuild) {
                RAST._IExpr _2940___mcc_h50 = _source110.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _2941___mcc_h51 = _source110.dtor_assignments;
              } else if (_source110.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _2942___mcc_h54 = _source110.dtor_arguments;
              } else if (_source110.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _2943___mcc_h56 = _source110.dtor_op1;
                RAST._IExpr _2944___mcc_h57 = _source110.dtor_underlying;
                DAST.Format._IUnaryOpFormat _2945___mcc_h58 = _source110.dtor_format;
              } else if (_source110.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _2946___mcc_h62 = _source110.dtor_op2;
                RAST._IExpr _2947___mcc_h63 = _source110.dtor_left;
                RAST._IExpr _2948___mcc_h64 = _source110.dtor_right;
                DAST.Format._IBinaryOpFormat _2949___mcc_h65 = _source110.dtor_format2;
              } else if (_source110.is_TypeAscription) {
                RAST._IExpr _2950___mcc_h70 = _source110.dtor_left;
                RAST._IType _2951___mcc_h71 = _source110.dtor_tpe;
              } else if (_source110.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _2952___mcc_h74 = _source110.dtor_value;
              } else if (_source110.is_LiteralBool) {
                bool _2953___mcc_h76 = _source110.dtor_bvalue;
              } else if (_source110.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _2954___mcc_h78 = _source110.dtor_value;
                bool _2955___mcc_h79 = _source110.dtor_binary;
              } else if (_source110.is_DeclareVar) {
                RAST._IDeclareType _2956___mcc_h82 = _source110.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _2957___mcc_h83 = _source110.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _2958___mcc_h84 = _source110.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _2959___mcc_h85 = _source110.dtor_optRhs;
              } else if (_source110.is_Assign) {
                Std.Wrappers._IOption<RAST._IAssignLhs> _2960___mcc_h90 = _source110.dtor_names;
                RAST._IExpr _2961___mcc_h91 = _source110.dtor_rhs;
              } else if (_source110.is_IfExpr) {
                RAST._IExpr _2962___mcc_h94 = _source110.dtor_cond;
                RAST._IExpr _2963___mcc_h95 = _source110.dtor_thn;
                RAST._IExpr _2964___mcc_h96 = _source110.dtor_els;
              } else if (_source110.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _2965___mcc_h100 = _source110.dtor_optCond;
                RAST._IExpr _2966___mcc_h101 = _source110.dtor_underlying;
              } else if (_source110.is_For) {
                Dafny.ISequence<Dafny.Rune> _2967___mcc_h104 = _source110.dtor_name;
                RAST._IExpr _2968___mcc_h105 = _source110.dtor_range;
                RAST._IExpr _2969___mcc_h106 = _source110.dtor_body;
              } else if (_source110.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _2970___mcc_h110 = _source110.dtor_lbl;
                RAST._IExpr _2971___mcc_h111 = _source110.dtor_underlying;
              } else if (_source110.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2972___mcc_h114 = _source110.dtor_optLbl;
              } else if (_source110.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2973___mcc_h116 = _source110.dtor_optLbl;
              } else if (_source110.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _2974___mcc_h118 = _source110.dtor_optExpr;
              } else if (_source110.is_CallType) {
                RAST._IExpr _2975___mcc_h120 = _source110.dtor_obj;
                Dafny.ISequence<RAST._IType> _2976___mcc_h121 = _source110.dtor_typeParameters;
              } else if (_source110.is_Call) {
                RAST._IExpr _2977___mcc_h124 = _source110.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _2978___mcc_h125 = _source110.dtor_arguments;
              } else if (_source110.is_Select) {
                RAST._IExpr _2979___mcc_h128 = _source110.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _2980___mcc_h129 = _source110.dtor_name;
              } else if (_source110.is_MemberSelect) {
                RAST._IExpr _2981___mcc_h132 = _source110.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _2982___mcc_h133 = _source110.dtor_name;
              } else {
                Dafny.ISequence<RAST._IFormal> _2983___mcc_h136 = _source110.dtor_params;
                Std.Wrappers._IOption<RAST._IType> _2984___mcc_h137 = _source110.dtor_retType;
                RAST._IExpr _2985___mcc_h138 = _source110.dtor_body;
              }
            } else {
            }
          } else if (_source109.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _2986___mcc_h142 = _source109.dtor_op2;
            RAST._IExpr _2987___mcc_h143 = _source109.dtor_left;
            RAST._IExpr _2988___mcc_h144 = _source109.dtor_right;
            DAST.Format._IBinaryOpFormat _2989___mcc_h145 = _source109.dtor_format2;
          } else if (_source109.is_TypeAscription) {
            RAST._IExpr _2990___mcc_h150 = _source109.dtor_left;
            RAST._IType _2991___mcc_h151 = _source109.dtor_tpe;
          } else if (_source109.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _2992___mcc_h154 = _source109.dtor_value;
          } else if (_source109.is_LiteralBool) {
            bool _2993___mcc_h156 = _source109.dtor_bvalue;
          } else if (_source109.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _2994___mcc_h158 = _source109.dtor_value;
            bool _2995___mcc_h159 = _source109.dtor_binary;
          } else if (_source109.is_DeclareVar) {
            RAST._IDeclareType _2996___mcc_h162 = _source109.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _2997___mcc_h163 = _source109.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _2998___mcc_h164 = _source109.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _2999___mcc_h165 = _source109.dtor_optRhs;
          } else if (_source109.is_Assign) {
            Std.Wrappers._IOption<RAST._IAssignLhs> _3000___mcc_h170 = _source109.dtor_names;
            RAST._IExpr _3001___mcc_h171 = _source109.dtor_rhs;
          } else if (_source109.is_IfExpr) {
            RAST._IExpr _3002___mcc_h174 = _source109.dtor_cond;
            RAST._IExpr _3003___mcc_h175 = _source109.dtor_thn;
            RAST._IExpr _3004___mcc_h176 = _source109.dtor_els;
          } else if (_source109.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _3005___mcc_h180 = _source109.dtor_optCond;
            RAST._IExpr _3006___mcc_h181 = _source109.dtor_underlying;
          } else if (_source109.is_For) {
            Dafny.ISequence<Dafny.Rune> _3007___mcc_h184 = _source109.dtor_name;
            RAST._IExpr _3008___mcc_h185 = _source109.dtor_range;
            RAST._IExpr _3009___mcc_h186 = _source109.dtor_body;
          } else if (_source109.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _3010___mcc_h190 = _source109.dtor_lbl;
            RAST._IExpr _3011___mcc_h191 = _source109.dtor_underlying;
          } else if (_source109.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3012___mcc_h194 = _source109.dtor_optLbl;
          } else if (_source109.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3013___mcc_h196 = _source109.dtor_optLbl;
          } else if (_source109.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _3014___mcc_h198 = _source109.dtor_optExpr;
          } else if (_source109.is_CallType) {
            RAST._IExpr _3015___mcc_h200 = _source109.dtor_obj;
            Dafny.ISequence<RAST._IType> _3016___mcc_h201 = _source109.dtor_typeParameters;
          } else if (_source109.is_Call) {
            RAST._IExpr _3017___mcc_h204 = _source109.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _3018___mcc_h205 = _source109.dtor_arguments;
          } else if (_source109.is_Select) {
            RAST._IExpr _3019___mcc_h208 = _source109.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _3020___mcc_h209 = _source109.dtor_name;
          } else if (_source109.is_MemberSelect) {
            RAST._IExpr _3021___mcc_h212 = _source109.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _3022___mcc_h213 = _source109.dtor_name;
          } else {
            Dafny.ISequence<RAST._IFormal> _3023___mcc_h216 = _source109.dtor_params;
            Std.Wrappers._IOption<RAST._IType> _3024___mcc_h217 = _source109.dtor_retType;
            RAST._IExpr _3025___mcc_h218 = _source109.dtor_body;
          }
          readIdents = _2915_recIdents;
          needsIIFE = false;
        }
      } else {
        DAST._IExpression _3026___mcc_h4 = _source107.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3027___mcc_h5 = _source107.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3028_indices = _3027___mcc_h5;
        DAST._IExpression _3029_on = _3026___mcc_h4;
        {
          RAST._IExpr _3030_onExpr;
          DCOMP._IOwnership _3031_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3032_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          (this).GenExpr(_3029_on, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out117, out _out118, out _out119);
          _3030_onExpr = _out117;
          _3031_onOwned = _out118;
          _3032_recIdents = _out119;
          readIdents = _3032_recIdents;
          _3030_onExpr = ((this).modify__macro).Apply1(_3030_onExpr);
          RAST._IExpr _3033_r;
          _3033_r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          Dafny.ISequence<RAST._IExpr> _3034_indicesExpr;
          _3034_indicesExpr = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi28 = new BigInteger((_3028_indices).Count);
          for (BigInteger _3035_i = BigInteger.Zero; _3035_i < _hi28; _3035_i++) {
            RAST._IExpr _3036_idx;
            DCOMP._IOwnership _3037___v68;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3038_recIdentsIdx;
            RAST._IExpr _out120;
            DCOMP._IOwnership _out121;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
            (this).GenExpr((_3028_indices).Select(_3035_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out120, out _out121, out _out122);
            _3036_idx = _out120;
            _3037___v68 = _out121;
            _3038_recIdentsIdx = _out122;
            Dafny.ISequence<Dafny.Rune> _3039_varName;
            _3039_varName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__idx"), Std.Strings.__default.OfNat(_3035_i));
            _3034_indicesExpr = Dafny.Sequence<RAST._IExpr>.Concat(_3034_indicesExpr, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(_3039_varName)));
            _3033_r = (_3033_r).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), _3039_varName, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), (_3036_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"))))));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3038_recIdentsIdx);
          }
          if ((new BigInteger((_3028_indices).Count)) > (BigInteger.One)) {
            _3030_onExpr = (_3030_onExpr).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("data"));
          }
          RAST._IExpr _3040_rhs;
          _3040_rhs = rhs;
          var _pat_let_tv12 = env;
          if (((_3030_onExpr).IsLhsIdentifier()) && (Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, bool>((_3030_onExpr).LhsIdentifierName(), _pat_let10_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, bool>(_pat_let10_0, _3041_name => (true) && (Dafny.Helpers.Let<Std.Wrappers._IOption<RAST._IType>, bool>((_pat_let_tv12).GetType(_3041_name), _pat_let11_0 => Dafny.Helpers.Let<Std.Wrappers._IOption<RAST._IType>, bool>(_pat_let11_0, _3042_tpe => ((_3042_tpe).is_Some) && (((_3042_tpe).dtor_value).IsUninitArray())))))))) {
            _3040_rhs = RAST.__default.MaybeUninitNew(_3040_rhs);
          }
          generated = (_3033_r).Then(RAST.Expr.create_Assign(Std.Wrappers.Option<RAST._IAssignLhs>.create_Some(RAST.AssignLhs.create_Index(_3030_onExpr, _3034_indicesExpr)), _3040_rhs));
          needsIIFE = true;
        }
      }
    }
    public void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents, out DCOMP._IEnvironment newEnv)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      newEnv = DCOMP.Environment.Default();
      DAST._IStatement _source111 = stmt;
      if (_source111.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _3043___mcc_h0 = _source111.dtor_name;
        DAST._IType _3044___mcc_h1 = _source111.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _3045___mcc_h2 = _source111.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source112 = _3045___mcc_h2;
        if (_source112.is_None) {
          DAST._IType _3046_typ = _3044___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _3047_name = _3043___mcc_h0;
          {
            DAST._IStatement _3048_newStmt;
            _3048_newStmt = DAST.Statement.create_DeclareVar(_3047_name, _3046_typ, Std.Wrappers.Option<DAST._IExpression>.create_Some(DAST.Expression.create_InitializationValue(_3046_typ)));
            RAST._IExpr _out123;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out124;
            DCOMP._IEnvironment _out125;
            (this).GenStmt(_3048_newStmt, selfIdent, env, isLast, earlyReturn, out _out123, out _out124, out _out125);
            generated = _out123;
            readIdents = _out124;
            newEnv = _out125;
          }
        } else {
          DAST._IExpression _3049___mcc_h3 = _source112.dtor_value;
          DAST._IExpression _3050_expression = _3049___mcc_h3;
          DAST._IType _3051_typ = _3044___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _3052_name = _3043___mcc_h0;
          {
            RAST._IType _3053_tpe;
            RAST._IType _out126;
            _out126 = (this).GenType(_3051_typ, true, false);
            _3053_tpe = _out126;
            Dafny.ISequence<Dafny.Rune> _3054_varName;
            _3054_varName = DCOMP.__default.escapeName(_3052_name);
            bool _3055_hasCopySemantics;
            _3055_hasCopySemantics = (_3053_tpe).CanReadWithoutClone();
            if (((_3050_expression).is_InitializationValue) && (!(_3055_hasCopySemantics))) {
              generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), _3054_varName, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MaybePlacebo"))).ApplyType1(_3053_tpe)).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              newEnv = (env).AddAssigned(_3054_varName, RAST.__default.MaybePlaceboType(_3053_tpe));
            } else {
              RAST._IExpr _3056_expr = RAST.Expr.Default();
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3057_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
              if (((_3050_expression).is_InitializationValue) && ((_3053_tpe).IsObjectOrPointer())) {
                _3056_expr = (_3053_tpe).ToNullExpr();
                _3057_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              } else {
                DCOMP._IOwnership _3058_exprOwnership = DCOMP.Ownership.Default();
                RAST._IExpr _out127;
                DCOMP._IOwnership _out128;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
                (this).GenExpr(_3050_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out127, out _out128, out _out129);
                _3056_expr = _out127;
                _3058_exprOwnership = _out128;
                _3057_recIdents = _out129;
              }
              readIdents = _3057_recIdents;
              _3053_tpe = (((_3050_expression).is_NewUninitArray) ? ((_3053_tpe).TypeAtInitialization()) : (_3053_tpe));
              generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeName(_3052_name), Std.Wrappers.Option<RAST._IType>.create_Some(_3053_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_3056_expr));
              newEnv = (env).AddAssigned(DCOMP.__default.escapeName(_3052_name), _3053_tpe);
            }
          }
        }
      } else if (_source111.is_Assign) {
        DAST._IAssignLhs _3059___mcc_h4 = _source111.dtor_lhs;
        DAST._IExpression _3060___mcc_h5 = _source111.dtor_value;
        DAST._IExpression _3061_expression = _3060___mcc_h5;
        DAST._IAssignLhs _3062_lhs = _3059___mcc_h4;
        {
          RAST._IExpr _3063_exprGen;
          DCOMP._IOwnership _3064___v71;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3065_exprIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          (this).GenExpr(_3061_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _3063_exprGen = _out130;
          _3064___v71 = _out131;
          _3065_exprIdents = _out132;
          if ((_3062_lhs).is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3066_rustId;
            _3066_rustId = DCOMP.__default.escapeName(((_3062_lhs).dtor_ident));
            Std.Wrappers._IOption<RAST._IType> _3067_tpe;
            _3067_tpe = (env).GetType(_3066_rustId);
            if (((_3067_tpe).is_Some) && ((((_3067_tpe).dtor_value).ExtractMaybePlacebo()).is_Some)) {
              _3063_exprGen = RAST.__default.MaybePlacebo(_3063_exprGen);
            }
          }
          RAST._IExpr _3068_lhsGen;
          bool _3069_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3070_recIdents;
          DCOMP._IEnvironment _3071_resEnv;
          RAST._IExpr _out133;
          bool _out134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out135;
          DCOMP._IEnvironment _out136;
          (this).GenAssignLhs(_3062_lhs, _3063_exprGen, selfIdent, env, out _out133, out _out134, out _out135, out _out136);
          _3068_lhsGen = _out133;
          _3069_needsIIFE = _out134;
          _3070_recIdents = _out135;
          _3071_resEnv = _out136;
          generated = _3068_lhsGen;
          newEnv = _3071_resEnv;
          if (_3069_needsIIFE) {
            generated = RAST.Expr.create_Block(generated);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3070_recIdents, _3065_exprIdents);
        }
      } else if (_source111.is_If) {
        DAST._IExpression _3072___mcc_h6 = _source111.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _3073___mcc_h7 = _source111.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _3074___mcc_h8 = _source111.dtor_els;
        Dafny.ISequence<DAST._IStatement> _3075_elsDafny = _3074___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _3076_thnDafny = _3073___mcc_h7;
        DAST._IExpression _3077_cond = _3072___mcc_h6;
        {
          RAST._IExpr _3078_cond;
          DCOMP._IOwnership _3079___v72;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3080_recIdents;
          RAST._IExpr _out137;
          DCOMP._IOwnership _out138;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out139;
          (this).GenExpr(_3077_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out137, out _out138, out _out139);
          _3078_cond = _out137;
          _3079___v72 = _out138;
          _3080_recIdents = _out139;
          Dafny.ISequence<Dafny.Rune> _3081_condString;
          _3081_condString = (_3078_cond)._ToString(DCOMP.__default.IND);
          readIdents = _3080_recIdents;
          RAST._IExpr _3082_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3083_thnIdents;
          DCOMP._IEnvironment _3084_thnEnv;
          RAST._IExpr _out140;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out141;
          DCOMP._IEnvironment _out142;
          (this).GenStmts(_3076_thnDafny, selfIdent, env, isLast, earlyReturn, out _out140, out _out141, out _out142);
          _3082_thn = _out140;
          _3083_thnIdents = _out141;
          _3084_thnEnv = _out142;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3083_thnIdents);
          RAST._IExpr _3085_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3086_elsIdents;
          DCOMP._IEnvironment _3087_elsEnv;
          RAST._IExpr _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP._IEnvironment _out145;
          (this).GenStmts(_3075_elsDafny, selfIdent, env, isLast, earlyReturn, out _out143, out _out144, out _out145);
          _3085_els = _out143;
          _3086_elsIdents = _out144;
          _3087_elsEnv = _out145;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3086_elsIdents);
          newEnv = env;
          generated = RAST.Expr.create_IfExpr(_3078_cond, _3082_thn, _3085_els);
        }
      } else if (_source111.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _3088___mcc_h9 = _source111.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _3089___mcc_h10 = _source111.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3090_body = _3089___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _3091_lbl = _3088___mcc_h9;
        {
          RAST._IExpr _3092_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3093_bodyIdents;
          DCOMP._IEnvironment _3094_env2;
          RAST._IExpr _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP._IEnvironment _out148;
          (this).GenStmts(_3090_body, selfIdent, env, isLast, earlyReturn, out _out146, out _out147, out _out148);
          _3092_body = _out146;
          _3093_bodyIdents = _out147;
          _3094_env2 = _out148;
          readIdents = _3093_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _3091_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_3092_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
          newEnv = env;
        }
      } else if (_source111.is_While) {
        DAST._IExpression _3095___mcc_h11 = _source111.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _3096___mcc_h12 = _source111.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3097_body = _3096___mcc_h12;
        DAST._IExpression _3098_cond = _3095___mcc_h11;
        {
          RAST._IExpr _3099_cond;
          DCOMP._IOwnership _3100___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3101_recIdents;
          RAST._IExpr _out149;
          DCOMP._IOwnership _out150;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out151;
          (this).GenExpr(_3098_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out149, out _out150, out _out151);
          _3099_cond = _out149;
          _3100___v73 = _out150;
          _3101_recIdents = _out151;
          readIdents = _3101_recIdents;
          RAST._IExpr _3102_bodyExpr;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3103_bodyIdents;
          DCOMP._IEnvironment _3104_bodyEnv;
          RAST._IExpr _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP._IEnvironment _out154;
          (this).GenStmts(_3097_body, selfIdent, env, false, earlyReturn, out _out152, out _out153, out _out154);
          _3102_bodyExpr = _out152;
          _3103_bodyIdents = _out153;
          _3104_bodyEnv = _out154;
          newEnv = env;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3103_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_3099_cond), _3102_bodyExpr);
        }
      } else if (_source111.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _3105___mcc_h13 = _source111.dtor_boundName;
        DAST._IType _3106___mcc_h14 = _source111.dtor_boundType;
        DAST._IExpression _3107___mcc_h15 = _source111.dtor_over;
        Dafny.ISequence<DAST._IStatement> _3108___mcc_h16 = _source111.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3109_body = _3108___mcc_h16;
        DAST._IExpression _3110_overExpr = _3107___mcc_h15;
        DAST._IType _3111_boundType = _3106___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _3112_boundName = _3105___mcc_h13;
        {
          RAST._IExpr _3113_over;
          DCOMP._IOwnership _3114___v74;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3115_recIdents;
          RAST._IExpr _out155;
          DCOMP._IOwnership _out156;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out157;
          (this).GenExpr(_3110_overExpr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out155, out _out156, out _out157);
          _3113_over = _out155;
          _3114___v74 = _out156;
          _3115_recIdents = _out157;
          if ((((_3110_overExpr).is_MapBoundedPool) || ((_3110_overExpr).is_SetBoundedPool)) || ((_3110_overExpr).is_SeqBoundedPool)) {
            _3113_over = ((_3113_over).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cloned"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          RAST._IType _3116_boundTpe;
          RAST._IType _out158;
          _out158 = (this).GenType(_3111_boundType, false, false);
          _3116_boundTpe = _out158;
          readIdents = _3115_recIdents;
          Dafny.ISequence<Dafny.Rune> _3117_boundRName;
          _3117_boundRName = DCOMP.__default.escapeName(_3112_boundName);
          RAST._IExpr _3118_bodyExpr;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3119_bodyIdents;
          DCOMP._IEnvironment _3120_bodyEnv;
          RAST._IExpr _out159;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out160;
          DCOMP._IEnvironment _out161;
          (this).GenStmts(_3109_body, selfIdent, (env).AddAssigned(_3117_boundRName, _3116_boundTpe), false, earlyReturn, out _out159, out _out160, out _out161);
          _3118_bodyExpr = _out159;
          _3119_bodyIdents = _out160;
          _3120_bodyEnv = _out161;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3119_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3117_boundRName));
          newEnv = env;
          generated = RAST.Expr.create_For(_3117_boundRName, _3113_over, _3118_bodyExpr);
        }
      } else if (_source111.is_Call) {
        DAST._IExpression _3121___mcc_h17 = _source111.dtor_on;
        DAST._ICallName _3122___mcc_h18 = _source111.dtor_callName;
        Dafny.ISequence<DAST._IType> _3123___mcc_h19 = _source111.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3124___mcc_h20 = _source111.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _3125___mcc_h21 = _source111.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _3126_maybeOutVars = _3125___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _3127_args = _3124___mcc_h20;
        Dafny.ISequence<DAST._IType> _3128_typeArgs = _3123___mcc_h19;
        DAST._ICallName _3129_name = _3122___mcc_h18;
        DAST._IExpression _3130_on = _3121___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IExpr _3131_onExpr;
          DCOMP._IOwnership _3132___v77;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3133_enclosingIdents;
          RAST._IExpr _out162;
          DCOMP._IOwnership _out163;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out164;
          (this).GenExpr(_3130_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out162, out _out163, out _out164);
          _3131_onExpr = _out162;
          _3132___v77 = _out163;
          _3133_enclosingIdents = _out164;
          Dafny.ISequence<RAST._IType> _3134_typeExprs;
          _3134_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_3128_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3135_typeI;
            _3135_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _3136_typeArgsR;
            _3136_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_3135_typeI) < (new BigInteger((_3128_typeArgs).Count))) {
              RAST._IType _3137_tpe;
              RAST._IType _out165;
              _out165 = (this).GenType((_3128_typeArgs).Select(_3135_typeI), false, false);
              _3137_tpe = _out165;
              _3136_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_3136_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_3137_tpe));
              _3135_typeI = (_3135_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _3138_argExprs;
          _3138_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi29 = new BigInteger((_3127_args).Count);
          for (BigInteger _3139_i = BigInteger.Zero; _3139_i < _hi29; _3139_i++) {
            DCOMP._IOwnership _3140_argOwnership;
            _3140_argOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
            if (((_3129_name).is_CallName) && ((_3139_i) < (new BigInteger((((_3129_name).dtor_signature)).Count)))) {
              RAST._IType _3141_tpe;
              RAST._IType _out166;
              _out166 = (this).GenType(((((_3129_name).dtor_signature)).Select(_3139_i)).dtor_typ, false, false);
              _3141_tpe = _out166;
              if ((_3141_tpe).CanReadWithoutClone()) {
                _3140_argOwnership = DCOMP.Ownership.create_OwnershipOwned();
              }
            }
            RAST._IExpr _3142_argExpr;
            DCOMP._IOwnership _3143_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3144_argIdents;
            RAST._IExpr _out167;
            DCOMP._IOwnership _out168;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out169;
            (this).GenExpr((_3127_args).Select(_3139_i), selfIdent, env, _3140_argOwnership, out _out167, out _out168, out _out169);
            _3142_argExpr = _out167;
            _3143_ownership = _out168;
            _3144_argIdents = _out169;
            _3138_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_3138_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_3142_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3144_argIdents);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3133_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _3145_renderedName;
          _3145_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source113) => {
            if (_source113.is_CallName) {
              Dafny.ISequence<Dafny.Rune> _3146___mcc_h27 = _source113.dtor_name;
              Std.Wrappers._IOption<DAST._IType> _3147___mcc_h28 = _source113.dtor_onType;
              Dafny.ISequence<DAST._IFormal> _3148___mcc_h29 = _source113.dtor_signature;
              Dafny.ISequence<Dafny.Rune> _3149_name = _3146___mcc_h27;
              return DCOMP.__default.escapeName(_3149_name);
            } else if (_source113.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source113.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source113.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_3129_name);
          DAST._IExpression _source114 = _3130_on;
          if (_source114.is_Literal) {
            DAST._ILiteral _3150___mcc_h30 = _source114.dtor_Literal_i_a0;
            {
              DAST._ICallName _source115 = _3129_name;
              if (_source115.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3151___mcc_h242 = _source115.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3152___mcc_h243 = _source115.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3153___mcc_h244 = _source115.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source116 = _3152___mcc_h243;
                if (_source116.is_None) {
                } else {
                  DAST._IType _3154___mcc_h248 = _source116.dtor_value;
                  DAST._IType _3155_tpe = _3154___mcc_h248;
                  RAST._IType _3156_typ;
                  RAST._IType _out170;
                  _out170 = (this).GenType(_3155_tpe, false, false);
                  _3156_typ = _out170;
                  if ((_3156_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source115.is_MapBuilderAdd) {
              } else if (_source115.is_MapBuilderBuild) {
              } else if (_source115.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3157___mcc_h32 = _source114.dtor_Ident_i_a0;
            {
              DAST._ICallName _source117 = _3129_name;
              if (_source117.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3158___mcc_h250 = _source117.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3159___mcc_h251 = _source117.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3160___mcc_h252 = _source117.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source118 = _3159___mcc_h251;
                if (_source118.is_None) {
                } else {
                  DAST._IType _3161___mcc_h256 = _source118.dtor_value;
                  DAST._IType _3162_tpe = _3161___mcc_h256;
                  RAST._IType _3163_typ;
                  RAST._IType _out171;
                  _out171 = (this).GenType(_3162_tpe, false, false);
                  _3163_typ = _out171;
                  if ((_3163_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source117.is_MapBuilderAdd) {
              } else if (_source117.is_MapBuilderBuild) {
              } else if (_source117.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3164___mcc_h34 = _source114.dtor_Companion_i_a0;
            {
              _3131_onExpr = (_3131_onExpr).MSel(_3145_renderedName);
            }
          } else if (_source114.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3165___mcc_h36 = _source114.dtor_Tuple_i_a0;
            {
              DAST._ICallName _source119 = _3129_name;
              if (_source119.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3166___mcc_h258 = _source119.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3167___mcc_h259 = _source119.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3168___mcc_h260 = _source119.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source120 = _3167___mcc_h259;
                if (_source120.is_None) {
                } else {
                  DAST._IType _3169___mcc_h264 = _source120.dtor_value;
                  DAST._IType _3170_tpe = _3169___mcc_h264;
                  RAST._IType _3171_typ;
                  RAST._IType _out172;
                  _out172 = (this).GenType(_3170_tpe, false, false);
                  _3171_typ = _out172;
                  if ((_3171_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source119.is_MapBuilderAdd) {
              } else if (_source119.is_MapBuilderBuild) {
              } else if (_source119.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3172___mcc_h38 = _source114.dtor_path;
            Dafny.ISequence<DAST._IType> _3173___mcc_h39 = _source114.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3174___mcc_h40 = _source114.dtor_args;
            {
              DAST._ICallName _source121 = _3129_name;
              if (_source121.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3175___mcc_h266 = _source121.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3176___mcc_h267 = _source121.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3177___mcc_h268 = _source121.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source122 = _3176___mcc_h267;
                if (_source122.is_None) {
                } else {
                  DAST._IType _3178___mcc_h272 = _source122.dtor_value;
                  DAST._IType _3179_tpe = _3178___mcc_h272;
                  RAST._IType _3180_typ;
                  RAST._IType _out173;
                  _out173 = (this).GenType(_3179_tpe, false, false);
                  _3180_typ = _out173;
                  if ((_3180_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source121.is_MapBuilderAdd) {
              } else if (_source121.is_MapBuilderBuild) {
              } else if (_source121.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_NewUninitArray) {
            Dafny.ISequence<DAST._IExpression> _3181___mcc_h44 = _source114.dtor_dims;
            DAST._IType _3182___mcc_h45 = _source114.dtor_typ;
            {
              DAST._ICallName _source123 = _3129_name;
              if (_source123.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3183___mcc_h274 = _source123.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3184___mcc_h275 = _source123.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3185___mcc_h276 = _source123.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source124 = _3184___mcc_h275;
                if (_source124.is_None) {
                } else {
                  DAST._IType _3186___mcc_h280 = _source124.dtor_value;
                  DAST._IType _3187_tpe = _3186___mcc_h280;
                  RAST._IType _3188_typ;
                  RAST._IType _out174;
                  _out174 = (this).GenType(_3187_tpe, false, false);
                  _3188_typ = _out174;
                  if ((_3188_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source123.is_MapBuilderAdd) {
              } else if (_source123.is_MapBuilderBuild) {
              } else if (_source123.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_ArrayIndexToInt) {
            DAST._IExpression _3189___mcc_h48 = _source114.dtor_value;
            {
              DAST._ICallName _source125 = _3129_name;
              if (_source125.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3190___mcc_h282 = _source125.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3191___mcc_h283 = _source125.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3192___mcc_h284 = _source125.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source126 = _3191___mcc_h283;
                if (_source126.is_None) {
                } else {
                  DAST._IType _3193___mcc_h288 = _source126.dtor_value;
                  DAST._IType _3194_tpe = _3193___mcc_h288;
                  RAST._IType _3195_typ;
                  RAST._IType _out175;
                  _out175 = (this).GenType(_3194_tpe, false, false);
                  _3195_typ = _out175;
                  if ((_3195_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source125.is_MapBuilderAdd) {
              } else if (_source125.is_MapBuilderBuild) {
              } else if (_source125.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_FinalizeNewArray) {
            DAST._IExpression _3196___mcc_h50 = _source114.dtor_value;
            DAST._IType _3197___mcc_h51 = _source114.dtor_typ;
            {
              DAST._ICallName _source127 = _3129_name;
              if (_source127.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3198___mcc_h290 = _source127.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3199___mcc_h291 = _source127.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3200___mcc_h292 = _source127.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source128 = _3199___mcc_h291;
                if (_source128.is_None) {
                } else {
                  DAST._IType _3201___mcc_h296 = _source128.dtor_value;
                  DAST._IType _3202_tpe = _3201___mcc_h296;
                  RAST._IType _3203_typ;
                  RAST._IType _out176;
                  _out176 = (this).GenType(_3202_tpe, false, false);
                  _3203_typ = _out176;
                  if ((_3203_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source127.is_MapBuilderAdd) {
              } else if (_source127.is_MapBuilderBuild) {
              } else if (_source127.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_DatatypeValue) {
            DAST._IDatatypeType _3204___mcc_h54 = _source114.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _3205___mcc_h55 = _source114.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3206___mcc_h56 = _source114.dtor_variant;
            bool _3207___mcc_h57 = _source114.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3208___mcc_h58 = _source114.dtor_contents;
            {
              DAST._ICallName _source129 = _3129_name;
              if (_source129.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3209___mcc_h298 = _source129.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3210___mcc_h299 = _source129.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3211___mcc_h300 = _source129.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source130 = _3210___mcc_h299;
                if (_source130.is_None) {
                } else {
                  DAST._IType _3212___mcc_h304 = _source130.dtor_value;
                  DAST._IType _3213_tpe = _3212___mcc_h304;
                  RAST._IType _3214_typ;
                  RAST._IType _out177;
                  _out177 = (this).GenType(_3213_tpe, false, false);
                  _3214_typ = _out177;
                  if ((_3214_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source129.is_MapBuilderAdd) {
              } else if (_source129.is_MapBuilderBuild) {
              } else if (_source129.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Convert) {
            DAST._IExpression _3215___mcc_h64 = _source114.dtor_value;
            DAST._IType _3216___mcc_h65 = _source114.dtor_from;
            DAST._IType _3217___mcc_h66 = _source114.dtor_typ;
            {
              DAST._ICallName _source131 = _3129_name;
              if (_source131.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3218___mcc_h306 = _source131.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3219___mcc_h307 = _source131.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3220___mcc_h308 = _source131.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source132 = _3219___mcc_h307;
                if (_source132.is_None) {
                } else {
                  DAST._IType _3221___mcc_h312 = _source132.dtor_value;
                  DAST._IType _3222_tpe = _3221___mcc_h312;
                  RAST._IType _3223_typ;
                  RAST._IType _out178;
                  _out178 = (this).GenType(_3222_tpe, false, false);
                  _3223_typ = _out178;
                  if ((_3223_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source131.is_MapBuilderAdd) {
              } else if (_source131.is_MapBuilderBuild) {
              } else if (_source131.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_SeqConstruct) {
            DAST._IExpression _3224___mcc_h70 = _source114.dtor_length;
            DAST._IExpression _3225___mcc_h71 = _source114.dtor_elem;
            {
              DAST._ICallName _source133 = _3129_name;
              if (_source133.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3226___mcc_h314 = _source133.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3227___mcc_h315 = _source133.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3228___mcc_h316 = _source133.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source134 = _3227___mcc_h315;
                if (_source134.is_None) {
                } else {
                  DAST._IType _3229___mcc_h320 = _source134.dtor_value;
                  DAST._IType _3230_tpe = _3229___mcc_h320;
                  RAST._IType _3231_typ;
                  RAST._IType _out179;
                  _out179 = (this).GenType(_3230_tpe, false, false);
                  _3231_typ = _out179;
                  if ((_3231_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source133.is_MapBuilderAdd) {
              } else if (_source133.is_MapBuilderBuild) {
              } else if (_source133.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3232___mcc_h74 = _source114.dtor_elements;
            DAST._IType _3233___mcc_h75 = _source114.dtor_typ;
            {
              DAST._ICallName _source135 = _3129_name;
              if (_source135.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3234___mcc_h322 = _source135.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3235___mcc_h323 = _source135.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3236___mcc_h324 = _source135.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source136 = _3235___mcc_h323;
                if (_source136.is_None) {
                } else {
                  DAST._IType _3237___mcc_h328 = _source136.dtor_value;
                  DAST._IType _3238_tpe = _3237___mcc_h328;
                  RAST._IType _3239_typ;
                  RAST._IType _out180;
                  _out180 = (this).GenType(_3238_tpe, false, false);
                  _3239_typ = _out180;
                  if ((_3239_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source135.is_MapBuilderAdd) {
              } else if (_source135.is_MapBuilderBuild) {
              } else if (_source135.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3240___mcc_h78 = _source114.dtor_elements;
            {
              DAST._ICallName _source137 = _3129_name;
              if (_source137.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3241___mcc_h330 = _source137.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3242___mcc_h331 = _source137.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3243___mcc_h332 = _source137.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source138 = _3242___mcc_h331;
                if (_source138.is_None) {
                } else {
                  DAST._IType _3244___mcc_h336 = _source138.dtor_value;
                  DAST._IType _3245_tpe = _3244___mcc_h336;
                  RAST._IType _3246_typ;
                  RAST._IType _out181;
                  _out181 = (this).GenType(_3245_tpe, false, false);
                  _3246_typ = _out181;
                  if ((_3246_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source137.is_MapBuilderAdd) {
              } else if (_source137.is_MapBuilderBuild) {
              } else if (_source137.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _3247___mcc_h80 = _source114.dtor_elements;
            {
              DAST._ICallName _source139 = _3129_name;
              if (_source139.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3248___mcc_h338 = _source139.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3249___mcc_h339 = _source139.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3250___mcc_h340 = _source139.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source140 = _3249___mcc_h339;
                if (_source140.is_None) {
                } else {
                  DAST._IType _3251___mcc_h344 = _source140.dtor_value;
                  DAST._IType _3252_tpe = _3251___mcc_h344;
                  RAST._IType _3253_typ;
                  RAST._IType _out182;
                  _out182 = (this).GenType(_3252_tpe, false, false);
                  _3253_typ = _out182;
                  if ((_3253_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source139.is_MapBuilderAdd) {
              } else if (_source139.is_MapBuilderBuild) {
              } else if (_source139.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3254___mcc_h82 = _source114.dtor_mapElems;
            {
              DAST._ICallName _source141 = _3129_name;
              if (_source141.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3255___mcc_h346 = _source141.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3256___mcc_h347 = _source141.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3257___mcc_h348 = _source141.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source142 = _3256___mcc_h347;
                if (_source142.is_None) {
                } else {
                  DAST._IType _3258___mcc_h352 = _source142.dtor_value;
                  DAST._IType _3259_tpe = _3258___mcc_h352;
                  RAST._IType _3260_typ;
                  RAST._IType _out183;
                  _out183 = (this).GenType(_3259_tpe, false, false);
                  _3260_typ = _out183;
                  if ((_3260_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source141.is_MapBuilderAdd) {
              } else if (_source141.is_MapBuilderBuild) {
              } else if (_source141.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_MapBuilder) {
            DAST._IType _3261___mcc_h84 = _source114.dtor_keyType;
            DAST._IType _3262___mcc_h85 = _source114.dtor_valueType;
            {
              DAST._ICallName _source143 = _3129_name;
              if (_source143.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3263___mcc_h354 = _source143.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3264___mcc_h355 = _source143.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3265___mcc_h356 = _source143.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source144 = _3264___mcc_h355;
                if (_source144.is_None) {
                } else {
                  DAST._IType _3266___mcc_h360 = _source144.dtor_value;
                  DAST._IType _3267_tpe = _3266___mcc_h360;
                  RAST._IType _3268_typ;
                  RAST._IType _out184;
                  _out184 = (this).GenType(_3267_tpe, false, false);
                  _3268_typ = _out184;
                  if ((_3268_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source143.is_MapBuilderAdd) {
              } else if (_source143.is_MapBuilderBuild) {
              } else if (_source143.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_SeqUpdate) {
            DAST._IExpression _3269___mcc_h88 = _source114.dtor_expr;
            DAST._IExpression _3270___mcc_h89 = _source114.dtor_indexExpr;
            DAST._IExpression _3271___mcc_h90 = _source114.dtor_value;
            {
              DAST._ICallName _source145 = _3129_name;
              if (_source145.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3272___mcc_h362 = _source145.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3273___mcc_h363 = _source145.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3274___mcc_h364 = _source145.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source146 = _3273___mcc_h363;
                if (_source146.is_None) {
                } else {
                  DAST._IType _3275___mcc_h368 = _source146.dtor_value;
                  DAST._IType _3276_tpe = _3275___mcc_h368;
                  RAST._IType _3277_typ;
                  RAST._IType _out185;
                  _out185 = (this).GenType(_3276_tpe, false, false);
                  _3277_typ = _out185;
                  if ((_3277_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source145.is_MapBuilderAdd) {
              } else if (_source145.is_MapBuilderBuild) {
              } else if (_source145.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_MapUpdate) {
            DAST._IExpression _3278___mcc_h94 = _source114.dtor_expr;
            DAST._IExpression _3279___mcc_h95 = _source114.dtor_indexExpr;
            DAST._IExpression _3280___mcc_h96 = _source114.dtor_value;
            {
              DAST._ICallName _source147 = _3129_name;
              if (_source147.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3281___mcc_h370 = _source147.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3282___mcc_h371 = _source147.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3283___mcc_h372 = _source147.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source148 = _3282___mcc_h371;
                if (_source148.is_None) {
                } else {
                  DAST._IType _3284___mcc_h376 = _source148.dtor_value;
                  DAST._IType _3285_tpe = _3284___mcc_h376;
                  RAST._IType _3286_typ;
                  RAST._IType _out186;
                  _out186 = (this).GenType(_3285_tpe, false, false);
                  _3286_typ = _out186;
                  if ((_3286_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source147.is_MapBuilderAdd) {
              } else if (_source147.is_MapBuilderBuild) {
              } else if (_source147.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_SetBuilder) {
            DAST._IType _3287___mcc_h100 = _source114.dtor_elemType;
            {
              DAST._ICallName _source149 = _3129_name;
              if (_source149.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3288___mcc_h378 = _source149.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3289___mcc_h379 = _source149.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3290___mcc_h380 = _source149.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source150 = _3289___mcc_h379;
                if (_source150.is_None) {
                } else {
                  DAST._IType _3291___mcc_h384 = _source150.dtor_value;
                  DAST._IType _3292_tpe = _3291___mcc_h384;
                  RAST._IType _3293_typ;
                  RAST._IType _out187;
                  _out187 = (this).GenType(_3292_tpe, false, false);
                  _3293_typ = _out187;
                  if ((_3293_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source149.is_MapBuilderAdd) {
              } else if (_source149.is_MapBuilderBuild) {
              } else if (_source149.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_ToMultiset) {
            DAST._IExpression _3294___mcc_h102 = _source114.dtor_ToMultiset_i_a0;
            {
              DAST._ICallName _source151 = _3129_name;
              if (_source151.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3295___mcc_h386 = _source151.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3296___mcc_h387 = _source151.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3297___mcc_h388 = _source151.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source152 = _3296___mcc_h387;
                if (_source152.is_None) {
                } else {
                  DAST._IType _3298___mcc_h392 = _source152.dtor_value;
                  DAST._IType _3299_tpe = _3298___mcc_h392;
                  RAST._IType _3300_typ;
                  RAST._IType _out188;
                  _out188 = (this).GenType(_3299_tpe, false, false);
                  _3300_typ = _out188;
                  if ((_3300_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source151.is_MapBuilderAdd) {
              } else if (_source151.is_MapBuilderBuild) {
              } else if (_source151.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_This) {
            {
              DAST._ICallName _source153 = _3129_name;
              if (_source153.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3301___mcc_h394 = _source153.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3302___mcc_h395 = _source153.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3303___mcc_h396 = _source153.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source154 = _3302___mcc_h395;
                if (_source154.is_None) {
                } else {
                  DAST._IType _3304___mcc_h400 = _source154.dtor_value;
                  DAST._IType _3305_tpe = _3304___mcc_h400;
                  RAST._IType _3306_typ;
                  RAST._IType _out189;
                  _out189 = (this).GenType(_3305_tpe, false, false);
                  _3306_typ = _out189;
                  if ((_3306_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source153.is_MapBuilderAdd) {
              } else if (_source153.is_MapBuilderBuild) {
              } else if (_source153.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Ite) {
            DAST._IExpression _3307___mcc_h104 = _source114.dtor_cond;
            DAST._IExpression _3308___mcc_h105 = _source114.dtor_thn;
            DAST._IExpression _3309___mcc_h106 = _source114.dtor_els;
            {
              DAST._ICallName _source155 = _3129_name;
              if (_source155.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3310___mcc_h402 = _source155.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3311___mcc_h403 = _source155.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3312___mcc_h404 = _source155.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source156 = _3311___mcc_h403;
                if (_source156.is_None) {
                } else {
                  DAST._IType _3313___mcc_h408 = _source156.dtor_value;
                  DAST._IType _3314_tpe = _3313___mcc_h408;
                  RAST._IType _3315_typ;
                  RAST._IType _out190;
                  _out190 = (this).GenType(_3314_tpe, false, false);
                  _3315_typ = _out190;
                  if ((_3315_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source155.is_MapBuilderAdd) {
              } else if (_source155.is_MapBuilderBuild) {
              } else if (_source155.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_UnOp) {
            DAST._IUnaryOp _3316___mcc_h110 = _source114.dtor_unOp;
            DAST._IExpression _3317___mcc_h111 = _source114.dtor_expr;
            DAST.Format._IUnaryOpFormat _3318___mcc_h112 = _source114.dtor_format1;
            {
              DAST._ICallName _source157 = _3129_name;
              if (_source157.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3319___mcc_h410 = _source157.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3320___mcc_h411 = _source157.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3321___mcc_h412 = _source157.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source158 = _3320___mcc_h411;
                if (_source158.is_None) {
                } else {
                  DAST._IType _3322___mcc_h416 = _source158.dtor_value;
                  DAST._IType _3323_tpe = _3322___mcc_h416;
                  RAST._IType _3324_typ;
                  RAST._IType _out191;
                  _out191 = (this).GenType(_3323_tpe, false, false);
                  _3324_typ = _out191;
                  if ((_3324_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source157.is_MapBuilderAdd) {
              } else if (_source157.is_MapBuilderBuild) {
              } else if (_source157.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_BinOp) {
            DAST._IBinOp _3325___mcc_h116 = _source114.dtor_op;
            DAST._IExpression _3326___mcc_h117 = _source114.dtor_left;
            DAST._IExpression _3327___mcc_h118 = _source114.dtor_right;
            DAST.Format._IBinaryOpFormat _3328___mcc_h119 = _source114.dtor_format2;
            {
              DAST._ICallName _source159 = _3129_name;
              if (_source159.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3329___mcc_h418 = _source159.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3330___mcc_h419 = _source159.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3331___mcc_h420 = _source159.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source160 = _3330___mcc_h419;
                if (_source160.is_None) {
                } else {
                  DAST._IType _3332___mcc_h424 = _source160.dtor_value;
                  DAST._IType _3333_tpe = _3332___mcc_h424;
                  RAST._IType _3334_typ;
                  RAST._IType _out192;
                  _out192 = (this).GenType(_3333_tpe, false, false);
                  _3334_typ = _out192;
                  if ((_3334_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source159.is_MapBuilderAdd) {
              } else if (_source159.is_MapBuilderBuild) {
              } else if (_source159.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_ArrayLen) {
            DAST._IExpression _3335___mcc_h124 = _source114.dtor_expr;
            DAST._IType _3336___mcc_h125 = _source114.dtor_exprType;
            BigInteger _3337___mcc_h126 = _source114.dtor_dim;
            bool _3338___mcc_h127 = _source114.dtor_native;
            {
              DAST._ICallName _source161 = _3129_name;
              if (_source161.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3339___mcc_h426 = _source161.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3340___mcc_h427 = _source161.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3341___mcc_h428 = _source161.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source162 = _3340___mcc_h427;
                if (_source162.is_None) {
                } else {
                  DAST._IType _3342___mcc_h432 = _source162.dtor_value;
                  DAST._IType _3343_tpe = _3342___mcc_h432;
                  RAST._IType _3344_typ;
                  RAST._IType _out193;
                  _out193 = (this).GenType(_3343_tpe, false, false);
                  _3344_typ = _out193;
                  if ((_3344_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source161.is_MapBuilderAdd) {
              } else if (_source161.is_MapBuilderBuild) {
              } else if (_source161.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_MapKeys) {
            DAST._IExpression _3345___mcc_h132 = _source114.dtor_expr;
            {
              DAST._ICallName _source163 = _3129_name;
              if (_source163.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3346___mcc_h434 = _source163.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3347___mcc_h435 = _source163.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3348___mcc_h436 = _source163.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source164 = _3347___mcc_h435;
                if (_source164.is_None) {
                } else {
                  DAST._IType _3349___mcc_h440 = _source164.dtor_value;
                  DAST._IType _3350_tpe = _3349___mcc_h440;
                  RAST._IType _3351_typ;
                  RAST._IType _out194;
                  _out194 = (this).GenType(_3350_tpe, false, false);
                  _3351_typ = _out194;
                  if ((_3351_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source163.is_MapBuilderAdd) {
              } else if (_source163.is_MapBuilderBuild) {
              } else if (_source163.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_MapValues) {
            DAST._IExpression _3352___mcc_h134 = _source114.dtor_expr;
            {
              DAST._ICallName _source165 = _3129_name;
              if (_source165.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3353___mcc_h442 = _source165.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3354___mcc_h443 = _source165.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3355___mcc_h444 = _source165.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source166 = _3354___mcc_h443;
                if (_source166.is_None) {
                } else {
                  DAST._IType _3356___mcc_h448 = _source166.dtor_value;
                  DAST._IType _3357_tpe = _3356___mcc_h448;
                  RAST._IType _3358_typ;
                  RAST._IType _out195;
                  _out195 = (this).GenType(_3357_tpe, false, false);
                  _3358_typ = _out195;
                  if ((_3358_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source165.is_MapBuilderAdd) {
              } else if (_source165.is_MapBuilderBuild) {
              } else if (_source165.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Select) {
            DAST._IExpression _3359___mcc_h136 = _source114.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3360___mcc_h137 = _source114.dtor_field;
            bool _3361___mcc_h138 = _source114.dtor_isConstant;
            bool _3362___mcc_h139 = _source114.dtor_onDatatype;
            DAST._IType _3363___mcc_h140 = _source114.dtor_fieldType;
            {
              DAST._ICallName _source167 = _3129_name;
              if (_source167.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3364___mcc_h450 = _source167.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3365___mcc_h451 = _source167.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3366___mcc_h452 = _source167.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source168 = _3365___mcc_h451;
                if (_source168.is_None) {
                } else {
                  DAST._IType _3367___mcc_h456 = _source168.dtor_value;
                  DAST._IType _3368_tpe = _3367___mcc_h456;
                  RAST._IType _3369_typ;
                  RAST._IType _out196;
                  _out196 = (this).GenType(_3368_tpe, false, false);
                  _3369_typ = _out196;
                  if ((_3369_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source167.is_MapBuilderAdd) {
              } else if (_source167.is_MapBuilderBuild) {
              } else if (_source167.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_SelectFn) {
            DAST._IExpression _3370___mcc_h146 = _source114.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3371___mcc_h147 = _source114.dtor_field;
            bool _3372___mcc_h148 = _source114.dtor_onDatatype;
            bool _3373___mcc_h149 = _source114.dtor_isStatic;
            BigInteger _3374___mcc_h150 = _source114.dtor_arity;
            {
              DAST._ICallName _source169 = _3129_name;
              if (_source169.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3375___mcc_h458 = _source169.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3376___mcc_h459 = _source169.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3377___mcc_h460 = _source169.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source170 = _3376___mcc_h459;
                if (_source170.is_None) {
                } else {
                  DAST._IType _3378___mcc_h464 = _source170.dtor_value;
                  DAST._IType _3379_tpe = _3378___mcc_h464;
                  RAST._IType _3380_typ;
                  RAST._IType _out197;
                  _out197 = (this).GenType(_3379_tpe, false, false);
                  _3380_typ = _out197;
                  if ((_3380_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source169.is_MapBuilderAdd) {
              } else if (_source169.is_MapBuilderBuild) {
              } else if (_source169.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Index) {
            DAST._IExpression _3381___mcc_h156 = _source114.dtor_expr;
            DAST._ICollKind _3382___mcc_h157 = _source114.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3383___mcc_h158 = _source114.dtor_indices;
            {
              DAST._ICallName _source171 = _3129_name;
              if (_source171.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3384___mcc_h466 = _source171.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3385___mcc_h467 = _source171.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3386___mcc_h468 = _source171.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source172 = _3385___mcc_h467;
                if (_source172.is_None) {
                } else {
                  DAST._IType _3387___mcc_h472 = _source172.dtor_value;
                  DAST._IType _3388_tpe = _3387___mcc_h472;
                  RAST._IType _3389_typ;
                  RAST._IType _out198;
                  _out198 = (this).GenType(_3388_tpe, false, false);
                  _3389_typ = _out198;
                  if ((_3389_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source171.is_MapBuilderAdd) {
              } else if (_source171.is_MapBuilderBuild) {
              } else if (_source171.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_IndexRange) {
            DAST._IExpression _3390___mcc_h162 = _source114.dtor_expr;
            bool _3391___mcc_h163 = _source114.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _3392___mcc_h164 = _source114.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _3393___mcc_h165 = _source114.dtor_high;
            {
              DAST._ICallName _source173 = _3129_name;
              if (_source173.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3394___mcc_h474 = _source173.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3395___mcc_h475 = _source173.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3396___mcc_h476 = _source173.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source174 = _3395___mcc_h475;
                if (_source174.is_None) {
                } else {
                  DAST._IType _3397___mcc_h480 = _source174.dtor_value;
                  DAST._IType _3398_tpe = _3397___mcc_h480;
                  RAST._IType _3399_typ;
                  RAST._IType _out199;
                  _out199 = (this).GenType(_3398_tpe, false, false);
                  _3399_typ = _out199;
                  if ((_3399_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source173.is_MapBuilderAdd) {
              } else if (_source173.is_MapBuilderBuild) {
              } else if (_source173.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_TupleSelect) {
            DAST._IExpression _3400___mcc_h170 = _source114.dtor_expr;
            BigInteger _3401___mcc_h171 = _source114.dtor_index;
            DAST._IType _3402___mcc_h172 = _source114.dtor_fieldType;
            {
              DAST._ICallName _source175 = _3129_name;
              if (_source175.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3403___mcc_h482 = _source175.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3404___mcc_h483 = _source175.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3405___mcc_h484 = _source175.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source176 = _3404___mcc_h483;
                if (_source176.is_None) {
                } else {
                  DAST._IType _3406___mcc_h488 = _source176.dtor_value;
                  DAST._IType _3407_tpe = _3406___mcc_h488;
                  RAST._IType _3408_typ;
                  RAST._IType _out200;
                  _out200 = (this).GenType(_3407_tpe, false, false);
                  _3408_typ = _out200;
                  if ((_3408_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source175.is_MapBuilderAdd) {
              } else if (_source175.is_MapBuilderBuild) {
              } else if (_source175.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Call) {
            DAST._IExpression _3409___mcc_h176 = _source114.dtor_on;
            DAST._ICallName _3410___mcc_h177 = _source114.dtor_callName;
            Dafny.ISequence<DAST._IType> _3411___mcc_h178 = _source114.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3412___mcc_h179 = _source114.dtor_args;
            {
              DAST._ICallName _source177 = _3129_name;
              if (_source177.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3413___mcc_h490 = _source177.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3414___mcc_h491 = _source177.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3415___mcc_h492 = _source177.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source178 = _3414___mcc_h491;
                if (_source178.is_None) {
                } else {
                  DAST._IType _3416___mcc_h496 = _source178.dtor_value;
                  DAST._IType _3417_tpe = _3416___mcc_h496;
                  RAST._IType _3418_typ;
                  RAST._IType _out201;
                  _out201 = (this).GenType(_3417_tpe, false, false);
                  _3418_typ = _out201;
                  if ((_3418_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source177.is_MapBuilderAdd) {
              } else if (_source177.is_MapBuilderBuild) {
              } else if (_source177.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3419___mcc_h184 = _source114.dtor_params;
            DAST._IType _3420___mcc_h185 = _source114.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3421___mcc_h186 = _source114.dtor_body;
            {
              DAST._ICallName _source179 = _3129_name;
              if (_source179.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3422___mcc_h498 = _source179.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3423___mcc_h499 = _source179.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3424___mcc_h500 = _source179.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source180 = _3423___mcc_h499;
                if (_source180.is_None) {
                } else {
                  DAST._IType _3425___mcc_h504 = _source180.dtor_value;
                  DAST._IType _3426_tpe = _3425___mcc_h504;
                  RAST._IType _3427_typ;
                  RAST._IType _out202;
                  _out202 = (this).GenType(_3426_tpe, false, false);
                  _3427_typ = _out202;
                  if ((_3427_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source179.is_MapBuilderAdd) {
              } else if (_source179.is_MapBuilderBuild) {
              } else if (_source179.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3428___mcc_h190 = _source114.dtor_values;
            DAST._IType _3429___mcc_h191 = _source114.dtor_retType;
            DAST._IExpression _3430___mcc_h192 = _source114.dtor_expr;
            {
              DAST._ICallName _source181 = _3129_name;
              if (_source181.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3431___mcc_h506 = _source181.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3432___mcc_h507 = _source181.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3433___mcc_h508 = _source181.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source182 = _3432___mcc_h507;
                if (_source182.is_None) {
                } else {
                  DAST._IType _3434___mcc_h512 = _source182.dtor_value;
                  DAST._IType _3435_tpe = _3434___mcc_h512;
                  RAST._IType _3436_typ;
                  RAST._IType _out203;
                  _out203 = (this).GenType(_3435_tpe, false, false);
                  _3436_typ = _out203;
                  if ((_3436_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source181.is_MapBuilderAdd) {
              } else if (_source181.is_MapBuilderBuild) {
              } else if (_source181.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3437___mcc_h196 = _source114.dtor_name;
            DAST._IType _3438___mcc_h197 = _source114.dtor_typ;
            DAST._IExpression _3439___mcc_h198 = _source114.dtor_value;
            DAST._IExpression _3440___mcc_h199 = _source114.dtor_iifeBody;
            {
              DAST._ICallName _source183 = _3129_name;
              if (_source183.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3441___mcc_h514 = _source183.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3442___mcc_h515 = _source183.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3443___mcc_h516 = _source183.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source184 = _3442___mcc_h515;
                if (_source184.is_None) {
                } else {
                  DAST._IType _3444___mcc_h520 = _source184.dtor_value;
                  DAST._IType _3445_tpe = _3444___mcc_h520;
                  RAST._IType _3446_typ;
                  RAST._IType _out204;
                  _out204 = (this).GenType(_3445_tpe, false, false);
                  _3446_typ = _out204;
                  if ((_3446_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source183.is_MapBuilderAdd) {
              } else if (_source183.is_MapBuilderBuild) {
              } else if (_source183.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_Apply) {
            DAST._IExpression _3447___mcc_h204 = _source114.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3448___mcc_h205 = _source114.dtor_args;
            {
              DAST._ICallName _source185 = _3129_name;
              if (_source185.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3449___mcc_h522 = _source185.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3450___mcc_h523 = _source185.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3451___mcc_h524 = _source185.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source186 = _3450___mcc_h523;
                if (_source186.is_None) {
                } else {
                  DAST._IType _3452___mcc_h528 = _source186.dtor_value;
                  DAST._IType _3453_tpe = _3452___mcc_h528;
                  RAST._IType _3454_typ;
                  RAST._IType _out205;
                  _out205 = (this).GenType(_3453_tpe, false, false);
                  _3454_typ = _out205;
                  if ((_3454_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source185.is_MapBuilderAdd) {
              } else if (_source185.is_MapBuilderBuild) {
              } else if (_source185.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_TypeTest) {
            DAST._IExpression _3455___mcc_h208 = _source114.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3456___mcc_h209 = _source114.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3457___mcc_h210 = _source114.dtor_variant;
            {
              DAST._ICallName _source187 = _3129_name;
              if (_source187.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3458___mcc_h530 = _source187.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3459___mcc_h531 = _source187.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3460___mcc_h532 = _source187.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source188 = _3459___mcc_h531;
                if (_source188.is_None) {
                } else {
                  DAST._IType _3461___mcc_h536 = _source188.dtor_value;
                  DAST._IType _3462_tpe = _3461___mcc_h536;
                  RAST._IType _3463_typ;
                  RAST._IType _out206;
                  _out206 = (this).GenType(_3462_tpe, false, false);
                  _3463_typ = _out206;
                  if ((_3463_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source187.is_MapBuilderAdd) {
              } else if (_source187.is_MapBuilderBuild) {
              } else if (_source187.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_InitializationValue) {
            DAST._IType _3464___mcc_h214 = _source114.dtor_typ;
            {
              DAST._ICallName _source189 = _3129_name;
              if (_source189.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3465___mcc_h538 = _source189.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3466___mcc_h539 = _source189.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3467___mcc_h540 = _source189.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source190 = _3466___mcc_h539;
                if (_source190.is_None) {
                } else {
                  DAST._IType _3468___mcc_h544 = _source190.dtor_value;
                  DAST._IType _3469_tpe = _3468___mcc_h544;
                  RAST._IType _3470_typ;
                  RAST._IType _out207;
                  _out207 = (this).GenType(_3469_tpe, false, false);
                  _3470_typ = _out207;
                  if ((_3470_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source189.is_MapBuilderAdd) {
              } else if (_source189.is_MapBuilderBuild) {
              } else if (_source189.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_BoolBoundedPool) {
            {
              DAST._ICallName _source191 = _3129_name;
              if (_source191.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3471___mcc_h546 = _source191.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3472___mcc_h547 = _source191.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3473___mcc_h548 = _source191.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source192 = _3472___mcc_h547;
                if (_source192.is_None) {
                } else {
                  DAST._IType _3474___mcc_h552 = _source192.dtor_value;
                  DAST._IType _3475_tpe = _3474___mcc_h552;
                  RAST._IType _3476_typ;
                  RAST._IType _out208;
                  _out208 = (this).GenType(_3475_tpe, false, false);
                  _3476_typ = _out208;
                  if ((_3476_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source191.is_MapBuilderAdd) {
              } else if (_source191.is_MapBuilderBuild) {
              } else if (_source191.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_SetBoundedPool) {
            DAST._IExpression _3477___mcc_h216 = _source114.dtor_of;
            {
              DAST._ICallName _source193 = _3129_name;
              if (_source193.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3478___mcc_h554 = _source193.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3479___mcc_h555 = _source193.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3480___mcc_h556 = _source193.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source194 = _3479___mcc_h555;
                if (_source194.is_None) {
                } else {
                  DAST._IType _3481___mcc_h560 = _source194.dtor_value;
                  DAST._IType _3482_tpe = _3481___mcc_h560;
                  RAST._IType _3483_typ;
                  RAST._IType _out209;
                  _out209 = (this).GenType(_3482_tpe, false, false);
                  _3483_typ = _out209;
                  if ((_3483_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source193.is_MapBuilderAdd) {
              } else if (_source193.is_MapBuilderBuild) {
              } else if (_source193.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_MapBoundedPool) {
            DAST._IExpression _3484___mcc_h218 = _source114.dtor_of;
            {
              DAST._ICallName _source195 = _3129_name;
              if (_source195.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3485___mcc_h562 = _source195.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3486___mcc_h563 = _source195.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3487___mcc_h564 = _source195.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source196 = _3486___mcc_h563;
                if (_source196.is_None) {
                } else {
                  DAST._IType _3488___mcc_h568 = _source196.dtor_value;
                  DAST._IType _3489_tpe = _3488___mcc_h568;
                  RAST._IType _3490_typ;
                  RAST._IType _out210;
                  _out210 = (this).GenType(_3489_tpe, false, false);
                  _3490_typ = _out210;
                  if ((_3490_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source195.is_MapBuilderAdd) {
              } else if (_source195.is_MapBuilderBuild) {
              } else if (_source195.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_SeqBoundedPool) {
            DAST._IExpression _3491___mcc_h220 = _source114.dtor_of;
            bool _3492___mcc_h221 = _source114.dtor_includeDuplicates;
            {
              DAST._ICallName _source197 = _3129_name;
              if (_source197.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3493___mcc_h570 = _source197.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3494___mcc_h571 = _source197.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3495___mcc_h572 = _source197.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source198 = _3494___mcc_h571;
                if (_source198.is_None) {
                } else {
                  DAST._IType _3496___mcc_h576 = _source198.dtor_value;
                  DAST._IType _3497_tpe = _3496___mcc_h576;
                  RAST._IType _3498_typ;
                  RAST._IType _out211;
                  _out211 = (this).GenType(_3497_tpe, false, false);
                  _3498_typ = _out211;
                  if ((_3498_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source197.is_MapBuilderAdd) {
              } else if (_source197.is_MapBuilderBuild) {
              } else if (_source197.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_IntRange) {
            DAST._IExpression _3499___mcc_h224 = _source114.dtor_lo;
            DAST._IExpression _3500___mcc_h225 = _source114.dtor_hi;
            bool _3501___mcc_h226 = _source114.dtor_up;
            {
              DAST._ICallName _source199 = _3129_name;
              if (_source199.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3502___mcc_h578 = _source199.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3503___mcc_h579 = _source199.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3504___mcc_h580 = _source199.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source200 = _3503___mcc_h579;
                if (_source200.is_None) {
                } else {
                  DAST._IType _3505___mcc_h584 = _source200.dtor_value;
                  DAST._IType _3506_tpe = _3505___mcc_h584;
                  RAST._IType _3507_typ;
                  RAST._IType _out212;
                  _out212 = (this).GenType(_3506_tpe, false, false);
                  _3507_typ = _out212;
                  if ((_3507_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source199.is_MapBuilderAdd) {
              } else if (_source199.is_MapBuilderBuild) {
              } else if (_source199.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else if (_source114.is_UnboundedIntRange) {
            DAST._IExpression _3508___mcc_h230 = _source114.dtor_start;
            bool _3509___mcc_h231 = _source114.dtor_up;
            {
              DAST._ICallName _source201 = _3129_name;
              if (_source201.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3510___mcc_h586 = _source201.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3511___mcc_h587 = _source201.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3512___mcc_h588 = _source201.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source202 = _3511___mcc_h587;
                if (_source202.is_None) {
                } else {
                  DAST._IType _3513___mcc_h592 = _source202.dtor_value;
                  DAST._IType _3514_tpe = _3513___mcc_h592;
                  RAST._IType _3515_typ;
                  RAST._IType _out213;
                  _out213 = (this).GenType(_3514_tpe, false, false);
                  _3515_typ = _out213;
                  if ((_3515_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source201.is_MapBuilderAdd) {
              } else if (_source201.is_MapBuilderBuild) {
              } else if (_source201.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          } else {
            DAST._IType _3516___mcc_h234 = _source114.dtor_elemType;
            DAST._IExpression _3517___mcc_h235 = _source114.dtor_collection;
            bool _3518___mcc_h236 = _source114.dtor_is__forall;
            DAST._IExpression _3519___mcc_h237 = _source114.dtor_lambda;
            {
              DAST._ICallName _source203 = _3129_name;
              if (_source203.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3520___mcc_h594 = _source203.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3521___mcc_h595 = _source203.dtor_onType;
                Dafny.ISequence<DAST._IFormal> _3522___mcc_h596 = _source203.dtor_signature;
                Std.Wrappers._IOption<DAST._IType> _source204 = _3521___mcc_h595;
                if (_source204.is_None) {
                } else {
                  DAST._IType _3523___mcc_h600 = _source204.dtor_value;
                  DAST._IType _3524_tpe = _3523___mcc_h600;
                  RAST._IType _3525_typ;
                  RAST._IType _out214;
                  _out214 = (this).GenType(_3524_tpe, false, false);
                  _3525_typ = _out214;
                  if ((_3525_typ).IsObjectOrPointer()) {
                    _3131_onExpr = ((this).modify__macro).Apply1(_3131_onExpr);
                  }
                }
              } else if (_source203.is_MapBuilderAdd) {
              } else if (_source203.is_MapBuilderBuild) {
              } else if (_source203.is_SetBuilderAdd) {
              } else {
              }
              _3131_onExpr = (_3131_onExpr).Sel(_3145_renderedName);
            }
          }
          generated = _3131_onExpr;
          if ((new BigInteger((_3134_typeExprs).Count)).Sign == 1) {
            generated = (generated).ApplyType(_3134_typeExprs);
          }
          generated = (generated).Apply(_3138_argExprs);
          if (((_3126_maybeOutVars).is_Some) && ((new BigInteger(((_3126_maybeOutVars).dtor_value).Count)) == (BigInteger.One))) {
            Dafny.ISequence<Dafny.Rune> _3526_outVar;
            _3526_outVar = DCOMP.__default.escapeName((((_3126_maybeOutVars).dtor_value).Select(BigInteger.Zero)));
            if (!((env).CanReadWithoutClone(_3526_outVar))) {
              generated = RAST.__default.MaybePlacebo(generated);
            }
            generated = RAST.__default.AssignVar(_3526_outVar, generated);
          } else if (((_3126_maybeOutVars).is_None) || ((new BigInteger(((_3126_maybeOutVars).dtor_value).Count)).Sign == 0)) {
          } else {
            Dafny.ISequence<Dafny.Rune> _3527_tmpVar;
            _3527_tmpVar = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_x");
            RAST._IExpr _3528_tmpId;
            _3528_tmpId = RAST.Expr.create_Identifier(_3527_tmpVar);
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), _3527_tmpVar, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(generated));
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3529_outVars;
            _3529_outVars = (_3126_maybeOutVars).dtor_value;
            BigInteger _hi30 = new BigInteger((_3529_outVars).Count);
            for (BigInteger _3530_outI = BigInteger.Zero; _3530_outI < _hi30; _3530_outI++) {
              Dafny.ISequence<Dafny.Rune> _3531_outVar;
              _3531_outVar = DCOMP.__default.escapeName(((_3529_outVars).Select(_3530_outI)));
              RAST._IExpr _3532_rhs;
              _3532_rhs = (_3528_tmpId).Sel(Std.Strings.__default.OfNat(_3530_outI));
              if (!((env).CanReadWithoutClone(_3531_outVar))) {
                _3532_rhs = RAST.__default.MaybePlacebo(_3532_rhs);
              }
              generated = (generated).Then(RAST.__default.AssignVar(_3531_outVar, _3532_rhs));
            }
          }
          newEnv = env;
        }
      } else if (_source111.is_Return) {
        DAST._IExpression _3533___mcc_h22 = _source111.dtor_expr;
        DAST._IExpression _3534_exprDafny = _3533___mcc_h22;
        {
          RAST._IExpr _3535_expr;
          DCOMP._IOwnership _3536___v85;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3537_recIdents;
          RAST._IExpr _out215;
          DCOMP._IOwnership _out216;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
          (this).GenExpr(_3534_exprDafny, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out215, out _out216, out _out217);
          _3535_expr = _out215;
          _3536___v85 = _out216;
          _3537_recIdents = _out217;
          readIdents = _3537_recIdents;
          if (isLast) {
            generated = _3535_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_3535_expr));
          }
          newEnv = env;
        }
      } else if (_source111.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
        }
      } else if (_source111.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3538___mcc_h23 = _source111.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3539_toLabel = _3538___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source205 = _3539_toLabel;
          if (_source205.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3540___mcc_h602 = _source205.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3541_lbl = _3540___mcc_h602;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _3541_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
        }
      } else if (_source111.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _3542___mcc_h24 = _source111.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3543_body = _3542___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(((RAST.__default.self).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()))));
          }
          newEnv = env;
          BigInteger _hi31 = new BigInteger(((env).dtor_names).Count);
          for (BigInteger _3544_paramI = BigInteger.Zero; _3544_paramI < _hi31; _3544_paramI++) {
            Dafny.ISequence<Dafny.Rune> _3545_param;
            _3545_param = ((env).dtor_names).Select(_3544_paramI);
            RAST._IExpr _3546_paramInit;
            DCOMP._IOwnership _3547___v75;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3548___v76;
            RAST._IExpr _out218;
            DCOMP._IOwnership _out219;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out220;
            (this).GenIdent(_3545_param, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out218, out _out219, out _out220);
            _3546_paramInit = _out218;
            _3547___v75 = _out219;
            _3548___v76 = _out220;
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), _3545_param, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_3546_paramInit)));
            if (((env).dtor_types).Contains(_3545_param)) {
              RAST._IType _3549_declaredType;
              _3549_declaredType = (Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((env).dtor_types,_3545_param)).ToOwned();
              newEnv = (newEnv).AddAssigned(_3545_param, _3549_declaredType);
            }
          }
          RAST._IExpr _3550_bodyExpr;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3551_bodyIdents;
          DCOMP._IEnvironment _3552_bodyEnv;
          RAST._IExpr _out221;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
          DCOMP._IEnvironment _out223;
          (this).GenStmts(_3543_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), newEnv, false, earlyReturn, out _out221, out _out222, out _out223);
          _3550_bodyExpr = _out221;
          _3551_bodyIdents = _out222;
          _3552_bodyEnv = _out223;
          readIdents = _3551_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _3550_bodyExpr)));
        }
      } else if (_source111.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
        }
      } else if (_source111.is_Halt) {
        {
          generated = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!"))).Apply1(RAST.Expr.create_LiteralString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Halt"), false));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
        }
      } else if (_source111.is_Print) {
        DAST._IExpression _3553___mcc_h25 = _source111.dtor_Print_i_a0;
        DAST._IExpression _3554_e = _3553___mcc_h25;
        {
          RAST._IExpr _3555_printedExpr;
          DCOMP._IOwnership _3556_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3557_recIdents;
          RAST._IExpr _out224;
          DCOMP._IOwnership _out225;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
          (this).GenExpr(_3554_e, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out224, out _out225, out _out226);
          _3555_printedExpr = _out224;
          _3556_recOwnership = _out225;
          _3557_recIdents = _out226;
          generated = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_LiteralString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{}"), false), ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyPrintWrapper"))).Apply1(_3555_printedExpr)));
          readIdents = _3557_recIdents;
          newEnv = env;
        }
      } else {
        Dafny.ISequence<DAST._IFormal> _3558___mcc_h26 = _source111.dtor_fields;
        Dafny.ISequence<DAST._IFormal> _3559_fields = _3558___mcc_h26;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
          BigInteger _hi32 = new BigInteger((_3559_fields).Count);
          for (BigInteger _3560_i = BigInteger.Zero; _3560_i < _hi32; _3560_i++) {
            DAST._IFormal _3561_field;
            _3561_field = (_3559_fields).Select(_3560_i);
            Dafny.ISequence<Dafny.Rune> _3562_fieldName;
            _3562_fieldName = DCOMP.__default.escapeName((_3561_field).dtor_name);
            RAST._IType _3563_fieldTyp;
            RAST._IType _out227;
            _out227 = (this).GenType((_3561_field).dtor_typ, false, false);
            _3563_fieldTyp = _out227;
            Dafny.ISequence<Dafny.Rune> _3564_isAssignedVar;
            _3564_isAssignedVar = DCOMP.__default.AddAssignedPrefix(_3562_fieldName);
            if (((newEnv).dtor_names).Contains(_3564_isAssignedVar)) {
              RAST._IExpr _3565_rhs;
              DCOMP._IOwnership _3566___v69;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3567___v70;
              RAST._IExpr _out228;
              DCOMP._IOwnership _out229;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
              (this).GenExpr(DAST.Expression.create_InitializationValue((_3561_field).dtor_typ), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out228, out _out229, out _out230);
              _3565_rhs = _out228;
              _3566___v69 = _out229;
              _3567___v70 = _out230;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3564_isAssignedVar));
              generated = (generated).Then(((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_field_if_uninit!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")), RAST.Expr.create_Identifier(_3562_fieldName), RAST.Expr.create_Identifier(_3564_isAssignedVar), _3565_rhs)));
              newEnv = (newEnv).RemoveAssigned(_3564_isAssignedVar);
            }
          }
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source206 = range;
      if (_source206.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source206.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source206.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source206.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source206.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source206.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source206.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source206.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source206.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source206.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source206.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
        @out = RAST.__default.BoxNew(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwnedBox();
      } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMP._IOwnership ownership, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(ownership, expectedOwnership)) {
        @out = r;
        resultingOwnership = expectedOwnership;
        return ;
      }
      if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out231;
        DCOMP._IOwnership _out232;
        DCOMP.COMP.FromOwned(r, expectedOwnership, out _out231, out _out232);
        @out = _out231;
        resultingOwnership = _out232;
        return ;
      } else if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
        RAST._IExpr _out233;
        DCOMP._IOwnership _out234;
        DCOMP.COMP.FromOwned(RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), r, DAST.Format.UnaryOpFormat.create_NoFormat()), expectedOwnership, out _out233, out _out234);
        @out = _out233;
        resultingOwnership = _out234;
      } else if ((object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwnedBox();
          @out = RAST.__default.BoxNew(RAST.__default.Clone(r));
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static bool OwnershipGuarantee(DCOMP._IOwnership expectedOwnership, DCOMP._IOwnership resultingOwnership)
    {
      return (!(!object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) || (object.Equals(resultingOwnership, expectedOwnership))) && (!object.Equals(resultingOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()));
    }
    public void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source207 = e;
      DAST._ILiteral _3568___mcc_h0 = _source207.dtor_Literal_i_a0;
      DAST._ILiteral _source208 = _3568___mcc_h0;
      if (_source208.is_BoolLiteral) {
        bool _3569___mcc_h1 = _source208.dtor_BoolLiteral_i_a0;
        bool _3570_b = _3569___mcc_h1;
        {
          RAST._IExpr _out235;
          DCOMP._IOwnership _out236;
          DCOMP.COMP.FromOwned(RAST.Expr.create_LiteralBool(_3570_b), expectedOwnership, out _out235, out _out236);
          r = _out235;
          resultingOwnership = _out236;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source208.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _3571___mcc_h2 = _source208.dtor_IntLiteral_i_a0;
        DAST._IType _3572___mcc_h3 = _source208.dtor_IntLiteral_i_a1;
        DAST._IType _3573_t = _3572___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _3574_i = _3571___mcc_h2;
        {
          DAST._IType _source209 = _3573_t;
          if (_source209.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3575___mcc_h115 = _source209.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _3576___mcc_h116 = _source209.dtor_typeArgs;
            DAST._IResolvedType _3577___mcc_h117 = _source209.dtor_resolved;
            DAST._IType _3578_o = _3573_t;
            {
              RAST._IType _3579_genType;
              RAST._IType _out237;
              _out237 = (this).GenType(_3578_o, false, false);
              _3579_genType = _out237;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3579_genType);
            }
          } else if (_source209.is_Nullable) {
            DAST._IType _3580___mcc_h121 = _source209.dtor_Nullable_i_a0;
            DAST._IType _3581_o = _3573_t;
            {
              RAST._IType _3582_genType;
              RAST._IType _out238;
              _out238 = (this).GenType(_3581_o, false, false);
              _3582_genType = _out238;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3582_genType);
            }
          } else if (_source209.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3583___mcc_h123 = _source209.dtor_Tuple_i_a0;
            DAST._IType _3584_o = _3573_t;
            {
              RAST._IType _3585_genType;
              RAST._IType _out239;
              _out239 = (this).GenType(_3584_o, false, false);
              _3585_genType = _out239;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3585_genType);
            }
          } else if (_source209.is_Array) {
            DAST._IType _3586___mcc_h125 = _source209.dtor_element;
            BigInteger _3587___mcc_h126 = _source209.dtor_dims;
            DAST._IType _3588_o = _3573_t;
            {
              RAST._IType _3589_genType;
              RAST._IType _out240;
              _out240 = (this).GenType(_3588_o, false, false);
              _3589_genType = _out240;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3589_genType);
            }
          } else if (_source209.is_Seq) {
            DAST._IType _3590___mcc_h129 = _source209.dtor_element;
            DAST._IType _3591_o = _3573_t;
            {
              RAST._IType _3592_genType;
              RAST._IType _out241;
              _out241 = (this).GenType(_3591_o, false, false);
              _3592_genType = _out241;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3592_genType);
            }
          } else if (_source209.is_Set) {
            DAST._IType _3593___mcc_h131 = _source209.dtor_element;
            DAST._IType _3594_o = _3573_t;
            {
              RAST._IType _3595_genType;
              RAST._IType _out242;
              _out242 = (this).GenType(_3594_o, false, false);
              _3595_genType = _out242;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3595_genType);
            }
          } else if (_source209.is_Multiset) {
            DAST._IType _3596___mcc_h133 = _source209.dtor_element;
            DAST._IType _3597_o = _3573_t;
            {
              RAST._IType _3598_genType;
              RAST._IType _out243;
              _out243 = (this).GenType(_3597_o, false, false);
              _3598_genType = _out243;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3598_genType);
            }
          } else if (_source209.is_Map) {
            DAST._IType _3599___mcc_h135 = _source209.dtor_key;
            DAST._IType _3600___mcc_h136 = _source209.dtor_value;
            DAST._IType _3601_o = _3573_t;
            {
              RAST._IType _3602_genType;
              RAST._IType _out244;
              _out244 = (this).GenType(_3601_o, false, false);
              _3602_genType = _out244;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3602_genType);
            }
          } else if (_source209.is_SetBuilder) {
            DAST._IType _3603___mcc_h139 = _source209.dtor_element;
            DAST._IType _3604_o = _3573_t;
            {
              RAST._IType _3605_genType;
              RAST._IType _out245;
              _out245 = (this).GenType(_3604_o, false, false);
              _3605_genType = _out245;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3605_genType);
            }
          } else if (_source209.is_MapBuilder) {
            DAST._IType _3606___mcc_h141 = _source209.dtor_key;
            DAST._IType _3607___mcc_h142 = _source209.dtor_value;
            DAST._IType _3608_o = _3573_t;
            {
              RAST._IType _3609_genType;
              RAST._IType _out246;
              _out246 = (this).GenType(_3608_o, false, false);
              _3609_genType = _out246;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3609_genType);
            }
          } else if (_source209.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3610___mcc_h145 = _source209.dtor_args;
            DAST._IType _3611___mcc_h146 = _source209.dtor_result;
            DAST._IType _3612_o = _3573_t;
            {
              RAST._IType _3613_genType;
              RAST._IType _out247;
              _out247 = (this).GenType(_3612_o, false, false);
              _3613_genType = _out247;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3613_genType);
            }
          } else if (_source209.is_Primitive) {
            DAST._IPrimitive _3614___mcc_h149 = _source209.dtor_Primitive_i_a0;
            DAST._IPrimitive _source210 = _3614___mcc_h149;
            if (_source210.is_Int) {
              {
                if ((new BigInteger((_3574_i).Count)) <= (new BigInteger(4))) {
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(RAST.Expr.create_LiteralInt(_3574_i));
                } else {
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(RAST.Expr.create_LiteralString(_3574_i, true));
                }
              }
            } else if (_source210.is_Real) {
              DAST._IType _3615_o = _3573_t;
              {
                RAST._IType _3616_genType;
                RAST._IType _out248;
                _out248 = (this).GenType(_3615_o, false, false);
                _3616_genType = _out248;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3616_genType);
              }
            } else if (_source210.is_String) {
              DAST._IType _3617_o = _3573_t;
              {
                RAST._IType _3618_genType;
                RAST._IType _out249;
                _out249 = (this).GenType(_3617_o, false, false);
                _3618_genType = _out249;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3618_genType);
              }
            } else if (_source210.is_Bool) {
              DAST._IType _3619_o = _3573_t;
              {
                RAST._IType _3620_genType;
                RAST._IType _out250;
                _out250 = (this).GenType(_3619_o, false, false);
                _3620_genType = _out250;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3620_genType);
              }
            } else {
              DAST._IType _3621_o = _3573_t;
              {
                RAST._IType _3622_genType;
                RAST._IType _out251;
                _out251 = (this).GenType(_3621_o, false, false);
                _3622_genType = _out251;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3622_genType);
              }
            }
          } else if (_source209.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3623___mcc_h151 = _source209.dtor_Passthrough_i_a0;
            DAST._IType _3624_o = _3573_t;
            {
              RAST._IType _3625_genType;
              RAST._IType _out252;
              _out252 = (this).GenType(_3624_o, false, false);
              _3625_genType = _out252;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3625_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3626___mcc_h153 = _source209.dtor_TypeArg_i_a0;
            DAST._IType _3627_o = _3573_t;
            {
              RAST._IType _3628_genType;
              RAST._IType _out253;
              _out253 = (this).GenType(_3627_o, false, false);
              _3628_genType = _out253;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3574_i), _3628_genType);
            }
          }
          RAST._IExpr _out254;
          DCOMP._IOwnership _out255;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out254, out _out255);
          r = _out254;
          resultingOwnership = _out255;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source208.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _3629___mcc_h4 = _source208.dtor_DecLiteral_i_a0;
        Dafny.ISequence<Dafny.Rune> _3630___mcc_h5 = _source208.dtor_DecLiteral_i_a1;
        DAST._IType _3631___mcc_h6 = _source208.dtor_DecLiteral_i_a2;
        DAST._IType _3632_t = _3631___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _3633_d = _3630___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _3634_n = _3629___mcc_h4;
        {
          DAST._IType _source211 = _3632_t;
          if (_source211.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3635___mcc_h155 = _source211.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _3636___mcc_h156 = _source211.dtor_typeArgs;
            DAST._IResolvedType _3637___mcc_h157 = _source211.dtor_resolved;
            DAST._IType _3638_o = _3632_t;
            {
              RAST._IType _3639_genType;
              RAST._IType _out256;
              _out256 = (this).GenType(_3638_o, false, false);
              _3639_genType = _out256;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3639_genType);
            }
          } else if (_source211.is_Nullable) {
            DAST._IType _3640___mcc_h161 = _source211.dtor_Nullable_i_a0;
            DAST._IType _3641_o = _3632_t;
            {
              RAST._IType _3642_genType;
              RAST._IType _out257;
              _out257 = (this).GenType(_3641_o, false, false);
              _3642_genType = _out257;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3642_genType);
            }
          } else if (_source211.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3643___mcc_h163 = _source211.dtor_Tuple_i_a0;
            DAST._IType _3644_o = _3632_t;
            {
              RAST._IType _3645_genType;
              RAST._IType _out258;
              _out258 = (this).GenType(_3644_o, false, false);
              _3645_genType = _out258;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3645_genType);
            }
          } else if (_source211.is_Array) {
            DAST._IType _3646___mcc_h165 = _source211.dtor_element;
            BigInteger _3647___mcc_h166 = _source211.dtor_dims;
            DAST._IType _3648_o = _3632_t;
            {
              RAST._IType _3649_genType;
              RAST._IType _out259;
              _out259 = (this).GenType(_3648_o, false, false);
              _3649_genType = _out259;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3649_genType);
            }
          } else if (_source211.is_Seq) {
            DAST._IType _3650___mcc_h169 = _source211.dtor_element;
            DAST._IType _3651_o = _3632_t;
            {
              RAST._IType _3652_genType;
              RAST._IType _out260;
              _out260 = (this).GenType(_3651_o, false, false);
              _3652_genType = _out260;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3652_genType);
            }
          } else if (_source211.is_Set) {
            DAST._IType _3653___mcc_h171 = _source211.dtor_element;
            DAST._IType _3654_o = _3632_t;
            {
              RAST._IType _3655_genType;
              RAST._IType _out261;
              _out261 = (this).GenType(_3654_o, false, false);
              _3655_genType = _out261;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3655_genType);
            }
          } else if (_source211.is_Multiset) {
            DAST._IType _3656___mcc_h173 = _source211.dtor_element;
            DAST._IType _3657_o = _3632_t;
            {
              RAST._IType _3658_genType;
              RAST._IType _out262;
              _out262 = (this).GenType(_3657_o, false, false);
              _3658_genType = _out262;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3658_genType);
            }
          } else if (_source211.is_Map) {
            DAST._IType _3659___mcc_h175 = _source211.dtor_key;
            DAST._IType _3660___mcc_h176 = _source211.dtor_value;
            DAST._IType _3661_o = _3632_t;
            {
              RAST._IType _3662_genType;
              RAST._IType _out263;
              _out263 = (this).GenType(_3661_o, false, false);
              _3662_genType = _out263;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3662_genType);
            }
          } else if (_source211.is_SetBuilder) {
            DAST._IType _3663___mcc_h179 = _source211.dtor_element;
            DAST._IType _3664_o = _3632_t;
            {
              RAST._IType _3665_genType;
              RAST._IType _out264;
              _out264 = (this).GenType(_3664_o, false, false);
              _3665_genType = _out264;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3665_genType);
            }
          } else if (_source211.is_MapBuilder) {
            DAST._IType _3666___mcc_h181 = _source211.dtor_key;
            DAST._IType _3667___mcc_h182 = _source211.dtor_value;
            DAST._IType _3668_o = _3632_t;
            {
              RAST._IType _3669_genType;
              RAST._IType _out265;
              _out265 = (this).GenType(_3668_o, false, false);
              _3669_genType = _out265;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3669_genType);
            }
          } else if (_source211.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3670___mcc_h185 = _source211.dtor_args;
            DAST._IType _3671___mcc_h186 = _source211.dtor_result;
            DAST._IType _3672_o = _3632_t;
            {
              RAST._IType _3673_genType;
              RAST._IType _out266;
              _out266 = (this).GenType(_3672_o, false, false);
              _3673_genType = _out266;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3673_genType);
            }
          } else if (_source211.is_Primitive) {
            DAST._IPrimitive _3674___mcc_h189 = _source211.dtor_Primitive_i_a0;
            DAST._IPrimitive _source212 = _3674___mcc_h189;
            if (_source212.is_Int) {
              DAST._IType _3675_o = _3632_t;
              {
                RAST._IType _3676_genType;
                RAST._IType _out267;
                _out267 = (this).GenType(_3675_o, false, false);
                _3676_genType = _out267;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3676_genType);
              }
            } else if (_source212.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source212.is_String) {
              DAST._IType _3677_o = _3632_t;
              {
                RAST._IType _3678_genType;
                RAST._IType _out268;
                _out268 = (this).GenType(_3677_o, false, false);
                _3678_genType = _out268;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3678_genType);
              }
            } else if (_source212.is_Bool) {
              DAST._IType _3679_o = _3632_t;
              {
                RAST._IType _3680_genType;
                RAST._IType _out269;
                _out269 = (this).GenType(_3679_o, false, false);
                _3680_genType = _out269;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3680_genType);
              }
            } else {
              DAST._IType _3681_o = _3632_t;
              {
                RAST._IType _3682_genType;
                RAST._IType _out270;
                _out270 = (this).GenType(_3681_o, false, false);
                _3682_genType = _out270;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3682_genType);
              }
            }
          } else if (_source211.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3683___mcc_h191 = _source211.dtor_Passthrough_i_a0;
            DAST._IType _3684_o = _3632_t;
            {
              RAST._IType _3685_genType;
              RAST._IType _out271;
              _out271 = (this).GenType(_3684_o, false, false);
              _3685_genType = _out271;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3685_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3686___mcc_h193 = _source211.dtor_TypeArg_i_a0;
            DAST._IType _3687_o = _3632_t;
            {
              RAST._IType _3688_genType;
              RAST._IType _out272;
              _out272 = (this).GenType(_3687_o, false, false);
              _3688_genType = _out272;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3633_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3688_genType);
            }
          }
          RAST._IExpr _out273;
          DCOMP._IOwnership _out274;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out273, out _out274);
          r = _out273;
          resultingOwnership = _out274;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source208.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _3689___mcc_h7 = _source208.dtor_StringLiteral_i_a0;
        Dafny.ISequence<Dafny.Rune> _3690_l = _3689___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel((this).string__of)).Apply1(RAST.Expr.create_LiteralString(_3690_l, false));
          RAST._IExpr _out275;
          DCOMP._IOwnership _out276;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out275, out _out276);
          r = _out275;
          resultingOwnership = _out276;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source208.is_CharLiteral) {
        Dafny.Rune _3691___mcc_h8 = _source208.dtor_CharLiteral_i_a0;
        Dafny.Rune _3692_c = _3691___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_3692_c).Value)));
          r = RAST.Expr.create_TypeAscription(r, (this).DafnyCharUnderlying);
          r = ((RAST.__default.dafny__runtime).MSel((this).DafnyChar)).Apply1(r);
          RAST._IExpr _out277;
          DCOMP._IOwnership _out278;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out277, out _out278);
          r = _out277;
          resultingOwnership = _out278;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _3693___mcc_h9 = _source208.dtor_Null_i_a0;
        DAST._IType _3694_tpe = _3693___mcc_h9;
        {
          RAST._IType _3695_tpeGen;
          RAST._IType _out279;
          _out279 = (this).GenType(_3694_tpe, false, false);
          _3695_tpeGen = _out279;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _3695_tpeGen);
          RAST._IExpr _out280;
          DCOMP._IOwnership _out281;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out280, out _out281);
          r = _out280;
          resultingOwnership = _out281;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs52 = e;
      DAST._IBinOp _3696_op = _let_tmp_rhs52.dtor_op;
      DAST._IExpression _3697_lExpr = _let_tmp_rhs52.dtor_left;
      DAST._IExpression _3698_rExpr = _let_tmp_rhs52.dtor_right;
      DAST.Format._IBinaryOpFormat _3699_format = _let_tmp_rhs52.dtor_format2;
      bool _3700_becomesLeftCallsRight;
      _3700_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source213) => {
        if (_source213.is_Eq) {
          bool _3701___mcc_h0 = _source213.dtor_referential;
          bool _3702___mcc_h1 = _source213.dtor_nullable;
          return false;
        } else if (_source213.is_Div) {
          return false;
        } else if (_source213.is_EuclidianDiv) {
          return false;
        } else if (_source213.is_Mod) {
          return false;
        } else if (_source213.is_EuclidianMod) {
          return false;
        } else if (_source213.is_Lt) {
          return false;
        } else if (_source213.is_LtChar) {
          return false;
        } else if (_source213.is_Plus) {
          return false;
        } else if (_source213.is_Minus) {
          return false;
        } else if (_source213.is_Times) {
          return false;
        } else if (_source213.is_BitwiseAnd) {
          return false;
        } else if (_source213.is_BitwiseOr) {
          return false;
        } else if (_source213.is_BitwiseXor) {
          return false;
        } else if (_source213.is_BitwiseShiftRight) {
          return false;
        } else if (_source213.is_BitwiseShiftLeft) {
          return false;
        } else if (_source213.is_And) {
          return false;
        } else if (_source213.is_Or) {
          return false;
        } else if (_source213.is_In) {
          return false;
        } else if (_source213.is_SeqProperPrefix) {
          return false;
        } else if (_source213.is_SeqPrefix) {
          return false;
        } else if (_source213.is_SetMerge) {
          return true;
        } else if (_source213.is_SetSubtraction) {
          return true;
        } else if (_source213.is_SetIntersection) {
          return true;
        } else if (_source213.is_Subset) {
          return false;
        } else if (_source213.is_ProperSubset) {
          return false;
        } else if (_source213.is_SetDisjoint) {
          return true;
        } else if (_source213.is_MapMerge) {
          return true;
        } else if (_source213.is_MapSubtraction) {
          return true;
        } else if (_source213.is_MultisetMerge) {
          return true;
        } else if (_source213.is_MultisetSubtraction) {
          return true;
        } else if (_source213.is_MultisetIntersection) {
          return true;
        } else if (_source213.is_Submultiset) {
          return false;
        } else if (_source213.is_ProperSubmultiset) {
          return false;
        } else if (_source213.is_MultisetDisjoint) {
          return true;
        } else if (_source213.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _3703___mcc_h4 = _source213.dtor_Passthrough_i_a0;
          return false;
        }
      }))(_3696_op);
      bool _3704_becomesRightCallsLeft;
      _3704_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source214) => {
        if (_source214.is_Eq) {
          bool _3705___mcc_h6 = _source214.dtor_referential;
          bool _3706___mcc_h7 = _source214.dtor_nullable;
          return false;
        } else if (_source214.is_Div) {
          return false;
        } else if (_source214.is_EuclidianDiv) {
          return false;
        } else if (_source214.is_Mod) {
          return false;
        } else if (_source214.is_EuclidianMod) {
          return false;
        } else if (_source214.is_Lt) {
          return false;
        } else if (_source214.is_LtChar) {
          return false;
        } else if (_source214.is_Plus) {
          return false;
        } else if (_source214.is_Minus) {
          return false;
        } else if (_source214.is_Times) {
          return false;
        } else if (_source214.is_BitwiseAnd) {
          return false;
        } else if (_source214.is_BitwiseOr) {
          return false;
        } else if (_source214.is_BitwiseXor) {
          return false;
        } else if (_source214.is_BitwiseShiftRight) {
          return false;
        } else if (_source214.is_BitwiseShiftLeft) {
          return false;
        } else if (_source214.is_And) {
          return false;
        } else if (_source214.is_Or) {
          return false;
        } else if (_source214.is_In) {
          return true;
        } else if (_source214.is_SeqProperPrefix) {
          return false;
        } else if (_source214.is_SeqPrefix) {
          return false;
        } else if (_source214.is_SetMerge) {
          return false;
        } else if (_source214.is_SetSubtraction) {
          return false;
        } else if (_source214.is_SetIntersection) {
          return false;
        } else if (_source214.is_Subset) {
          return false;
        } else if (_source214.is_ProperSubset) {
          return false;
        } else if (_source214.is_SetDisjoint) {
          return false;
        } else if (_source214.is_MapMerge) {
          return false;
        } else if (_source214.is_MapSubtraction) {
          return false;
        } else if (_source214.is_MultisetMerge) {
          return false;
        } else if (_source214.is_MultisetSubtraction) {
          return false;
        } else if (_source214.is_MultisetIntersection) {
          return false;
        } else if (_source214.is_Submultiset) {
          return false;
        } else if (_source214.is_ProperSubmultiset) {
          return false;
        } else if (_source214.is_MultisetDisjoint) {
          return false;
        } else if (_source214.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _3707___mcc_h10 = _source214.dtor_Passthrough_i_a0;
          return false;
        }
      }))(_3696_op);
      bool _3708_becomesCallLeftRight;
      _3708_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source215) => {
        if (_source215.is_Eq) {
          bool _3709___mcc_h12 = _source215.dtor_referential;
          bool _3710___mcc_h13 = _source215.dtor_nullable;
          if ((_3709___mcc_h12) == (true)) {
            if ((_3710___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source215.is_Div) {
          return false;
        } else if (_source215.is_EuclidianDiv) {
          return false;
        } else if (_source215.is_Mod) {
          return false;
        } else if (_source215.is_EuclidianMod) {
          return false;
        } else if (_source215.is_Lt) {
          return false;
        } else if (_source215.is_LtChar) {
          return false;
        } else if (_source215.is_Plus) {
          return false;
        } else if (_source215.is_Minus) {
          return false;
        } else if (_source215.is_Times) {
          return false;
        } else if (_source215.is_BitwiseAnd) {
          return false;
        } else if (_source215.is_BitwiseOr) {
          return false;
        } else if (_source215.is_BitwiseXor) {
          return false;
        } else if (_source215.is_BitwiseShiftRight) {
          return false;
        } else if (_source215.is_BitwiseShiftLeft) {
          return false;
        } else if (_source215.is_And) {
          return false;
        } else if (_source215.is_Or) {
          return false;
        } else if (_source215.is_In) {
          return false;
        } else if (_source215.is_SeqProperPrefix) {
          return false;
        } else if (_source215.is_SeqPrefix) {
          return false;
        } else if (_source215.is_SetMerge) {
          return true;
        } else if (_source215.is_SetSubtraction) {
          return true;
        } else if (_source215.is_SetIntersection) {
          return true;
        } else if (_source215.is_Subset) {
          return false;
        } else if (_source215.is_ProperSubset) {
          return false;
        } else if (_source215.is_SetDisjoint) {
          return true;
        } else if (_source215.is_MapMerge) {
          return true;
        } else if (_source215.is_MapSubtraction) {
          return true;
        } else if (_source215.is_MultisetMerge) {
          return true;
        } else if (_source215.is_MultisetSubtraction) {
          return true;
        } else if (_source215.is_MultisetIntersection) {
          return true;
        } else if (_source215.is_Submultiset) {
          return false;
        } else if (_source215.is_ProperSubmultiset) {
          return false;
        } else if (_source215.is_MultisetDisjoint) {
          return true;
        } else if (_source215.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _3711___mcc_h16 = _source215.dtor_Passthrough_i_a0;
          return false;
        }
      }))(_3696_op);
      DCOMP._IOwnership _3712_expectedLeftOwnership;
      _3712_expectedLeftOwnership = ((_3700_becomesLeftCallsRight) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : ((((_3704_becomesRightCallsLeft) || (_3708_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      DCOMP._IOwnership _3713_expectedRightOwnership;
      _3713_expectedRightOwnership = (((_3700_becomesLeftCallsRight) || (_3708_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (((_3704_becomesRightCallsLeft) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _3714_left;
      DCOMP._IOwnership _3715___v90;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3716_recIdentsL;
      RAST._IExpr _out282;
      DCOMP._IOwnership _out283;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out284;
      (this).GenExpr(_3697_lExpr, selfIdent, env, _3712_expectedLeftOwnership, out _out282, out _out283, out _out284);
      _3714_left = _out282;
      _3715___v90 = _out283;
      _3716_recIdentsL = _out284;
      RAST._IExpr _3717_right;
      DCOMP._IOwnership _3718___v91;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3719_recIdentsR;
      RAST._IExpr _out285;
      DCOMP._IOwnership _out286;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
      (this).GenExpr(_3698_rExpr, selfIdent, env, _3713_expectedRightOwnership, out _out285, out _out286, out _out287);
      _3717_right = _out285;
      _3718___v91 = _out286;
      _3719_recIdentsR = _out287;
      DAST._IBinOp _source216 = _3696_op;
      if (_source216.is_Eq) {
        bool _3720___mcc_h18 = _source216.dtor_referential;
        bool _3721___mcc_h19 = _source216.dtor_nullable;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source217 = _3696_op;
            if (_source217.is_Eq) {
              bool _3722___mcc_h24 = _source217.dtor_referential;
              bool _3723___mcc_h25 = _source217.dtor_nullable;
              bool _3724_nullable = _3723___mcc_h25;
              bool _3725_referential = _3722___mcc_h24;
              {
                if (_3725_referential) {
                  if (_3724_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source217.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source217.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3726___mcc_h26 = _source217.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3727_op = _3726___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_3727_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_Div) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source218 = _3696_op;
            if (_source218.is_Eq) {
              bool _3728___mcc_h27 = _source218.dtor_referential;
              bool _3729___mcc_h28 = _source218.dtor_nullable;
              bool _3730_nullable = _3729___mcc_h28;
              bool _3731_referential = _3728___mcc_h27;
              {
                if (_3731_referential) {
                  if (_3730_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source218.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source218.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3732___mcc_h29 = _source218.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3733_op = _3732___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_3733_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_EuclidianDiv) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source219 = _3696_op;
            if (_source219.is_Eq) {
              bool _3734___mcc_h30 = _source219.dtor_referential;
              bool _3735___mcc_h31 = _source219.dtor_nullable;
              bool _3736_nullable = _3735___mcc_h31;
              bool _3737_referential = _3734___mcc_h30;
              {
                if (_3737_referential) {
                  if (_3736_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source219.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source219.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3738___mcc_h32 = _source219.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3739_op = _3738___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_3739_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_Mod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source220 = _3696_op;
            if (_source220.is_Eq) {
              bool _3740___mcc_h33 = _source220.dtor_referential;
              bool _3741___mcc_h34 = _source220.dtor_nullable;
              bool _3742_nullable = _3741___mcc_h34;
              bool _3743_referential = _3740___mcc_h33;
              {
                if (_3743_referential) {
                  if (_3742_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source220.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source220.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3744___mcc_h35 = _source220.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3745_op = _3744___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_3745_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_EuclidianMod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source221 = _3696_op;
            if (_source221.is_Eq) {
              bool _3746___mcc_h36 = _source221.dtor_referential;
              bool _3747___mcc_h37 = _source221.dtor_nullable;
              bool _3748_nullable = _3747___mcc_h37;
              bool _3749_referential = _3746___mcc_h36;
              {
                if (_3749_referential) {
                  if (_3748_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source221.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source221.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3750___mcc_h38 = _source221.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3751_op = _3750___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_3751_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_Lt) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source222 = _3696_op;
            if (_source222.is_Eq) {
              bool _3752___mcc_h39 = _source222.dtor_referential;
              bool _3753___mcc_h40 = _source222.dtor_nullable;
              bool _3754_nullable = _3753___mcc_h40;
              bool _3755_referential = _3752___mcc_h39;
              {
                if (_3755_referential) {
                  if (_3754_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source222.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source222.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3756___mcc_h41 = _source222.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3757_op = _3756___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_3757_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_LtChar) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source223 = _3696_op;
            if (_source223.is_Eq) {
              bool _3758___mcc_h42 = _source223.dtor_referential;
              bool _3759___mcc_h43 = _source223.dtor_nullable;
              bool _3760_nullable = _3759___mcc_h43;
              bool _3761_referential = _3758___mcc_h42;
              {
                if (_3761_referential) {
                  if (_3760_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source223.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source223.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3762___mcc_h44 = _source223.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3763_op = _3762___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_3763_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_Plus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source224 = _3696_op;
            if (_source224.is_Eq) {
              bool _3764___mcc_h45 = _source224.dtor_referential;
              bool _3765___mcc_h46 = _source224.dtor_nullable;
              bool _3766_nullable = _3765___mcc_h46;
              bool _3767_referential = _3764___mcc_h45;
              {
                if (_3767_referential) {
                  if (_3766_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source224.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source224.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3768___mcc_h47 = _source224.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3769_op = _3768___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_3769_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_Minus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source225 = _3696_op;
            if (_source225.is_Eq) {
              bool _3770___mcc_h48 = _source225.dtor_referential;
              bool _3771___mcc_h49 = _source225.dtor_nullable;
              bool _3772_nullable = _3771___mcc_h49;
              bool _3773_referential = _3770___mcc_h48;
              {
                if (_3773_referential) {
                  if (_3772_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source225.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source225.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3774___mcc_h50 = _source225.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3775_op = _3774___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_3775_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_Times) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source226 = _3696_op;
            if (_source226.is_Eq) {
              bool _3776___mcc_h51 = _source226.dtor_referential;
              bool _3777___mcc_h52 = _source226.dtor_nullable;
              bool _3778_nullable = _3777___mcc_h52;
              bool _3779_referential = _3776___mcc_h51;
              {
                if (_3779_referential) {
                  if (_3778_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source226.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source226.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3780___mcc_h53 = _source226.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3781_op = _3780___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_3781_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_BitwiseAnd) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source227 = _3696_op;
            if (_source227.is_Eq) {
              bool _3782___mcc_h54 = _source227.dtor_referential;
              bool _3783___mcc_h55 = _source227.dtor_nullable;
              bool _3784_nullable = _3783___mcc_h55;
              bool _3785_referential = _3782___mcc_h54;
              {
                if (_3785_referential) {
                  if (_3784_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source227.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source227.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3786___mcc_h56 = _source227.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3787_op = _3786___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_3787_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_BitwiseOr) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source228 = _3696_op;
            if (_source228.is_Eq) {
              bool _3788___mcc_h57 = _source228.dtor_referential;
              bool _3789___mcc_h58 = _source228.dtor_nullable;
              bool _3790_nullable = _3789___mcc_h58;
              bool _3791_referential = _3788___mcc_h57;
              {
                if (_3791_referential) {
                  if (_3790_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source228.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source228.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3792___mcc_h59 = _source228.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3793_op = _3792___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_3793_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_BitwiseXor) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source229 = _3696_op;
            if (_source229.is_Eq) {
              bool _3794___mcc_h60 = _source229.dtor_referential;
              bool _3795___mcc_h61 = _source229.dtor_nullable;
              bool _3796_nullable = _3795___mcc_h61;
              bool _3797_referential = _3794___mcc_h60;
              {
                if (_3797_referential) {
                  if (_3796_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source229.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source229.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3798___mcc_h62 = _source229.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3799_op = _3798___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_3799_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_BitwiseShiftRight) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source230 = _3696_op;
            if (_source230.is_Eq) {
              bool _3800___mcc_h63 = _source230.dtor_referential;
              bool _3801___mcc_h64 = _source230.dtor_nullable;
              bool _3802_nullable = _3801___mcc_h64;
              bool _3803_referential = _3800___mcc_h63;
              {
                if (_3803_referential) {
                  if (_3802_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source230.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source230.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3804___mcc_h65 = _source230.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3805_op = _3804___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_3805_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_BitwiseShiftLeft) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source231 = _3696_op;
            if (_source231.is_Eq) {
              bool _3806___mcc_h66 = _source231.dtor_referential;
              bool _3807___mcc_h67 = _source231.dtor_nullable;
              bool _3808_nullable = _3807___mcc_h67;
              bool _3809_referential = _3806___mcc_h66;
              {
                if (_3809_referential) {
                  if (_3808_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source231.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source231.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3810___mcc_h68 = _source231.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3811_op = _3810___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_3811_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_And) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source232 = _3696_op;
            if (_source232.is_Eq) {
              bool _3812___mcc_h69 = _source232.dtor_referential;
              bool _3813___mcc_h70 = _source232.dtor_nullable;
              bool _3814_nullable = _3813___mcc_h70;
              bool _3815_referential = _3812___mcc_h69;
              {
                if (_3815_referential) {
                  if (_3814_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source232.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source232.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3816___mcc_h71 = _source232.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3817_op = _3816___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_3817_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_Or) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source233 = _3696_op;
            if (_source233.is_Eq) {
              bool _3818___mcc_h72 = _source233.dtor_referential;
              bool _3819___mcc_h73 = _source233.dtor_nullable;
              bool _3820_nullable = _3819___mcc_h73;
              bool _3821_referential = _3818___mcc_h72;
              {
                if (_3821_referential) {
                  if (_3820_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source233.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source233.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3822___mcc_h74 = _source233.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3823_op = _3822___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_3823_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      } else if (_source216.is_In) {
        {
          r = ((_3717_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_3714_left);
        }
      } else if (_source216.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3714_left, _3717_right, _3699_format);
      } else if (_source216.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3714_left, _3717_right, _3699_format);
      } else if (_source216.is_SetMerge) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3717_right);
        }
      } else if (_source216.is_SetSubtraction) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3717_right);
        }
      } else if (_source216.is_SetIntersection) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3717_right);
        }
      } else if (_source216.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3714_left, _3717_right, _3699_format);
        }
      } else if (_source216.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3714_left, _3717_right, _3699_format);
        }
      } else if (_source216.is_SetDisjoint) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3717_right);
        }
      } else if (_source216.is_MapMerge) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3717_right);
        }
      } else if (_source216.is_MapSubtraction) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3717_right);
        }
      } else if (_source216.is_MultisetMerge) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3717_right);
        }
      } else if (_source216.is_MultisetSubtraction) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3717_right);
        }
      } else if (_source216.is_MultisetIntersection) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3717_right);
        }
      } else if (_source216.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3714_left, _3717_right, _3699_format);
        }
      } else if (_source216.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3714_left, _3717_right, _3699_format);
        }
      } else if (_source216.is_MultisetDisjoint) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3717_right);
        }
      } else if (_source216.is_Concat) {
        {
          r = ((_3714_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_3717_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _3824___mcc_h22 = _source216.dtor_Passthrough_i_a0;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3696_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3696_op), _3714_left, _3717_right, _3699_format);
          } else {
            DAST._IBinOp _source234 = _3696_op;
            if (_source234.is_Eq) {
              bool _3825___mcc_h75 = _source234.dtor_referential;
              bool _3826___mcc_h76 = _source234.dtor_nullable;
              bool _3827_nullable = _3826___mcc_h76;
              bool _3828_referential = _3825___mcc_h75;
              {
                if (_3828_referential) {
                  if (_3827_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3714_left, _3717_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                }
              }
            } else if (_source234.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else if (_source234.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3714_left, _3717_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3829___mcc_h77 = _source234.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3830_op = _3829___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_3830_op, _3714_left, _3717_right, _3699_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out288;
      DCOMP._IOwnership _out289;
      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out288, out _out289);
      r = _out288;
      resultingOwnership = _out289;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3716_recIdentsL, _3719_recIdentsR);
      return ;
    }
    public void GenExprConvertFromNullable(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs53 = e;
      DAST._IExpression _3831_expr = _let_tmp_rhs53.dtor_value;
      DAST._IType _3832_fromTpe = _let_tmp_rhs53.dtor_from;
      DAST._IType _3833_toTpe = _let_tmp_rhs53.dtor_typ;
      RAST._IExpr _3834_recursiveGen;
      DCOMP._IOwnership _3835_recOwned;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3836_recIdents;
      RAST._IExpr _out290;
      DCOMP._IOwnership _out291;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out292;
      (this).GenExpr(_3831_expr, selfIdent, env, expectedOwnership, out _out290, out _out291, out _out292);
      _3834_recursiveGen = _out290;
      _3835_recOwned = _out291;
      _3836_recIdents = _out292;
      r = _3834_recursiveGen;
      if (object.Equals(_3835_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
        r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
      }
      r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
      RAST._IExpr _out293;
      DCOMP._IOwnership _out294;
      DCOMP.COMP.FromOwnership(r, _3835_recOwned, expectedOwnership, out _out293, out _out294);
      r = _out293;
      resultingOwnership = _out294;
      readIdents = _3836_recIdents;
    }
    public void GenExprConvertToNullable(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs54 = e;
      DAST._IExpression _3837_expr = _let_tmp_rhs54.dtor_value;
      DAST._IType _3838_fromTpe = _let_tmp_rhs54.dtor_from;
      DAST._IType _3839_toTpe = _let_tmp_rhs54.dtor_typ;
      RAST._IExpr _3840_recursiveGen;
      DCOMP._IOwnership _3841_recOwned;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3842_recIdents;
      RAST._IExpr _out295;
      DCOMP._IOwnership _out296;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out297;
      (this).GenExpr(_3837_expr, selfIdent, env, expectedOwnership, out _out295, out _out296, out _out297);
      _3840_recursiveGen = _out295;
      _3841_recOwned = _out296;
      _3842_recIdents = _out297;
      r = _3840_recursiveGen;
      if (object.Equals(_3841_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
        r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
      }
      r = ((((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("option"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Option"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(r));
      RAST._IExpr _out298;
      DCOMP._IOwnership _out299;
      DCOMP.COMP.FromOwnership(r, _3841_recOwned, expectedOwnership, out _out298, out _out299);
      r = _out298;
      resultingOwnership = _out299;
      readIdents = _3842_recIdents;
    }
    public void GenExprConvertToNewtype(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs55 = e;
      DAST._IExpression _3843_expr = _let_tmp_rhs55.dtor_value;
      DAST._IType _3844_fromTpe = _let_tmp_rhs55.dtor_from;
      DAST._IType _3845_toTpe = _let_tmp_rhs55.dtor_typ;
      DAST._IType _let_tmp_rhs56 = _3845_toTpe;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3846___v93 = _let_tmp_rhs56.dtor_Path_i_a0;
      Dafny.ISequence<DAST._IType> _3847___v94 = _let_tmp_rhs56.dtor_typeArgs;
      DAST._IResolvedType _let_tmp_rhs57 = _let_tmp_rhs56.dtor_resolved;
      DAST._IType _3848_b = _let_tmp_rhs57.dtor_baseType;
      DAST._INewtypeRange _3849_range = _let_tmp_rhs57.dtor_range;
      bool _3850_erase = _let_tmp_rhs57.dtor_erase;
      Dafny.ISequence<DAST._IAttribute> _3851_attributes = _let_tmp_rhs57.dtor_attributes;
      Std.Wrappers._IOption<RAST._IType> _3852_nativeToType;
      _3852_nativeToType = DCOMP.COMP.NewtypeToRustType(_3848_b, _3849_range);
      if (object.Equals(_3844_fromTpe, _3848_b)) {
        RAST._IExpr _3853_recursiveGen;
        DCOMP._IOwnership _3854_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3855_recIdents;
        RAST._IExpr _out300;
        DCOMP._IOwnership _out301;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out302;
        (this).GenExpr(_3843_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out300, out _out301, out _out302);
        _3853_recursiveGen = _out300;
        _3854_recOwned = _out301;
        _3855_recIdents = _out302;
        readIdents = _3855_recIdents;
        Std.Wrappers._IOption<RAST._IType> _source235 = _3852_nativeToType;
        if (_source235.is_None) {
          if (_3850_erase) {
            r = _3853_recursiveGen;
          } else {
            RAST._IType _3856_rhsType;
            RAST._IType _out303;
            _out303 = (this).GenType(_3845_toTpe, true, false);
            _3856_rhsType = _out303;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3856_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3853_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          }
          RAST._IExpr _out304;
          DCOMP._IOwnership _out305;
          DCOMP.COMP.FromOwnership(r, _3854_recOwned, expectedOwnership, out _out304, out _out305);
          r = _out304;
          resultingOwnership = _out305;
        } else {
          RAST._IType _3857___mcc_h0 = _source235.dtor_value;
          RAST._IType _3858_v = _3857___mcc_h0;
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3853_recursiveGen, RAST.Expr.create_ExprFromType(_3858_v)));
          RAST._IExpr _out306;
          DCOMP._IOwnership _out307;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out306, out _out307);
          r = _out306;
          resultingOwnership = _out307;
        }
      } else {
        if ((_3852_nativeToType).is_Some) {
          DAST._IType _source236 = _3844_fromTpe;
          if (_source236.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3859___mcc_h1 = _source236.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _3860___mcc_h2 = _source236.dtor_typeArgs;
            DAST._IResolvedType _3861___mcc_h3 = _source236.dtor_resolved;
            DAST._IResolvedType _source237 = _3861___mcc_h3;
            if (_source237.is_AllocatedDatatype) {
              DAST._IDatatypeType _3862___mcc_h7 = _source237.dtor_datatypeType;
            } else if (_source237.is_Datatype) {
              DAST._IDatatypeType _3863___mcc_h9 = _source237.dtor_datatypeType;
            } else if (_source237.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3864___mcc_h11 = _source237.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3865___mcc_h12 = _source237.dtor_attributes;
            } else {
              DAST._IType _3866___mcc_h15 = _source237.dtor_baseType;
              DAST._INewtypeRange _3867___mcc_h16 = _source237.dtor_range;
              bool _3868___mcc_h17 = _source237.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3869___mcc_h18 = _source237.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3870_attributes0 = _3869___mcc_h18;
              bool _3871_erase0 = _3868___mcc_h17;
              DAST._INewtypeRange _3872_range0 = _3867___mcc_h16;
              DAST._IType _3873_b0 = _3866___mcc_h15;
              {
                Std.Wrappers._IOption<RAST._IType> _3874_nativeFromType;
                _3874_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3873_b0, _3872_range0);
                if ((_3874_nativeFromType).is_Some) {
                  RAST._IExpr _3875_recursiveGen;
                  DCOMP._IOwnership _3876_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3877_recIdents;
                  RAST._IExpr _out308;
                  DCOMP._IOwnership _out309;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                  (this).GenExpr(_3843_expr, selfIdent, env, expectedOwnership, out _out308, out _out309, out _out310);
                  _3875_recursiveGen = _out308;
                  _3876_recOwned = _out309;
                  _3877_recIdents = _out310;
                  RAST._IExpr _out311;
                  DCOMP._IOwnership _out312;
                  DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_3875_recursiveGen, (_3852_nativeToType).dtor_value), _3876_recOwned, expectedOwnership, out _out311, out _out312);
                  r = _out311;
                  resultingOwnership = _out312;
                  readIdents = _3877_recIdents;
                  return ;
                }
              }
            }
          } else if (_source236.is_Nullable) {
            DAST._IType _3878___mcc_h23 = _source236.dtor_Nullable_i_a0;
          } else if (_source236.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3879___mcc_h25 = _source236.dtor_Tuple_i_a0;
          } else if (_source236.is_Array) {
            DAST._IType _3880___mcc_h27 = _source236.dtor_element;
            BigInteger _3881___mcc_h28 = _source236.dtor_dims;
          } else if (_source236.is_Seq) {
            DAST._IType _3882___mcc_h31 = _source236.dtor_element;
          } else if (_source236.is_Set) {
            DAST._IType _3883___mcc_h33 = _source236.dtor_element;
          } else if (_source236.is_Multiset) {
            DAST._IType _3884___mcc_h35 = _source236.dtor_element;
          } else if (_source236.is_Map) {
            DAST._IType _3885___mcc_h37 = _source236.dtor_key;
            DAST._IType _3886___mcc_h38 = _source236.dtor_value;
          } else if (_source236.is_SetBuilder) {
            DAST._IType _3887___mcc_h41 = _source236.dtor_element;
          } else if (_source236.is_MapBuilder) {
            DAST._IType _3888___mcc_h43 = _source236.dtor_key;
            DAST._IType _3889___mcc_h44 = _source236.dtor_value;
          } else if (_source236.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3890___mcc_h47 = _source236.dtor_args;
            DAST._IType _3891___mcc_h48 = _source236.dtor_result;
          } else if (_source236.is_Primitive) {
            DAST._IPrimitive _3892___mcc_h51 = _source236.dtor_Primitive_i_a0;
          } else if (_source236.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3893___mcc_h53 = _source236.dtor_Passthrough_i_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _3894___mcc_h55 = _source236.dtor_TypeArg_i_a0;
          }
          if (object.Equals(_3844_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
            RAST._IExpr _3895_recursiveGen;
            DCOMP._IOwnership _3896_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3897_recIdents;
            RAST._IExpr _out313;
            DCOMP._IOwnership _out314;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
            (this).GenExpr(_3843_expr, selfIdent, env, expectedOwnership, out _out313, out _out314, out _out315);
            _3895_recursiveGen = _out313;
            _3896_recOwned = _out314;
            _3897_recIdents = _out315;
            RAST._IExpr _out316;
            DCOMP._IOwnership _out317;
            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_3895_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3852_nativeToType).dtor_value), _3896_recOwned, expectedOwnership, out _out316, out _out317);
            r = _out316;
            resultingOwnership = _out317;
            readIdents = _3897_recIdents;
            return ;
          }
        }
        RAST._IExpr _out318;
        DCOMP._IOwnership _out319;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
        (this).GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3843_expr, _3844_fromTpe, _3848_b), _3848_b, _3845_toTpe), selfIdent, env, expectedOwnership, out _out318, out _out319, out _out320);
        r = _out318;
        resultingOwnership = _out319;
        readIdents = _out320;
      }
    }
    public void GenExprConvertFromNewtype(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs58 = e;
      DAST._IExpression _3898_expr = _let_tmp_rhs58.dtor_value;
      DAST._IType _3899_fromTpe = _let_tmp_rhs58.dtor_from;
      DAST._IType _3900_toTpe = _let_tmp_rhs58.dtor_typ;
      DAST._IType _let_tmp_rhs59 = _3899_fromTpe;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3901___v98 = _let_tmp_rhs59.dtor_Path_i_a0;
      Dafny.ISequence<DAST._IType> _3902___v99 = _let_tmp_rhs59.dtor_typeArgs;
      DAST._IResolvedType _let_tmp_rhs60 = _let_tmp_rhs59.dtor_resolved;
      DAST._IType _3903_b = _let_tmp_rhs60.dtor_baseType;
      DAST._INewtypeRange _3904_range = _let_tmp_rhs60.dtor_range;
      bool _3905_erase = _let_tmp_rhs60.dtor_erase;
      Dafny.ISequence<DAST._IAttribute> _3906_attributes = _let_tmp_rhs60.dtor_attributes;
      Std.Wrappers._IOption<RAST._IType> _3907_nativeFromType;
      _3907_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3903_b, _3904_range);
      if (object.Equals(_3903_b, _3900_toTpe)) {
        RAST._IExpr _3908_recursiveGen;
        DCOMP._IOwnership _3909_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3910_recIdents;
        RAST._IExpr _out321;
        DCOMP._IOwnership _out322;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
        (this).GenExpr(_3898_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out321, out _out322, out _out323);
        _3908_recursiveGen = _out321;
        _3909_recOwned = _out322;
        _3910_recIdents = _out323;
        readIdents = _3910_recIdents;
        Std.Wrappers._IOption<RAST._IType> _source238 = _3907_nativeFromType;
        if (_source238.is_None) {
          if (_3905_erase) {
            r = _3908_recursiveGen;
          } else {
            r = (_3908_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
          }
          RAST._IExpr _out324;
          DCOMP._IOwnership _out325;
          DCOMP.COMP.FromOwnership(r, _3909_recOwned, expectedOwnership, out _out324, out _out325);
          r = _out324;
          resultingOwnership = _out325;
        } else {
          RAST._IType _3911___mcc_h0 = _source238.dtor_value;
          RAST._IType _3912_v = _3911___mcc_h0;
          RAST._IType _3913_toTpeRust;
          RAST._IType _out326;
          _out326 = (this).GenType(_3900_toTpe, false, false);
          _3913_toTpeRust = _out326;
          r = (((RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3913_toTpeRust))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3908_recursiveGen));
          RAST._IExpr _out327;
          DCOMP._IOwnership _out328;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out327, out _out328);
          r = _out327;
          resultingOwnership = _out328;
        }
      } else {
        if ((_3907_nativeFromType).is_Some) {
          if (object.Equals(_3900_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
            RAST._IExpr _3914_recursiveGen;
            DCOMP._IOwnership _3915_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3916_recIdents;
            RAST._IExpr _out329;
            DCOMP._IOwnership _out330;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
            (this).GenExpr(_3898_expr, selfIdent, env, expectedOwnership, out _out329, out _out330, out _out331);
            _3914_recursiveGen = _out329;
            _3915_recOwned = _out330;
            _3916_recIdents = _out331;
            RAST._IExpr _out332;
            DCOMP._IOwnership _out333;
            DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel((this).DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3914_recursiveGen, (this).DafnyCharUnderlying)), _3915_recOwned, expectedOwnership, out _out332, out _out333);
            r = _out332;
            resultingOwnership = _out333;
            readIdents = _3916_recIdents;
            return ;
          }
        }
        RAST._IExpr _out334;
        DCOMP._IOwnership _out335;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
        (this).GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3898_expr, _3899_fromTpe, _3903_b), _3903_b, _3900_toTpe), selfIdent, env, expectedOwnership, out _out334, out _out335, out _out336);
        r = _out334;
        resultingOwnership = _out335;
        readIdents = _out336;
      }
    }
    public void GenExprConvertNotImplemented(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs61 = e;
      DAST._IExpression _3917_expr = _let_tmp_rhs61.dtor_value;
      DAST._IType _3918_fromTpe = _let_tmp_rhs61.dtor_from;
      DAST._IType _3919_toTpe = _let_tmp_rhs61.dtor_typ;
      RAST._IType _3920_fromTpeGen;
      RAST._IType _out337;
      _out337 = (this).GenType(_3918_fromTpe, true, false);
      _3920_fromTpeGen = _out337;
      RAST._IType _3921_toTpeGen;
      RAST._IType _out338;
      _out338 = (this).GenType(_3919_toTpe, true, false);
      _3921_toTpeGen = _out338;
      RAST._IExpr _3922_recursiveGen;
      DCOMP._IOwnership _3923_recOwned;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3924_recIdents;
      RAST._IExpr _out339;
      DCOMP._IOwnership _out340;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
      (this).GenExpr(_3917_expr, selfIdent, env, expectedOwnership, out _out339, out _out340, out _out341);
      _3922_recursiveGen = _out339;
      _3923_recOwned = _out340;
      _3924_recIdents = _out341;
      readIdents = _3924_recIdents;
      if (RAST.__default.IsUpcastConversion(_3920_fromTpeGen, _3921_toTpeGen)) {
        RAST._IExpr _out342;
        DCOMP._IOwnership _out343;
        DCOMP.COMP.FromOwnership(_3922_recursiveGen, _3923_recOwned, DCOMP.Ownership.create_OwnershipOwned(), out _out342, out _out343);
        r = _out342;
        resultingOwnership = _out343;
        r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("UpcastTo"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3921_toTpeGen))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("upcast_to"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3922_recursiveGen));
        RAST._IExpr _out344;
        DCOMP._IOwnership _out345;
        DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipOwned(), expectedOwnership, out _out344, out _out345);
        r = _out344;
        resultingOwnership = _out345;
      } else {
        Dafny.ISequence<Dafny.Rune> _3925_msg;
        _3925_msg = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion from "), (_3920_fromTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" to ")), (_3921_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</i> not yet implemented */"));
        (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_3925_msg);
        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3922_recursiveGen)._ToString(DCOMP.__default.IND), _3925_msg));
        RAST._IExpr _out346;
        DCOMP._IOwnership _out347;
        DCOMP.COMP.FromOwnership(r, _3923_recOwned, expectedOwnership, out _out346, out _out347);
        r = _out346;
        resultingOwnership = _out347;
      }
    }
    public void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs62 = e;
      DAST._IExpression _3926_expr = _let_tmp_rhs62.dtor_value;
      DAST._IType _3927_fromTpe = _let_tmp_rhs62.dtor_from;
      DAST._IType _3928_toTpe = _let_tmp_rhs62.dtor_typ;
      if (object.Equals(_3927_fromTpe, _3928_toTpe)) {
        RAST._IExpr _3929_recursiveGen;
        DCOMP._IOwnership _3930_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3931_recIdents;
        RAST._IExpr _out348;
        DCOMP._IOwnership _out349;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out350;
        (this).GenExpr(_3926_expr, selfIdent, env, expectedOwnership, out _out348, out _out349, out _out350);
        _3929_recursiveGen = _out348;
        _3930_recOwned = _out349;
        _3931_recIdents = _out350;
        r = _3929_recursiveGen;
        RAST._IExpr _out351;
        DCOMP._IOwnership _out352;
        DCOMP.COMP.FromOwnership(r, _3930_recOwned, expectedOwnership, out _out351, out _out352);
        r = _out351;
        resultingOwnership = _out352;
        readIdents = _3931_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source239 = _System.Tuple2<DAST._IType, DAST._IType>.create(_3927_fromTpe, _3928_toTpe);
        DAST._IType _3932___mcc_h0 = _source239.dtor__0;
        DAST._IType _3933___mcc_h1 = _source239.dtor__1;
        DAST._IType _source240 = _3932___mcc_h0;
        if (_source240.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3934___mcc_h4 = _source240.dtor_Path_i_a0;
          Dafny.ISequence<DAST._IType> _3935___mcc_h5 = _source240.dtor_typeArgs;
          DAST._IResolvedType _3936___mcc_h6 = _source240.dtor_resolved;
          DAST._IResolvedType _source241 = _3936___mcc_h6;
          if (_source241.is_AllocatedDatatype) {
            DAST._IDatatypeType _3937___mcc_h16 = _source241.dtor_datatypeType;
            DAST._IType _source242 = _3933___mcc_h1;
            if (_source242.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3938___mcc_h20 = _source242.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _3939___mcc_h21 = _source242.dtor_typeArgs;
              DAST._IResolvedType _3940___mcc_h22 = _source242.dtor_resolved;
              DAST._IResolvedType _source243 = _3940___mcc_h22;
              if (_source243.is_AllocatedDatatype) {
                DAST._IDatatypeType _3941___mcc_h26 = _source243.dtor_datatypeType;
                {
                  RAST._IExpr _out353;
                  DCOMP._IOwnership _out354;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out355;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out353, out _out354, out _out355);
                  r = _out353;
                  resultingOwnership = _out354;
                  readIdents = _out355;
                }
              } else if (_source243.is_Datatype) {
                DAST._IDatatypeType _3942___mcc_h28 = _source243.dtor_datatypeType;
                {
                  RAST._IExpr _out356;
                  DCOMP._IOwnership _out357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out358;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out356, out _out357, out _out358);
                  r = _out356;
                  resultingOwnership = _out357;
                  readIdents = _out358;
                }
              } else if (_source243.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3943___mcc_h30 = _source243.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3944___mcc_h31 = _source243.dtor_attributes;
                {
                  RAST._IExpr _out359;
                  DCOMP._IOwnership _out360;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out359, out _out360, out _out361);
                  r = _out359;
                  resultingOwnership = _out360;
                  readIdents = _out361;
                }
              } else {
                DAST._IType _3945___mcc_h34 = _source243.dtor_baseType;
                DAST._INewtypeRange _3946___mcc_h35 = _source243.dtor_range;
                bool _3947___mcc_h36 = _source243.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3948___mcc_h37 = _source243.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3949_attributes = _3948___mcc_h37;
                bool _3950_erase = _3947___mcc_h36;
                DAST._INewtypeRange _3951_range = _3946___mcc_h35;
                DAST._IType _3952_b = _3945___mcc_h34;
                {
                  RAST._IExpr _out362;
                  DCOMP._IOwnership _out363;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out362, out _out363, out _out364);
                  r = _out362;
                  resultingOwnership = _out363;
                  readIdents = _out364;
                }
              }
            } else if (_source242.is_Nullable) {
              DAST._IType _3953___mcc_h42 = _source242.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out365;
                DCOMP._IOwnership _out366;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out367;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out365, out _out366, out _out367);
                r = _out365;
                resultingOwnership = _out366;
                readIdents = _out367;
              }
            } else if (_source242.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3954___mcc_h44 = _source242.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out368;
                DCOMP._IOwnership _out369;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out370;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out368, out _out369, out _out370);
                r = _out368;
                resultingOwnership = _out369;
                readIdents = _out370;
              }
            } else if (_source242.is_Array) {
              DAST._IType _3955___mcc_h46 = _source242.dtor_element;
              BigInteger _3956___mcc_h47 = _source242.dtor_dims;
              {
                RAST._IExpr _out371;
                DCOMP._IOwnership _out372;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out371, out _out372, out _out373);
                r = _out371;
                resultingOwnership = _out372;
                readIdents = _out373;
              }
            } else if (_source242.is_Seq) {
              DAST._IType _3957___mcc_h50 = _source242.dtor_element;
              {
                RAST._IExpr _out374;
                DCOMP._IOwnership _out375;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out374, out _out375, out _out376);
                r = _out374;
                resultingOwnership = _out375;
                readIdents = _out376;
              }
            } else if (_source242.is_Set) {
              DAST._IType _3958___mcc_h52 = _source242.dtor_element;
              {
                RAST._IExpr _out377;
                DCOMP._IOwnership _out378;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out379;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out377, out _out378, out _out379);
                r = _out377;
                resultingOwnership = _out378;
                readIdents = _out379;
              }
            } else if (_source242.is_Multiset) {
              DAST._IType _3959___mcc_h54 = _source242.dtor_element;
              {
                RAST._IExpr _out380;
                DCOMP._IOwnership _out381;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out382;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out380, out _out381, out _out382);
                r = _out380;
                resultingOwnership = _out381;
                readIdents = _out382;
              }
            } else if (_source242.is_Map) {
              DAST._IType _3960___mcc_h56 = _source242.dtor_key;
              DAST._IType _3961___mcc_h57 = _source242.dtor_value;
              {
                RAST._IExpr _out383;
                DCOMP._IOwnership _out384;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out383, out _out384, out _out385);
                r = _out383;
                resultingOwnership = _out384;
                readIdents = _out385;
              }
            } else if (_source242.is_SetBuilder) {
              DAST._IType _3962___mcc_h60 = _source242.dtor_element;
              {
                RAST._IExpr _out386;
                DCOMP._IOwnership _out387;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out386, out _out387, out _out388);
                r = _out386;
                resultingOwnership = _out387;
                readIdents = _out388;
              }
            } else if (_source242.is_MapBuilder) {
              DAST._IType _3963___mcc_h62 = _source242.dtor_key;
              DAST._IType _3964___mcc_h63 = _source242.dtor_value;
              {
                RAST._IExpr _out389;
                DCOMP._IOwnership _out390;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out391;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out389, out _out390, out _out391);
                r = _out389;
                resultingOwnership = _out390;
                readIdents = _out391;
              }
            } else if (_source242.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3965___mcc_h66 = _source242.dtor_args;
              DAST._IType _3966___mcc_h67 = _source242.dtor_result;
              {
                RAST._IExpr _out392;
                DCOMP._IOwnership _out393;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out394;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out392, out _out393, out _out394);
                r = _out392;
                resultingOwnership = _out393;
                readIdents = _out394;
              }
            } else if (_source242.is_Primitive) {
              DAST._IPrimitive _3967___mcc_h70 = _source242.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out395;
                DCOMP._IOwnership _out396;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out395, out _out396, out _out397);
                r = _out395;
                resultingOwnership = _out396;
                readIdents = _out397;
              }
            } else if (_source242.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3968___mcc_h72 = _source242.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out398;
                DCOMP._IOwnership _out399;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out398, out _out399, out _out400);
                r = _out398;
                resultingOwnership = _out399;
                readIdents = _out400;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3969___mcc_h74 = _source242.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out401;
                DCOMP._IOwnership _out402;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out401, out _out402, out _out403);
                r = _out401;
                resultingOwnership = _out402;
                readIdents = _out403;
              }
            }
          } else if (_source241.is_Datatype) {
            DAST._IDatatypeType _3970___mcc_h76 = _source241.dtor_datatypeType;
            DAST._IType _source244 = _3933___mcc_h1;
            if (_source244.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3971___mcc_h80 = _source244.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _3972___mcc_h81 = _source244.dtor_typeArgs;
              DAST._IResolvedType _3973___mcc_h82 = _source244.dtor_resolved;
              DAST._IResolvedType _source245 = _3973___mcc_h82;
              if (_source245.is_AllocatedDatatype) {
                DAST._IDatatypeType _3974___mcc_h86 = _source245.dtor_datatypeType;
                {
                  RAST._IExpr _out404;
                  DCOMP._IOwnership _out405;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out406;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out404, out _out405, out _out406);
                  r = _out404;
                  resultingOwnership = _out405;
                  readIdents = _out406;
                }
              } else if (_source245.is_Datatype) {
                DAST._IDatatypeType _3975___mcc_h88 = _source245.dtor_datatypeType;
                {
                  RAST._IExpr _out407;
                  DCOMP._IOwnership _out408;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out407, out _out408, out _out409);
                  r = _out407;
                  resultingOwnership = _out408;
                  readIdents = _out409;
                }
              } else if (_source245.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3976___mcc_h90 = _source245.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3977___mcc_h91 = _source245.dtor_attributes;
                {
                  RAST._IExpr _out410;
                  DCOMP._IOwnership _out411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out410, out _out411, out _out412);
                  r = _out410;
                  resultingOwnership = _out411;
                  readIdents = _out412;
                }
              } else {
                DAST._IType _3978___mcc_h94 = _source245.dtor_baseType;
                DAST._INewtypeRange _3979___mcc_h95 = _source245.dtor_range;
                bool _3980___mcc_h96 = _source245.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3981___mcc_h97 = _source245.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3982_attributes = _3981___mcc_h97;
                bool _3983_erase = _3980___mcc_h96;
                DAST._INewtypeRange _3984_range = _3979___mcc_h95;
                DAST._IType _3985_b = _3978___mcc_h94;
                {
                  RAST._IExpr _out413;
                  DCOMP._IOwnership _out414;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out415;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out413, out _out414, out _out415);
                  r = _out413;
                  resultingOwnership = _out414;
                  readIdents = _out415;
                }
              }
            } else if (_source244.is_Nullable) {
              DAST._IType _3986___mcc_h102 = _source244.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out416;
                DCOMP._IOwnership _out417;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out418;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out416, out _out417, out _out418);
                r = _out416;
                resultingOwnership = _out417;
                readIdents = _out418;
              }
            } else if (_source244.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3987___mcc_h104 = _source244.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out419;
                DCOMP._IOwnership _out420;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out419, out _out420, out _out421);
                r = _out419;
                resultingOwnership = _out420;
                readIdents = _out421;
              }
            } else if (_source244.is_Array) {
              DAST._IType _3988___mcc_h106 = _source244.dtor_element;
              BigInteger _3989___mcc_h107 = _source244.dtor_dims;
              {
                RAST._IExpr _out422;
                DCOMP._IOwnership _out423;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out422, out _out423, out _out424);
                r = _out422;
                resultingOwnership = _out423;
                readIdents = _out424;
              }
            } else if (_source244.is_Seq) {
              DAST._IType _3990___mcc_h110 = _source244.dtor_element;
              {
                RAST._IExpr _out425;
                DCOMP._IOwnership _out426;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out427;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out425, out _out426, out _out427);
                r = _out425;
                resultingOwnership = _out426;
                readIdents = _out427;
              }
            } else if (_source244.is_Set) {
              DAST._IType _3991___mcc_h112 = _source244.dtor_element;
              {
                RAST._IExpr _out428;
                DCOMP._IOwnership _out429;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out430;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out428, out _out429, out _out430);
                r = _out428;
                resultingOwnership = _out429;
                readIdents = _out430;
              }
            } else if (_source244.is_Multiset) {
              DAST._IType _3992___mcc_h114 = _source244.dtor_element;
              {
                RAST._IExpr _out431;
                DCOMP._IOwnership _out432;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out431, out _out432, out _out433);
                r = _out431;
                resultingOwnership = _out432;
                readIdents = _out433;
              }
            } else if (_source244.is_Map) {
              DAST._IType _3993___mcc_h116 = _source244.dtor_key;
              DAST._IType _3994___mcc_h117 = _source244.dtor_value;
              {
                RAST._IExpr _out434;
                DCOMP._IOwnership _out435;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out434, out _out435, out _out436);
                r = _out434;
                resultingOwnership = _out435;
                readIdents = _out436;
              }
            } else if (_source244.is_SetBuilder) {
              DAST._IType _3995___mcc_h120 = _source244.dtor_element;
              {
                RAST._IExpr _out437;
                DCOMP._IOwnership _out438;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out439;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out437, out _out438, out _out439);
                r = _out437;
                resultingOwnership = _out438;
                readIdents = _out439;
              }
            } else if (_source244.is_MapBuilder) {
              DAST._IType _3996___mcc_h122 = _source244.dtor_key;
              DAST._IType _3997___mcc_h123 = _source244.dtor_value;
              {
                RAST._IExpr _out440;
                DCOMP._IOwnership _out441;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out442;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out440, out _out441, out _out442);
                r = _out440;
                resultingOwnership = _out441;
                readIdents = _out442;
              }
            } else if (_source244.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3998___mcc_h126 = _source244.dtor_args;
              DAST._IType _3999___mcc_h127 = _source244.dtor_result;
              {
                RAST._IExpr _out443;
                DCOMP._IOwnership _out444;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out443, out _out444, out _out445);
                r = _out443;
                resultingOwnership = _out444;
                readIdents = _out445;
              }
            } else if (_source244.is_Primitive) {
              DAST._IPrimitive _4000___mcc_h130 = _source244.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out446;
                DCOMP._IOwnership _out447;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out446, out _out447, out _out448);
                r = _out446;
                resultingOwnership = _out447;
                readIdents = _out448;
              }
            } else if (_source244.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4001___mcc_h132 = _source244.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out449;
                DCOMP._IOwnership _out450;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out451;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out449, out _out450, out _out451);
                r = _out449;
                resultingOwnership = _out450;
                readIdents = _out451;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4002___mcc_h134 = _source244.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out452;
                DCOMP._IOwnership _out453;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out452, out _out453, out _out454);
                r = _out452;
                resultingOwnership = _out453;
                readIdents = _out454;
              }
            }
          } else if (_source241.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4003___mcc_h136 = _source241.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _4004___mcc_h137 = _source241.dtor_attributes;
            DAST._IType _source246 = _3933___mcc_h1;
            if (_source246.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4005___mcc_h144 = _source246.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _4006___mcc_h145 = _source246.dtor_typeArgs;
              DAST._IResolvedType _4007___mcc_h146 = _source246.dtor_resolved;
              DAST._IResolvedType _source247 = _4007___mcc_h146;
              if (_source247.is_AllocatedDatatype) {
                DAST._IDatatypeType _4008___mcc_h150 = _source247.dtor_datatypeType;
                {
                  RAST._IExpr _out455;
                  DCOMP._IOwnership _out456;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out455, out _out456, out _out457);
                  r = _out455;
                  resultingOwnership = _out456;
                  readIdents = _out457;
                }
              } else if (_source247.is_Datatype) {
                DAST._IDatatypeType _4009___mcc_h152 = _source247.dtor_datatypeType;
                {
                  RAST._IExpr _out458;
                  DCOMP._IOwnership _out459;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out458, out _out459, out _out460);
                  r = _out458;
                  resultingOwnership = _out459;
                  readIdents = _out460;
                }
              } else if (_source247.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4010___mcc_h154 = _source247.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4011___mcc_h155 = _source247.dtor_attributes;
                {
                  RAST._IExpr _out461;
                  DCOMP._IOwnership _out462;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out463;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out461, out _out462, out _out463);
                  r = _out461;
                  resultingOwnership = _out462;
                  readIdents = _out463;
                }
              } else {
                DAST._IType _4012___mcc_h158 = _source247.dtor_baseType;
                DAST._INewtypeRange _4013___mcc_h159 = _source247.dtor_range;
                bool _4014___mcc_h160 = _source247.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4015___mcc_h161 = _source247.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4016_attributes = _4015___mcc_h161;
                bool _4017_erase = _4014___mcc_h160;
                DAST._INewtypeRange _4018_range = _4013___mcc_h159;
                DAST._IType _4019_b = _4012___mcc_h158;
                {
                  RAST._IExpr _out464;
                  DCOMP._IOwnership _out465;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out466;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out464, out _out465, out _out466);
                  r = _out464;
                  resultingOwnership = _out465;
                  readIdents = _out466;
                }
              }
            } else if (_source246.is_Nullable) {
              DAST._IType _4020___mcc_h166 = _source246.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out467;
                DCOMP._IOwnership _out468;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out467, out _out468, out _out469);
                r = _out467;
                resultingOwnership = _out468;
                readIdents = _out469;
              }
            } else if (_source246.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4021___mcc_h168 = _source246.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out470;
                DCOMP._IOwnership _out471;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out470, out _out471, out _out472);
                r = _out470;
                resultingOwnership = _out471;
                readIdents = _out472;
              }
            } else if (_source246.is_Array) {
              DAST._IType _4022___mcc_h170 = _source246.dtor_element;
              BigInteger _4023___mcc_h171 = _source246.dtor_dims;
              {
                RAST._IExpr _out473;
                DCOMP._IOwnership _out474;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out475;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out473, out _out474, out _out475);
                r = _out473;
                resultingOwnership = _out474;
                readIdents = _out475;
              }
            } else if (_source246.is_Seq) {
              DAST._IType _4024___mcc_h174 = _source246.dtor_element;
              {
                RAST._IExpr _out476;
                DCOMP._IOwnership _out477;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out478;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out476, out _out477, out _out478);
                r = _out476;
                resultingOwnership = _out477;
                readIdents = _out478;
              }
            } else if (_source246.is_Set) {
              DAST._IType _4025___mcc_h176 = _source246.dtor_element;
              {
                RAST._IExpr _out479;
                DCOMP._IOwnership _out480;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out479, out _out480, out _out481);
                r = _out479;
                resultingOwnership = _out480;
                readIdents = _out481;
              }
            } else if (_source246.is_Multiset) {
              DAST._IType _4026___mcc_h178 = _source246.dtor_element;
              {
                RAST._IExpr _out482;
                DCOMP._IOwnership _out483;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out482, out _out483, out _out484);
                r = _out482;
                resultingOwnership = _out483;
                readIdents = _out484;
              }
            } else if (_source246.is_Map) {
              DAST._IType _4027___mcc_h180 = _source246.dtor_key;
              DAST._IType _4028___mcc_h181 = _source246.dtor_value;
              {
                RAST._IExpr _out485;
                DCOMP._IOwnership _out486;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out487;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out485, out _out486, out _out487);
                r = _out485;
                resultingOwnership = _out486;
                readIdents = _out487;
              }
            } else if (_source246.is_SetBuilder) {
              DAST._IType _4029___mcc_h184 = _source246.dtor_element;
              {
                RAST._IExpr _out488;
                DCOMP._IOwnership _out489;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out490;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out488, out _out489, out _out490);
                r = _out488;
                resultingOwnership = _out489;
                readIdents = _out490;
              }
            } else if (_source246.is_MapBuilder) {
              DAST._IType _4030___mcc_h186 = _source246.dtor_key;
              DAST._IType _4031___mcc_h187 = _source246.dtor_value;
              {
                RAST._IExpr _out491;
                DCOMP._IOwnership _out492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out491, out _out492, out _out493);
                r = _out491;
                resultingOwnership = _out492;
                readIdents = _out493;
              }
            } else if (_source246.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4032___mcc_h190 = _source246.dtor_args;
              DAST._IType _4033___mcc_h191 = _source246.dtor_result;
              {
                RAST._IExpr _out494;
                DCOMP._IOwnership _out495;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out494, out _out495, out _out496);
                r = _out494;
                resultingOwnership = _out495;
                readIdents = _out496;
              }
            } else if (_source246.is_Primitive) {
              DAST._IPrimitive _4034___mcc_h194 = _source246.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out497;
                DCOMP._IOwnership _out498;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out499;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out497, out _out498, out _out499);
                r = _out497;
                resultingOwnership = _out498;
                readIdents = _out499;
              }
            } else if (_source246.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4035___mcc_h196 = _source246.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out500;
                DCOMP._IOwnership _out501;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out502;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out500, out _out501, out _out502);
                r = _out500;
                resultingOwnership = _out501;
                readIdents = _out502;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4036___mcc_h198 = _source246.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out503;
                DCOMP._IOwnership _out504;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out503, out _out504, out _out505);
                r = _out503;
                resultingOwnership = _out504;
                readIdents = _out505;
              }
            }
          } else {
            DAST._IType _4037___mcc_h200 = _source241.dtor_baseType;
            DAST._INewtypeRange _4038___mcc_h201 = _source241.dtor_range;
            bool _4039___mcc_h202 = _source241.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _4040___mcc_h203 = _source241.dtor_attributes;
            DAST._IType _source248 = _3933___mcc_h1;
            if (_source248.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4041___mcc_h216 = _source248.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _4042___mcc_h217 = _source248.dtor_typeArgs;
              DAST._IResolvedType _4043___mcc_h218 = _source248.dtor_resolved;
              DAST._IResolvedType _source249 = _4043___mcc_h218;
              if (_source249.is_AllocatedDatatype) {
                DAST._IDatatypeType _4044___mcc_h225 = _source249.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _4045_attributes = _4040___mcc_h203;
                bool _4046_erase = _4039___mcc_h202;
                DAST._INewtypeRange _4047_range = _4038___mcc_h201;
                DAST._IType _4048_b = _4037___mcc_h200;
                {
                  RAST._IExpr _out506;
                  DCOMP._IOwnership _out507;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out508;
                  (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out506, out _out507, out _out508);
                  r = _out506;
                  resultingOwnership = _out507;
                  readIdents = _out508;
                }
              } else if (_source249.is_Datatype) {
                DAST._IDatatypeType _4049___mcc_h228 = _source249.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _4050_attributes = _4040___mcc_h203;
                bool _4051_erase = _4039___mcc_h202;
                DAST._INewtypeRange _4052_range = _4038___mcc_h201;
                DAST._IType _4053_b = _4037___mcc_h200;
                {
                  RAST._IExpr _out509;
                  DCOMP._IOwnership _out510;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out511;
                  (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out509, out _out510, out _out511);
                  r = _out509;
                  resultingOwnership = _out510;
                  readIdents = _out511;
                }
              } else if (_source249.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4054___mcc_h231 = _source249.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4055___mcc_h232 = _source249.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4056_attributes = _4040___mcc_h203;
                bool _4057_erase = _4039___mcc_h202;
                DAST._INewtypeRange _4058_range = _4038___mcc_h201;
                DAST._IType _4059_b = _4037___mcc_h200;
                {
                  RAST._IExpr _out512;
                  DCOMP._IOwnership _out513;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out514;
                  (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out512, out _out513, out _out514);
                  r = _out512;
                  resultingOwnership = _out513;
                  readIdents = _out514;
                }
              } else {
                DAST._IType _4060___mcc_h237 = _source249.dtor_baseType;
                DAST._INewtypeRange _4061___mcc_h238 = _source249.dtor_range;
                bool _4062___mcc_h239 = _source249.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4063___mcc_h240 = _source249.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4064_attributes = _4063___mcc_h240;
                bool _4065_erase = _4062___mcc_h239;
                DAST._INewtypeRange _4066_range = _4061___mcc_h238;
                DAST._IType _4067_b = _4060___mcc_h237;
                {
                  RAST._IExpr _out515;
                  DCOMP._IOwnership _out516;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out515, out _out516, out _out517);
                  r = _out515;
                  resultingOwnership = _out516;
                  readIdents = _out517;
                }
              }
            } else if (_source248.is_Nullable) {
              DAST._IType _4068___mcc_h249 = _source248.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out518;
                DCOMP._IOwnership _out519;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out520;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out518, out _out519, out _out520);
                r = _out518;
                resultingOwnership = _out519;
                readIdents = _out520;
              }
            } else if (_source248.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4069___mcc_h252 = _source248.dtor_Tuple_i_a0;
              Dafny.ISequence<DAST._IAttribute> _4070_attributes = _4040___mcc_h203;
              bool _4071_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4072_range = _4038___mcc_h201;
              DAST._IType _4073_b = _4037___mcc_h200;
              {
                RAST._IExpr _out521;
                DCOMP._IOwnership _out522;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out523;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out521, out _out522, out _out523);
                r = _out521;
                resultingOwnership = _out522;
                readIdents = _out523;
              }
            } else if (_source248.is_Array) {
              DAST._IType _4074___mcc_h255 = _source248.dtor_element;
              BigInteger _4075___mcc_h256 = _source248.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _4076_attributes = _4040___mcc_h203;
              bool _4077_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4078_range = _4038___mcc_h201;
              DAST._IType _4079_b = _4037___mcc_h200;
              {
                RAST._IExpr _out524;
                DCOMP._IOwnership _out525;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out524, out _out525, out _out526);
                r = _out524;
                resultingOwnership = _out525;
                readIdents = _out526;
              }
            } else if (_source248.is_Seq) {
              DAST._IType _4080___mcc_h261 = _source248.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _4081_attributes = _4040___mcc_h203;
              bool _4082_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4083_range = _4038___mcc_h201;
              DAST._IType _4084_b = _4037___mcc_h200;
              {
                RAST._IExpr _out527;
                DCOMP._IOwnership _out528;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out527, out _out528, out _out529);
                r = _out527;
                resultingOwnership = _out528;
                readIdents = _out529;
              }
            } else if (_source248.is_Set) {
              DAST._IType _4085___mcc_h264 = _source248.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _4086_attributes = _4040___mcc_h203;
              bool _4087_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4088_range = _4038___mcc_h201;
              DAST._IType _4089_b = _4037___mcc_h200;
              {
                RAST._IExpr _out530;
                DCOMP._IOwnership _out531;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out532;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out530, out _out531, out _out532);
                r = _out530;
                resultingOwnership = _out531;
                readIdents = _out532;
              }
            } else if (_source248.is_Multiset) {
              DAST._IType _4090___mcc_h267 = _source248.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _4091_attributes = _4040___mcc_h203;
              bool _4092_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4093_range = _4038___mcc_h201;
              DAST._IType _4094_b = _4037___mcc_h200;
              {
                RAST._IExpr _out533;
                DCOMP._IOwnership _out534;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out535;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out533, out _out534, out _out535);
                r = _out533;
                resultingOwnership = _out534;
                readIdents = _out535;
              }
            } else if (_source248.is_Map) {
              DAST._IType _4095___mcc_h270 = _source248.dtor_key;
              DAST._IType _4096___mcc_h271 = _source248.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _4097_attributes = _4040___mcc_h203;
              bool _4098_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4099_range = _4038___mcc_h201;
              DAST._IType _4100_b = _4037___mcc_h200;
              {
                RAST._IExpr _out536;
                DCOMP._IOwnership _out537;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out536, out _out537, out _out538);
                r = _out536;
                resultingOwnership = _out537;
                readIdents = _out538;
              }
            } else if (_source248.is_SetBuilder) {
              DAST._IType _4101___mcc_h276 = _source248.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _4102_attributes = _4040___mcc_h203;
              bool _4103_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4104_range = _4038___mcc_h201;
              DAST._IType _4105_b = _4037___mcc_h200;
              {
                RAST._IExpr _out539;
                DCOMP._IOwnership _out540;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out539, out _out540, out _out541);
                r = _out539;
                resultingOwnership = _out540;
                readIdents = _out541;
              }
            } else if (_source248.is_MapBuilder) {
              DAST._IType _4106___mcc_h279 = _source248.dtor_key;
              DAST._IType _4107___mcc_h280 = _source248.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _4108_attributes = _4040___mcc_h203;
              bool _4109_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4110_range = _4038___mcc_h201;
              DAST._IType _4111_b = _4037___mcc_h200;
              {
                RAST._IExpr _out542;
                DCOMP._IOwnership _out543;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out544;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out542, out _out543, out _out544);
                r = _out542;
                resultingOwnership = _out543;
                readIdents = _out544;
              }
            } else if (_source248.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4112___mcc_h285 = _source248.dtor_args;
              DAST._IType _4113___mcc_h286 = _source248.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _4114_attributes = _4040___mcc_h203;
              bool _4115_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4116_range = _4038___mcc_h201;
              DAST._IType _4117_b = _4037___mcc_h200;
              {
                RAST._IExpr _out545;
                DCOMP._IOwnership _out546;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out547;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out545, out _out546, out _out547);
                r = _out545;
                resultingOwnership = _out546;
                readIdents = _out547;
              }
            } else if (_source248.is_Primitive) {
              DAST._IPrimitive _4118___mcc_h291 = _source248.dtor_Primitive_i_a0;
              Dafny.ISequence<DAST._IAttribute> _4119_attributes = _4040___mcc_h203;
              bool _4120_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4121_range = _4038___mcc_h201;
              DAST._IType _4122_b = _4037___mcc_h200;
              {
                RAST._IExpr _out548;
                DCOMP._IOwnership _out549;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out548, out _out549, out _out550);
                r = _out548;
                resultingOwnership = _out549;
                readIdents = _out550;
              }
            } else if (_source248.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4123___mcc_h294 = _source248.dtor_Passthrough_i_a0;
              Dafny.ISequence<DAST._IAttribute> _4124_attributes = _4040___mcc_h203;
              bool _4125_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4126_range = _4038___mcc_h201;
              DAST._IType _4127_b = _4037___mcc_h200;
              {
                RAST._IExpr _out551;
                DCOMP._IOwnership _out552;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out551, out _out552, out _out553);
                r = _out551;
                resultingOwnership = _out552;
                readIdents = _out553;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4128___mcc_h297 = _source248.dtor_TypeArg_i_a0;
              Dafny.ISequence<DAST._IAttribute> _4129_attributes = _4040___mcc_h203;
              bool _4130_erase = _4039___mcc_h202;
              DAST._INewtypeRange _4131_range = _4038___mcc_h201;
              DAST._IType _4132_b = _4037___mcc_h200;
              {
                RAST._IExpr _out554;
                DCOMP._IOwnership _out555;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out556;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out554, out _out555, out _out556);
                r = _out554;
                resultingOwnership = _out555;
                readIdents = _out556;
              }
            }
          }
        } else if (_source240.is_Nullable) {
          DAST._IType _4133___mcc_h300 = _source240.dtor_Nullable_i_a0;
          DAST._IType _source250 = _3933___mcc_h1;
          if (_source250.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4134___mcc_h304 = _source250.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4135___mcc_h305 = _source250.dtor_typeArgs;
            DAST._IResolvedType _4136___mcc_h306 = _source250.dtor_resolved;
            DAST._IResolvedType _source251 = _4136___mcc_h306;
            if (_source251.is_AllocatedDatatype) {
              DAST._IDatatypeType _4137___mcc_h313 = _source251.dtor_datatypeType;
              {
                RAST._IExpr _out557;
                DCOMP._IOwnership _out558;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
                (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out557, out _out558, out _out559);
                r = _out557;
                resultingOwnership = _out558;
                readIdents = _out559;
              }
            } else if (_source251.is_Datatype) {
              DAST._IDatatypeType _4138___mcc_h316 = _source251.dtor_datatypeType;
              {
                RAST._IExpr _out560;
                DCOMP._IOwnership _out561;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out560, out _out561, out _out562);
                r = _out560;
                resultingOwnership = _out561;
                readIdents = _out562;
              }
            } else if (_source251.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4139___mcc_h319 = _source251.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4140___mcc_h320 = _source251.dtor_attributes;
              {
                RAST._IExpr _out563;
                DCOMP._IOwnership _out564;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out563, out _out564, out _out565);
                r = _out563;
                resultingOwnership = _out564;
                readIdents = _out565;
              }
            } else {
              DAST._IType _4141___mcc_h325 = _source251.dtor_baseType;
              DAST._INewtypeRange _4142___mcc_h326 = _source251.dtor_range;
              bool _4143___mcc_h327 = _source251.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4144___mcc_h328 = _source251.dtor_attributes;
              {
                RAST._IExpr _out566;
                DCOMP._IOwnership _out567;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out568;
                (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out566, out _out567, out _out568);
                r = _out566;
                resultingOwnership = _out567;
                readIdents = _out568;
              }
            }
          } else if (_source250.is_Nullable) {
            DAST._IType _4145___mcc_h337 = _source250.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out569;
              DCOMP._IOwnership _out570;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out571;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out569, out _out570, out _out571);
              r = _out569;
              resultingOwnership = _out570;
              readIdents = _out571;
            }
          } else if (_source250.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4146___mcc_h340 = _source250.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out572;
              DCOMP._IOwnership _out573;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out572, out _out573, out _out574);
              r = _out572;
              resultingOwnership = _out573;
              readIdents = _out574;
            }
          } else if (_source250.is_Array) {
            DAST._IType _4147___mcc_h343 = _source250.dtor_element;
            BigInteger _4148___mcc_h344 = _source250.dtor_dims;
            {
              RAST._IExpr _out575;
              DCOMP._IOwnership _out576;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out575, out _out576, out _out577);
              r = _out575;
              resultingOwnership = _out576;
              readIdents = _out577;
            }
          } else if (_source250.is_Seq) {
            DAST._IType _4149___mcc_h349 = _source250.dtor_element;
            {
              RAST._IExpr _out578;
              DCOMP._IOwnership _out579;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out580;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out578, out _out579, out _out580);
              r = _out578;
              resultingOwnership = _out579;
              readIdents = _out580;
            }
          } else if (_source250.is_Set) {
            DAST._IType _4150___mcc_h352 = _source250.dtor_element;
            {
              RAST._IExpr _out581;
              DCOMP._IOwnership _out582;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out581, out _out582, out _out583);
              r = _out581;
              resultingOwnership = _out582;
              readIdents = _out583;
            }
          } else if (_source250.is_Multiset) {
            DAST._IType _4151___mcc_h355 = _source250.dtor_element;
            {
              RAST._IExpr _out584;
              DCOMP._IOwnership _out585;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out584, out _out585, out _out586);
              r = _out584;
              resultingOwnership = _out585;
              readIdents = _out586;
            }
          } else if (_source250.is_Map) {
            DAST._IType _4152___mcc_h358 = _source250.dtor_key;
            DAST._IType _4153___mcc_h359 = _source250.dtor_value;
            {
              RAST._IExpr _out587;
              DCOMP._IOwnership _out588;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out587, out _out588, out _out589);
              r = _out587;
              resultingOwnership = _out588;
              readIdents = _out589;
            }
          } else if (_source250.is_SetBuilder) {
            DAST._IType _4154___mcc_h364 = _source250.dtor_element;
            {
              RAST._IExpr _out590;
              DCOMP._IOwnership _out591;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out592;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out590, out _out591, out _out592);
              r = _out590;
              resultingOwnership = _out591;
              readIdents = _out592;
            }
          } else if (_source250.is_MapBuilder) {
            DAST._IType _4155___mcc_h367 = _source250.dtor_key;
            DAST._IType _4156___mcc_h368 = _source250.dtor_value;
            {
              RAST._IExpr _out593;
              DCOMP._IOwnership _out594;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out593, out _out594, out _out595);
              r = _out593;
              resultingOwnership = _out594;
              readIdents = _out595;
            }
          } else if (_source250.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4157___mcc_h373 = _source250.dtor_args;
            DAST._IType _4158___mcc_h374 = _source250.dtor_result;
            {
              RAST._IExpr _out596;
              DCOMP._IOwnership _out597;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out596, out _out597, out _out598);
              r = _out596;
              resultingOwnership = _out597;
              readIdents = _out598;
            }
          } else if (_source250.is_Primitive) {
            DAST._IPrimitive _4159___mcc_h379 = _source250.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out599;
              DCOMP._IOwnership _out600;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out601;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out599, out _out600, out _out601);
              r = _out599;
              resultingOwnership = _out600;
              readIdents = _out601;
            }
          } else if (_source250.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4160___mcc_h382 = _source250.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out602;
              DCOMP._IOwnership _out603;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out604;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out602, out _out603, out _out604);
              r = _out602;
              resultingOwnership = _out603;
              readIdents = _out604;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4161___mcc_h385 = _source250.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out605;
              DCOMP._IOwnership _out606;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
              (this).GenExprConvertFromNullable(e, selfIdent, env, expectedOwnership, out _out605, out _out606, out _out607);
              r = _out605;
              resultingOwnership = _out606;
              readIdents = _out607;
            }
          }
        } else if (_source240.is_Tuple) {
          Dafny.ISequence<DAST._IType> _4162___mcc_h388 = _source240.dtor_Tuple_i_a0;
          DAST._IType _source252 = _3933___mcc_h1;
          if (_source252.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4163___mcc_h392 = _source252.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4164___mcc_h393 = _source252.dtor_typeArgs;
            DAST._IResolvedType _4165___mcc_h394 = _source252.dtor_resolved;
            DAST._IResolvedType _source253 = _4165___mcc_h394;
            if (_source253.is_AllocatedDatatype) {
              DAST._IDatatypeType _4166___mcc_h398 = _source253.dtor_datatypeType;
              {
                RAST._IExpr _out608;
                DCOMP._IOwnership _out609;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out608, out _out609, out _out610);
                r = _out608;
                resultingOwnership = _out609;
                readIdents = _out610;
              }
            } else if (_source253.is_Datatype) {
              DAST._IDatatypeType _4167___mcc_h400 = _source253.dtor_datatypeType;
              {
                RAST._IExpr _out611;
                DCOMP._IOwnership _out612;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out613;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out611, out _out612, out _out613);
                r = _out611;
                resultingOwnership = _out612;
                readIdents = _out613;
              }
            } else if (_source253.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4168___mcc_h402 = _source253.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4169___mcc_h403 = _source253.dtor_attributes;
              {
                RAST._IExpr _out614;
                DCOMP._IOwnership _out615;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out616;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out614, out _out615, out _out616);
                r = _out614;
                resultingOwnership = _out615;
                readIdents = _out616;
              }
            } else {
              DAST._IType _4170___mcc_h406 = _source253.dtor_baseType;
              DAST._INewtypeRange _4171___mcc_h407 = _source253.dtor_range;
              bool _4172___mcc_h408 = _source253.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4173___mcc_h409 = _source253.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4174_attributes = _4173___mcc_h409;
              bool _4175_erase = _4172___mcc_h408;
              DAST._INewtypeRange _4176_range = _4171___mcc_h407;
              DAST._IType _4177_b = _4170___mcc_h406;
              {
                RAST._IExpr _out617;
                DCOMP._IOwnership _out618;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out617, out _out618, out _out619);
                r = _out617;
                resultingOwnership = _out618;
                readIdents = _out619;
              }
            }
          } else if (_source252.is_Nullable) {
            DAST._IType _4178___mcc_h414 = _source252.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out620;
              DCOMP._IOwnership _out621;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out620, out _out621, out _out622);
              r = _out620;
              resultingOwnership = _out621;
              readIdents = _out622;
            }
          } else if (_source252.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4179___mcc_h416 = _source252.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out623;
              DCOMP._IOwnership _out624;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out625;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out623, out _out624, out _out625);
              r = _out623;
              resultingOwnership = _out624;
              readIdents = _out625;
            }
          } else if (_source252.is_Array) {
            DAST._IType _4180___mcc_h418 = _source252.dtor_element;
            BigInteger _4181___mcc_h419 = _source252.dtor_dims;
            {
              RAST._IExpr _out626;
              DCOMP._IOwnership _out627;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out628;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out626, out _out627, out _out628);
              r = _out626;
              resultingOwnership = _out627;
              readIdents = _out628;
            }
          } else if (_source252.is_Seq) {
            DAST._IType _4182___mcc_h422 = _source252.dtor_element;
            {
              RAST._IExpr _out629;
              DCOMP._IOwnership _out630;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out629, out _out630, out _out631);
              r = _out629;
              resultingOwnership = _out630;
              readIdents = _out631;
            }
          } else if (_source252.is_Set) {
            DAST._IType _4183___mcc_h424 = _source252.dtor_element;
            {
              RAST._IExpr _out632;
              DCOMP._IOwnership _out633;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out634;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out632, out _out633, out _out634);
              r = _out632;
              resultingOwnership = _out633;
              readIdents = _out634;
            }
          } else if (_source252.is_Multiset) {
            DAST._IType _4184___mcc_h426 = _source252.dtor_element;
            {
              RAST._IExpr _out635;
              DCOMP._IOwnership _out636;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out637;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out635, out _out636, out _out637);
              r = _out635;
              resultingOwnership = _out636;
              readIdents = _out637;
            }
          } else if (_source252.is_Map) {
            DAST._IType _4185___mcc_h428 = _source252.dtor_key;
            DAST._IType _4186___mcc_h429 = _source252.dtor_value;
            {
              RAST._IExpr _out638;
              DCOMP._IOwnership _out639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out638, out _out639, out _out640);
              r = _out638;
              resultingOwnership = _out639;
              readIdents = _out640;
            }
          } else if (_source252.is_SetBuilder) {
            DAST._IType _4187___mcc_h432 = _source252.dtor_element;
            {
              RAST._IExpr _out641;
              DCOMP._IOwnership _out642;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out641, out _out642, out _out643);
              r = _out641;
              resultingOwnership = _out642;
              readIdents = _out643;
            }
          } else if (_source252.is_MapBuilder) {
            DAST._IType _4188___mcc_h434 = _source252.dtor_key;
            DAST._IType _4189___mcc_h435 = _source252.dtor_value;
            {
              RAST._IExpr _out644;
              DCOMP._IOwnership _out645;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out646;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out644, out _out645, out _out646);
              r = _out644;
              resultingOwnership = _out645;
              readIdents = _out646;
            }
          } else if (_source252.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4190___mcc_h438 = _source252.dtor_args;
            DAST._IType _4191___mcc_h439 = _source252.dtor_result;
            {
              RAST._IExpr _out647;
              DCOMP._IOwnership _out648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out649;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out647, out _out648, out _out649);
              r = _out647;
              resultingOwnership = _out648;
              readIdents = _out649;
            }
          } else if (_source252.is_Primitive) {
            DAST._IPrimitive _4192___mcc_h442 = _source252.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out650;
              DCOMP._IOwnership _out651;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out650, out _out651, out _out652);
              r = _out650;
              resultingOwnership = _out651;
              readIdents = _out652;
            }
          } else if (_source252.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4193___mcc_h444 = _source252.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out653;
              DCOMP._IOwnership _out654;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out653, out _out654, out _out655);
              r = _out653;
              resultingOwnership = _out654;
              readIdents = _out655;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4194___mcc_h446 = _source252.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out656;
              DCOMP._IOwnership _out657;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out658;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out656, out _out657, out _out658);
              r = _out656;
              resultingOwnership = _out657;
              readIdents = _out658;
            }
          }
        } else if (_source240.is_Array) {
          DAST._IType _4195___mcc_h448 = _source240.dtor_element;
          BigInteger _4196___mcc_h449 = _source240.dtor_dims;
          DAST._IType _source254 = _3933___mcc_h1;
          if (_source254.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4197___mcc_h456 = _source254.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4198___mcc_h457 = _source254.dtor_typeArgs;
            DAST._IResolvedType _4199___mcc_h458 = _source254.dtor_resolved;
            DAST._IResolvedType _source255 = _4199___mcc_h458;
            if (_source255.is_AllocatedDatatype) {
              DAST._IDatatypeType _4200___mcc_h462 = _source255.dtor_datatypeType;
              {
                RAST._IExpr _out659;
                DCOMP._IOwnership _out660;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out661;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out659, out _out660, out _out661);
                r = _out659;
                resultingOwnership = _out660;
                readIdents = _out661;
              }
            } else if (_source255.is_Datatype) {
              DAST._IDatatypeType _4201___mcc_h464 = _source255.dtor_datatypeType;
              {
                RAST._IExpr _out662;
                DCOMP._IOwnership _out663;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out662, out _out663, out _out664);
                r = _out662;
                resultingOwnership = _out663;
                readIdents = _out664;
              }
            } else if (_source255.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4202___mcc_h466 = _source255.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4203___mcc_h467 = _source255.dtor_attributes;
              {
                RAST._IExpr _out665;
                DCOMP._IOwnership _out666;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out665, out _out666, out _out667);
                r = _out665;
                resultingOwnership = _out666;
                readIdents = _out667;
              }
            } else {
              DAST._IType _4204___mcc_h470 = _source255.dtor_baseType;
              DAST._INewtypeRange _4205___mcc_h471 = _source255.dtor_range;
              bool _4206___mcc_h472 = _source255.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4207___mcc_h473 = _source255.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4208_attributes = _4207___mcc_h473;
              bool _4209_erase = _4206___mcc_h472;
              DAST._INewtypeRange _4210_range = _4205___mcc_h471;
              DAST._IType _4211_b = _4204___mcc_h470;
              {
                RAST._IExpr _out668;
                DCOMP._IOwnership _out669;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out670;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out668, out _out669, out _out670);
                r = _out668;
                resultingOwnership = _out669;
                readIdents = _out670;
              }
            }
          } else if (_source254.is_Nullable) {
            DAST._IType _4212___mcc_h478 = _source254.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out671;
              DCOMP._IOwnership _out672;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out673;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out671, out _out672, out _out673);
              r = _out671;
              resultingOwnership = _out672;
              readIdents = _out673;
            }
          } else if (_source254.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4213___mcc_h480 = _source254.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out674;
              DCOMP._IOwnership _out675;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out674, out _out675, out _out676);
              r = _out674;
              resultingOwnership = _out675;
              readIdents = _out676;
            }
          } else if (_source254.is_Array) {
            DAST._IType _4214___mcc_h482 = _source254.dtor_element;
            BigInteger _4215___mcc_h483 = _source254.dtor_dims;
            {
              RAST._IExpr _out677;
              DCOMP._IOwnership _out678;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out677, out _out678, out _out679);
              r = _out677;
              resultingOwnership = _out678;
              readIdents = _out679;
            }
          } else if (_source254.is_Seq) {
            DAST._IType _4216___mcc_h486 = _source254.dtor_element;
            {
              RAST._IExpr _out680;
              DCOMP._IOwnership _out681;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out682;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out680, out _out681, out _out682);
              r = _out680;
              resultingOwnership = _out681;
              readIdents = _out682;
            }
          } else if (_source254.is_Set) {
            DAST._IType _4217___mcc_h488 = _source254.dtor_element;
            {
              RAST._IExpr _out683;
              DCOMP._IOwnership _out684;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out685;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out683, out _out684, out _out685);
              r = _out683;
              resultingOwnership = _out684;
              readIdents = _out685;
            }
          } else if (_source254.is_Multiset) {
            DAST._IType _4218___mcc_h490 = _source254.dtor_element;
            {
              RAST._IExpr _out686;
              DCOMP._IOwnership _out687;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out686, out _out687, out _out688);
              r = _out686;
              resultingOwnership = _out687;
              readIdents = _out688;
            }
          } else if (_source254.is_Map) {
            DAST._IType _4219___mcc_h492 = _source254.dtor_key;
            DAST._IType _4220___mcc_h493 = _source254.dtor_value;
            {
              RAST._IExpr _out689;
              DCOMP._IOwnership _out690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out689, out _out690, out _out691);
              r = _out689;
              resultingOwnership = _out690;
              readIdents = _out691;
            }
          } else if (_source254.is_SetBuilder) {
            DAST._IType _4221___mcc_h496 = _source254.dtor_element;
            {
              RAST._IExpr _out692;
              DCOMP._IOwnership _out693;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out694;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out692, out _out693, out _out694);
              r = _out692;
              resultingOwnership = _out693;
              readIdents = _out694;
            }
          } else if (_source254.is_MapBuilder) {
            DAST._IType _4222___mcc_h498 = _source254.dtor_key;
            DAST._IType _4223___mcc_h499 = _source254.dtor_value;
            {
              RAST._IExpr _out695;
              DCOMP._IOwnership _out696;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out697;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out695, out _out696, out _out697);
              r = _out695;
              resultingOwnership = _out696;
              readIdents = _out697;
            }
          } else if (_source254.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4224___mcc_h502 = _source254.dtor_args;
            DAST._IType _4225___mcc_h503 = _source254.dtor_result;
            {
              RAST._IExpr _out698;
              DCOMP._IOwnership _out699;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out698, out _out699, out _out700);
              r = _out698;
              resultingOwnership = _out699;
              readIdents = _out700;
            }
          } else if (_source254.is_Primitive) {
            DAST._IPrimitive _4226___mcc_h506 = _source254.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out701;
              DCOMP._IOwnership _out702;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out703;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out701, out _out702, out _out703);
              r = _out701;
              resultingOwnership = _out702;
              readIdents = _out703;
            }
          } else if (_source254.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4227___mcc_h508 = _source254.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out704;
              DCOMP._IOwnership _out705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out704, out _out705, out _out706);
              r = _out704;
              resultingOwnership = _out705;
              readIdents = _out706;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4228___mcc_h510 = _source254.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out707;
              DCOMP._IOwnership _out708;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out707, out _out708, out _out709);
              r = _out707;
              resultingOwnership = _out708;
              readIdents = _out709;
            }
          }
        } else if (_source240.is_Seq) {
          DAST._IType _4229___mcc_h512 = _source240.dtor_element;
          DAST._IType _source256 = _3933___mcc_h1;
          if (_source256.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4230___mcc_h516 = _source256.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4231___mcc_h517 = _source256.dtor_typeArgs;
            DAST._IResolvedType _4232___mcc_h518 = _source256.dtor_resolved;
            DAST._IResolvedType _source257 = _4232___mcc_h518;
            if (_source257.is_AllocatedDatatype) {
              DAST._IDatatypeType _4233___mcc_h522 = _source257.dtor_datatypeType;
              {
                RAST._IExpr _out710;
                DCOMP._IOwnership _out711;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out710, out _out711, out _out712);
                r = _out710;
                resultingOwnership = _out711;
                readIdents = _out712;
              }
            } else if (_source257.is_Datatype) {
              DAST._IDatatypeType _4234___mcc_h524 = _source257.dtor_datatypeType;
              {
                RAST._IExpr _out713;
                DCOMP._IOwnership _out714;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out713, out _out714, out _out715);
                r = _out713;
                resultingOwnership = _out714;
                readIdents = _out715;
              }
            } else if (_source257.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4235___mcc_h526 = _source257.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4236___mcc_h527 = _source257.dtor_attributes;
              {
                RAST._IExpr _out716;
                DCOMP._IOwnership _out717;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out718;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out716, out _out717, out _out718);
                r = _out716;
                resultingOwnership = _out717;
                readIdents = _out718;
              }
            } else {
              DAST._IType _4237___mcc_h530 = _source257.dtor_baseType;
              DAST._INewtypeRange _4238___mcc_h531 = _source257.dtor_range;
              bool _4239___mcc_h532 = _source257.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4240___mcc_h533 = _source257.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4241_attributes = _4240___mcc_h533;
              bool _4242_erase = _4239___mcc_h532;
              DAST._INewtypeRange _4243_range = _4238___mcc_h531;
              DAST._IType _4244_b = _4237___mcc_h530;
              {
                RAST._IExpr _out719;
                DCOMP._IOwnership _out720;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out719, out _out720, out _out721);
                r = _out719;
                resultingOwnership = _out720;
                readIdents = _out721;
              }
            }
          } else if (_source256.is_Nullable) {
            DAST._IType _4245___mcc_h538 = _source256.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out722;
              DCOMP._IOwnership _out723;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out722, out _out723, out _out724);
              r = _out722;
              resultingOwnership = _out723;
              readIdents = _out724;
            }
          } else if (_source256.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4246___mcc_h540 = _source256.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out725;
              DCOMP._IOwnership _out726;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out727;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out725, out _out726, out _out727);
              r = _out725;
              resultingOwnership = _out726;
              readIdents = _out727;
            }
          } else if (_source256.is_Array) {
            DAST._IType _4247___mcc_h542 = _source256.dtor_element;
            BigInteger _4248___mcc_h543 = _source256.dtor_dims;
            {
              RAST._IExpr _out728;
              DCOMP._IOwnership _out729;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out730;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out728, out _out729, out _out730);
              r = _out728;
              resultingOwnership = _out729;
              readIdents = _out730;
            }
          } else if (_source256.is_Seq) {
            DAST._IType _4249___mcc_h546 = _source256.dtor_element;
            {
              RAST._IExpr _out731;
              DCOMP._IOwnership _out732;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out731, out _out732, out _out733);
              r = _out731;
              resultingOwnership = _out732;
              readIdents = _out733;
            }
          } else if (_source256.is_Set) {
            DAST._IType _4250___mcc_h548 = _source256.dtor_element;
            {
              RAST._IExpr _out734;
              DCOMP._IOwnership _out735;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out734, out _out735, out _out736);
              r = _out734;
              resultingOwnership = _out735;
              readIdents = _out736;
            }
          } else if (_source256.is_Multiset) {
            DAST._IType _4251___mcc_h550 = _source256.dtor_element;
            {
              RAST._IExpr _out737;
              DCOMP._IOwnership _out738;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out739;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out737, out _out738, out _out739);
              r = _out737;
              resultingOwnership = _out738;
              readIdents = _out739;
            }
          } else if (_source256.is_Map) {
            DAST._IType _4252___mcc_h552 = _source256.dtor_key;
            DAST._IType _4253___mcc_h553 = _source256.dtor_value;
            {
              RAST._IExpr _out740;
              DCOMP._IOwnership _out741;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out742;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out740, out _out741, out _out742);
              r = _out740;
              resultingOwnership = _out741;
              readIdents = _out742;
            }
          } else if (_source256.is_SetBuilder) {
            DAST._IType _4254___mcc_h556 = _source256.dtor_element;
            {
              RAST._IExpr _out743;
              DCOMP._IOwnership _out744;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out743, out _out744, out _out745);
              r = _out743;
              resultingOwnership = _out744;
              readIdents = _out745;
            }
          } else if (_source256.is_MapBuilder) {
            DAST._IType _4255___mcc_h558 = _source256.dtor_key;
            DAST._IType _4256___mcc_h559 = _source256.dtor_value;
            {
              RAST._IExpr _out746;
              DCOMP._IOwnership _out747;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out746, out _out747, out _out748);
              r = _out746;
              resultingOwnership = _out747;
              readIdents = _out748;
            }
          } else if (_source256.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4257___mcc_h562 = _source256.dtor_args;
            DAST._IType _4258___mcc_h563 = _source256.dtor_result;
            {
              RAST._IExpr _out749;
              DCOMP._IOwnership _out750;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out751;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out749, out _out750, out _out751);
              r = _out749;
              resultingOwnership = _out750;
              readIdents = _out751;
            }
          } else if (_source256.is_Primitive) {
            DAST._IPrimitive _4259___mcc_h566 = _source256.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out752;
              DCOMP._IOwnership _out753;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out754;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out752, out _out753, out _out754);
              r = _out752;
              resultingOwnership = _out753;
              readIdents = _out754;
            }
          } else if (_source256.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4260___mcc_h568 = _source256.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out755;
              DCOMP._IOwnership _out756;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out755, out _out756, out _out757);
              r = _out755;
              resultingOwnership = _out756;
              readIdents = _out757;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4261___mcc_h570 = _source256.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out758;
              DCOMP._IOwnership _out759;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out760;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out758, out _out759, out _out760);
              r = _out758;
              resultingOwnership = _out759;
              readIdents = _out760;
            }
          }
        } else if (_source240.is_Set) {
          DAST._IType _4262___mcc_h572 = _source240.dtor_element;
          DAST._IType _source258 = _3933___mcc_h1;
          if (_source258.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4263___mcc_h576 = _source258.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4264___mcc_h577 = _source258.dtor_typeArgs;
            DAST._IResolvedType _4265___mcc_h578 = _source258.dtor_resolved;
            DAST._IResolvedType _source259 = _4265___mcc_h578;
            if (_source259.is_AllocatedDatatype) {
              DAST._IDatatypeType _4266___mcc_h582 = _source259.dtor_datatypeType;
              {
                RAST._IExpr _out761;
                DCOMP._IOwnership _out762;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out763;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out761, out _out762, out _out763);
                r = _out761;
                resultingOwnership = _out762;
                readIdents = _out763;
              }
            } else if (_source259.is_Datatype) {
              DAST._IDatatypeType _4267___mcc_h584 = _source259.dtor_datatypeType;
              {
                RAST._IExpr _out764;
                DCOMP._IOwnership _out765;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out764, out _out765, out _out766);
                r = _out764;
                resultingOwnership = _out765;
                readIdents = _out766;
              }
            } else if (_source259.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4268___mcc_h586 = _source259.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4269___mcc_h587 = _source259.dtor_attributes;
              {
                RAST._IExpr _out767;
                DCOMP._IOwnership _out768;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out767, out _out768, out _out769);
                r = _out767;
                resultingOwnership = _out768;
                readIdents = _out769;
              }
            } else {
              DAST._IType _4270___mcc_h590 = _source259.dtor_baseType;
              DAST._INewtypeRange _4271___mcc_h591 = _source259.dtor_range;
              bool _4272___mcc_h592 = _source259.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4273___mcc_h593 = _source259.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4274_attributes = _4273___mcc_h593;
              bool _4275_erase = _4272___mcc_h592;
              DAST._INewtypeRange _4276_range = _4271___mcc_h591;
              DAST._IType _4277_b = _4270___mcc_h590;
              {
                RAST._IExpr _out770;
                DCOMP._IOwnership _out771;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out772;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out770, out _out771, out _out772);
                r = _out770;
                resultingOwnership = _out771;
                readIdents = _out772;
              }
            }
          } else if (_source258.is_Nullable) {
            DAST._IType _4278___mcc_h598 = _source258.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out773;
              DCOMP._IOwnership _out774;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out775;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out773, out _out774, out _out775);
              r = _out773;
              resultingOwnership = _out774;
              readIdents = _out775;
            }
          } else if (_source258.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4279___mcc_h600 = _source258.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out776;
              DCOMP._IOwnership _out777;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out776, out _out777, out _out778);
              r = _out776;
              resultingOwnership = _out777;
              readIdents = _out778;
            }
          } else if (_source258.is_Array) {
            DAST._IType _4280___mcc_h602 = _source258.dtor_element;
            BigInteger _4281___mcc_h603 = _source258.dtor_dims;
            {
              RAST._IExpr _out779;
              DCOMP._IOwnership _out780;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out779, out _out780, out _out781);
              r = _out779;
              resultingOwnership = _out780;
              readIdents = _out781;
            }
          } else if (_source258.is_Seq) {
            DAST._IType _4282___mcc_h606 = _source258.dtor_element;
            {
              RAST._IExpr _out782;
              DCOMP._IOwnership _out783;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out784;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out782, out _out783, out _out784);
              r = _out782;
              resultingOwnership = _out783;
              readIdents = _out784;
            }
          } else if (_source258.is_Set) {
            DAST._IType _4283___mcc_h608 = _source258.dtor_element;
            {
              RAST._IExpr _out785;
              DCOMP._IOwnership _out786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out785, out _out786, out _out787);
              r = _out785;
              resultingOwnership = _out786;
              readIdents = _out787;
            }
          } else if (_source258.is_Multiset) {
            DAST._IType _4284___mcc_h610 = _source258.dtor_element;
            {
              RAST._IExpr _out788;
              DCOMP._IOwnership _out789;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out788, out _out789, out _out790);
              r = _out788;
              resultingOwnership = _out789;
              readIdents = _out790;
            }
          } else if (_source258.is_Map) {
            DAST._IType _4285___mcc_h612 = _source258.dtor_key;
            DAST._IType _4286___mcc_h613 = _source258.dtor_value;
            {
              RAST._IExpr _out791;
              DCOMP._IOwnership _out792;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out791, out _out792, out _out793);
              r = _out791;
              resultingOwnership = _out792;
              readIdents = _out793;
            }
          } else if (_source258.is_SetBuilder) {
            DAST._IType _4287___mcc_h616 = _source258.dtor_element;
            {
              RAST._IExpr _out794;
              DCOMP._IOwnership _out795;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out796;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out794, out _out795, out _out796);
              r = _out794;
              resultingOwnership = _out795;
              readIdents = _out796;
            }
          } else if (_source258.is_MapBuilder) {
            DAST._IType _4288___mcc_h618 = _source258.dtor_key;
            DAST._IType _4289___mcc_h619 = _source258.dtor_value;
            {
              RAST._IExpr _out797;
              DCOMP._IOwnership _out798;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out799;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out797, out _out798, out _out799);
              r = _out797;
              resultingOwnership = _out798;
              readIdents = _out799;
            }
          } else if (_source258.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4290___mcc_h622 = _source258.dtor_args;
            DAST._IType _4291___mcc_h623 = _source258.dtor_result;
            {
              RAST._IExpr _out800;
              DCOMP._IOwnership _out801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out800, out _out801, out _out802);
              r = _out800;
              resultingOwnership = _out801;
              readIdents = _out802;
            }
          } else if (_source258.is_Primitive) {
            DAST._IPrimitive _4292___mcc_h626 = _source258.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out803;
              DCOMP._IOwnership _out804;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out803, out _out804, out _out805);
              r = _out803;
              resultingOwnership = _out804;
              readIdents = _out805;
            }
          } else if (_source258.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4293___mcc_h628 = _source258.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out806;
              DCOMP._IOwnership _out807;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out808;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out806, out _out807, out _out808);
              r = _out806;
              resultingOwnership = _out807;
              readIdents = _out808;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4294___mcc_h630 = _source258.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out809;
              DCOMP._IOwnership _out810;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out811;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out809, out _out810, out _out811);
              r = _out809;
              resultingOwnership = _out810;
              readIdents = _out811;
            }
          }
        } else if (_source240.is_Multiset) {
          DAST._IType _4295___mcc_h632 = _source240.dtor_element;
          DAST._IType _source260 = _3933___mcc_h1;
          if (_source260.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4296___mcc_h636 = _source260.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4297___mcc_h637 = _source260.dtor_typeArgs;
            DAST._IResolvedType _4298___mcc_h638 = _source260.dtor_resolved;
            DAST._IResolvedType _source261 = _4298___mcc_h638;
            if (_source261.is_AllocatedDatatype) {
              DAST._IDatatypeType _4299___mcc_h642 = _source261.dtor_datatypeType;
              {
                RAST._IExpr _out812;
                DCOMP._IOwnership _out813;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out812, out _out813, out _out814);
                r = _out812;
                resultingOwnership = _out813;
                readIdents = _out814;
              }
            } else if (_source261.is_Datatype) {
              DAST._IDatatypeType _4300___mcc_h644 = _source261.dtor_datatypeType;
              {
                RAST._IExpr _out815;
                DCOMP._IOwnership _out816;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out815, out _out816, out _out817);
                r = _out815;
                resultingOwnership = _out816;
                readIdents = _out817;
              }
            } else if (_source261.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4301___mcc_h646 = _source261.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4302___mcc_h647 = _source261.dtor_attributes;
              {
                RAST._IExpr _out818;
                DCOMP._IOwnership _out819;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out820;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out818, out _out819, out _out820);
                r = _out818;
                resultingOwnership = _out819;
                readIdents = _out820;
              }
            } else {
              DAST._IType _4303___mcc_h650 = _source261.dtor_baseType;
              DAST._INewtypeRange _4304___mcc_h651 = _source261.dtor_range;
              bool _4305___mcc_h652 = _source261.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4306___mcc_h653 = _source261.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4307_attributes = _4306___mcc_h653;
              bool _4308_erase = _4305___mcc_h652;
              DAST._INewtypeRange _4309_range = _4304___mcc_h651;
              DAST._IType _4310_b = _4303___mcc_h650;
              {
                RAST._IExpr _out821;
                DCOMP._IOwnership _out822;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out823;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out821, out _out822, out _out823);
                r = _out821;
                resultingOwnership = _out822;
                readIdents = _out823;
              }
            }
          } else if (_source260.is_Nullable) {
            DAST._IType _4311___mcc_h658 = _source260.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out824;
              DCOMP._IOwnership _out825;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out824, out _out825, out _out826);
              r = _out824;
              resultingOwnership = _out825;
              readIdents = _out826;
            }
          } else if (_source260.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4312___mcc_h660 = _source260.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out827;
              DCOMP._IOwnership _out828;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out829;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out827, out _out828, out _out829);
              r = _out827;
              resultingOwnership = _out828;
              readIdents = _out829;
            }
          } else if (_source260.is_Array) {
            DAST._IType _4313___mcc_h662 = _source260.dtor_element;
            BigInteger _4314___mcc_h663 = _source260.dtor_dims;
            {
              RAST._IExpr _out830;
              DCOMP._IOwnership _out831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out832;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out830, out _out831, out _out832);
              r = _out830;
              resultingOwnership = _out831;
              readIdents = _out832;
            }
          } else if (_source260.is_Seq) {
            DAST._IType _4315___mcc_h666 = _source260.dtor_element;
            {
              RAST._IExpr _out833;
              DCOMP._IOwnership _out834;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out833, out _out834, out _out835);
              r = _out833;
              resultingOwnership = _out834;
              readIdents = _out835;
            }
          } else if (_source260.is_Set) {
            DAST._IType _4316___mcc_h668 = _source260.dtor_element;
            {
              RAST._IExpr _out836;
              DCOMP._IOwnership _out837;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out836, out _out837, out _out838);
              r = _out836;
              resultingOwnership = _out837;
              readIdents = _out838;
            }
          } else if (_source260.is_Multiset) {
            DAST._IType _4317___mcc_h670 = _source260.dtor_element;
            {
              RAST._IExpr _out839;
              DCOMP._IOwnership _out840;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out841;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out839, out _out840, out _out841);
              r = _out839;
              resultingOwnership = _out840;
              readIdents = _out841;
            }
          } else if (_source260.is_Map) {
            DAST._IType _4318___mcc_h672 = _source260.dtor_key;
            DAST._IType _4319___mcc_h673 = _source260.dtor_value;
            {
              RAST._IExpr _out842;
              DCOMP._IOwnership _out843;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out844;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out842, out _out843, out _out844);
              r = _out842;
              resultingOwnership = _out843;
              readIdents = _out844;
            }
          } else if (_source260.is_SetBuilder) {
            DAST._IType _4320___mcc_h676 = _source260.dtor_element;
            {
              RAST._IExpr _out845;
              DCOMP._IOwnership _out846;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out845, out _out846, out _out847);
              r = _out845;
              resultingOwnership = _out846;
              readIdents = _out847;
            }
          } else if (_source260.is_MapBuilder) {
            DAST._IType _4321___mcc_h678 = _source260.dtor_key;
            DAST._IType _4322___mcc_h679 = _source260.dtor_value;
            {
              RAST._IExpr _out848;
              DCOMP._IOwnership _out849;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out848, out _out849, out _out850);
              r = _out848;
              resultingOwnership = _out849;
              readIdents = _out850;
            }
          } else if (_source260.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4323___mcc_h682 = _source260.dtor_args;
            DAST._IType _4324___mcc_h683 = _source260.dtor_result;
            {
              RAST._IExpr _out851;
              DCOMP._IOwnership _out852;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out853;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out851, out _out852, out _out853);
              r = _out851;
              resultingOwnership = _out852;
              readIdents = _out853;
            }
          } else if (_source260.is_Primitive) {
            DAST._IPrimitive _4325___mcc_h686 = _source260.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out854;
              DCOMP._IOwnership _out855;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out856;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out854, out _out855, out _out856);
              r = _out854;
              resultingOwnership = _out855;
              readIdents = _out856;
            }
          } else if (_source260.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4326___mcc_h688 = _source260.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out857;
              DCOMP._IOwnership _out858;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out857, out _out858, out _out859);
              r = _out857;
              resultingOwnership = _out858;
              readIdents = _out859;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4327___mcc_h690 = _source260.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out860;
              DCOMP._IOwnership _out861;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out860, out _out861, out _out862);
              r = _out860;
              resultingOwnership = _out861;
              readIdents = _out862;
            }
          }
        } else if (_source240.is_Map) {
          DAST._IType _4328___mcc_h692 = _source240.dtor_key;
          DAST._IType _4329___mcc_h693 = _source240.dtor_value;
          DAST._IType _source262 = _3933___mcc_h1;
          if (_source262.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4330___mcc_h700 = _source262.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4331___mcc_h701 = _source262.dtor_typeArgs;
            DAST._IResolvedType _4332___mcc_h702 = _source262.dtor_resolved;
            DAST._IResolvedType _source263 = _4332___mcc_h702;
            if (_source263.is_AllocatedDatatype) {
              DAST._IDatatypeType _4333___mcc_h706 = _source263.dtor_datatypeType;
              {
                RAST._IExpr _out863;
                DCOMP._IOwnership _out864;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out865;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out863, out _out864, out _out865);
                r = _out863;
                resultingOwnership = _out864;
                readIdents = _out865;
              }
            } else if (_source263.is_Datatype) {
              DAST._IDatatypeType _4334___mcc_h708 = _source263.dtor_datatypeType;
              {
                RAST._IExpr _out866;
                DCOMP._IOwnership _out867;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out866, out _out867, out _out868);
                r = _out866;
                resultingOwnership = _out867;
                readIdents = _out868;
              }
            } else if (_source263.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4335___mcc_h710 = _source263.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4336___mcc_h711 = _source263.dtor_attributes;
              {
                RAST._IExpr _out869;
                DCOMP._IOwnership _out870;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out869, out _out870, out _out871);
                r = _out869;
                resultingOwnership = _out870;
                readIdents = _out871;
              }
            } else {
              DAST._IType _4337___mcc_h714 = _source263.dtor_baseType;
              DAST._INewtypeRange _4338___mcc_h715 = _source263.dtor_range;
              bool _4339___mcc_h716 = _source263.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4340___mcc_h717 = _source263.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4341_attributes = _4340___mcc_h717;
              bool _4342_erase = _4339___mcc_h716;
              DAST._INewtypeRange _4343_range = _4338___mcc_h715;
              DAST._IType _4344_b = _4337___mcc_h714;
              {
                RAST._IExpr _out872;
                DCOMP._IOwnership _out873;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out874;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out872, out _out873, out _out874);
                r = _out872;
                resultingOwnership = _out873;
                readIdents = _out874;
              }
            }
          } else if (_source262.is_Nullable) {
            DAST._IType _4345___mcc_h722 = _source262.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out875;
              DCOMP._IOwnership _out876;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out877;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out875, out _out876, out _out877);
              r = _out875;
              resultingOwnership = _out876;
              readIdents = _out877;
            }
          } else if (_source262.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4346___mcc_h724 = _source262.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out878;
              DCOMP._IOwnership _out879;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out880;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out878, out _out879, out _out880);
              r = _out878;
              resultingOwnership = _out879;
              readIdents = _out880;
            }
          } else if (_source262.is_Array) {
            DAST._IType _4347___mcc_h726 = _source262.dtor_element;
            BigInteger _4348___mcc_h727 = _source262.dtor_dims;
            {
              RAST._IExpr _out881;
              DCOMP._IOwnership _out882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out881, out _out882, out _out883);
              r = _out881;
              resultingOwnership = _out882;
              readIdents = _out883;
            }
          } else if (_source262.is_Seq) {
            DAST._IType _4349___mcc_h730 = _source262.dtor_element;
            {
              RAST._IExpr _out884;
              DCOMP._IOwnership _out885;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out886;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out884, out _out885, out _out886);
              r = _out884;
              resultingOwnership = _out885;
              readIdents = _out886;
            }
          } else if (_source262.is_Set) {
            DAST._IType _4350___mcc_h732 = _source262.dtor_element;
            {
              RAST._IExpr _out887;
              DCOMP._IOwnership _out888;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out889;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out887, out _out888, out _out889);
              r = _out887;
              resultingOwnership = _out888;
              readIdents = _out889;
            }
          } else if (_source262.is_Multiset) {
            DAST._IType _4351___mcc_h734 = _source262.dtor_element;
            {
              RAST._IExpr _out890;
              DCOMP._IOwnership _out891;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out890, out _out891, out _out892);
              r = _out890;
              resultingOwnership = _out891;
              readIdents = _out892;
            }
          } else if (_source262.is_Map) {
            DAST._IType _4352___mcc_h736 = _source262.dtor_key;
            DAST._IType _4353___mcc_h737 = _source262.dtor_value;
            {
              RAST._IExpr _out893;
              DCOMP._IOwnership _out894;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out893, out _out894, out _out895);
              r = _out893;
              resultingOwnership = _out894;
              readIdents = _out895;
            }
          } else if (_source262.is_SetBuilder) {
            DAST._IType _4354___mcc_h740 = _source262.dtor_element;
            {
              RAST._IExpr _out896;
              DCOMP._IOwnership _out897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out896, out _out897, out _out898);
              r = _out896;
              resultingOwnership = _out897;
              readIdents = _out898;
            }
          } else if (_source262.is_MapBuilder) {
            DAST._IType _4355___mcc_h742 = _source262.dtor_key;
            DAST._IType _4356___mcc_h743 = _source262.dtor_value;
            {
              RAST._IExpr _out899;
              DCOMP._IOwnership _out900;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out901;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out899, out _out900, out _out901);
              r = _out899;
              resultingOwnership = _out900;
              readIdents = _out901;
            }
          } else if (_source262.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4357___mcc_h746 = _source262.dtor_args;
            DAST._IType _4358___mcc_h747 = _source262.dtor_result;
            {
              RAST._IExpr _out902;
              DCOMP._IOwnership _out903;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out902, out _out903, out _out904);
              r = _out902;
              resultingOwnership = _out903;
              readIdents = _out904;
            }
          } else if (_source262.is_Primitive) {
            DAST._IPrimitive _4359___mcc_h750 = _source262.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out905;
              DCOMP._IOwnership _out906;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out905, out _out906, out _out907);
              r = _out905;
              resultingOwnership = _out906;
              readIdents = _out907;
            }
          } else if (_source262.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4360___mcc_h752 = _source262.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out908;
              DCOMP._IOwnership _out909;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out910;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out908, out _out909, out _out910);
              r = _out908;
              resultingOwnership = _out909;
              readIdents = _out910;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4361___mcc_h754 = _source262.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out911;
              DCOMP._IOwnership _out912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out911, out _out912, out _out913);
              r = _out911;
              resultingOwnership = _out912;
              readIdents = _out913;
            }
          }
        } else if (_source240.is_SetBuilder) {
          DAST._IType _4362___mcc_h756 = _source240.dtor_element;
          DAST._IType _source264 = _3933___mcc_h1;
          if (_source264.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4363___mcc_h760 = _source264.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4364___mcc_h761 = _source264.dtor_typeArgs;
            DAST._IResolvedType _4365___mcc_h762 = _source264.dtor_resolved;
            DAST._IResolvedType _source265 = _4365___mcc_h762;
            if (_source265.is_AllocatedDatatype) {
              DAST._IDatatypeType _4366___mcc_h766 = _source265.dtor_datatypeType;
              {
                RAST._IExpr _out914;
                DCOMP._IOwnership _out915;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out914, out _out915, out _out916);
                r = _out914;
                resultingOwnership = _out915;
                readIdents = _out916;
              }
            } else if (_source265.is_Datatype) {
              DAST._IDatatypeType _4367___mcc_h768 = _source265.dtor_datatypeType;
              {
                RAST._IExpr _out917;
                DCOMP._IOwnership _out918;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out917, out _out918, out _out919);
                r = _out917;
                resultingOwnership = _out918;
                readIdents = _out919;
              }
            } else if (_source265.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4368___mcc_h770 = _source265.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4369___mcc_h771 = _source265.dtor_attributes;
              {
                RAST._IExpr _out920;
                DCOMP._IOwnership _out921;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out922;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out920, out _out921, out _out922);
                r = _out920;
                resultingOwnership = _out921;
                readIdents = _out922;
              }
            } else {
              DAST._IType _4370___mcc_h774 = _source265.dtor_baseType;
              DAST._INewtypeRange _4371___mcc_h775 = _source265.dtor_range;
              bool _4372___mcc_h776 = _source265.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4373___mcc_h777 = _source265.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4374_attributes = _4373___mcc_h777;
              bool _4375_erase = _4372___mcc_h776;
              DAST._INewtypeRange _4376_range = _4371___mcc_h775;
              DAST._IType _4377_b = _4370___mcc_h774;
              {
                RAST._IExpr _out923;
                DCOMP._IOwnership _out924;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out925;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out923, out _out924, out _out925);
                r = _out923;
                resultingOwnership = _out924;
                readIdents = _out925;
              }
            }
          } else if (_source264.is_Nullable) {
            DAST._IType _4378___mcc_h782 = _source264.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out926;
              DCOMP._IOwnership _out927;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out926, out _out927, out _out928);
              r = _out926;
              resultingOwnership = _out927;
              readIdents = _out928;
            }
          } else if (_source264.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4379___mcc_h784 = _source264.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out929;
              DCOMP._IOwnership _out930;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out929, out _out930, out _out931);
              r = _out929;
              resultingOwnership = _out930;
              readIdents = _out931;
            }
          } else if (_source264.is_Array) {
            DAST._IType _4380___mcc_h786 = _source264.dtor_element;
            BigInteger _4381___mcc_h787 = _source264.dtor_dims;
            {
              RAST._IExpr _out932;
              DCOMP._IOwnership _out933;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out934;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out932, out _out933, out _out934);
              r = _out932;
              resultingOwnership = _out933;
              readIdents = _out934;
            }
          } else if (_source264.is_Seq) {
            DAST._IType _4382___mcc_h790 = _source264.dtor_element;
            {
              RAST._IExpr _out935;
              DCOMP._IOwnership _out936;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out937;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out935, out _out936, out _out937);
              r = _out935;
              resultingOwnership = _out936;
              readIdents = _out937;
            }
          } else if (_source264.is_Set) {
            DAST._IType _4383___mcc_h792 = _source264.dtor_element;
            {
              RAST._IExpr _out938;
              DCOMP._IOwnership _out939;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out938, out _out939, out _out940);
              r = _out938;
              resultingOwnership = _out939;
              readIdents = _out940;
            }
          } else if (_source264.is_Multiset) {
            DAST._IType _4384___mcc_h794 = _source264.dtor_element;
            {
              RAST._IExpr _out941;
              DCOMP._IOwnership _out942;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out943;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out941, out _out942, out _out943);
              r = _out941;
              resultingOwnership = _out942;
              readIdents = _out943;
            }
          } else if (_source264.is_Map) {
            DAST._IType _4385___mcc_h796 = _source264.dtor_key;
            DAST._IType _4386___mcc_h797 = _source264.dtor_value;
            {
              RAST._IExpr _out944;
              DCOMP._IOwnership _out945;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out944, out _out945, out _out946);
              r = _out944;
              resultingOwnership = _out945;
              readIdents = _out946;
            }
          } else if (_source264.is_SetBuilder) {
            DAST._IType _4387___mcc_h800 = _source264.dtor_element;
            {
              RAST._IExpr _out947;
              DCOMP._IOwnership _out948;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out947, out _out948, out _out949);
              r = _out947;
              resultingOwnership = _out948;
              readIdents = _out949;
            }
          } else if (_source264.is_MapBuilder) {
            DAST._IType _4388___mcc_h802 = _source264.dtor_key;
            DAST._IType _4389___mcc_h803 = _source264.dtor_value;
            {
              RAST._IExpr _out950;
              DCOMP._IOwnership _out951;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out950, out _out951, out _out952);
              r = _out950;
              resultingOwnership = _out951;
              readIdents = _out952;
            }
          } else if (_source264.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4390___mcc_h806 = _source264.dtor_args;
            DAST._IType _4391___mcc_h807 = _source264.dtor_result;
            {
              RAST._IExpr _out953;
              DCOMP._IOwnership _out954;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out955;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out953, out _out954, out _out955);
              r = _out953;
              resultingOwnership = _out954;
              readIdents = _out955;
            }
          } else if (_source264.is_Primitive) {
            DAST._IPrimitive _4392___mcc_h810 = _source264.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out956;
              DCOMP._IOwnership _out957;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out958;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out956, out _out957, out _out958);
              r = _out956;
              resultingOwnership = _out957;
              readIdents = _out958;
            }
          } else if (_source264.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4393___mcc_h812 = _source264.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out959;
              DCOMP._IOwnership _out960;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out961;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out959, out _out960, out _out961);
              r = _out959;
              resultingOwnership = _out960;
              readIdents = _out961;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4394___mcc_h814 = _source264.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out962;
              DCOMP._IOwnership _out963;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out962, out _out963, out _out964);
              r = _out962;
              resultingOwnership = _out963;
              readIdents = _out964;
            }
          }
        } else if (_source240.is_MapBuilder) {
          DAST._IType _4395___mcc_h816 = _source240.dtor_key;
          DAST._IType _4396___mcc_h817 = _source240.dtor_value;
          DAST._IType _source266 = _3933___mcc_h1;
          if (_source266.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4397___mcc_h824 = _source266.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4398___mcc_h825 = _source266.dtor_typeArgs;
            DAST._IResolvedType _4399___mcc_h826 = _source266.dtor_resolved;
            DAST._IResolvedType _source267 = _4399___mcc_h826;
            if (_source267.is_AllocatedDatatype) {
              DAST._IDatatypeType _4400___mcc_h830 = _source267.dtor_datatypeType;
              {
                RAST._IExpr _out965;
                DCOMP._IOwnership _out966;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out967;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out965, out _out966, out _out967);
                r = _out965;
                resultingOwnership = _out966;
                readIdents = _out967;
              }
            } else if (_source267.is_Datatype) {
              DAST._IDatatypeType _4401___mcc_h832 = _source267.dtor_datatypeType;
              {
                RAST._IExpr _out968;
                DCOMP._IOwnership _out969;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out970;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out968, out _out969, out _out970);
                r = _out968;
                resultingOwnership = _out969;
                readIdents = _out970;
              }
            } else if (_source267.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4402___mcc_h834 = _source267.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4403___mcc_h835 = _source267.dtor_attributes;
              {
                RAST._IExpr _out971;
                DCOMP._IOwnership _out972;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out971, out _out972, out _out973);
                r = _out971;
                resultingOwnership = _out972;
                readIdents = _out973;
              }
            } else {
              DAST._IType _4404___mcc_h838 = _source267.dtor_baseType;
              DAST._INewtypeRange _4405___mcc_h839 = _source267.dtor_range;
              bool _4406___mcc_h840 = _source267.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4407___mcc_h841 = _source267.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4408_attributes = _4407___mcc_h841;
              bool _4409_erase = _4406___mcc_h840;
              DAST._INewtypeRange _4410_range = _4405___mcc_h839;
              DAST._IType _4411_b = _4404___mcc_h838;
              {
                RAST._IExpr _out974;
                DCOMP._IOwnership _out975;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out974, out _out975, out _out976);
                r = _out974;
                resultingOwnership = _out975;
                readIdents = _out976;
              }
            }
          } else if (_source266.is_Nullable) {
            DAST._IType _4412___mcc_h846 = _source266.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out977;
              DCOMP._IOwnership _out978;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out977, out _out978, out _out979);
              r = _out977;
              resultingOwnership = _out978;
              readIdents = _out979;
            }
          } else if (_source266.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4413___mcc_h848 = _source266.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out980;
              DCOMP._IOwnership _out981;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out982;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out980, out _out981, out _out982);
              r = _out980;
              resultingOwnership = _out981;
              readIdents = _out982;
            }
          } else if (_source266.is_Array) {
            DAST._IType _4414___mcc_h850 = _source266.dtor_element;
            BigInteger _4415___mcc_h851 = _source266.dtor_dims;
            {
              RAST._IExpr _out983;
              DCOMP._IOwnership _out984;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out983, out _out984, out _out985);
              r = _out983;
              resultingOwnership = _out984;
              readIdents = _out985;
            }
          } else if (_source266.is_Seq) {
            DAST._IType _4416___mcc_h854 = _source266.dtor_element;
            {
              RAST._IExpr _out986;
              DCOMP._IOwnership _out987;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out988;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out986, out _out987, out _out988);
              r = _out986;
              resultingOwnership = _out987;
              readIdents = _out988;
            }
          } else if (_source266.is_Set) {
            DAST._IType _4417___mcc_h856 = _source266.dtor_element;
            {
              RAST._IExpr _out989;
              DCOMP._IOwnership _out990;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out991;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out989, out _out990, out _out991);
              r = _out989;
              resultingOwnership = _out990;
              readIdents = _out991;
            }
          } else if (_source266.is_Multiset) {
            DAST._IType _4418___mcc_h858 = _source266.dtor_element;
            {
              RAST._IExpr _out992;
              DCOMP._IOwnership _out993;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out992, out _out993, out _out994);
              r = _out992;
              resultingOwnership = _out993;
              readIdents = _out994;
            }
          } else if (_source266.is_Map) {
            DAST._IType _4419___mcc_h860 = _source266.dtor_key;
            DAST._IType _4420___mcc_h861 = _source266.dtor_value;
            {
              RAST._IExpr _out995;
              DCOMP._IOwnership _out996;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out997;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out995, out _out996, out _out997);
              r = _out995;
              resultingOwnership = _out996;
              readIdents = _out997;
            }
          } else if (_source266.is_SetBuilder) {
            DAST._IType _4421___mcc_h864 = _source266.dtor_element;
            {
              RAST._IExpr _out998;
              DCOMP._IOwnership _out999;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1000;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out998, out _out999, out _out1000);
              r = _out998;
              resultingOwnership = _out999;
              readIdents = _out1000;
            }
          } else if (_source266.is_MapBuilder) {
            DAST._IType _4422___mcc_h866 = _source266.dtor_key;
            DAST._IType _4423___mcc_h867 = _source266.dtor_value;
            {
              RAST._IExpr _out1001;
              DCOMP._IOwnership _out1002;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1003;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1001, out _out1002, out _out1003);
              r = _out1001;
              resultingOwnership = _out1002;
              readIdents = _out1003;
            }
          } else if (_source266.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4424___mcc_h870 = _source266.dtor_args;
            DAST._IType _4425___mcc_h871 = _source266.dtor_result;
            {
              RAST._IExpr _out1004;
              DCOMP._IOwnership _out1005;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1006;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1004, out _out1005, out _out1006);
              r = _out1004;
              resultingOwnership = _out1005;
              readIdents = _out1006;
            }
          } else if (_source266.is_Primitive) {
            DAST._IPrimitive _4426___mcc_h874 = _source266.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out1007;
              DCOMP._IOwnership _out1008;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1007, out _out1008, out _out1009);
              r = _out1007;
              resultingOwnership = _out1008;
              readIdents = _out1009;
            }
          } else if (_source266.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4427___mcc_h876 = _source266.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out1010;
              DCOMP._IOwnership _out1011;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1012;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1010, out _out1011, out _out1012);
              r = _out1010;
              resultingOwnership = _out1011;
              readIdents = _out1012;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4428___mcc_h878 = _source266.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out1013;
              DCOMP._IOwnership _out1014;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1013, out _out1014, out _out1015);
              r = _out1013;
              resultingOwnership = _out1014;
              readIdents = _out1015;
            }
          }
        } else if (_source240.is_Arrow) {
          Dafny.ISequence<DAST._IType> _4429___mcc_h880 = _source240.dtor_args;
          DAST._IType _4430___mcc_h881 = _source240.dtor_result;
          DAST._IType _source268 = _3933___mcc_h1;
          if (_source268.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4431___mcc_h888 = _source268.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4432___mcc_h889 = _source268.dtor_typeArgs;
            DAST._IResolvedType _4433___mcc_h890 = _source268.dtor_resolved;
            DAST._IResolvedType _source269 = _4433___mcc_h890;
            if (_source269.is_AllocatedDatatype) {
              DAST._IDatatypeType _4434___mcc_h894 = _source269.dtor_datatypeType;
              {
                RAST._IExpr _out1016;
                DCOMP._IOwnership _out1017;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1018;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1016, out _out1017, out _out1018);
                r = _out1016;
                resultingOwnership = _out1017;
                readIdents = _out1018;
              }
            } else if (_source269.is_Datatype) {
              DAST._IDatatypeType _4435___mcc_h896 = _source269.dtor_datatypeType;
              {
                RAST._IExpr _out1019;
                DCOMP._IOwnership _out1020;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1021;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1019, out _out1020, out _out1021);
                r = _out1019;
                resultingOwnership = _out1020;
                readIdents = _out1021;
              }
            } else if (_source269.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4436___mcc_h898 = _source269.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4437___mcc_h899 = _source269.dtor_attributes;
              {
                RAST._IExpr _out1022;
                DCOMP._IOwnership _out1023;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1022, out _out1023, out _out1024);
                r = _out1022;
                resultingOwnership = _out1023;
                readIdents = _out1024;
              }
            } else {
              DAST._IType _4438___mcc_h902 = _source269.dtor_baseType;
              DAST._INewtypeRange _4439___mcc_h903 = _source269.dtor_range;
              bool _4440___mcc_h904 = _source269.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4441___mcc_h905 = _source269.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4442_attributes = _4441___mcc_h905;
              bool _4443_erase = _4440___mcc_h904;
              DAST._INewtypeRange _4444_range = _4439___mcc_h903;
              DAST._IType _4445_b = _4438___mcc_h902;
              {
                RAST._IExpr _out1025;
                DCOMP._IOwnership _out1026;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1025, out _out1026, out _out1027);
                r = _out1025;
                resultingOwnership = _out1026;
                readIdents = _out1027;
              }
            }
          } else if (_source268.is_Nullable) {
            DAST._IType _4446___mcc_h910 = _source268.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out1028;
              DCOMP._IOwnership _out1029;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1030;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out1028, out _out1029, out _out1030);
              r = _out1028;
              resultingOwnership = _out1029;
              readIdents = _out1030;
            }
          } else if (_source268.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4447___mcc_h912 = _source268.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out1031;
              DCOMP._IOwnership _out1032;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1033;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1031, out _out1032, out _out1033);
              r = _out1031;
              resultingOwnership = _out1032;
              readIdents = _out1033;
            }
          } else if (_source268.is_Array) {
            DAST._IType _4448___mcc_h914 = _source268.dtor_element;
            BigInteger _4449___mcc_h915 = _source268.dtor_dims;
            {
              RAST._IExpr _out1034;
              DCOMP._IOwnership _out1035;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1034, out _out1035, out _out1036);
              r = _out1034;
              resultingOwnership = _out1035;
              readIdents = _out1036;
            }
          } else if (_source268.is_Seq) {
            DAST._IType _4450___mcc_h918 = _source268.dtor_element;
            {
              RAST._IExpr _out1037;
              DCOMP._IOwnership _out1038;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1039;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1037, out _out1038, out _out1039);
              r = _out1037;
              resultingOwnership = _out1038;
              readIdents = _out1039;
            }
          } else if (_source268.is_Set) {
            DAST._IType _4451___mcc_h920 = _source268.dtor_element;
            {
              RAST._IExpr _out1040;
              DCOMP._IOwnership _out1041;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1042;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1040, out _out1041, out _out1042);
              r = _out1040;
              resultingOwnership = _out1041;
              readIdents = _out1042;
            }
          } else if (_source268.is_Multiset) {
            DAST._IType _4452___mcc_h922 = _source268.dtor_element;
            {
              RAST._IExpr _out1043;
              DCOMP._IOwnership _out1044;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1043, out _out1044, out _out1045);
              r = _out1043;
              resultingOwnership = _out1044;
              readIdents = _out1045;
            }
          } else if (_source268.is_Map) {
            DAST._IType _4453___mcc_h924 = _source268.dtor_key;
            DAST._IType _4454___mcc_h925 = _source268.dtor_value;
            {
              RAST._IExpr _out1046;
              DCOMP._IOwnership _out1047;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1048;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1046, out _out1047, out _out1048);
              r = _out1046;
              resultingOwnership = _out1047;
              readIdents = _out1048;
            }
          } else if (_source268.is_SetBuilder) {
            DAST._IType _4455___mcc_h928 = _source268.dtor_element;
            {
              RAST._IExpr _out1049;
              DCOMP._IOwnership _out1050;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1051;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1049, out _out1050, out _out1051);
              r = _out1049;
              resultingOwnership = _out1050;
              readIdents = _out1051;
            }
          } else if (_source268.is_MapBuilder) {
            DAST._IType _4456___mcc_h930 = _source268.dtor_key;
            DAST._IType _4457___mcc_h931 = _source268.dtor_value;
            {
              RAST._IExpr _out1052;
              DCOMP._IOwnership _out1053;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1054;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1052, out _out1053, out _out1054);
              r = _out1052;
              resultingOwnership = _out1053;
              readIdents = _out1054;
            }
          } else if (_source268.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4458___mcc_h934 = _source268.dtor_args;
            DAST._IType _4459___mcc_h935 = _source268.dtor_result;
            {
              RAST._IExpr _out1055;
              DCOMP._IOwnership _out1056;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1057;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1055, out _out1056, out _out1057);
              r = _out1055;
              resultingOwnership = _out1056;
              readIdents = _out1057;
            }
          } else if (_source268.is_Primitive) {
            DAST._IPrimitive _4460___mcc_h938 = _source268.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out1058;
              DCOMP._IOwnership _out1059;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1058, out _out1059, out _out1060);
              r = _out1058;
              resultingOwnership = _out1059;
              readIdents = _out1060;
            }
          } else if (_source268.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4461___mcc_h940 = _source268.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out1061;
              DCOMP._IOwnership _out1062;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1063;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1061, out _out1062, out _out1063);
              r = _out1061;
              resultingOwnership = _out1062;
              readIdents = _out1063;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4462___mcc_h942 = _source268.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out1064;
              DCOMP._IOwnership _out1065;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1066;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1064, out _out1065, out _out1066);
              r = _out1064;
              resultingOwnership = _out1065;
              readIdents = _out1066;
            }
          }
        } else if (_source240.is_Primitive) {
          DAST._IPrimitive _4463___mcc_h944 = _source240.dtor_Primitive_i_a0;
          DAST._IPrimitive _source270 = _4463___mcc_h944;
          if (_source270.is_Int) {
            DAST._IType _source271 = _3933___mcc_h1;
            if (_source271.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4464___mcc_h948 = _source271.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _4465___mcc_h949 = _source271.dtor_typeArgs;
              DAST._IResolvedType _4466___mcc_h950 = _source271.dtor_resolved;
              DAST._IResolvedType _source272 = _4466___mcc_h950;
              if (_source272.is_AllocatedDatatype) {
                DAST._IDatatypeType _4467___mcc_h954 = _source272.dtor_datatypeType;
                {
                  RAST._IExpr _out1067;
                  DCOMP._IOwnership _out1068;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1069;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1067, out _out1068, out _out1069);
                  r = _out1067;
                  resultingOwnership = _out1068;
                  readIdents = _out1069;
                }
              } else if (_source272.is_Datatype) {
                DAST._IDatatypeType _4468___mcc_h956 = _source272.dtor_datatypeType;
                {
                  RAST._IExpr _out1070;
                  DCOMP._IOwnership _out1071;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1070, out _out1071, out _out1072);
                  r = _out1070;
                  resultingOwnership = _out1071;
                  readIdents = _out1072;
                }
              } else if (_source272.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4469___mcc_h958 = _source272.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4470___mcc_h959 = _source272.dtor_attributes;
                {
                  RAST._IExpr _out1073;
                  DCOMP._IOwnership _out1074;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1073, out _out1074, out _out1075);
                  r = _out1073;
                  resultingOwnership = _out1074;
                  readIdents = _out1075;
                }
              } else {
                DAST._IType _4471___mcc_h962 = _source272.dtor_baseType;
                DAST._INewtypeRange _4472___mcc_h963 = _source272.dtor_range;
                bool _4473___mcc_h964 = _source272.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4474___mcc_h965 = _source272.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4475_attributes = _4474___mcc_h965;
                bool _4476_erase = _4473___mcc_h964;
                DAST._INewtypeRange _4477_range = _4472___mcc_h963;
                DAST._IType _4478_b = _4471___mcc_h962;
                {
                  RAST._IExpr _out1076;
                  DCOMP._IOwnership _out1077;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1078;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1076, out _out1077, out _out1078);
                  r = _out1076;
                  resultingOwnership = _out1077;
                  readIdents = _out1078;
                }
              }
            } else if (_source271.is_Nullable) {
              DAST._IType _4479___mcc_h970 = _source271.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out1079;
                DCOMP._IOwnership _out1080;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1081;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out1079, out _out1080, out _out1081);
                r = _out1079;
                resultingOwnership = _out1080;
                readIdents = _out1081;
              }
            } else if (_source271.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4480___mcc_h972 = _source271.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1082;
                DCOMP._IOwnership _out1083;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1082, out _out1083, out _out1084);
                r = _out1082;
                resultingOwnership = _out1083;
                readIdents = _out1084;
              }
            } else if (_source271.is_Array) {
              DAST._IType _4481___mcc_h974 = _source271.dtor_element;
              BigInteger _4482___mcc_h975 = _source271.dtor_dims;
              {
                RAST._IExpr _out1085;
                DCOMP._IOwnership _out1086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1085, out _out1086, out _out1087);
                r = _out1085;
                resultingOwnership = _out1086;
                readIdents = _out1087;
              }
            } else if (_source271.is_Seq) {
              DAST._IType _4483___mcc_h978 = _source271.dtor_element;
              {
                RAST._IExpr _out1088;
                DCOMP._IOwnership _out1089;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1088, out _out1089, out _out1090);
                r = _out1088;
                resultingOwnership = _out1089;
                readIdents = _out1090;
              }
            } else if (_source271.is_Set) {
              DAST._IType _4484___mcc_h980 = _source271.dtor_element;
              {
                RAST._IExpr _out1091;
                DCOMP._IOwnership _out1092;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1093;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1091, out _out1092, out _out1093);
                r = _out1091;
                resultingOwnership = _out1092;
                readIdents = _out1093;
              }
            } else if (_source271.is_Multiset) {
              DAST._IType _4485___mcc_h982 = _source271.dtor_element;
              {
                RAST._IExpr _out1094;
                DCOMP._IOwnership _out1095;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1094, out _out1095, out _out1096);
                r = _out1094;
                resultingOwnership = _out1095;
                readIdents = _out1096;
              }
            } else if (_source271.is_Map) {
              DAST._IType _4486___mcc_h984 = _source271.dtor_key;
              DAST._IType _4487___mcc_h985 = _source271.dtor_value;
              {
                RAST._IExpr _out1097;
                DCOMP._IOwnership _out1098;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1099;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1097, out _out1098, out _out1099);
                r = _out1097;
                resultingOwnership = _out1098;
                readIdents = _out1099;
              }
            } else if (_source271.is_SetBuilder) {
              DAST._IType _4488___mcc_h988 = _source271.dtor_element;
              {
                RAST._IExpr _out1100;
                DCOMP._IOwnership _out1101;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1102;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1100, out _out1101, out _out1102);
                r = _out1100;
                resultingOwnership = _out1101;
                readIdents = _out1102;
              }
            } else if (_source271.is_MapBuilder) {
              DAST._IType _4489___mcc_h990 = _source271.dtor_key;
              DAST._IType _4490___mcc_h991 = _source271.dtor_value;
              {
                RAST._IExpr _out1103;
                DCOMP._IOwnership _out1104;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1103, out _out1104, out _out1105);
                r = _out1103;
                resultingOwnership = _out1104;
                readIdents = _out1105;
              }
            } else if (_source271.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4491___mcc_h994 = _source271.dtor_args;
              DAST._IType _4492___mcc_h995 = _source271.dtor_result;
              {
                RAST._IExpr _out1106;
                DCOMP._IOwnership _out1107;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1106, out _out1107, out _out1108);
                r = _out1106;
                resultingOwnership = _out1107;
                readIdents = _out1108;
              }
            } else if (_source271.is_Primitive) {
              DAST._IPrimitive _4493___mcc_h998 = _source271.dtor_Primitive_i_a0;
              DAST._IPrimitive _source273 = _4493___mcc_h998;
              if (_source273.is_Int) {
                {
                  RAST._IExpr _out1109;
                  DCOMP._IOwnership _out1110;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1111;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1109, out _out1110, out _out1111);
                  r = _out1109;
                  resultingOwnership = _out1110;
                  readIdents = _out1111;
                }
              } else if (_source273.is_Real) {
                {
                  RAST._IExpr _4494_recursiveGen;
                  DCOMP._IOwnership _4495___v110;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4496_recIdents;
                  RAST._IExpr _out1112;
                  DCOMP._IOwnership _out1113;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1114;
                  (this).GenExpr(_3926_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1112, out _out1113, out _out1114);
                  _4494_recursiveGen = _out1112;
                  _4495___v110 = _out1113;
                  _4496_recIdents = _out1114;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_4494_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out1115;
                  DCOMP._IOwnership _out1116;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1115, out _out1116);
                  r = _out1115;
                  resultingOwnership = _out1116;
                  readIdents = _4496_recIdents;
                }
              } else if (_source273.is_String) {
                {
                  RAST._IExpr _out1117;
                  DCOMP._IOwnership _out1118;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1119;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1117, out _out1118, out _out1119);
                  r = _out1117;
                  resultingOwnership = _out1118;
                  readIdents = _out1119;
                }
              } else if (_source273.is_Bool) {
                {
                  RAST._IExpr _out1120;
                  DCOMP._IOwnership _out1121;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1122;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1120, out _out1121, out _out1122);
                  r = _out1120;
                  resultingOwnership = _out1121;
                  readIdents = _out1122;
                }
              } else {
                {
                  RAST._IType _4497_rhsType;
                  RAST._IType _out1123;
                  _out1123 = (this).GenType(_3928_toTpe, true, false);
                  _4497_rhsType = _out1123;
                  RAST._IExpr _4498_recursiveGen;
                  DCOMP._IOwnership _4499___v116;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4500_recIdents;
                  RAST._IExpr _out1124;
                  DCOMP._IOwnership _out1125;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1126;
                  (this).GenExpr(_3926_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1124, out _out1125, out _out1126);
                  _4498_recursiveGen = _out1124;
                  _4499___v116 = _out1125;
                  _4500_recIdents = _out1126;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_4498_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out1127;
                  DCOMP._IOwnership _out1128;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1127, out _out1128);
                  r = _out1127;
                  resultingOwnership = _out1128;
                  readIdents = _4500_recIdents;
                }
              }
            } else if (_source271.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4501___mcc_h1000 = _source271.dtor_Passthrough_i_a0;
              {
                RAST._IType _4502_rhsType;
                RAST._IType _out1129;
                _out1129 = (this).GenType(_3928_toTpe, true, false);
                _4502_rhsType = _out1129;
                RAST._IExpr _4503_recursiveGen;
                DCOMP._IOwnership _4504___v113;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4505_recIdents;
                RAST._IExpr _out1130;
                DCOMP._IOwnership _out1131;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                (this).GenExpr(_3926_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1130, out _out1131, out _out1132);
                _4503_recursiveGen = _out1130;
                _4504___v113 = _out1131;
                _4505_recIdents = _out1132;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4502_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_4503_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out1133;
                DCOMP._IOwnership _out1134;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1133, out _out1134);
                r = _out1133;
                resultingOwnership = _out1134;
                readIdents = _4505_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4506___mcc_h1002 = _source271.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1135;
                DCOMP._IOwnership _out1136;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1135, out _out1136, out _out1137);
                r = _out1135;
                resultingOwnership = _out1136;
                readIdents = _out1137;
              }
            }
          } else if (_source270.is_Real) {
            DAST._IType _source274 = _3933___mcc_h1;
            if (_source274.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4507___mcc_h1004 = _source274.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _4508___mcc_h1005 = _source274.dtor_typeArgs;
              DAST._IResolvedType _4509___mcc_h1006 = _source274.dtor_resolved;
              DAST._IResolvedType _source275 = _4509___mcc_h1006;
              if (_source275.is_AllocatedDatatype) {
                DAST._IDatatypeType _4510___mcc_h1010 = _source275.dtor_datatypeType;
                {
                  RAST._IExpr _out1138;
                  DCOMP._IOwnership _out1139;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1138, out _out1139, out _out1140);
                  r = _out1138;
                  resultingOwnership = _out1139;
                  readIdents = _out1140;
                }
              } else if (_source275.is_Datatype) {
                DAST._IDatatypeType _4511___mcc_h1012 = _source275.dtor_datatypeType;
                {
                  RAST._IExpr _out1141;
                  DCOMP._IOwnership _out1142;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1143;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1141, out _out1142, out _out1143);
                  r = _out1141;
                  resultingOwnership = _out1142;
                  readIdents = _out1143;
                }
              } else if (_source275.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4512___mcc_h1014 = _source275.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4513___mcc_h1015 = _source275.dtor_attributes;
                {
                  RAST._IExpr _out1144;
                  DCOMP._IOwnership _out1145;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1144, out _out1145, out _out1146);
                  r = _out1144;
                  resultingOwnership = _out1145;
                  readIdents = _out1146;
                }
              } else {
                DAST._IType _4514___mcc_h1018 = _source275.dtor_baseType;
                DAST._INewtypeRange _4515___mcc_h1019 = _source275.dtor_range;
                bool _4516___mcc_h1020 = _source275.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4517___mcc_h1021 = _source275.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4518_attributes = _4517___mcc_h1021;
                bool _4519_erase = _4516___mcc_h1020;
                DAST._INewtypeRange _4520_range = _4515___mcc_h1019;
                DAST._IType _4521_b = _4514___mcc_h1018;
                {
                  RAST._IExpr _out1147;
                  DCOMP._IOwnership _out1148;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1147, out _out1148, out _out1149);
                  r = _out1147;
                  resultingOwnership = _out1148;
                  readIdents = _out1149;
                }
              }
            } else if (_source274.is_Nullable) {
              DAST._IType _4522___mcc_h1026 = _source274.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out1150;
                DCOMP._IOwnership _out1151;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1152;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out1150, out _out1151, out _out1152);
                r = _out1150;
                resultingOwnership = _out1151;
                readIdents = _out1152;
              }
            } else if (_source274.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4523___mcc_h1028 = _source274.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1153;
                DCOMP._IOwnership _out1154;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1155;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1153, out _out1154, out _out1155);
                r = _out1153;
                resultingOwnership = _out1154;
                readIdents = _out1155;
              }
            } else if (_source274.is_Array) {
              DAST._IType _4524___mcc_h1030 = _source274.dtor_element;
              BigInteger _4525___mcc_h1031 = _source274.dtor_dims;
              {
                RAST._IExpr _out1156;
                DCOMP._IOwnership _out1157;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1158;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1156, out _out1157, out _out1158);
                r = _out1156;
                resultingOwnership = _out1157;
                readIdents = _out1158;
              }
            } else if (_source274.is_Seq) {
              DAST._IType _4526___mcc_h1034 = _source274.dtor_element;
              {
                RAST._IExpr _out1159;
                DCOMP._IOwnership _out1160;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1159, out _out1160, out _out1161);
                r = _out1159;
                resultingOwnership = _out1160;
                readIdents = _out1161;
              }
            } else if (_source274.is_Set) {
              DAST._IType _4527___mcc_h1036 = _source274.dtor_element;
              {
                RAST._IExpr _out1162;
                DCOMP._IOwnership _out1163;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1164;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1162, out _out1163, out _out1164);
                r = _out1162;
                resultingOwnership = _out1163;
                readIdents = _out1164;
              }
            } else if (_source274.is_Multiset) {
              DAST._IType _4528___mcc_h1038 = _source274.dtor_element;
              {
                RAST._IExpr _out1165;
                DCOMP._IOwnership _out1166;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1167;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1165, out _out1166, out _out1167);
                r = _out1165;
                resultingOwnership = _out1166;
                readIdents = _out1167;
              }
            } else if (_source274.is_Map) {
              DAST._IType _4529___mcc_h1040 = _source274.dtor_key;
              DAST._IType _4530___mcc_h1041 = _source274.dtor_value;
              {
                RAST._IExpr _out1168;
                DCOMP._IOwnership _out1169;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1168, out _out1169, out _out1170);
                r = _out1168;
                resultingOwnership = _out1169;
                readIdents = _out1170;
              }
            } else if (_source274.is_SetBuilder) {
              DAST._IType _4531___mcc_h1044 = _source274.dtor_element;
              {
                RAST._IExpr _out1171;
                DCOMP._IOwnership _out1172;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1171, out _out1172, out _out1173);
                r = _out1171;
                resultingOwnership = _out1172;
                readIdents = _out1173;
              }
            } else if (_source274.is_MapBuilder) {
              DAST._IType _4532___mcc_h1046 = _source274.dtor_key;
              DAST._IType _4533___mcc_h1047 = _source274.dtor_value;
              {
                RAST._IExpr _out1174;
                DCOMP._IOwnership _out1175;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1174, out _out1175, out _out1176);
                r = _out1174;
                resultingOwnership = _out1175;
                readIdents = _out1176;
              }
            } else if (_source274.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4534___mcc_h1050 = _source274.dtor_args;
              DAST._IType _4535___mcc_h1051 = _source274.dtor_result;
              {
                RAST._IExpr _out1177;
                DCOMP._IOwnership _out1178;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1179;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1177, out _out1178, out _out1179);
                r = _out1177;
                resultingOwnership = _out1178;
                readIdents = _out1179;
              }
            } else if (_source274.is_Primitive) {
              DAST._IPrimitive _4536___mcc_h1054 = _source274.dtor_Primitive_i_a0;
              DAST._IPrimitive _source276 = _4536___mcc_h1054;
              if (_source276.is_Int) {
                {
                  RAST._IExpr _4537_recursiveGen;
                  DCOMP._IOwnership _4538___v111;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4539_recIdents;
                  RAST._IExpr _out1180;
                  DCOMP._IOwnership _out1181;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                  (this).GenExpr(_3926_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1180, out _out1181, out _out1182);
                  _4537_recursiveGen = _out1180;
                  _4538___v111 = _out1181;
                  _4539_recIdents = _out1182;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_4537_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out1183;
                  DCOMP._IOwnership _out1184;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1183, out _out1184);
                  r = _out1183;
                  resultingOwnership = _out1184;
                  readIdents = _4539_recIdents;
                }
              } else if (_source276.is_Real) {
                {
                  RAST._IExpr _out1185;
                  DCOMP._IOwnership _out1186;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1187;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1185, out _out1186, out _out1187);
                  r = _out1185;
                  resultingOwnership = _out1186;
                  readIdents = _out1187;
                }
              } else if (_source276.is_String) {
                {
                  RAST._IExpr _out1188;
                  DCOMP._IOwnership _out1189;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1188, out _out1189, out _out1190);
                  r = _out1188;
                  resultingOwnership = _out1189;
                  readIdents = _out1190;
                }
              } else if (_source276.is_Bool) {
                {
                  RAST._IExpr _out1191;
                  DCOMP._IOwnership _out1192;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1191, out _out1192, out _out1193);
                  r = _out1191;
                  resultingOwnership = _out1192;
                  readIdents = _out1193;
                }
              } else {
                {
                  RAST._IExpr _out1194;
                  DCOMP._IOwnership _out1195;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1194, out _out1195, out _out1196);
                  r = _out1194;
                  resultingOwnership = _out1195;
                  readIdents = _out1196;
                }
              }
            } else if (_source274.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4540___mcc_h1056 = _source274.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out1197;
                DCOMP._IOwnership _out1198;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1199;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1197, out _out1198, out _out1199);
                r = _out1197;
                resultingOwnership = _out1198;
                readIdents = _out1199;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4541___mcc_h1058 = _source274.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1200;
                DCOMP._IOwnership _out1201;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1200, out _out1201, out _out1202);
                r = _out1200;
                resultingOwnership = _out1201;
                readIdents = _out1202;
              }
            }
          } else if (_source270.is_String) {
            DAST._IType _source277 = _3933___mcc_h1;
            if (_source277.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4542___mcc_h1060 = _source277.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _4543___mcc_h1061 = _source277.dtor_typeArgs;
              DAST._IResolvedType _4544___mcc_h1062 = _source277.dtor_resolved;
              DAST._IResolvedType _source278 = _4544___mcc_h1062;
              if (_source278.is_AllocatedDatatype) {
                DAST._IDatatypeType _4545___mcc_h1066 = _source278.dtor_datatypeType;
                {
                  RAST._IExpr _out1203;
                  DCOMP._IOwnership _out1204;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1203, out _out1204, out _out1205);
                  r = _out1203;
                  resultingOwnership = _out1204;
                  readIdents = _out1205;
                }
              } else if (_source278.is_Datatype) {
                DAST._IDatatypeType _4546___mcc_h1068 = _source278.dtor_datatypeType;
                {
                  RAST._IExpr _out1206;
                  DCOMP._IOwnership _out1207;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1208;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1206, out _out1207, out _out1208);
                  r = _out1206;
                  resultingOwnership = _out1207;
                  readIdents = _out1208;
                }
              } else if (_source278.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4547___mcc_h1070 = _source278.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4548___mcc_h1071 = _source278.dtor_attributes;
                {
                  RAST._IExpr _out1209;
                  DCOMP._IOwnership _out1210;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1211;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1209, out _out1210, out _out1211);
                  r = _out1209;
                  resultingOwnership = _out1210;
                  readIdents = _out1211;
                }
              } else {
                DAST._IType _4549___mcc_h1074 = _source278.dtor_baseType;
                DAST._INewtypeRange _4550___mcc_h1075 = _source278.dtor_range;
                bool _4551___mcc_h1076 = _source278.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4552___mcc_h1077 = _source278.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4553_attributes = _4552___mcc_h1077;
                bool _4554_erase = _4551___mcc_h1076;
                DAST._INewtypeRange _4555_range = _4550___mcc_h1075;
                DAST._IType _4556_b = _4549___mcc_h1074;
                {
                  RAST._IExpr _out1212;
                  DCOMP._IOwnership _out1213;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1212, out _out1213, out _out1214);
                  r = _out1212;
                  resultingOwnership = _out1213;
                  readIdents = _out1214;
                }
              }
            } else if (_source277.is_Nullable) {
              DAST._IType _4557___mcc_h1082 = _source277.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out1215;
                DCOMP._IOwnership _out1216;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out1215, out _out1216, out _out1217);
                r = _out1215;
                resultingOwnership = _out1216;
                readIdents = _out1217;
              }
            } else if (_source277.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4558___mcc_h1084 = _source277.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1218;
                DCOMP._IOwnership _out1219;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1220;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1218, out _out1219, out _out1220);
                r = _out1218;
                resultingOwnership = _out1219;
                readIdents = _out1220;
              }
            } else if (_source277.is_Array) {
              DAST._IType _4559___mcc_h1086 = _source277.dtor_element;
              BigInteger _4560___mcc_h1087 = _source277.dtor_dims;
              {
                RAST._IExpr _out1221;
                DCOMP._IOwnership _out1222;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1223;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1221, out _out1222, out _out1223);
                r = _out1221;
                resultingOwnership = _out1222;
                readIdents = _out1223;
              }
            } else if (_source277.is_Seq) {
              DAST._IType _4561___mcc_h1090 = _source277.dtor_element;
              {
                RAST._IExpr _out1224;
                DCOMP._IOwnership _out1225;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1224, out _out1225, out _out1226);
                r = _out1224;
                resultingOwnership = _out1225;
                readIdents = _out1226;
              }
            } else if (_source277.is_Set) {
              DAST._IType _4562___mcc_h1092 = _source277.dtor_element;
              {
                RAST._IExpr _out1227;
                DCOMP._IOwnership _out1228;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1227, out _out1228, out _out1229);
                r = _out1227;
                resultingOwnership = _out1228;
                readIdents = _out1229;
              }
            } else if (_source277.is_Multiset) {
              DAST._IType _4563___mcc_h1094 = _source277.dtor_element;
              {
                RAST._IExpr _out1230;
                DCOMP._IOwnership _out1231;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1232;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1230, out _out1231, out _out1232);
                r = _out1230;
                resultingOwnership = _out1231;
                readIdents = _out1232;
              }
            } else if (_source277.is_Map) {
              DAST._IType _4564___mcc_h1096 = _source277.dtor_key;
              DAST._IType _4565___mcc_h1097 = _source277.dtor_value;
              {
                RAST._IExpr _out1233;
                DCOMP._IOwnership _out1234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1233, out _out1234, out _out1235);
                r = _out1233;
                resultingOwnership = _out1234;
                readIdents = _out1235;
              }
            } else if (_source277.is_SetBuilder) {
              DAST._IType _4566___mcc_h1100 = _source277.dtor_element;
              {
                RAST._IExpr _out1236;
                DCOMP._IOwnership _out1237;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1236, out _out1237, out _out1238);
                r = _out1236;
                resultingOwnership = _out1237;
                readIdents = _out1238;
              }
            } else if (_source277.is_MapBuilder) {
              DAST._IType _4567___mcc_h1102 = _source277.dtor_key;
              DAST._IType _4568___mcc_h1103 = _source277.dtor_value;
              {
                RAST._IExpr _out1239;
                DCOMP._IOwnership _out1240;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1241;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1239, out _out1240, out _out1241);
                r = _out1239;
                resultingOwnership = _out1240;
                readIdents = _out1241;
              }
            } else if (_source277.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4569___mcc_h1106 = _source277.dtor_args;
              DAST._IType _4570___mcc_h1107 = _source277.dtor_result;
              {
                RAST._IExpr _out1242;
                DCOMP._IOwnership _out1243;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1244;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1242, out _out1243, out _out1244);
                r = _out1242;
                resultingOwnership = _out1243;
                readIdents = _out1244;
              }
            } else if (_source277.is_Primitive) {
              DAST._IPrimitive _4571___mcc_h1110 = _source277.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out1245;
                DCOMP._IOwnership _out1246;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1245, out _out1246, out _out1247);
                r = _out1245;
                resultingOwnership = _out1246;
                readIdents = _out1247;
              }
            } else if (_source277.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4572___mcc_h1112 = _source277.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out1248;
                DCOMP._IOwnership _out1249;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1250;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1248, out _out1249, out _out1250);
                r = _out1248;
                resultingOwnership = _out1249;
                readIdents = _out1250;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4573___mcc_h1114 = _source277.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1251;
                DCOMP._IOwnership _out1252;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1253;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1251, out _out1252, out _out1253);
                r = _out1251;
                resultingOwnership = _out1252;
                readIdents = _out1253;
              }
            }
          } else if (_source270.is_Bool) {
            DAST._IType _source279 = _3933___mcc_h1;
            if (_source279.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4574___mcc_h1116 = _source279.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _4575___mcc_h1117 = _source279.dtor_typeArgs;
              DAST._IResolvedType _4576___mcc_h1118 = _source279.dtor_resolved;
              DAST._IResolvedType _source280 = _4576___mcc_h1118;
              if (_source280.is_AllocatedDatatype) {
                DAST._IDatatypeType _4577___mcc_h1122 = _source280.dtor_datatypeType;
                {
                  RAST._IExpr _out1254;
                  DCOMP._IOwnership _out1255;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1256;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1254, out _out1255, out _out1256);
                  r = _out1254;
                  resultingOwnership = _out1255;
                  readIdents = _out1256;
                }
              } else if (_source280.is_Datatype) {
                DAST._IDatatypeType _4578___mcc_h1124 = _source280.dtor_datatypeType;
                {
                  RAST._IExpr _out1257;
                  DCOMP._IOwnership _out1258;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1257, out _out1258, out _out1259);
                  r = _out1257;
                  resultingOwnership = _out1258;
                  readIdents = _out1259;
                }
              } else if (_source280.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4579___mcc_h1126 = _source280.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4580___mcc_h1127 = _source280.dtor_attributes;
                {
                  RAST._IExpr _out1260;
                  DCOMP._IOwnership _out1261;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1260, out _out1261, out _out1262);
                  r = _out1260;
                  resultingOwnership = _out1261;
                  readIdents = _out1262;
                }
              } else {
                DAST._IType _4581___mcc_h1130 = _source280.dtor_baseType;
                DAST._INewtypeRange _4582___mcc_h1131 = _source280.dtor_range;
                bool _4583___mcc_h1132 = _source280.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4584___mcc_h1133 = _source280.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4585_attributes = _4584___mcc_h1133;
                bool _4586_erase = _4583___mcc_h1132;
                DAST._INewtypeRange _4587_range = _4582___mcc_h1131;
                DAST._IType _4588_b = _4581___mcc_h1130;
                {
                  RAST._IExpr _out1263;
                  DCOMP._IOwnership _out1264;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1263, out _out1264, out _out1265);
                  r = _out1263;
                  resultingOwnership = _out1264;
                  readIdents = _out1265;
                }
              }
            } else if (_source279.is_Nullable) {
              DAST._IType _4589___mcc_h1138 = _source279.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out1266;
                DCOMP._IOwnership _out1267;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out1266, out _out1267, out _out1268);
                r = _out1266;
                resultingOwnership = _out1267;
                readIdents = _out1268;
              }
            } else if (_source279.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4590___mcc_h1140 = _source279.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1269;
                DCOMP._IOwnership _out1270;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1269, out _out1270, out _out1271);
                r = _out1269;
                resultingOwnership = _out1270;
                readIdents = _out1271;
              }
            } else if (_source279.is_Array) {
              DAST._IType _4591___mcc_h1142 = _source279.dtor_element;
              BigInteger _4592___mcc_h1143 = _source279.dtor_dims;
              {
                RAST._IExpr _out1272;
                DCOMP._IOwnership _out1273;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1274;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1272, out _out1273, out _out1274);
                r = _out1272;
                resultingOwnership = _out1273;
                readIdents = _out1274;
              }
            } else if (_source279.is_Seq) {
              DAST._IType _4593___mcc_h1146 = _source279.dtor_element;
              {
                RAST._IExpr _out1275;
                DCOMP._IOwnership _out1276;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1277;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1275, out _out1276, out _out1277);
                r = _out1275;
                resultingOwnership = _out1276;
                readIdents = _out1277;
              }
            } else if (_source279.is_Set) {
              DAST._IType _4594___mcc_h1148 = _source279.dtor_element;
              {
                RAST._IExpr _out1278;
                DCOMP._IOwnership _out1279;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1278, out _out1279, out _out1280);
                r = _out1278;
                resultingOwnership = _out1279;
                readIdents = _out1280;
              }
            } else if (_source279.is_Multiset) {
              DAST._IType _4595___mcc_h1150 = _source279.dtor_element;
              {
                RAST._IExpr _out1281;
                DCOMP._IOwnership _out1282;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1281, out _out1282, out _out1283);
                r = _out1281;
                resultingOwnership = _out1282;
                readIdents = _out1283;
              }
            } else if (_source279.is_Map) {
              DAST._IType _4596___mcc_h1152 = _source279.dtor_key;
              DAST._IType _4597___mcc_h1153 = _source279.dtor_value;
              {
                RAST._IExpr _out1284;
                DCOMP._IOwnership _out1285;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1286;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1284, out _out1285, out _out1286);
                r = _out1284;
                resultingOwnership = _out1285;
                readIdents = _out1286;
              }
            } else if (_source279.is_SetBuilder) {
              DAST._IType _4598___mcc_h1156 = _source279.dtor_element;
              {
                RAST._IExpr _out1287;
                DCOMP._IOwnership _out1288;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1289;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1287, out _out1288, out _out1289);
                r = _out1287;
                resultingOwnership = _out1288;
                readIdents = _out1289;
              }
            } else if (_source279.is_MapBuilder) {
              DAST._IType _4599___mcc_h1158 = _source279.dtor_key;
              DAST._IType _4600___mcc_h1159 = _source279.dtor_value;
              {
                RAST._IExpr _out1290;
                DCOMP._IOwnership _out1291;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1290, out _out1291, out _out1292);
                r = _out1290;
                resultingOwnership = _out1291;
                readIdents = _out1292;
              }
            } else if (_source279.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4601___mcc_h1162 = _source279.dtor_args;
              DAST._IType _4602___mcc_h1163 = _source279.dtor_result;
              {
                RAST._IExpr _out1293;
                DCOMP._IOwnership _out1294;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1295;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1293, out _out1294, out _out1295);
                r = _out1293;
                resultingOwnership = _out1294;
                readIdents = _out1295;
              }
            } else if (_source279.is_Primitive) {
              DAST._IPrimitive _4603___mcc_h1166 = _source279.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out1296;
                DCOMP._IOwnership _out1297;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1298;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1296, out _out1297, out _out1298);
                r = _out1296;
                resultingOwnership = _out1297;
                readIdents = _out1298;
              }
            } else if (_source279.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4604___mcc_h1168 = _source279.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out1299;
                DCOMP._IOwnership _out1300;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1301;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1299, out _out1300, out _out1301);
                r = _out1299;
                resultingOwnership = _out1300;
                readIdents = _out1301;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4605___mcc_h1170 = _source279.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1302;
                DCOMP._IOwnership _out1303;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1302, out _out1303, out _out1304);
                r = _out1302;
                resultingOwnership = _out1303;
                readIdents = _out1304;
              }
            }
          } else {
            DAST._IType _source281 = _3933___mcc_h1;
            if (_source281.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4606___mcc_h1172 = _source281.dtor_Path_i_a0;
              Dafny.ISequence<DAST._IType> _4607___mcc_h1173 = _source281.dtor_typeArgs;
              DAST._IResolvedType _4608___mcc_h1174 = _source281.dtor_resolved;
              DAST._IResolvedType _source282 = _4608___mcc_h1174;
              if (_source282.is_AllocatedDatatype) {
                DAST._IDatatypeType _4609___mcc_h1178 = _source282.dtor_datatypeType;
                {
                  RAST._IExpr _out1305;
                  DCOMP._IOwnership _out1306;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1307;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1305, out _out1306, out _out1307);
                  r = _out1305;
                  resultingOwnership = _out1306;
                  readIdents = _out1307;
                }
              } else if (_source282.is_Datatype) {
                DAST._IDatatypeType _4610___mcc_h1180 = _source282.dtor_datatypeType;
                {
                  RAST._IExpr _out1308;
                  DCOMP._IOwnership _out1309;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1310;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1308, out _out1309, out _out1310);
                  r = _out1308;
                  resultingOwnership = _out1309;
                  readIdents = _out1310;
                }
              } else if (_source282.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4611___mcc_h1182 = _source282.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4612___mcc_h1183 = _source282.dtor_attributes;
                {
                  RAST._IExpr _out1311;
                  DCOMP._IOwnership _out1312;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1311, out _out1312, out _out1313);
                  r = _out1311;
                  resultingOwnership = _out1312;
                  readIdents = _out1313;
                }
              } else {
                DAST._IType _4613___mcc_h1186 = _source282.dtor_baseType;
                DAST._INewtypeRange _4614___mcc_h1187 = _source282.dtor_range;
                bool _4615___mcc_h1188 = _source282.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4616___mcc_h1189 = _source282.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4617_attributes = _4616___mcc_h1189;
                bool _4618_erase = _4615___mcc_h1188;
                DAST._INewtypeRange _4619_range = _4614___mcc_h1187;
                DAST._IType _4620_b = _4613___mcc_h1186;
                {
                  RAST._IExpr _out1314;
                  DCOMP._IOwnership _out1315;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1314, out _out1315, out _out1316);
                  r = _out1314;
                  resultingOwnership = _out1315;
                  readIdents = _out1316;
                }
              }
            } else if (_source281.is_Nullable) {
              DAST._IType _4621___mcc_h1194 = _source281.dtor_Nullable_i_a0;
              {
                RAST._IExpr _out1317;
                DCOMP._IOwnership _out1318;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1319;
                (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out1317, out _out1318, out _out1319);
                r = _out1317;
                resultingOwnership = _out1318;
                readIdents = _out1319;
              }
            } else if (_source281.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4622___mcc_h1196 = _source281.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1320;
                DCOMP._IOwnership _out1321;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1322;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1320, out _out1321, out _out1322);
                r = _out1320;
                resultingOwnership = _out1321;
                readIdents = _out1322;
              }
            } else if (_source281.is_Array) {
              DAST._IType _4623___mcc_h1198 = _source281.dtor_element;
              BigInteger _4624___mcc_h1199 = _source281.dtor_dims;
              {
                RAST._IExpr _out1323;
                DCOMP._IOwnership _out1324;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1323, out _out1324, out _out1325);
                r = _out1323;
                resultingOwnership = _out1324;
                readIdents = _out1325;
              }
            } else if (_source281.is_Seq) {
              DAST._IType _4625___mcc_h1202 = _source281.dtor_element;
              {
                RAST._IExpr _out1326;
                DCOMP._IOwnership _out1327;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1328;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1326, out _out1327, out _out1328);
                r = _out1326;
                resultingOwnership = _out1327;
                readIdents = _out1328;
              }
            } else if (_source281.is_Set) {
              DAST._IType _4626___mcc_h1204 = _source281.dtor_element;
              {
                RAST._IExpr _out1329;
                DCOMP._IOwnership _out1330;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1331;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1329, out _out1330, out _out1331);
                r = _out1329;
                resultingOwnership = _out1330;
                readIdents = _out1331;
              }
            } else if (_source281.is_Multiset) {
              DAST._IType _4627___mcc_h1206 = _source281.dtor_element;
              {
                RAST._IExpr _out1332;
                DCOMP._IOwnership _out1333;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1334;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1332, out _out1333, out _out1334);
                r = _out1332;
                resultingOwnership = _out1333;
                readIdents = _out1334;
              }
            } else if (_source281.is_Map) {
              DAST._IType _4628___mcc_h1208 = _source281.dtor_key;
              DAST._IType _4629___mcc_h1209 = _source281.dtor_value;
              {
                RAST._IExpr _out1335;
                DCOMP._IOwnership _out1336;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1335, out _out1336, out _out1337);
                r = _out1335;
                resultingOwnership = _out1336;
                readIdents = _out1337;
              }
            } else if (_source281.is_SetBuilder) {
              DAST._IType _4630___mcc_h1212 = _source281.dtor_element;
              {
                RAST._IExpr _out1338;
                DCOMP._IOwnership _out1339;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1340;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1338, out _out1339, out _out1340);
                r = _out1338;
                resultingOwnership = _out1339;
                readIdents = _out1340;
              }
            } else if (_source281.is_MapBuilder) {
              DAST._IType _4631___mcc_h1214 = _source281.dtor_key;
              DAST._IType _4632___mcc_h1215 = _source281.dtor_value;
              {
                RAST._IExpr _out1341;
                DCOMP._IOwnership _out1342;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1341, out _out1342, out _out1343);
                r = _out1341;
                resultingOwnership = _out1342;
                readIdents = _out1343;
              }
            } else if (_source281.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4633___mcc_h1218 = _source281.dtor_args;
              DAST._IType _4634___mcc_h1219 = _source281.dtor_result;
              {
                RAST._IExpr _out1344;
                DCOMP._IOwnership _out1345;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1344, out _out1345, out _out1346);
                r = _out1344;
                resultingOwnership = _out1345;
                readIdents = _out1346;
              }
            } else if (_source281.is_Primitive) {
              DAST._IPrimitive _4635___mcc_h1222 = _source281.dtor_Primitive_i_a0;
              DAST._IPrimitive _source283 = _4635___mcc_h1222;
              if (_source283.is_Int) {
                {
                  RAST._IType _4636_rhsType;
                  RAST._IType _out1347;
                  _out1347 = (this).GenType(_3927_fromTpe, true, false);
                  _4636_rhsType = _out1347;
                  RAST._IExpr _4637_recursiveGen;
                  DCOMP._IOwnership _4638___v117;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4639_recIdents;
                  RAST._IExpr _out1348;
                  DCOMP._IOwnership _out1349;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
                  (this).GenExpr(_3926_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1348, out _out1349, out _out1350);
                  _4637_recursiveGen = _out1348;
                  _4638___v117 = _out1349;
                  _4639_recIdents = _out1350;
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1((_4637_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")));
                  RAST._IExpr _out1351;
                  DCOMP._IOwnership _out1352;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1351, out _out1352);
                  r = _out1351;
                  resultingOwnership = _out1352;
                  readIdents = _4639_recIdents;
                }
              } else if (_source283.is_Real) {
                {
                  RAST._IExpr _out1353;
                  DCOMP._IOwnership _out1354;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1355;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1353, out _out1354, out _out1355);
                  r = _out1353;
                  resultingOwnership = _out1354;
                  readIdents = _out1355;
                }
              } else if (_source283.is_String) {
                {
                  RAST._IExpr _out1356;
                  DCOMP._IOwnership _out1357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1356, out _out1357, out _out1358);
                  r = _out1356;
                  resultingOwnership = _out1357;
                  readIdents = _out1358;
                }
              } else if (_source283.is_Bool) {
                {
                  RAST._IExpr _out1359;
                  DCOMP._IOwnership _out1360;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1361;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1359, out _out1360, out _out1361);
                  r = _out1359;
                  resultingOwnership = _out1360;
                  readIdents = _out1361;
                }
              } else {
                {
                  RAST._IExpr _out1362;
                  DCOMP._IOwnership _out1363;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1364;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1362, out _out1363, out _out1364);
                  r = _out1362;
                  resultingOwnership = _out1363;
                  readIdents = _out1364;
                }
              }
            } else if (_source281.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4640___mcc_h1224 = _source281.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out1365;
                DCOMP._IOwnership _out1366;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1367;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1365, out _out1366, out _out1367);
                r = _out1365;
                resultingOwnership = _out1366;
                readIdents = _out1367;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4641___mcc_h1226 = _source281.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1368;
                DCOMP._IOwnership _out1369;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1370;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1368, out _out1369, out _out1370);
                r = _out1368;
                resultingOwnership = _out1369;
                readIdents = _out1370;
              }
            }
          }
        } else if (_source240.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _4642___mcc_h1228 = _source240.dtor_Passthrough_i_a0;
          DAST._IType _source284 = _3933___mcc_h1;
          if (_source284.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4643___mcc_h1232 = _source284.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4644___mcc_h1233 = _source284.dtor_typeArgs;
            DAST._IResolvedType _4645___mcc_h1234 = _source284.dtor_resolved;
            DAST._IResolvedType _source285 = _4645___mcc_h1234;
            if (_source285.is_AllocatedDatatype) {
              DAST._IDatatypeType _4646___mcc_h1238 = _source285.dtor_datatypeType;
              {
                RAST._IExpr _out1371;
                DCOMP._IOwnership _out1372;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1373;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1371, out _out1372, out _out1373);
                r = _out1371;
                resultingOwnership = _out1372;
                readIdents = _out1373;
              }
            } else if (_source285.is_Datatype) {
              DAST._IDatatypeType _4647___mcc_h1240 = _source285.dtor_datatypeType;
              {
                RAST._IExpr _out1374;
                DCOMP._IOwnership _out1375;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1374, out _out1375, out _out1376);
                r = _out1374;
                resultingOwnership = _out1375;
                readIdents = _out1376;
              }
            } else if (_source285.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4648___mcc_h1242 = _source285.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4649___mcc_h1243 = _source285.dtor_attributes;
              {
                RAST._IExpr _out1377;
                DCOMP._IOwnership _out1378;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1377, out _out1378, out _out1379);
                r = _out1377;
                resultingOwnership = _out1378;
                readIdents = _out1379;
              }
            } else {
              DAST._IType _4650___mcc_h1246 = _source285.dtor_baseType;
              DAST._INewtypeRange _4651___mcc_h1247 = _source285.dtor_range;
              bool _4652___mcc_h1248 = _source285.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4653___mcc_h1249 = _source285.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4654_attributes = _4653___mcc_h1249;
              bool _4655_erase = _4652___mcc_h1248;
              DAST._INewtypeRange _4656_range = _4651___mcc_h1247;
              DAST._IType _4657_b = _4650___mcc_h1246;
              {
                RAST._IExpr _out1380;
                DCOMP._IOwnership _out1381;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1382;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1380, out _out1381, out _out1382);
                r = _out1380;
                resultingOwnership = _out1381;
                readIdents = _out1382;
              }
            }
          } else if (_source284.is_Nullable) {
            DAST._IType _4658___mcc_h1254 = _source284.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out1383;
              DCOMP._IOwnership _out1384;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1385;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out1383, out _out1384, out _out1385);
              r = _out1383;
              resultingOwnership = _out1384;
              readIdents = _out1385;
            }
          } else if (_source284.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4659___mcc_h1256 = _source284.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out1386;
              DCOMP._IOwnership _out1387;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1386, out _out1387, out _out1388);
              r = _out1386;
              resultingOwnership = _out1387;
              readIdents = _out1388;
            }
          } else if (_source284.is_Array) {
            DAST._IType _4660___mcc_h1258 = _source284.dtor_element;
            BigInteger _4661___mcc_h1259 = _source284.dtor_dims;
            {
              RAST._IExpr _out1389;
              DCOMP._IOwnership _out1390;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1389, out _out1390, out _out1391);
              r = _out1389;
              resultingOwnership = _out1390;
              readIdents = _out1391;
            }
          } else if (_source284.is_Seq) {
            DAST._IType _4662___mcc_h1262 = _source284.dtor_element;
            {
              RAST._IExpr _out1392;
              DCOMP._IOwnership _out1393;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1394;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1392, out _out1393, out _out1394);
              r = _out1392;
              resultingOwnership = _out1393;
              readIdents = _out1394;
            }
          } else if (_source284.is_Set) {
            DAST._IType _4663___mcc_h1264 = _source284.dtor_element;
            {
              RAST._IExpr _out1395;
              DCOMP._IOwnership _out1396;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1397;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1395, out _out1396, out _out1397);
              r = _out1395;
              resultingOwnership = _out1396;
              readIdents = _out1397;
            }
          } else if (_source284.is_Multiset) {
            DAST._IType _4664___mcc_h1266 = _source284.dtor_element;
            {
              RAST._IExpr _out1398;
              DCOMP._IOwnership _out1399;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1400;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1398, out _out1399, out _out1400);
              r = _out1398;
              resultingOwnership = _out1399;
              readIdents = _out1400;
            }
          } else if (_source284.is_Map) {
            DAST._IType _4665___mcc_h1268 = _source284.dtor_key;
            DAST._IType _4666___mcc_h1269 = _source284.dtor_value;
            {
              RAST._IExpr _out1401;
              DCOMP._IOwnership _out1402;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1401, out _out1402, out _out1403);
              r = _out1401;
              resultingOwnership = _out1402;
              readIdents = _out1403;
            }
          } else if (_source284.is_SetBuilder) {
            DAST._IType _4667___mcc_h1272 = _source284.dtor_element;
            {
              RAST._IExpr _out1404;
              DCOMP._IOwnership _out1405;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1406;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1404, out _out1405, out _out1406);
              r = _out1404;
              resultingOwnership = _out1405;
              readIdents = _out1406;
            }
          } else if (_source284.is_MapBuilder) {
            DAST._IType _4668___mcc_h1274 = _source284.dtor_key;
            DAST._IType _4669___mcc_h1275 = _source284.dtor_value;
            {
              RAST._IExpr _out1407;
              DCOMP._IOwnership _out1408;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1409;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1407, out _out1408, out _out1409);
              r = _out1407;
              resultingOwnership = _out1408;
              readIdents = _out1409;
            }
          } else if (_source284.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4670___mcc_h1278 = _source284.dtor_args;
            DAST._IType _4671___mcc_h1279 = _source284.dtor_result;
            {
              RAST._IExpr _out1410;
              DCOMP._IOwnership _out1411;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1410, out _out1411, out _out1412);
              r = _out1410;
              resultingOwnership = _out1411;
              readIdents = _out1412;
            }
          } else if (_source284.is_Primitive) {
            DAST._IPrimitive _4672___mcc_h1282 = _source284.dtor_Primitive_i_a0;
            DAST._IPrimitive _source286 = _4672___mcc_h1282;
            if (_source286.is_Int) {
              {
                RAST._IType _4673_rhsType;
                RAST._IType _out1413;
                _out1413 = (this).GenType(_3927_fromTpe, true, false);
                _4673_rhsType = _out1413;
                RAST._IExpr _4674_recursiveGen;
                DCOMP._IOwnership _4675___v115;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4676_recIdents;
                RAST._IExpr _out1414;
                DCOMP._IOwnership _out1415;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                (this).GenExpr(_3926_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1414, out _out1415, out _out1416);
                _4674_recursiveGen = _out1414;
                _4675___v115 = _out1415;
                _4676_recIdents = _out1416;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_4674_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out1417;
                DCOMP._IOwnership _out1418;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1417, out _out1418);
                r = _out1417;
                resultingOwnership = _out1418;
                readIdents = _4676_recIdents;
              }
            } else if (_source286.is_Real) {
              {
                RAST._IExpr _out1419;
                DCOMP._IOwnership _out1420;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1421;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1419, out _out1420, out _out1421);
                r = _out1419;
                resultingOwnership = _out1420;
                readIdents = _out1421;
              }
            } else if (_source286.is_String) {
              {
                RAST._IExpr _out1422;
                DCOMP._IOwnership _out1423;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1422, out _out1423, out _out1424);
                r = _out1422;
                resultingOwnership = _out1423;
                readIdents = _out1424;
              }
            } else if (_source286.is_Bool) {
              {
                RAST._IExpr _out1425;
                DCOMP._IOwnership _out1426;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1427;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1425, out _out1426, out _out1427);
                r = _out1425;
                resultingOwnership = _out1426;
                readIdents = _out1427;
              }
            } else {
              {
                RAST._IExpr _out1428;
                DCOMP._IOwnership _out1429;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1430;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1428, out _out1429, out _out1430);
                r = _out1428;
                resultingOwnership = _out1429;
                readIdents = _out1430;
              }
            }
          } else if (_source284.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4677___mcc_h1284 = _source284.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _4678_recursiveGen;
              DCOMP._IOwnership _4679___v120;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4680_recIdents;
              RAST._IExpr _out1431;
              DCOMP._IOwnership _out1432;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1433;
              (this).GenExpr(_3926_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1431, out _out1432, out _out1433);
              _4678_recursiveGen = _out1431;
              _4679___v120 = _out1432;
              _4680_recIdents = _out1433;
              RAST._IType _4681_toTpeGen;
              RAST._IType _out1434;
              _out1434 = (this).GenType(_3928_toTpe, true, false);
              _4681_toTpeGen = _out1434;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_4678_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_4681_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out1435;
              DCOMP._IOwnership _out1436;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1435, out _out1436);
              r = _out1435;
              resultingOwnership = _out1436;
              readIdents = _4680_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4682___mcc_h1286 = _source284.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out1437;
              DCOMP._IOwnership _out1438;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1437, out _out1438, out _out1439);
              r = _out1437;
              resultingOwnership = _out1438;
              readIdents = _out1439;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _4683___mcc_h1288 = _source240.dtor_TypeArg_i_a0;
          DAST._IType _source287 = _3933___mcc_h1;
          if (_source287.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4684___mcc_h1292 = _source287.dtor_Path_i_a0;
            Dafny.ISequence<DAST._IType> _4685___mcc_h1293 = _source287.dtor_typeArgs;
            DAST._IResolvedType _4686___mcc_h1294 = _source287.dtor_resolved;
            DAST._IResolvedType _source288 = _4686___mcc_h1294;
            if (_source288.is_AllocatedDatatype) {
              DAST._IDatatypeType _4687___mcc_h1298 = _source288.dtor_datatypeType;
              {
                RAST._IExpr _out1440;
                DCOMP._IOwnership _out1441;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1442;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1440, out _out1441, out _out1442);
                r = _out1440;
                resultingOwnership = _out1441;
                readIdents = _out1442;
              }
            } else if (_source288.is_Datatype) {
              DAST._IDatatypeType _4688___mcc_h1300 = _source288.dtor_datatypeType;
              {
                RAST._IExpr _out1443;
                DCOMP._IOwnership _out1444;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1443, out _out1444, out _out1445);
                r = _out1443;
                resultingOwnership = _out1444;
                readIdents = _out1445;
              }
            } else if (_source288.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4689___mcc_h1302 = _source288.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4690___mcc_h1303 = _source288.dtor_attributes;
              {
                RAST._IExpr _out1446;
                DCOMP._IOwnership _out1447;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1446, out _out1447, out _out1448);
                r = _out1446;
                resultingOwnership = _out1447;
                readIdents = _out1448;
              }
            } else {
              DAST._IType _4691___mcc_h1306 = _source288.dtor_baseType;
              DAST._INewtypeRange _4692___mcc_h1307 = _source288.dtor_range;
              bool _4693___mcc_h1308 = _source288.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4694___mcc_h1309 = _source288.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4695_attributes = _4694___mcc_h1309;
              bool _4696_erase = _4693___mcc_h1308;
              DAST._INewtypeRange _4697_range = _4692___mcc_h1307;
              DAST._IType _4698_b = _4691___mcc_h1306;
              {
                RAST._IExpr _out1449;
                DCOMP._IOwnership _out1450;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1451;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1449, out _out1450, out _out1451);
                r = _out1449;
                resultingOwnership = _out1450;
                readIdents = _out1451;
              }
            }
          } else if (_source287.is_Nullable) {
            DAST._IType _4699___mcc_h1314 = _source287.dtor_Nullable_i_a0;
            {
              RAST._IExpr _out1452;
              DCOMP._IOwnership _out1453;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1454;
              (this).GenExprConvertToNullable(e, selfIdent, env, expectedOwnership, out _out1452, out _out1453, out _out1454);
              r = _out1452;
              resultingOwnership = _out1453;
              readIdents = _out1454;
            }
          } else if (_source287.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4700___mcc_h1316 = _source287.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out1455;
              DCOMP._IOwnership _out1456;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1455, out _out1456, out _out1457);
              r = _out1455;
              resultingOwnership = _out1456;
              readIdents = _out1457;
            }
          } else if (_source287.is_Array) {
            DAST._IType _4701___mcc_h1318 = _source287.dtor_element;
            BigInteger _4702___mcc_h1319 = _source287.dtor_dims;
            {
              RAST._IExpr _out1458;
              DCOMP._IOwnership _out1459;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1458, out _out1459, out _out1460);
              r = _out1458;
              resultingOwnership = _out1459;
              readIdents = _out1460;
            }
          } else if (_source287.is_Seq) {
            DAST._IType _4703___mcc_h1322 = _source287.dtor_element;
            {
              RAST._IExpr _out1461;
              DCOMP._IOwnership _out1462;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1463;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1461, out _out1462, out _out1463);
              r = _out1461;
              resultingOwnership = _out1462;
              readIdents = _out1463;
            }
          } else if (_source287.is_Set) {
            DAST._IType _4704___mcc_h1324 = _source287.dtor_element;
            {
              RAST._IExpr _out1464;
              DCOMP._IOwnership _out1465;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1466;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1464, out _out1465, out _out1466);
              r = _out1464;
              resultingOwnership = _out1465;
              readIdents = _out1466;
            }
          } else if (_source287.is_Multiset) {
            DAST._IType _4705___mcc_h1326 = _source287.dtor_element;
            {
              RAST._IExpr _out1467;
              DCOMP._IOwnership _out1468;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1467, out _out1468, out _out1469);
              r = _out1467;
              resultingOwnership = _out1468;
              readIdents = _out1469;
            }
          } else if (_source287.is_Map) {
            DAST._IType _4706___mcc_h1328 = _source287.dtor_key;
            DAST._IType _4707___mcc_h1329 = _source287.dtor_value;
            {
              RAST._IExpr _out1470;
              DCOMP._IOwnership _out1471;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1470, out _out1471, out _out1472);
              r = _out1470;
              resultingOwnership = _out1471;
              readIdents = _out1472;
            }
          } else if (_source287.is_SetBuilder) {
            DAST._IType _4708___mcc_h1332 = _source287.dtor_element;
            {
              RAST._IExpr _out1473;
              DCOMP._IOwnership _out1474;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1475;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1473, out _out1474, out _out1475);
              r = _out1473;
              resultingOwnership = _out1474;
              readIdents = _out1475;
            }
          } else if (_source287.is_MapBuilder) {
            DAST._IType _4709___mcc_h1334 = _source287.dtor_key;
            DAST._IType _4710___mcc_h1335 = _source287.dtor_value;
            {
              RAST._IExpr _out1476;
              DCOMP._IOwnership _out1477;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1478;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1476, out _out1477, out _out1478);
              r = _out1476;
              resultingOwnership = _out1477;
              readIdents = _out1478;
            }
          } else if (_source287.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4711___mcc_h1338 = _source287.dtor_args;
            DAST._IType _4712___mcc_h1339 = _source287.dtor_result;
            {
              RAST._IExpr _out1479;
              DCOMP._IOwnership _out1480;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1479, out _out1480, out _out1481);
              r = _out1479;
              resultingOwnership = _out1480;
              readIdents = _out1481;
            }
          } else if (_source287.is_Primitive) {
            DAST._IPrimitive _4713___mcc_h1342 = _source287.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out1482;
              DCOMP._IOwnership _out1483;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1482, out _out1483, out _out1484);
              r = _out1482;
              resultingOwnership = _out1483;
              readIdents = _out1484;
            }
          } else if (_source287.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4714___mcc_h1344 = _source287.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out1485;
              DCOMP._IOwnership _out1486;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1487;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1485, out _out1486, out _out1487);
              r = _out1485;
              resultingOwnership = _out1486;
              readIdents = _out1487;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4715___mcc_h1346 = _source287.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out1488;
              DCOMP._IOwnership _out1489;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1490;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1488, out _out1489, out _out1490);
              r = _out1488;
              resultingOwnership = _out1489;
              readIdents = _out1490;
            }
          }
        }
      }
      return ;
    }
    public void GenIdent(Dafny.ISequence<Dafny.Rune> rName, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      r = RAST.Expr.create_Identifier(rName);
      Std.Wrappers._IOption<RAST._IType> _4716_tpe;
      _4716_tpe = (env).GetType(rName);
      Std.Wrappers._IOption<RAST._IType> _4717_placeboOpt;
      _4717_placeboOpt = (((_4716_tpe).is_Some) ? (((_4716_tpe).dtor_value).ExtractMaybePlacebo()) : (Std.Wrappers.Option<RAST._IType>.create_None()));
      bool _4718_currentlyBorrowed;
      _4718_currentlyBorrowed = (env).IsBorrowed(rName);
      bool _4719_noNeedOfClone;
      _4719_noNeedOfClone = (env).CanReadWithoutClone(rName);
      if ((_4717_placeboOpt).is_Some) {
        r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("read"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
        _4718_currentlyBorrowed = false;
        _4719_noNeedOfClone = true;
      }
      if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) {
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
        if (((_4716_tpe).is_Some) && (((_4716_tpe).dtor_value).IsObjectOrPointer())) {
          r = ((this).modify__macro).Apply1(r);
        } else {
          r = RAST.__default.BorrowMut(r);
        }
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
        if (!(_4719_noNeedOfClone)) {
          r = RAST.__default.Clone(r);
        }
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
        if (!(_4719_noNeedOfClone)) {
          r = RAST.__default.Clone(r);
        }
        r = RAST.__default.BoxNew(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwnedBox();
      } else if (_4718_currentlyBorrowed) {
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        if (((_4716_tpe).is_Some) && (((_4716_tpe).dtor_value).IsPointer())) {
          r = ((this).read__macro).Apply1(r);
        } else {
          r = RAST.__default.Borrow(r);
        }
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      }
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(rName);
      return ;
    }
    public void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source289 = e;
      if (_source289.is_Literal) {
        DAST._ILiteral _4720___mcc_h0 = _source289.dtor_Literal_i_a0;
        RAST._IExpr _out1491;
        DCOMP._IOwnership _out1492;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
        (this).GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out1491, out _out1492, out _out1493);
        r = _out1491;
        resultingOwnership = _out1492;
        readIdents = _out1493;
      } else if (_source289.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _4721___mcc_h1 = _source289.dtor_Ident_i_a0;
        Dafny.ISequence<Dafny.Rune> _4722_name = _4721___mcc_h1;
        {
          RAST._IExpr _out1494;
          DCOMP._IOwnership _out1495;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
          (this).GenIdent(DCOMP.__default.escapeName(_4722_name), selfIdent, env, expectedOwnership, out _out1494, out _out1495, out _out1496);
          r = _out1494;
          resultingOwnership = _out1495;
          readIdents = _out1496;
        }
      } else if (_source289.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4723___mcc_h2 = _source289.dtor_Companion_i_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4724_path = _4723___mcc_h2;
        {
          RAST._IExpr _out1497;
          _out1497 = DCOMP.COMP.GenPathExpr(_4724_path);
          r = _out1497;
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else {
            RAST._IExpr _out1498;
            DCOMP._IOwnership _out1499;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1498, out _out1499);
            r = _out1498;
            resultingOwnership = _out1499;
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source289.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _4725___mcc_h3 = _source289.dtor_Tuple_i_a0;
        Dafny.ISequence<DAST._IExpression> _4726_values = _4725___mcc_h3;
        {
          Dafny.ISequence<RAST._IExpr> _4727_exprs;
          _4727_exprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _hi33 = new BigInteger((_4726_values).Count);
          for (BigInteger _4728_i = BigInteger.Zero; _4728_i < _hi33; _4728_i++) {
            RAST._IExpr _4729_recursiveGen;
            DCOMP._IOwnership _4730___v123;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4731_recIdents;
            RAST._IExpr _out1500;
            DCOMP._IOwnership _out1501;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
            (this).GenExpr((_4726_values).Select(_4728_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1500, out _out1501, out _out1502);
            _4729_recursiveGen = _out1500;
            _4730___v123 = _out1501;
            _4731_recIdents = _out1502;
            _4727_exprs = Dafny.Sequence<RAST._IExpr>.Concat(_4727_exprs, Dafny.Sequence<RAST._IExpr>.FromElements(_4729_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4731_recIdents);
          }
          r = RAST.Expr.create_Tuple(_4727_exprs);
          RAST._IExpr _out1503;
          DCOMP._IOwnership _out1504;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1503, out _out1504);
          r = _out1503;
          resultingOwnership = _out1504;
          return ;
        }
      } else if (_source289.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4732___mcc_h4 = _source289.dtor_path;
        Dafny.ISequence<DAST._IType> _4733___mcc_h5 = _source289.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4734___mcc_h6 = _source289.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4735_args = _4734___mcc_h6;
        Dafny.ISequence<DAST._IType> _4736_typeArgs = _4733___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4737_path = _4732___mcc_h4;
        {
          RAST._IExpr _out1505;
          _out1505 = DCOMP.COMP.GenPathExpr(_4737_path);
          r = _out1505;
          if ((new BigInteger((_4736_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _4738_typeExprs;
            _4738_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi34 = new BigInteger((_4736_typeArgs).Count);
            for (BigInteger _4739_i = BigInteger.Zero; _4739_i < _hi34; _4739_i++) {
              RAST._IType _4740_typeExpr;
              RAST._IType _out1506;
              _out1506 = (this).GenType((_4736_typeArgs).Select(_4739_i), false, false);
              _4740_typeExpr = _out1506;
              _4738_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4738_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4740_typeExpr));
            }
            r = (r).ApplyType(_4738_typeExprs);
          }
          r = (r).MSel((this).allocate__fn);
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _4741_arguments;
          _4741_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi35 = new BigInteger((_4735_args).Count);
          for (BigInteger _4742_i = BigInteger.Zero; _4742_i < _hi35; _4742_i++) {
            RAST._IExpr _4743_recursiveGen;
            DCOMP._IOwnership _4744___v124;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4745_recIdents;
            RAST._IExpr _out1507;
            DCOMP._IOwnership _out1508;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
            (this).GenExpr((_4735_args).Select(_4742_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1507, out _out1508, out _out1509);
            _4743_recursiveGen = _out1507;
            _4744___v124 = _out1508;
            _4745_recIdents = _out1509;
            _4741_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4741_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_4743_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4745_recIdents);
          }
          r = (r).Apply(_4741_arguments);
          RAST._IExpr _out1510;
          DCOMP._IOwnership _out1511;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1510, out _out1511);
          r = _out1510;
          resultingOwnership = _out1511;
          return ;
        }
      } else if (_source289.is_NewUninitArray) {
        Dafny.ISequence<DAST._IExpression> _4746___mcc_h7 = _source289.dtor_dims;
        DAST._IType _4747___mcc_h8 = _source289.dtor_typ;
        DAST._IType _4748_typ = _4747___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _4749_dims = _4746___mcc_h7;
        {
          if ((new BigInteger(16)) < (new BigInteger((_4749_dims).Count))) {
            Dafny.ISequence<Dafny.Rune> _4750_msg;
            _4750_msg = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsupported: Creation of arrays of more than 16 dimensions");
            if ((this.error).is_None) {
              (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_4750_msg);
            }
            r = RAST.Expr.create_RawExpr(_4750_msg);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          } else {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
            RAST._IType _4751_typeGen;
            RAST._IType _out1512;
            _out1512 = (this).GenType(_4748_typ, false, false);
            _4751_typeGen = _out1512;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            Dafny.ISequence<RAST._IExpr> _4752_dimExprs;
            _4752_dimExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _hi36 = new BigInteger((_4749_dims).Count);
            for (BigInteger _4753_i = BigInteger.Zero; _4753_i < _hi36; _4753_i++) {
              RAST._IExpr _4754_recursiveGen;
              DCOMP._IOwnership _4755___v125;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4756_recIdents;
              RAST._IExpr _out1513;
              DCOMP._IOwnership _out1514;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1515;
              (this).GenExpr((_4749_dims).Select(_4753_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1513, out _out1514, out _out1515);
              _4754_recursiveGen = _out1513;
              _4755___v125 = _out1514;
              _4756_recIdents = _out1515;
              _4752_dimExprs = Dafny.Sequence<RAST._IExpr>.Concat(_4752_dimExprs, Dafny.Sequence<RAST._IExpr>.FromElements(((_4754_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_usize"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4756_recIdents);
            }
            if ((new BigInteger((_4749_dims).Count)) > (BigInteger.One)) {
              Dafny.ISequence<Dafny.Rune> _4757_class__name;
              _4757_class__name = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Array"), Std.Strings.__default.OfNat(new BigInteger((_4749_dims).Count)));
              r = ((((RAST.__default.dafny__runtime).MSel(_4757_class__name)).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4751_typeGen))).MSel((this).placebos__usize)).Apply(_4752_dimExprs);
            } else {
              r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("array"))).MSel((this).placebos__usize)).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4751_typeGen))).Apply(_4752_dimExprs);
            }
          }
          RAST._IExpr _out1516;
          DCOMP._IOwnership _out1517;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1516, out _out1517);
          r = _out1516;
          resultingOwnership = _out1517;
        }
      } else if (_source289.is_ArrayIndexToInt) {
        DAST._IExpression _4758___mcc_h9 = _source289.dtor_value;
        DAST._IExpression _4759_underlying = _4758___mcc_h9;
        {
          RAST._IExpr _4760_recursiveGen;
          DCOMP._IOwnership _4761___v126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4762_recIdents;
          RAST._IExpr _out1518;
          DCOMP._IOwnership _out1519;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
          (this).GenExpr(_4759_underlying, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1518, out _out1519, out _out1520);
          _4760_recursiveGen = _out1518;
          _4761___v126 = _out1519;
          _4762_recIdents = _out1520;
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(_4760_recursiveGen);
          readIdents = _4762_recIdents;
          RAST._IExpr _out1521;
          DCOMP._IOwnership _out1522;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1521, out _out1522);
          r = _out1521;
          resultingOwnership = _out1522;
        }
      } else if (_source289.is_FinalizeNewArray) {
        DAST._IExpression _4763___mcc_h10 = _source289.dtor_value;
        DAST._IType _4764___mcc_h11 = _source289.dtor_typ;
        DAST._IType _4765_typ = _4764___mcc_h11;
        DAST._IExpression _4766_underlying = _4763___mcc_h10;
        {
          RAST._IType _4767_tpe;
          RAST._IType _out1523;
          _out1523 = (this).GenType(_4765_typ, false, false);
          _4767_tpe = _out1523;
          RAST._IExpr _4768_recursiveGen;
          DCOMP._IOwnership _4769___v127;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4770_recIdents;
          RAST._IExpr _out1524;
          DCOMP._IOwnership _out1525;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1526;
          (this).GenExpr(_4766_underlying, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1524, out _out1525, out _out1526);
          _4768_recursiveGen = _out1524;
          _4769___v127 = _out1525;
          _4770_recIdents = _out1526;
          readIdents = _4770_recIdents;
          if ((_4767_tpe).IsObjectOrPointer()) {
            RAST._IType _4771_t;
            _4771_t = (_4767_tpe).ObjectOrPointerUnderlying();
            if ((_4771_t).is_Array) {
              r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("array"))).MSel((this).array__construct)).Apply1(_4768_recursiveGen);
            } else if ((_4771_t).IsMultiArray()) {
              Dafny.ISequence<Dafny.Rune> _4772_c;
              _4772_c = (_4771_t).MultiArrayClass();
              r = (((RAST.__default.dafny__runtime).MSel(_4772_c)).MSel((this).array__construct)).Apply1(_4768_recursiveGen);
            } else {
              (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Finalize New Array with a pointer or object type to something that is not an array or a multi array: "), (_4767_tpe)._ToString(DCOMP.__default.IND)));
              r = RAST.Expr.create_RawExpr((this.error).dtor_value);
            }
          } else {
            (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Finalize New Array with a type that is not a pointer or an object: "), (_4767_tpe)._ToString(DCOMP.__default.IND)));
            r = RAST.Expr.create_RawExpr((this.error).dtor_value);
          }
          RAST._IExpr _out1527;
          DCOMP._IOwnership _out1528;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1527, out _out1528);
          r = _out1527;
          resultingOwnership = _out1528;
        }
      } else if (_source289.is_DatatypeValue) {
        DAST._IDatatypeType _4773___mcc_h12 = _source289.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _4774___mcc_h13 = _source289.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _4775___mcc_h14 = _source289.dtor_variant;
        bool _4776___mcc_h15 = _source289.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4777___mcc_h16 = _source289.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4778_values = _4777___mcc_h16;
        bool _4779_isCo = _4776___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _4780_variant = _4775___mcc_h14;
        Dafny.ISequence<DAST._IType> _4781_typeArgs = _4774___mcc_h13;
        DAST._IDatatypeType _4782_datatypeType = _4773___mcc_h12;
        {
          RAST._IExpr _out1529;
          _out1529 = DCOMP.COMP.GenPathExpr((_4782_datatypeType).dtor_path);
          r = _out1529;
          Dafny.ISequence<RAST._IType> _4783_genTypeArgs;
          _4783_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi37 = new BigInteger((_4781_typeArgs).Count);
          for (BigInteger _4784_i = BigInteger.Zero; _4784_i < _hi37; _4784_i++) {
            RAST._IType _4785_typeExpr;
            RAST._IType _out1530;
            _out1530 = (this).GenType((_4781_typeArgs).Select(_4784_i), false, false);
            _4785_typeExpr = _out1530;
            _4783_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_4783_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_4785_typeExpr));
          }
          if ((new BigInteger((_4781_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_4783_genTypeArgs);
          }
          r = (r).MSel(DCOMP.__default.escapeName(_4780_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _4786_assignments;
          _4786_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi38 = new BigInteger((_4778_values).Count);
          for (BigInteger _4787_i = BigInteger.Zero; _4787_i < _hi38; _4787_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs63 = (_4778_values).Select(_4787_i);
            Dafny.ISequence<Dafny.Rune> _4788_name = _let_tmp_rhs63.dtor__0;
            DAST._IExpression _4789_value = _let_tmp_rhs63.dtor__1;
            if (_4779_isCo) {
              RAST._IExpr _4790_recursiveGen;
              DCOMP._IOwnership _4791___v128;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4792_recIdents;
              RAST._IExpr _out1531;
              DCOMP._IOwnership _out1532;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
              (this).GenExpr(_4789_value, selfIdent, DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out1531, out _out1532, out _out1533);
              _4790_recursiveGen = _out1531;
              _4791___v128 = _out1532;
              _4792_recIdents = _out1533;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4792_recIdents);
              Dafny.ISequence<Dafny.Rune> _4793_allReadCloned;
              _4793_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_4792_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _4794_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_4792_recIdents).Elements) {
                  _4794_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_4792_recIdents).Contains(_4794_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 3659)");
              after__ASSIGN_SUCH_THAT_2: ;
                _4793_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4793_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), _4794_next), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _4794_next), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _4792_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4792_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4794_next));
              }
              Dafny.ISequence<Dafny.Rune> _4795_assigned;
              _4795_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _4793_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_4790_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _4786_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_4786_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(_4788_name, RAST.Expr.create_RawExpr(_4795_assigned))));
            } else {
              RAST._IExpr _4796_recursiveGen;
              DCOMP._IOwnership _4797___v129;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4798_recIdents;
              RAST._IExpr _out1534;
              DCOMP._IOwnership _out1535;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
              (this).GenExpr(_4789_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1534, out _out1535, out _out1536);
              _4796_recursiveGen = _out1534;
              _4797___v129 = _out1535;
              _4798_recIdents = _out1536;
              _4786_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_4786_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(_4788_name, _4796_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4798_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _4786_assignments);
          if ((this).IsRcWrapped((_4782_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out1537;
          DCOMP._IOwnership _out1538;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1537, out _out1538);
          r = _out1537;
          resultingOwnership = _out1538;
          return ;
        }
      } else if (_source289.is_Convert) {
        DAST._IExpression _4799___mcc_h17 = _source289.dtor_value;
        DAST._IType _4800___mcc_h18 = _source289.dtor_from;
        DAST._IType _4801___mcc_h19 = _source289.dtor_typ;
        {
          RAST._IExpr _out1539;
          DCOMP._IOwnership _out1540;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
          (this).GenExprConvert(e, selfIdent, env, expectedOwnership, out _out1539, out _out1540, out _out1541);
          r = _out1539;
          resultingOwnership = _out1540;
          readIdents = _out1541;
        }
      } else if (_source289.is_SeqConstruct) {
        DAST._IExpression _4802___mcc_h20 = _source289.dtor_length;
        DAST._IExpression _4803___mcc_h21 = _source289.dtor_elem;
        DAST._IExpression _4804_expr = _4803___mcc_h21;
        DAST._IExpression _4805_length = _4802___mcc_h20;
        {
          RAST._IExpr _4806_recursiveGen;
          DCOMP._IOwnership _4807___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4808_recIdents;
          RAST._IExpr _out1542;
          DCOMP._IOwnership _out1543;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
          (this).GenExpr(_4804_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1542, out _out1543, out _out1544);
          _4806_recursiveGen = _out1542;
          _4807___v133 = _out1543;
          _4808_recIdents = _out1544;
          RAST._IExpr _4809_lengthGen;
          DCOMP._IOwnership _4810___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4811_lengthIdents;
          RAST._IExpr _out1545;
          DCOMP._IOwnership _out1546;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1547;
          (this).GenExpr(_4805_length, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1545, out _out1546, out _out1547);
          _4809_lengthGen = _out1545;
          _4810___v134 = _out1546;
          _4811_lengthIdents = _out1547;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_4806_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_4809_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4808_recIdents, _4811_lengthIdents);
          RAST._IExpr _out1548;
          DCOMP._IOwnership _out1549;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1548, out _out1549);
          r = _out1548;
          resultingOwnership = _out1549;
          return ;
        }
      } else if (_source289.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _4812___mcc_h22 = _source289.dtor_elements;
        DAST._IType _4813___mcc_h23 = _source289.dtor_typ;
        DAST._IType _4814_typ = _4813___mcc_h23;
        Dafny.ISequence<DAST._IExpression> _4815_exprs = _4812___mcc_h22;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _4816_genTpe;
          RAST._IType _out1550;
          _out1550 = (this).GenType(_4814_typ, false, false);
          _4816_genTpe = _out1550;
          BigInteger _4817_i;
          _4817_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4818_args;
          _4818_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4817_i) < (new BigInteger((_4815_exprs).Count))) {
            RAST._IExpr _4819_recursiveGen;
            DCOMP._IOwnership _4820___v135;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4821_recIdents;
            RAST._IExpr _out1551;
            DCOMP._IOwnership _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            (this).GenExpr((_4815_exprs).Select(_4817_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1551, out _out1552, out _out1553);
            _4819_recursiveGen = _out1551;
            _4820___v135 = _out1552;
            _4821_recIdents = _out1553;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4821_recIdents);
            _4818_args = Dafny.Sequence<RAST._IExpr>.Concat(_4818_args, Dafny.Sequence<RAST._IExpr>.FromElements(_4819_recursiveGen));
            _4817_i = (_4817_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_4818_args);
          if ((new BigInteger((_4818_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_4816_genTpe));
          }
          RAST._IExpr _out1554;
          DCOMP._IOwnership _out1555;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1554, out _out1555);
          r = _out1554;
          resultingOwnership = _out1555;
          return ;
        }
      } else if (_source289.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _4822___mcc_h24 = _source289.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4823_exprs = _4822___mcc_h24;
        {
          Dafny.ISequence<RAST._IExpr> _4824_generatedValues;
          _4824_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4825_i;
          _4825_i = BigInteger.Zero;
          while ((_4825_i) < (new BigInteger((_4823_exprs).Count))) {
            RAST._IExpr _4826_recursiveGen;
            DCOMP._IOwnership _4827___v136;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4828_recIdents;
            RAST._IExpr _out1556;
            DCOMP._IOwnership _out1557;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1558;
            (this).GenExpr((_4823_exprs).Select(_4825_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1556, out _out1557, out _out1558);
            _4826_recursiveGen = _out1556;
            _4827___v136 = _out1557;
            _4828_recIdents = _out1558;
            _4824_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4824_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4826_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4828_recIdents);
            _4825_i = (_4825_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_4824_generatedValues);
          RAST._IExpr _out1559;
          DCOMP._IOwnership _out1560;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1559, out _out1560);
          r = _out1559;
          resultingOwnership = _out1560;
          return ;
        }
      } else if (_source289.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _4829___mcc_h25 = _source289.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4830_exprs = _4829___mcc_h25;
        {
          Dafny.ISequence<RAST._IExpr> _4831_generatedValues;
          _4831_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4832_i;
          _4832_i = BigInteger.Zero;
          while ((_4832_i) < (new BigInteger((_4830_exprs).Count))) {
            RAST._IExpr _4833_recursiveGen;
            DCOMP._IOwnership _4834___v137;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4835_recIdents;
            RAST._IExpr _out1561;
            DCOMP._IOwnership _out1562;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1563;
            (this).GenExpr((_4830_exprs).Select(_4832_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1561, out _out1562, out _out1563);
            _4833_recursiveGen = _out1561;
            _4834___v137 = _out1562;
            _4835_recIdents = _out1563;
            _4831_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4831_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4833_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4835_recIdents);
            _4832_i = (_4832_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_4831_generatedValues);
          RAST._IExpr _out1564;
          DCOMP._IOwnership _out1565;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1564, out _out1565);
          r = _out1564;
          resultingOwnership = _out1565;
          return ;
        }
      } else if (_source289.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4836___mcc_h26 = _source289.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4837_mapElems = _4836___mcc_h26;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _4838_generatedValues;
          _4838_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4839_i;
          _4839_i = BigInteger.Zero;
          while ((_4839_i) < (new BigInteger((_4837_mapElems).Count))) {
            RAST._IExpr _4840_recursiveGenKey;
            DCOMP._IOwnership _4841___v139;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4842_recIdentsKey;
            RAST._IExpr _out1566;
            DCOMP._IOwnership _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            (this).GenExpr(((_4837_mapElems).Select(_4839_i)).dtor__0, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1566, out _out1567, out _out1568);
            _4840_recursiveGenKey = _out1566;
            _4841___v139 = _out1567;
            _4842_recIdentsKey = _out1568;
            RAST._IExpr _4843_recursiveGenValue;
            DCOMP._IOwnership _4844___v140;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4845_recIdentsValue;
            RAST._IExpr _out1569;
            DCOMP._IOwnership _out1570;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1571;
            (this).GenExpr(((_4837_mapElems).Select(_4839_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1569, out _out1570, out _out1571);
            _4843_recursiveGenValue = _out1569;
            _4844___v140 = _out1570;
            _4845_recIdentsValue = _out1571;
            _4838_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_4838_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_4840_recursiveGenKey, _4843_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4842_recIdentsKey), _4845_recIdentsValue);
            _4839_i = (_4839_i) + (BigInteger.One);
          }
          _4839_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4846_arguments;
          _4846_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4839_i) < (new BigInteger((_4838_generatedValues).Count))) {
            RAST._IExpr _4847_genKey;
            _4847_genKey = ((_4838_generatedValues).Select(_4839_i)).dtor__0;
            RAST._IExpr _4848_genValue;
            _4848_genValue = ((_4838_generatedValues).Select(_4839_i)).dtor__1;
            _4846_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4846_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _4847_genKey, _4848_genValue, DAST.Format.BinaryOpFormat.create_NoFormat())));
            _4839_i = (_4839_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_4846_arguments);
          RAST._IExpr _out1572;
          DCOMP._IOwnership _out1573;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1572, out _out1573);
          r = _out1572;
          resultingOwnership = _out1573;
          return ;
        }
      } else if (_source289.is_MapBuilder) {
        DAST._IType _4849___mcc_h27 = _source289.dtor_keyType;
        DAST._IType _4850___mcc_h28 = _source289.dtor_valueType;
        DAST._IType _4851_valueType = _4850___mcc_h28;
        DAST._IType _4852_keyType = _4849___mcc_h27;
        {
          RAST._IType _4853_kType;
          RAST._IType _out1574;
          _out1574 = (this).GenType(_4852_keyType, false, false);
          _4853_kType = _out1574;
          RAST._IType _4854_vType;
          RAST._IType _out1575;
          _out1575 = (this).GenType(_4851_valueType, false, false);
          _4854_vType = _out1575;
          r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4853_kType, _4854_vType))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1576;
          DCOMP._IOwnership _out1577;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1576, out _out1577);
          r = _out1576;
          resultingOwnership = _out1577;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source289.is_SeqUpdate) {
        DAST._IExpression _4855___mcc_h29 = _source289.dtor_expr;
        DAST._IExpression _4856___mcc_h30 = _source289.dtor_indexExpr;
        DAST._IExpression _4857___mcc_h31 = _source289.dtor_value;
        DAST._IExpression _4858_value = _4857___mcc_h31;
        DAST._IExpression _4859_index = _4856___mcc_h30;
        DAST._IExpression _4860_expr = _4855___mcc_h29;
        {
          RAST._IExpr _4861_exprR;
          DCOMP._IOwnership _4862___v141;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4863_exprIdents;
          RAST._IExpr _out1578;
          DCOMP._IOwnership _out1579;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
          (this).GenExpr(_4860_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1578, out _out1579, out _out1580);
          _4861_exprR = _out1578;
          _4862___v141 = _out1579;
          _4863_exprIdents = _out1580;
          RAST._IExpr _4864_indexR;
          DCOMP._IOwnership _4865_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4866_indexIdents;
          RAST._IExpr _out1581;
          DCOMP._IOwnership _out1582;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1583;
          (this).GenExpr(_4859_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1581, out _out1582, out _out1583);
          _4864_indexR = _out1581;
          _4865_indexOwnership = _out1582;
          _4866_indexIdents = _out1583;
          RAST._IExpr _4867_valueR;
          DCOMP._IOwnership _4868_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4869_valueIdents;
          RAST._IExpr _out1584;
          DCOMP._IOwnership _out1585;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1586;
          (this).GenExpr(_4858_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1584, out _out1585, out _out1586);
          _4867_valueR = _out1584;
          _4868_valueOwnership = _out1585;
          _4869_valueIdents = _out1586;
          r = ((_4861_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4864_indexR, _4867_valueR));
          RAST._IExpr _out1587;
          DCOMP._IOwnership _out1588;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1587, out _out1588);
          r = _out1587;
          resultingOwnership = _out1588;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4863_exprIdents, _4866_indexIdents), _4869_valueIdents);
          return ;
        }
      } else if (_source289.is_MapUpdate) {
        DAST._IExpression _4870___mcc_h32 = _source289.dtor_expr;
        DAST._IExpression _4871___mcc_h33 = _source289.dtor_indexExpr;
        DAST._IExpression _4872___mcc_h34 = _source289.dtor_value;
        DAST._IExpression _4873_value = _4872___mcc_h34;
        DAST._IExpression _4874_index = _4871___mcc_h33;
        DAST._IExpression _4875_expr = _4870___mcc_h32;
        {
          RAST._IExpr _4876_exprR;
          DCOMP._IOwnership _4877___v142;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4878_exprIdents;
          RAST._IExpr _out1589;
          DCOMP._IOwnership _out1590;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1591;
          (this).GenExpr(_4875_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1589, out _out1590, out _out1591);
          _4876_exprR = _out1589;
          _4877___v142 = _out1590;
          _4878_exprIdents = _out1591;
          RAST._IExpr _4879_indexR;
          DCOMP._IOwnership _4880_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4881_indexIdents;
          RAST._IExpr _out1592;
          DCOMP._IOwnership _out1593;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1594;
          (this).GenExpr(_4874_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1592, out _out1593, out _out1594);
          _4879_indexR = _out1592;
          _4880_indexOwnership = _out1593;
          _4881_indexIdents = _out1594;
          RAST._IExpr _4882_valueR;
          DCOMP._IOwnership _4883_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4884_valueIdents;
          RAST._IExpr _out1595;
          DCOMP._IOwnership _out1596;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
          (this).GenExpr(_4873_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1595, out _out1596, out _out1597);
          _4882_valueR = _out1595;
          _4883_valueOwnership = _out1596;
          _4884_valueIdents = _out1597;
          r = ((_4876_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4879_indexR, _4882_valueR));
          RAST._IExpr _out1598;
          DCOMP._IOwnership _out1599;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1598, out _out1599);
          r = _out1598;
          resultingOwnership = _out1599;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4878_exprIdents, _4881_indexIdents), _4884_valueIdents);
          return ;
        }
      } else if (_source289.is_SetBuilder) {
        DAST._IType _4885___mcc_h35 = _source289.dtor_elemType;
        DAST._IType _4886_elemType = _4885___mcc_h35;
        {
          RAST._IType _4887_eType;
          RAST._IType _out1600;
          _out1600 = (this).GenType(_4886_elemType, false, false);
          _4887_eType = _out1600;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4887_eType))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1601;
          DCOMP._IOwnership _out1602;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1601, out _out1602);
          r = _out1601;
          resultingOwnership = _out1602;
          return ;
        }
      } else if (_source289.is_ToMultiset) {
        DAST._IExpression _4888___mcc_h36 = _source289.dtor_ToMultiset_i_a0;
        DAST._IExpression _4889_expr = _4888___mcc_h36;
        {
          RAST._IExpr _4890_recursiveGen;
          DCOMP._IOwnership _4891___v138;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4892_recIdents;
          RAST._IExpr _out1603;
          DCOMP._IOwnership _out1604;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
          (this).GenExpr(_4889_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1603, out _out1604, out _out1605);
          _4890_recursiveGen = _out1603;
          _4891___v138 = _out1604;
          _4892_recIdents = _out1605;
          r = ((_4890_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _4892_recIdents;
          RAST._IExpr _out1606;
          DCOMP._IOwnership _out1607;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1606, out _out1607);
          r = _out1606;
          resultingOwnership = _out1607;
          return ;
        }
      } else if (_source289.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source290 = selfIdent;
          if (_source290.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out1608;
              DCOMP._IOwnership _out1609;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1608, out _out1609);
              r = _out1608;
              resultingOwnership = _out1609;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4893___mcc_h318 = _source290.dtor_value;
            Dafny.ISequence<Dafny.Rune> _4894_id = _4893___mcc_h318;
            {
              r = RAST.Expr.create_Identifier(_4894_id);
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
                r = RAST.__default.BoxNew(RAST.__default.Clone(r));
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwnedBox();
              } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_4894_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_4894_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4894_id);
            }
          }
          return ;
        }
      } else if (_source289.is_Ite) {
        DAST._IExpression _4895___mcc_h37 = _source289.dtor_cond;
        DAST._IExpression _4896___mcc_h38 = _source289.dtor_thn;
        DAST._IExpression _4897___mcc_h39 = _source289.dtor_els;
        DAST._IExpression _4898_f = _4897___mcc_h39;
        DAST._IExpression _4899_t = _4896___mcc_h38;
        DAST._IExpression _4900_cond = _4895___mcc_h37;
        {
          RAST._IExpr _4901_cond;
          DCOMP._IOwnership _4902___v143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4903_recIdentsCond;
          RAST._IExpr _out1610;
          DCOMP._IOwnership _out1611;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
          (this).GenExpr(_4900_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1610, out _out1611, out _out1612);
          _4901_cond = _out1610;
          _4902___v143 = _out1611;
          _4903_recIdentsCond = _out1612;
          Dafny.ISequence<Dafny.Rune> _4904_condString;
          _4904_condString = (_4901_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _4905___v144;
          DCOMP._IOwnership _4906_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4907___v145;
          RAST._IExpr _out1613;
          DCOMP._IOwnership _out1614;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1615;
          (this).GenExpr(_4899_t, selfIdent, env, expectedOwnership, out _out1613, out _out1614, out _out1615);
          _4905___v144 = _out1613;
          _4906_tHasToBeOwned = _out1614;
          _4907___v145 = _out1615;
          RAST._IExpr _4908_fExpr;
          DCOMP._IOwnership _4909_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4910_recIdentsF;
          RAST._IExpr _out1616;
          DCOMP._IOwnership _out1617;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
          (this).GenExpr(_4898_f, selfIdent, env, _4906_tHasToBeOwned, out _out1616, out _out1617, out _out1618);
          _4908_fExpr = _out1616;
          _4909_fOwned = _out1617;
          _4910_recIdentsF = _out1618;
          Dafny.ISequence<Dafny.Rune> _4911_fString;
          _4911_fString = (_4908_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _4912_tExpr;
          DCOMP._IOwnership _4913___v146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4914_recIdentsT;
          RAST._IExpr _out1619;
          DCOMP._IOwnership _out1620;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
          (this).GenExpr(_4899_t, selfIdent, env, _4909_fOwned, out _out1619, out _out1620, out _out1621);
          _4912_tExpr = _out1619;
          _4913___v146 = _out1620;
          _4914_recIdentsT = _out1621;
          Dafny.ISequence<Dafny.Rune> _4915_tString;
          _4915_tString = (_4912_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _4904_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _4915_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _4911_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out1622;
          DCOMP._IOwnership _out1623;
          DCOMP.COMP.FromOwnership(r, _4909_fOwned, expectedOwnership, out _out1622, out _out1623);
          r = _out1622;
          resultingOwnership = _out1623;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4903_recIdentsCond, _4914_recIdentsT), _4910_recIdentsF);
          return ;
        }
      } else if (_source289.is_UnOp) {
        DAST._IUnaryOp _4916___mcc_h40 = _source289.dtor_unOp;
        DAST._IExpression _4917___mcc_h41 = _source289.dtor_expr;
        DAST.Format._IUnaryOpFormat _4918___mcc_h42 = _source289.dtor_format1;
        DAST._IUnaryOp _source291 = _4916___mcc_h40;
        if (_source291.is_Not) {
          DAST.Format._IUnaryOpFormat _4919_format = _4918___mcc_h42;
          DAST._IExpression _4920_e = _4917___mcc_h41;
          {
            RAST._IExpr _4921_recursiveGen;
            DCOMP._IOwnership _4922___v147;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4923_recIdents;
            RAST._IExpr _out1624;
            DCOMP._IOwnership _out1625;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1626;
            (this).GenExpr(_4920_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1624, out _out1625, out _out1626);
            _4921_recursiveGen = _out1624;
            _4922___v147 = _out1625;
            _4923_recIdents = _out1626;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _4921_recursiveGen, _4919_format);
            RAST._IExpr _out1627;
            DCOMP._IOwnership _out1628;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1627, out _out1628);
            r = _out1627;
            resultingOwnership = _out1628;
            readIdents = _4923_recIdents;
            return ;
          }
        } else if (_source291.is_BitwiseNot) {
          DAST.Format._IUnaryOpFormat _4924_format = _4918___mcc_h42;
          DAST._IExpression _4925_e = _4917___mcc_h41;
          {
            RAST._IExpr _4926_recursiveGen;
            DCOMP._IOwnership _4927___v148;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4928_recIdents;
            RAST._IExpr _out1629;
            DCOMP._IOwnership _out1630;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1631;
            (this).GenExpr(_4925_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1629, out _out1630, out _out1631);
            _4926_recursiveGen = _out1629;
            _4927___v148 = _out1630;
            _4928_recIdents = _out1631;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _4926_recursiveGen, _4924_format);
            RAST._IExpr _out1632;
            DCOMP._IOwnership _out1633;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1632, out _out1633);
            r = _out1632;
            resultingOwnership = _out1633;
            readIdents = _4928_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnaryOpFormat _4929_format = _4918___mcc_h42;
          DAST._IExpression _4930_e = _4917___mcc_h41;
          {
            RAST._IExpr _4931_recursiveGen;
            DCOMP._IOwnership _4932_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4933_recIdents;
            RAST._IExpr _out1634;
            DCOMP._IOwnership _out1635;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
            (this).GenExpr(_4930_e, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1634, out _out1635, out _out1636);
            _4931_recursiveGen = _out1634;
            _4932_recOwned = _out1635;
            _4933_recIdents = _out1636;
            r = ((_4931_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out1637;
            DCOMP._IOwnership _out1638;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1637, out _out1638);
            r = _out1637;
            resultingOwnership = _out1638;
            readIdents = _4933_recIdents;
            return ;
          }
        }
      } else if (_source289.is_BinOp) {
        DAST._IBinOp _4934___mcc_h43 = _source289.dtor_op;
        DAST._IExpression _4935___mcc_h44 = _source289.dtor_left;
        DAST._IExpression _4936___mcc_h45 = _source289.dtor_right;
        DAST.Format._IBinaryOpFormat _4937___mcc_h46 = _source289.dtor_format2;
        RAST._IExpr _out1639;
        DCOMP._IOwnership _out1640;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
        (this).GenExprBinary(e, selfIdent, env, expectedOwnership, out _out1639, out _out1640, out _out1641);
        r = _out1639;
        resultingOwnership = _out1640;
        readIdents = _out1641;
      } else if (_source289.is_ArrayLen) {
        DAST._IExpression _4938___mcc_h47 = _source289.dtor_expr;
        DAST._IType _4939___mcc_h48 = _source289.dtor_exprType;
        BigInteger _4940___mcc_h49 = _source289.dtor_dim;
        bool _4941___mcc_h50 = _source289.dtor_native;
        bool _4942_native = _4941___mcc_h50;
        BigInteger _4943_dim = _4940___mcc_h49;
        DAST._IType _4944_exprType = _4939___mcc_h48;
        DAST._IExpression _4945_expr = _4938___mcc_h47;
        {
          RAST._IExpr _4946_recursiveGen;
          DCOMP._IOwnership _4947___v153;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4948_recIdents;
          RAST._IExpr _out1642;
          DCOMP._IOwnership _out1643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
          (this).GenExpr(_4945_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1642, out _out1643, out _out1644);
          _4946_recursiveGen = _out1642;
          _4947___v153 = _out1643;
          _4948_recIdents = _out1644;
          RAST._IType _4949_arrayType;
          RAST._IType _out1645;
          _out1645 = (this).GenType(_4944_exprType, false, false);
          _4949_arrayType = _out1645;
          if (!((_4949_arrayType).IsObjectOrPointer())) {
            Dafny.ISequence<Dafny.Rune> _4950_msg;
            _4950_msg = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Array length of something not an array but "), (_4949_arrayType)._ToString(DCOMP.__default.IND));
            (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_4950_msg);
            r = RAST.Expr.create_RawExpr(_4950_msg);
          } else {
            RAST._IType _4951_underlying;
            _4951_underlying = (_4949_arrayType).ObjectOrPointerUnderlying();
            if (((_4943_dim).Sign == 0) && ((_4951_underlying).is_Array)) {
              r = ((((this).read__macro).Apply1(_4946_recursiveGen)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            } else {
              if ((_4943_dim).Sign == 0) {
                r = (((((this).read__macro).Apply1(_4946_recursiveGen)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("data"))).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              } else {
                r = (((this).read__macro).Apply1(_4946_recursiveGen)).Sel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Length"), Std.Strings.__default.OfNat(_4943_dim)));
              }
            }
            if (!(_4942_native)) {
              r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(r);
            }
          }
          RAST._IExpr _out1646;
          DCOMP._IOwnership _out1647;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1646, out _out1647);
          r = _out1646;
          resultingOwnership = _out1647;
          readIdents = _4948_recIdents;
          return ;
        }
      } else if (_source289.is_MapKeys) {
        DAST._IExpression _4952___mcc_h51 = _source289.dtor_expr;
        DAST._IExpression _4953_expr = _4952___mcc_h51;
        {
          RAST._IExpr _4954_recursiveGen;
          DCOMP._IOwnership _4955___v154;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4956_recIdents;
          RAST._IExpr _out1648;
          DCOMP._IOwnership _out1649;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1650;
          (this).GenExpr(_4953_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1648, out _out1649, out _out1650);
          _4954_recursiveGen = _out1648;
          _4955___v154 = _out1649;
          _4956_recIdents = _out1650;
          readIdents = _4956_recIdents;
          r = ((_4954_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1651;
          DCOMP._IOwnership _out1652;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1651, out _out1652);
          r = _out1651;
          resultingOwnership = _out1652;
          return ;
        }
      } else if (_source289.is_MapValues) {
        DAST._IExpression _4957___mcc_h52 = _source289.dtor_expr;
        DAST._IExpression _4958_expr = _4957___mcc_h52;
        {
          RAST._IExpr _4959_recursiveGen;
          DCOMP._IOwnership _4960___v155;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4961_recIdents;
          RAST._IExpr _out1653;
          DCOMP._IOwnership _out1654;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1655;
          (this).GenExpr(_4958_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1653, out _out1654, out _out1655);
          _4959_recursiveGen = _out1653;
          _4960___v155 = _out1654;
          _4961_recIdents = _out1655;
          readIdents = _4961_recIdents;
          r = ((_4959_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1656;
          DCOMP._IOwnership _out1657;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1656, out _out1657);
          r = _out1656;
          resultingOwnership = _out1657;
          return ;
        }
      } else if (_source289.is_Select) {
        DAST._IExpression _4962___mcc_h53 = _source289.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4963___mcc_h54 = _source289.dtor_field;
        bool _4964___mcc_h55 = _source289.dtor_isConstant;
        bool _4965___mcc_h56 = _source289.dtor_onDatatype;
        DAST._IType _4966___mcc_h57 = _source289.dtor_fieldType;
        DAST._IExpression _source292 = _4962___mcc_h53;
        if (_source292.is_Literal) {
          DAST._ILiteral _4967___mcc_h58 = _source292.dtor_Literal_i_a0;
          DAST._IType _4968_fieldType = _4966___mcc_h57;
          bool _4969_isDatatype = _4965___mcc_h56;
          bool _4970_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _4971_field = _4963___mcc_h54;
          DAST._IExpression _4972_on = _4962___mcc_h53;
          {
            if (_4969_isDatatype) {
              RAST._IExpr _4973_onExpr;
              DCOMP._IOwnership _4974_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4975_recIdents;
              RAST._IExpr _out1658;
              DCOMP._IOwnership _out1659;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1660;
              (this).GenExpr(_4972_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1658, out _out1659, out _out1660);
              _4973_onExpr = _out1658;
              _4974_onOwned = _out1659;
              _4975_recIdents = _out1660;
              r = ((_4973_onExpr).Sel(DCOMP.__default.escapeName(_4971_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _4976_typ;
              RAST._IType _out1661;
              _out1661 = (this).GenType(_4968_fieldType, false, false);
              _4976_typ = _out1661;
              if (((_4976_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1662;
                DCOMP._IOwnership _out1663;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1662, out _out1663);
                r = _out1662;
                resultingOwnership = _out1663;
              }
              readIdents = _4975_recIdents;
            } else {
              RAST._IExpr _4977_onExpr;
              DCOMP._IOwnership _4978_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4979_recIdents;
              RAST._IExpr _out1664;
              DCOMP._IOwnership _out1665;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
              (this).GenExpr(_4972_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1664, out _out1665, out _out1666);
              _4977_onExpr = _out1664;
              _4978_onOwned = _out1665;
              _4979_recIdents = _out1666;
              r = _4977_onExpr;
              if (!object.Equals(_4977_onExpr, RAST.__default.self)) {
                RAST._IExpr _source293 = _4977_onExpr;
                if (_source293.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _4980___mcc_h319 = _source293.dtor_content;
                } else if (_source293.is_ExprFromType) {
                  RAST._IType _4981___mcc_h321 = _source293.dtor_tpe;
                } else if (_source293.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _4982___mcc_h323 = _source293.dtor_name;
                } else if (_source293.is_Match) {
                  RAST._IExpr _4983___mcc_h325 = _source293.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _4984___mcc_h326 = _source293.dtor_cases;
                } else if (_source293.is_StmtExpr) {
                  RAST._IExpr _4985___mcc_h329 = _source293.dtor_stmt;
                  RAST._IExpr _4986___mcc_h330 = _source293.dtor_rhs;
                } else if (_source293.is_Block) {
                  RAST._IExpr _4987___mcc_h333 = _source293.dtor_underlying;
                } else if (_source293.is_StructBuild) {
                  RAST._IExpr _4988___mcc_h335 = _source293.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _4989___mcc_h336 = _source293.dtor_assignments;
                } else if (_source293.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _4990___mcc_h339 = _source293.dtor_arguments;
                } else if (_source293.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _4991___mcc_h341 = _source293.dtor_op1;
                  RAST._IExpr _4992___mcc_h342 = _source293.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _4993___mcc_h343 = _source293.dtor_format;
                  if (object.Equals(_4991___mcc_h341, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source294 = _4992___mcc_h342;
                    if (_source294.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _4994___mcc_h347 = _source294.dtor_content;
                    } else if (_source294.is_ExprFromType) {
                      RAST._IType _4995___mcc_h349 = _source294.dtor_tpe;
                    } else if (_source294.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _4996___mcc_h351 = _source294.dtor_name;
                      if (object.Equals(_4996___mcc_h351, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source294.is_Match) {
                      RAST._IExpr _4997___mcc_h353 = _source294.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _4998___mcc_h354 = _source294.dtor_cases;
                    } else if (_source294.is_StmtExpr) {
                      RAST._IExpr _4999___mcc_h357 = _source294.dtor_stmt;
                      RAST._IExpr _5000___mcc_h358 = _source294.dtor_rhs;
                    } else if (_source294.is_Block) {
                      RAST._IExpr _5001___mcc_h361 = _source294.dtor_underlying;
                    } else if (_source294.is_StructBuild) {
                      RAST._IExpr _5002___mcc_h363 = _source294.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5003___mcc_h364 = _source294.dtor_assignments;
                    } else if (_source294.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5004___mcc_h367 = _source294.dtor_arguments;
                    } else if (_source294.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5005___mcc_h369 = _source294.dtor_op1;
                      RAST._IExpr _5006___mcc_h370 = _source294.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5007___mcc_h371 = _source294.dtor_format;
                    } else if (_source294.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5008___mcc_h375 = _source294.dtor_op2;
                      RAST._IExpr _5009___mcc_h376 = _source294.dtor_left;
                      RAST._IExpr _5010___mcc_h377 = _source294.dtor_right;
                      DAST.Format._IBinaryOpFormat _5011___mcc_h378 = _source294.dtor_format2;
                    } else if (_source294.is_TypeAscription) {
                      RAST._IExpr _5012___mcc_h383 = _source294.dtor_left;
                      RAST._IType _5013___mcc_h384 = _source294.dtor_tpe;
                    } else if (_source294.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5014___mcc_h387 = _source294.dtor_value;
                    } else if (_source294.is_LiteralBool) {
                      bool _5015___mcc_h389 = _source294.dtor_bvalue;
                    } else if (_source294.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5016___mcc_h391 = _source294.dtor_value;
                      bool _5017___mcc_h392 = _source294.dtor_binary;
                    } else if (_source294.is_DeclareVar) {
                      RAST._IDeclareType _5018___mcc_h395 = _source294.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5019___mcc_h396 = _source294.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5020___mcc_h397 = _source294.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5021___mcc_h398 = _source294.dtor_optRhs;
                    } else if (_source294.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5022___mcc_h403 = _source294.dtor_names;
                      RAST._IExpr _5023___mcc_h404 = _source294.dtor_rhs;
                    } else if (_source294.is_IfExpr) {
                      RAST._IExpr _5024___mcc_h407 = _source294.dtor_cond;
                      RAST._IExpr _5025___mcc_h408 = _source294.dtor_thn;
                      RAST._IExpr _5026___mcc_h409 = _source294.dtor_els;
                    } else if (_source294.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5027___mcc_h413 = _source294.dtor_optCond;
                      RAST._IExpr _5028___mcc_h414 = _source294.dtor_underlying;
                    } else if (_source294.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5029___mcc_h417 = _source294.dtor_name;
                      RAST._IExpr _5030___mcc_h418 = _source294.dtor_range;
                      RAST._IExpr _5031___mcc_h419 = _source294.dtor_body;
                    } else if (_source294.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5032___mcc_h423 = _source294.dtor_lbl;
                      RAST._IExpr _5033___mcc_h424 = _source294.dtor_underlying;
                    } else if (_source294.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5034___mcc_h427 = _source294.dtor_optLbl;
                    } else if (_source294.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5035___mcc_h429 = _source294.dtor_optLbl;
                    } else if (_source294.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5036___mcc_h431 = _source294.dtor_optExpr;
                    } else if (_source294.is_CallType) {
                      RAST._IExpr _5037___mcc_h433 = _source294.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5038___mcc_h434 = _source294.dtor_typeParameters;
                    } else if (_source294.is_Call) {
                      RAST._IExpr _5039___mcc_h437 = _source294.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5040___mcc_h438 = _source294.dtor_arguments;
                    } else if (_source294.is_Select) {
                      RAST._IExpr _5041___mcc_h441 = _source294.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5042___mcc_h442 = _source294.dtor_name;
                    } else if (_source294.is_MemberSelect) {
                      RAST._IExpr _5043___mcc_h445 = _source294.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5044___mcc_h446 = _source294.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5045___mcc_h449 = _source294.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5046___mcc_h450 = _source294.dtor_retType;
                      RAST._IExpr _5047___mcc_h451 = _source294.dtor_body;
                    }
                  } else {
                  }
                } else if (_source293.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5048___mcc_h455 = _source293.dtor_op2;
                  RAST._IExpr _5049___mcc_h456 = _source293.dtor_left;
                  RAST._IExpr _5050___mcc_h457 = _source293.dtor_right;
                  DAST.Format._IBinaryOpFormat _5051___mcc_h458 = _source293.dtor_format2;
                } else if (_source293.is_TypeAscription) {
                  RAST._IExpr _5052___mcc_h463 = _source293.dtor_left;
                  RAST._IType _5053___mcc_h464 = _source293.dtor_tpe;
                } else if (_source293.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5054___mcc_h467 = _source293.dtor_value;
                } else if (_source293.is_LiteralBool) {
                  bool _5055___mcc_h469 = _source293.dtor_bvalue;
                } else if (_source293.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5056___mcc_h471 = _source293.dtor_value;
                  bool _5057___mcc_h472 = _source293.dtor_binary;
                } else if (_source293.is_DeclareVar) {
                  RAST._IDeclareType _5058___mcc_h475 = _source293.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5059___mcc_h476 = _source293.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5060___mcc_h477 = _source293.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5061___mcc_h478 = _source293.dtor_optRhs;
                } else if (_source293.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5062___mcc_h483 = _source293.dtor_names;
                  RAST._IExpr _5063___mcc_h484 = _source293.dtor_rhs;
                } else if (_source293.is_IfExpr) {
                  RAST._IExpr _5064___mcc_h487 = _source293.dtor_cond;
                  RAST._IExpr _5065___mcc_h488 = _source293.dtor_thn;
                  RAST._IExpr _5066___mcc_h489 = _source293.dtor_els;
                } else if (_source293.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5067___mcc_h493 = _source293.dtor_optCond;
                  RAST._IExpr _5068___mcc_h494 = _source293.dtor_underlying;
                } else if (_source293.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5069___mcc_h497 = _source293.dtor_name;
                  RAST._IExpr _5070___mcc_h498 = _source293.dtor_range;
                  RAST._IExpr _5071___mcc_h499 = _source293.dtor_body;
                } else if (_source293.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5072___mcc_h503 = _source293.dtor_lbl;
                  RAST._IExpr _5073___mcc_h504 = _source293.dtor_underlying;
                } else if (_source293.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5074___mcc_h507 = _source293.dtor_optLbl;
                } else if (_source293.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5075___mcc_h509 = _source293.dtor_optLbl;
                } else if (_source293.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5076___mcc_h511 = _source293.dtor_optExpr;
                } else if (_source293.is_CallType) {
                  RAST._IExpr _5077___mcc_h513 = _source293.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5078___mcc_h514 = _source293.dtor_typeParameters;
                } else if (_source293.is_Call) {
                  RAST._IExpr _5079___mcc_h517 = _source293.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5080___mcc_h518 = _source293.dtor_arguments;
                } else if (_source293.is_Select) {
                  RAST._IExpr _5081___mcc_h521 = _source293.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5082___mcc_h522 = _source293.dtor_name;
                } else if (_source293.is_MemberSelect) {
                  RAST._IExpr _5083___mcc_h525 = _source293.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5084___mcc_h526 = _source293.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5085___mcc_h529 = _source293.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5086___mcc_h530 = _source293.dtor_retType;
                  RAST._IExpr _5087___mcc_h531 = _source293.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_4971_field));
              if (_4970_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _5088_fromOwnership;
              _5088_fromOwnership = ((_4970_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1667;
              DCOMP._IOwnership _out1668;
              DCOMP.COMP.FromOwnership(r, _5088_fromOwnership, expectedOwnership, out _out1667, out _out1668);
              r = _out1667;
              resultingOwnership = _out1668;
              readIdents = _4979_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _5089___mcc_h60 = _source292.dtor_Ident_i_a0;
          DAST._IType _5090_fieldType = _4966___mcc_h57;
          bool _5091_isDatatype = _4965___mcc_h56;
          bool _5092_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5093_field = _4963___mcc_h54;
          DAST._IExpression _5094_on = _4962___mcc_h53;
          {
            if (_5091_isDatatype) {
              RAST._IExpr _5095_onExpr;
              DCOMP._IOwnership _5096_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5097_recIdents;
              RAST._IExpr _out1669;
              DCOMP._IOwnership _out1670;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1671;
              (this).GenExpr(_5094_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1669, out _out1670, out _out1671);
              _5095_onExpr = _out1669;
              _5096_onOwned = _out1670;
              _5097_recIdents = _out1671;
              r = ((_5095_onExpr).Sel(DCOMP.__default.escapeName(_5093_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5098_typ;
              RAST._IType _out1672;
              _out1672 = (this).GenType(_5090_fieldType, false, false);
              _5098_typ = _out1672;
              if (((_5098_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1673;
                DCOMP._IOwnership _out1674;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1673, out _out1674);
                r = _out1673;
                resultingOwnership = _out1674;
              }
              readIdents = _5097_recIdents;
            } else {
              RAST._IExpr _5099_onExpr;
              DCOMP._IOwnership _5100_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5101_recIdents;
              RAST._IExpr _out1675;
              DCOMP._IOwnership _out1676;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1677;
              (this).GenExpr(_5094_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1675, out _out1676, out _out1677);
              _5099_onExpr = _out1675;
              _5100_onOwned = _out1676;
              _5101_recIdents = _out1677;
              r = _5099_onExpr;
              if (!object.Equals(_5099_onExpr, RAST.__default.self)) {
                RAST._IExpr _source295 = _5099_onExpr;
                if (_source295.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5102___mcc_h535 = _source295.dtor_content;
                } else if (_source295.is_ExprFromType) {
                  RAST._IType _5103___mcc_h537 = _source295.dtor_tpe;
                } else if (_source295.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5104___mcc_h539 = _source295.dtor_name;
                } else if (_source295.is_Match) {
                  RAST._IExpr _5105___mcc_h541 = _source295.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5106___mcc_h542 = _source295.dtor_cases;
                } else if (_source295.is_StmtExpr) {
                  RAST._IExpr _5107___mcc_h545 = _source295.dtor_stmt;
                  RAST._IExpr _5108___mcc_h546 = _source295.dtor_rhs;
                } else if (_source295.is_Block) {
                  RAST._IExpr _5109___mcc_h549 = _source295.dtor_underlying;
                } else if (_source295.is_StructBuild) {
                  RAST._IExpr _5110___mcc_h551 = _source295.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5111___mcc_h552 = _source295.dtor_assignments;
                } else if (_source295.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5112___mcc_h555 = _source295.dtor_arguments;
                } else if (_source295.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5113___mcc_h557 = _source295.dtor_op1;
                  RAST._IExpr _5114___mcc_h558 = _source295.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5115___mcc_h559 = _source295.dtor_format;
                  if (object.Equals(_5113___mcc_h557, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source296 = _5114___mcc_h558;
                    if (_source296.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5116___mcc_h563 = _source296.dtor_content;
                    } else if (_source296.is_ExprFromType) {
                      RAST._IType _5117___mcc_h565 = _source296.dtor_tpe;
                    } else if (_source296.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5118___mcc_h567 = _source296.dtor_name;
                      if (object.Equals(_5118___mcc_h567, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source296.is_Match) {
                      RAST._IExpr _5119___mcc_h569 = _source296.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5120___mcc_h570 = _source296.dtor_cases;
                    } else if (_source296.is_StmtExpr) {
                      RAST._IExpr _5121___mcc_h573 = _source296.dtor_stmt;
                      RAST._IExpr _5122___mcc_h574 = _source296.dtor_rhs;
                    } else if (_source296.is_Block) {
                      RAST._IExpr _5123___mcc_h577 = _source296.dtor_underlying;
                    } else if (_source296.is_StructBuild) {
                      RAST._IExpr _5124___mcc_h579 = _source296.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5125___mcc_h580 = _source296.dtor_assignments;
                    } else if (_source296.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5126___mcc_h583 = _source296.dtor_arguments;
                    } else if (_source296.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5127___mcc_h585 = _source296.dtor_op1;
                      RAST._IExpr _5128___mcc_h586 = _source296.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5129___mcc_h587 = _source296.dtor_format;
                    } else if (_source296.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5130___mcc_h591 = _source296.dtor_op2;
                      RAST._IExpr _5131___mcc_h592 = _source296.dtor_left;
                      RAST._IExpr _5132___mcc_h593 = _source296.dtor_right;
                      DAST.Format._IBinaryOpFormat _5133___mcc_h594 = _source296.dtor_format2;
                    } else if (_source296.is_TypeAscription) {
                      RAST._IExpr _5134___mcc_h599 = _source296.dtor_left;
                      RAST._IType _5135___mcc_h600 = _source296.dtor_tpe;
                    } else if (_source296.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5136___mcc_h603 = _source296.dtor_value;
                    } else if (_source296.is_LiteralBool) {
                      bool _5137___mcc_h605 = _source296.dtor_bvalue;
                    } else if (_source296.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5138___mcc_h607 = _source296.dtor_value;
                      bool _5139___mcc_h608 = _source296.dtor_binary;
                    } else if (_source296.is_DeclareVar) {
                      RAST._IDeclareType _5140___mcc_h611 = _source296.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5141___mcc_h612 = _source296.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5142___mcc_h613 = _source296.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5143___mcc_h614 = _source296.dtor_optRhs;
                    } else if (_source296.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5144___mcc_h619 = _source296.dtor_names;
                      RAST._IExpr _5145___mcc_h620 = _source296.dtor_rhs;
                    } else if (_source296.is_IfExpr) {
                      RAST._IExpr _5146___mcc_h623 = _source296.dtor_cond;
                      RAST._IExpr _5147___mcc_h624 = _source296.dtor_thn;
                      RAST._IExpr _5148___mcc_h625 = _source296.dtor_els;
                    } else if (_source296.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5149___mcc_h629 = _source296.dtor_optCond;
                      RAST._IExpr _5150___mcc_h630 = _source296.dtor_underlying;
                    } else if (_source296.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5151___mcc_h633 = _source296.dtor_name;
                      RAST._IExpr _5152___mcc_h634 = _source296.dtor_range;
                      RAST._IExpr _5153___mcc_h635 = _source296.dtor_body;
                    } else if (_source296.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5154___mcc_h639 = _source296.dtor_lbl;
                      RAST._IExpr _5155___mcc_h640 = _source296.dtor_underlying;
                    } else if (_source296.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5156___mcc_h643 = _source296.dtor_optLbl;
                    } else if (_source296.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5157___mcc_h645 = _source296.dtor_optLbl;
                    } else if (_source296.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5158___mcc_h647 = _source296.dtor_optExpr;
                    } else if (_source296.is_CallType) {
                      RAST._IExpr _5159___mcc_h649 = _source296.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5160___mcc_h650 = _source296.dtor_typeParameters;
                    } else if (_source296.is_Call) {
                      RAST._IExpr _5161___mcc_h653 = _source296.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5162___mcc_h654 = _source296.dtor_arguments;
                    } else if (_source296.is_Select) {
                      RAST._IExpr _5163___mcc_h657 = _source296.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5164___mcc_h658 = _source296.dtor_name;
                    } else if (_source296.is_MemberSelect) {
                      RAST._IExpr _5165___mcc_h661 = _source296.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5166___mcc_h662 = _source296.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5167___mcc_h665 = _source296.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5168___mcc_h666 = _source296.dtor_retType;
                      RAST._IExpr _5169___mcc_h667 = _source296.dtor_body;
                    }
                  } else {
                  }
                } else if (_source295.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5170___mcc_h671 = _source295.dtor_op2;
                  RAST._IExpr _5171___mcc_h672 = _source295.dtor_left;
                  RAST._IExpr _5172___mcc_h673 = _source295.dtor_right;
                  DAST.Format._IBinaryOpFormat _5173___mcc_h674 = _source295.dtor_format2;
                } else if (_source295.is_TypeAscription) {
                  RAST._IExpr _5174___mcc_h679 = _source295.dtor_left;
                  RAST._IType _5175___mcc_h680 = _source295.dtor_tpe;
                } else if (_source295.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5176___mcc_h683 = _source295.dtor_value;
                } else if (_source295.is_LiteralBool) {
                  bool _5177___mcc_h685 = _source295.dtor_bvalue;
                } else if (_source295.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5178___mcc_h687 = _source295.dtor_value;
                  bool _5179___mcc_h688 = _source295.dtor_binary;
                } else if (_source295.is_DeclareVar) {
                  RAST._IDeclareType _5180___mcc_h691 = _source295.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5181___mcc_h692 = _source295.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5182___mcc_h693 = _source295.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5183___mcc_h694 = _source295.dtor_optRhs;
                } else if (_source295.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5184___mcc_h699 = _source295.dtor_names;
                  RAST._IExpr _5185___mcc_h700 = _source295.dtor_rhs;
                } else if (_source295.is_IfExpr) {
                  RAST._IExpr _5186___mcc_h703 = _source295.dtor_cond;
                  RAST._IExpr _5187___mcc_h704 = _source295.dtor_thn;
                  RAST._IExpr _5188___mcc_h705 = _source295.dtor_els;
                } else if (_source295.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5189___mcc_h709 = _source295.dtor_optCond;
                  RAST._IExpr _5190___mcc_h710 = _source295.dtor_underlying;
                } else if (_source295.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5191___mcc_h713 = _source295.dtor_name;
                  RAST._IExpr _5192___mcc_h714 = _source295.dtor_range;
                  RAST._IExpr _5193___mcc_h715 = _source295.dtor_body;
                } else if (_source295.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5194___mcc_h719 = _source295.dtor_lbl;
                  RAST._IExpr _5195___mcc_h720 = _source295.dtor_underlying;
                } else if (_source295.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5196___mcc_h723 = _source295.dtor_optLbl;
                } else if (_source295.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5197___mcc_h725 = _source295.dtor_optLbl;
                } else if (_source295.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5198___mcc_h727 = _source295.dtor_optExpr;
                } else if (_source295.is_CallType) {
                  RAST._IExpr _5199___mcc_h729 = _source295.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5200___mcc_h730 = _source295.dtor_typeParameters;
                } else if (_source295.is_Call) {
                  RAST._IExpr _5201___mcc_h733 = _source295.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5202___mcc_h734 = _source295.dtor_arguments;
                } else if (_source295.is_Select) {
                  RAST._IExpr _5203___mcc_h737 = _source295.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5204___mcc_h738 = _source295.dtor_name;
                } else if (_source295.is_MemberSelect) {
                  RAST._IExpr _5205___mcc_h741 = _source295.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5206___mcc_h742 = _source295.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5207___mcc_h745 = _source295.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5208___mcc_h746 = _source295.dtor_retType;
                  RAST._IExpr _5209___mcc_h747 = _source295.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5093_field));
              if (_5092_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _5210_fromOwnership;
              _5210_fromOwnership = ((_5092_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1678;
              DCOMP._IOwnership _out1679;
              DCOMP.COMP.FromOwnership(r, _5210_fromOwnership, expectedOwnership, out _out1678, out _out1679);
              r = _out1678;
              resultingOwnership = _out1679;
              readIdents = _5101_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5211___mcc_h62 = _source292.dtor_Companion_i_a0;
          DAST._IType _5212_fieldType = _4966___mcc_h57;
          bool _5213_isDatatype = _4965___mcc_h56;
          bool _5214_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5215_field = _4963___mcc_h54;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5216_c = _5211___mcc_h62;
          {
            RAST._IExpr _5217_onExpr;
            DCOMP._IOwnership _5218_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5219_recIdents;
            RAST._IExpr _out1680;
            DCOMP._IOwnership _out1681;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1682;
            (this).GenExpr(DAST.Expression.create_Companion(_5216_c), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1680, out _out1681, out _out1682);
            _5217_onExpr = _out1680;
            _5218_onOwned = _out1681;
            _5219_recIdents = _out1682;
            r = ((_5217_onExpr).MSel(DCOMP.__default.escapeName(_5215_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out1683;
            DCOMP._IOwnership _out1684;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1683, out _out1684);
            r = _out1683;
            resultingOwnership = _out1684;
            readIdents = _5219_recIdents;
            return ;
          }
        } else if (_source292.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _5220___mcc_h64 = _source292.dtor_Tuple_i_a0;
          DAST._IType _5221_fieldType = _4966___mcc_h57;
          bool _5222_isDatatype = _4965___mcc_h56;
          bool _5223_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5224_field = _4963___mcc_h54;
          DAST._IExpression _5225_on = _4962___mcc_h53;
          {
            if (_5222_isDatatype) {
              RAST._IExpr _5226_onExpr;
              DCOMP._IOwnership _5227_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5228_recIdents;
              RAST._IExpr _out1685;
              DCOMP._IOwnership _out1686;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1687;
              (this).GenExpr(_5225_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1685, out _out1686, out _out1687);
              _5226_onExpr = _out1685;
              _5227_onOwned = _out1686;
              _5228_recIdents = _out1687;
              r = ((_5226_onExpr).Sel(DCOMP.__default.escapeName(_5224_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5229_typ;
              RAST._IType _out1688;
              _out1688 = (this).GenType(_5221_fieldType, false, false);
              _5229_typ = _out1688;
              if (((_5229_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1689;
                DCOMP._IOwnership _out1690;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1689, out _out1690);
                r = _out1689;
                resultingOwnership = _out1690;
              }
              readIdents = _5228_recIdents;
            } else {
              RAST._IExpr _5230_onExpr;
              DCOMP._IOwnership _5231_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5232_recIdents;
              RAST._IExpr _out1691;
              DCOMP._IOwnership _out1692;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1693;
              (this).GenExpr(_5225_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1691, out _out1692, out _out1693);
              _5230_onExpr = _out1691;
              _5231_onOwned = _out1692;
              _5232_recIdents = _out1693;
              r = _5230_onExpr;
              if (!object.Equals(_5230_onExpr, RAST.__default.self)) {
                RAST._IExpr _source297 = _5230_onExpr;
                if (_source297.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5233___mcc_h751 = _source297.dtor_content;
                } else if (_source297.is_ExprFromType) {
                  RAST._IType _5234___mcc_h753 = _source297.dtor_tpe;
                } else if (_source297.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5235___mcc_h755 = _source297.dtor_name;
                } else if (_source297.is_Match) {
                  RAST._IExpr _5236___mcc_h757 = _source297.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5237___mcc_h758 = _source297.dtor_cases;
                } else if (_source297.is_StmtExpr) {
                  RAST._IExpr _5238___mcc_h761 = _source297.dtor_stmt;
                  RAST._IExpr _5239___mcc_h762 = _source297.dtor_rhs;
                } else if (_source297.is_Block) {
                  RAST._IExpr _5240___mcc_h765 = _source297.dtor_underlying;
                } else if (_source297.is_StructBuild) {
                  RAST._IExpr _5241___mcc_h767 = _source297.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5242___mcc_h768 = _source297.dtor_assignments;
                } else if (_source297.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5243___mcc_h771 = _source297.dtor_arguments;
                } else if (_source297.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5244___mcc_h773 = _source297.dtor_op1;
                  RAST._IExpr _5245___mcc_h774 = _source297.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5246___mcc_h775 = _source297.dtor_format;
                  if (object.Equals(_5244___mcc_h773, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source298 = _5245___mcc_h774;
                    if (_source298.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5247___mcc_h779 = _source298.dtor_content;
                    } else if (_source298.is_ExprFromType) {
                      RAST._IType _5248___mcc_h781 = _source298.dtor_tpe;
                    } else if (_source298.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5249___mcc_h783 = _source298.dtor_name;
                      if (object.Equals(_5249___mcc_h783, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source298.is_Match) {
                      RAST._IExpr _5250___mcc_h785 = _source298.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5251___mcc_h786 = _source298.dtor_cases;
                    } else if (_source298.is_StmtExpr) {
                      RAST._IExpr _5252___mcc_h789 = _source298.dtor_stmt;
                      RAST._IExpr _5253___mcc_h790 = _source298.dtor_rhs;
                    } else if (_source298.is_Block) {
                      RAST._IExpr _5254___mcc_h793 = _source298.dtor_underlying;
                    } else if (_source298.is_StructBuild) {
                      RAST._IExpr _5255___mcc_h795 = _source298.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5256___mcc_h796 = _source298.dtor_assignments;
                    } else if (_source298.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5257___mcc_h799 = _source298.dtor_arguments;
                    } else if (_source298.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5258___mcc_h801 = _source298.dtor_op1;
                      RAST._IExpr _5259___mcc_h802 = _source298.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5260___mcc_h803 = _source298.dtor_format;
                    } else if (_source298.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5261___mcc_h807 = _source298.dtor_op2;
                      RAST._IExpr _5262___mcc_h808 = _source298.dtor_left;
                      RAST._IExpr _5263___mcc_h809 = _source298.dtor_right;
                      DAST.Format._IBinaryOpFormat _5264___mcc_h810 = _source298.dtor_format2;
                    } else if (_source298.is_TypeAscription) {
                      RAST._IExpr _5265___mcc_h815 = _source298.dtor_left;
                      RAST._IType _5266___mcc_h816 = _source298.dtor_tpe;
                    } else if (_source298.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5267___mcc_h819 = _source298.dtor_value;
                    } else if (_source298.is_LiteralBool) {
                      bool _5268___mcc_h821 = _source298.dtor_bvalue;
                    } else if (_source298.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5269___mcc_h823 = _source298.dtor_value;
                      bool _5270___mcc_h824 = _source298.dtor_binary;
                    } else if (_source298.is_DeclareVar) {
                      RAST._IDeclareType _5271___mcc_h827 = _source298.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5272___mcc_h828 = _source298.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5273___mcc_h829 = _source298.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5274___mcc_h830 = _source298.dtor_optRhs;
                    } else if (_source298.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5275___mcc_h835 = _source298.dtor_names;
                      RAST._IExpr _5276___mcc_h836 = _source298.dtor_rhs;
                    } else if (_source298.is_IfExpr) {
                      RAST._IExpr _5277___mcc_h839 = _source298.dtor_cond;
                      RAST._IExpr _5278___mcc_h840 = _source298.dtor_thn;
                      RAST._IExpr _5279___mcc_h841 = _source298.dtor_els;
                    } else if (_source298.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5280___mcc_h845 = _source298.dtor_optCond;
                      RAST._IExpr _5281___mcc_h846 = _source298.dtor_underlying;
                    } else if (_source298.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5282___mcc_h849 = _source298.dtor_name;
                      RAST._IExpr _5283___mcc_h850 = _source298.dtor_range;
                      RAST._IExpr _5284___mcc_h851 = _source298.dtor_body;
                    } else if (_source298.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5285___mcc_h855 = _source298.dtor_lbl;
                      RAST._IExpr _5286___mcc_h856 = _source298.dtor_underlying;
                    } else if (_source298.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5287___mcc_h859 = _source298.dtor_optLbl;
                    } else if (_source298.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5288___mcc_h861 = _source298.dtor_optLbl;
                    } else if (_source298.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5289___mcc_h863 = _source298.dtor_optExpr;
                    } else if (_source298.is_CallType) {
                      RAST._IExpr _5290___mcc_h865 = _source298.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5291___mcc_h866 = _source298.dtor_typeParameters;
                    } else if (_source298.is_Call) {
                      RAST._IExpr _5292___mcc_h869 = _source298.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5293___mcc_h870 = _source298.dtor_arguments;
                    } else if (_source298.is_Select) {
                      RAST._IExpr _5294___mcc_h873 = _source298.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5295___mcc_h874 = _source298.dtor_name;
                    } else if (_source298.is_MemberSelect) {
                      RAST._IExpr _5296___mcc_h877 = _source298.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5297___mcc_h878 = _source298.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5298___mcc_h881 = _source298.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5299___mcc_h882 = _source298.dtor_retType;
                      RAST._IExpr _5300___mcc_h883 = _source298.dtor_body;
                    }
                  } else {
                  }
                } else if (_source297.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5301___mcc_h887 = _source297.dtor_op2;
                  RAST._IExpr _5302___mcc_h888 = _source297.dtor_left;
                  RAST._IExpr _5303___mcc_h889 = _source297.dtor_right;
                  DAST.Format._IBinaryOpFormat _5304___mcc_h890 = _source297.dtor_format2;
                } else if (_source297.is_TypeAscription) {
                  RAST._IExpr _5305___mcc_h895 = _source297.dtor_left;
                  RAST._IType _5306___mcc_h896 = _source297.dtor_tpe;
                } else if (_source297.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5307___mcc_h899 = _source297.dtor_value;
                } else if (_source297.is_LiteralBool) {
                  bool _5308___mcc_h901 = _source297.dtor_bvalue;
                } else if (_source297.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5309___mcc_h903 = _source297.dtor_value;
                  bool _5310___mcc_h904 = _source297.dtor_binary;
                } else if (_source297.is_DeclareVar) {
                  RAST._IDeclareType _5311___mcc_h907 = _source297.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5312___mcc_h908 = _source297.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5313___mcc_h909 = _source297.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5314___mcc_h910 = _source297.dtor_optRhs;
                } else if (_source297.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5315___mcc_h915 = _source297.dtor_names;
                  RAST._IExpr _5316___mcc_h916 = _source297.dtor_rhs;
                } else if (_source297.is_IfExpr) {
                  RAST._IExpr _5317___mcc_h919 = _source297.dtor_cond;
                  RAST._IExpr _5318___mcc_h920 = _source297.dtor_thn;
                  RAST._IExpr _5319___mcc_h921 = _source297.dtor_els;
                } else if (_source297.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5320___mcc_h925 = _source297.dtor_optCond;
                  RAST._IExpr _5321___mcc_h926 = _source297.dtor_underlying;
                } else if (_source297.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5322___mcc_h929 = _source297.dtor_name;
                  RAST._IExpr _5323___mcc_h930 = _source297.dtor_range;
                  RAST._IExpr _5324___mcc_h931 = _source297.dtor_body;
                } else if (_source297.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5325___mcc_h935 = _source297.dtor_lbl;
                  RAST._IExpr _5326___mcc_h936 = _source297.dtor_underlying;
                } else if (_source297.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5327___mcc_h939 = _source297.dtor_optLbl;
                } else if (_source297.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5328___mcc_h941 = _source297.dtor_optLbl;
                } else if (_source297.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5329___mcc_h943 = _source297.dtor_optExpr;
                } else if (_source297.is_CallType) {
                  RAST._IExpr _5330___mcc_h945 = _source297.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5331___mcc_h946 = _source297.dtor_typeParameters;
                } else if (_source297.is_Call) {
                  RAST._IExpr _5332___mcc_h949 = _source297.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5333___mcc_h950 = _source297.dtor_arguments;
                } else if (_source297.is_Select) {
                  RAST._IExpr _5334___mcc_h953 = _source297.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5335___mcc_h954 = _source297.dtor_name;
                } else if (_source297.is_MemberSelect) {
                  RAST._IExpr _5336___mcc_h957 = _source297.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5337___mcc_h958 = _source297.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5338___mcc_h961 = _source297.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5339___mcc_h962 = _source297.dtor_retType;
                  RAST._IExpr _5340___mcc_h963 = _source297.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5224_field));
              if (_5223_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _5341_fromOwnership;
              _5341_fromOwnership = ((_5223_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1694;
              DCOMP._IOwnership _out1695;
              DCOMP.COMP.FromOwnership(r, _5341_fromOwnership, expectedOwnership, out _out1694, out _out1695);
              r = _out1694;
              resultingOwnership = _out1695;
              readIdents = _5232_recIdents;
            }
            return ;
          }
        } else if (_source292.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5342___mcc_h66 = _source292.dtor_path;
          Dafny.ISequence<DAST._IType> _5343___mcc_h67 = _source292.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5344___mcc_h68 = _source292.dtor_args;
          DAST._IType _5345_fieldType = _4966___mcc_h57;
          bool _5346_isDatatype = _4965___mcc_h56;
          bool _5347_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5348_field = _4963___mcc_h54;
          DAST._IExpression _5349_on = _4962___mcc_h53;
          {
            if (_5346_isDatatype) {
              RAST._IExpr _5350_onExpr;
              DCOMP._IOwnership _5351_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5352_recIdents;
              RAST._IExpr _out1696;
              DCOMP._IOwnership _out1697;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1698;
              (this).GenExpr(_5349_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1696, out _out1697, out _out1698);
              _5350_onExpr = _out1696;
              _5351_onOwned = _out1697;
              _5352_recIdents = _out1698;
              r = ((_5350_onExpr).Sel(DCOMP.__default.escapeName(_5348_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5353_typ;
              RAST._IType _out1699;
              _out1699 = (this).GenType(_5345_fieldType, false, false);
              _5353_typ = _out1699;
              if (((_5353_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1700;
                DCOMP._IOwnership _out1701;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1700, out _out1701);
                r = _out1700;
                resultingOwnership = _out1701;
              }
              readIdents = _5352_recIdents;
            } else {
              RAST._IExpr _5354_onExpr;
              DCOMP._IOwnership _5355_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5356_recIdents;
              RAST._IExpr _out1702;
              DCOMP._IOwnership _out1703;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1704;
              (this).GenExpr(_5349_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1702, out _out1703, out _out1704);
              _5354_onExpr = _out1702;
              _5355_onOwned = _out1703;
              _5356_recIdents = _out1704;
              r = _5354_onExpr;
              if (!object.Equals(_5354_onExpr, RAST.__default.self)) {
                RAST._IExpr _source299 = _5354_onExpr;
                if (_source299.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5357___mcc_h967 = _source299.dtor_content;
                } else if (_source299.is_ExprFromType) {
                  RAST._IType _5358___mcc_h969 = _source299.dtor_tpe;
                } else if (_source299.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5359___mcc_h971 = _source299.dtor_name;
                } else if (_source299.is_Match) {
                  RAST._IExpr _5360___mcc_h973 = _source299.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5361___mcc_h974 = _source299.dtor_cases;
                } else if (_source299.is_StmtExpr) {
                  RAST._IExpr _5362___mcc_h977 = _source299.dtor_stmt;
                  RAST._IExpr _5363___mcc_h978 = _source299.dtor_rhs;
                } else if (_source299.is_Block) {
                  RAST._IExpr _5364___mcc_h981 = _source299.dtor_underlying;
                } else if (_source299.is_StructBuild) {
                  RAST._IExpr _5365___mcc_h983 = _source299.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5366___mcc_h984 = _source299.dtor_assignments;
                } else if (_source299.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5367___mcc_h987 = _source299.dtor_arguments;
                } else if (_source299.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5368___mcc_h989 = _source299.dtor_op1;
                  RAST._IExpr _5369___mcc_h990 = _source299.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5370___mcc_h991 = _source299.dtor_format;
                  if (object.Equals(_5368___mcc_h989, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source300 = _5369___mcc_h990;
                    if (_source300.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5371___mcc_h995 = _source300.dtor_content;
                    } else if (_source300.is_ExprFromType) {
                      RAST._IType _5372___mcc_h997 = _source300.dtor_tpe;
                    } else if (_source300.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5373___mcc_h999 = _source300.dtor_name;
                      if (object.Equals(_5373___mcc_h999, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source300.is_Match) {
                      RAST._IExpr _5374___mcc_h1001 = _source300.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5375___mcc_h1002 = _source300.dtor_cases;
                    } else if (_source300.is_StmtExpr) {
                      RAST._IExpr _5376___mcc_h1005 = _source300.dtor_stmt;
                      RAST._IExpr _5377___mcc_h1006 = _source300.dtor_rhs;
                    } else if (_source300.is_Block) {
                      RAST._IExpr _5378___mcc_h1009 = _source300.dtor_underlying;
                    } else if (_source300.is_StructBuild) {
                      RAST._IExpr _5379___mcc_h1011 = _source300.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5380___mcc_h1012 = _source300.dtor_assignments;
                    } else if (_source300.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5381___mcc_h1015 = _source300.dtor_arguments;
                    } else if (_source300.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5382___mcc_h1017 = _source300.dtor_op1;
                      RAST._IExpr _5383___mcc_h1018 = _source300.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5384___mcc_h1019 = _source300.dtor_format;
                    } else if (_source300.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5385___mcc_h1023 = _source300.dtor_op2;
                      RAST._IExpr _5386___mcc_h1024 = _source300.dtor_left;
                      RAST._IExpr _5387___mcc_h1025 = _source300.dtor_right;
                      DAST.Format._IBinaryOpFormat _5388___mcc_h1026 = _source300.dtor_format2;
                    } else if (_source300.is_TypeAscription) {
                      RAST._IExpr _5389___mcc_h1031 = _source300.dtor_left;
                      RAST._IType _5390___mcc_h1032 = _source300.dtor_tpe;
                    } else if (_source300.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5391___mcc_h1035 = _source300.dtor_value;
                    } else if (_source300.is_LiteralBool) {
                      bool _5392___mcc_h1037 = _source300.dtor_bvalue;
                    } else if (_source300.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5393___mcc_h1039 = _source300.dtor_value;
                      bool _5394___mcc_h1040 = _source300.dtor_binary;
                    } else if (_source300.is_DeclareVar) {
                      RAST._IDeclareType _5395___mcc_h1043 = _source300.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5396___mcc_h1044 = _source300.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5397___mcc_h1045 = _source300.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5398___mcc_h1046 = _source300.dtor_optRhs;
                    } else if (_source300.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5399___mcc_h1051 = _source300.dtor_names;
                      RAST._IExpr _5400___mcc_h1052 = _source300.dtor_rhs;
                    } else if (_source300.is_IfExpr) {
                      RAST._IExpr _5401___mcc_h1055 = _source300.dtor_cond;
                      RAST._IExpr _5402___mcc_h1056 = _source300.dtor_thn;
                      RAST._IExpr _5403___mcc_h1057 = _source300.dtor_els;
                    } else if (_source300.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5404___mcc_h1061 = _source300.dtor_optCond;
                      RAST._IExpr _5405___mcc_h1062 = _source300.dtor_underlying;
                    } else if (_source300.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5406___mcc_h1065 = _source300.dtor_name;
                      RAST._IExpr _5407___mcc_h1066 = _source300.dtor_range;
                      RAST._IExpr _5408___mcc_h1067 = _source300.dtor_body;
                    } else if (_source300.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5409___mcc_h1071 = _source300.dtor_lbl;
                      RAST._IExpr _5410___mcc_h1072 = _source300.dtor_underlying;
                    } else if (_source300.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5411___mcc_h1075 = _source300.dtor_optLbl;
                    } else if (_source300.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5412___mcc_h1077 = _source300.dtor_optLbl;
                    } else if (_source300.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5413___mcc_h1079 = _source300.dtor_optExpr;
                    } else if (_source300.is_CallType) {
                      RAST._IExpr _5414___mcc_h1081 = _source300.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5415___mcc_h1082 = _source300.dtor_typeParameters;
                    } else if (_source300.is_Call) {
                      RAST._IExpr _5416___mcc_h1085 = _source300.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5417___mcc_h1086 = _source300.dtor_arguments;
                    } else if (_source300.is_Select) {
                      RAST._IExpr _5418___mcc_h1089 = _source300.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5419___mcc_h1090 = _source300.dtor_name;
                    } else if (_source300.is_MemberSelect) {
                      RAST._IExpr _5420___mcc_h1093 = _source300.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5421___mcc_h1094 = _source300.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5422___mcc_h1097 = _source300.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5423___mcc_h1098 = _source300.dtor_retType;
                      RAST._IExpr _5424___mcc_h1099 = _source300.dtor_body;
                    }
                  } else {
                  }
                } else if (_source299.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5425___mcc_h1103 = _source299.dtor_op2;
                  RAST._IExpr _5426___mcc_h1104 = _source299.dtor_left;
                  RAST._IExpr _5427___mcc_h1105 = _source299.dtor_right;
                  DAST.Format._IBinaryOpFormat _5428___mcc_h1106 = _source299.dtor_format2;
                } else if (_source299.is_TypeAscription) {
                  RAST._IExpr _5429___mcc_h1111 = _source299.dtor_left;
                  RAST._IType _5430___mcc_h1112 = _source299.dtor_tpe;
                } else if (_source299.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5431___mcc_h1115 = _source299.dtor_value;
                } else if (_source299.is_LiteralBool) {
                  bool _5432___mcc_h1117 = _source299.dtor_bvalue;
                } else if (_source299.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5433___mcc_h1119 = _source299.dtor_value;
                  bool _5434___mcc_h1120 = _source299.dtor_binary;
                } else if (_source299.is_DeclareVar) {
                  RAST._IDeclareType _5435___mcc_h1123 = _source299.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5436___mcc_h1124 = _source299.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5437___mcc_h1125 = _source299.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5438___mcc_h1126 = _source299.dtor_optRhs;
                } else if (_source299.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5439___mcc_h1131 = _source299.dtor_names;
                  RAST._IExpr _5440___mcc_h1132 = _source299.dtor_rhs;
                } else if (_source299.is_IfExpr) {
                  RAST._IExpr _5441___mcc_h1135 = _source299.dtor_cond;
                  RAST._IExpr _5442___mcc_h1136 = _source299.dtor_thn;
                  RAST._IExpr _5443___mcc_h1137 = _source299.dtor_els;
                } else if (_source299.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5444___mcc_h1141 = _source299.dtor_optCond;
                  RAST._IExpr _5445___mcc_h1142 = _source299.dtor_underlying;
                } else if (_source299.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5446___mcc_h1145 = _source299.dtor_name;
                  RAST._IExpr _5447___mcc_h1146 = _source299.dtor_range;
                  RAST._IExpr _5448___mcc_h1147 = _source299.dtor_body;
                } else if (_source299.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5449___mcc_h1151 = _source299.dtor_lbl;
                  RAST._IExpr _5450___mcc_h1152 = _source299.dtor_underlying;
                } else if (_source299.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5451___mcc_h1155 = _source299.dtor_optLbl;
                } else if (_source299.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5452___mcc_h1157 = _source299.dtor_optLbl;
                } else if (_source299.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5453___mcc_h1159 = _source299.dtor_optExpr;
                } else if (_source299.is_CallType) {
                  RAST._IExpr _5454___mcc_h1161 = _source299.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5455___mcc_h1162 = _source299.dtor_typeParameters;
                } else if (_source299.is_Call) {
                  RAST._IExpr _5456___mcc_h1165 = _source299.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5457___mcc_h1166 = _source299.dtor_arguments;
                } else if (_source299.is_Select) {
                  RAST._IExpr _5458___mcc_h1169 = _source299.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5459___mcc_h1170 = _source299.dtor_name;
                } else if (_source299.is_MemberSelect) {
                  RAST._IExpr _5460___mcc_h1173 = _source299.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5461___mcc_h1174 = _source299.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5462___mcc_h1177 = _source299.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5463___mcc_h1178 = _source299.dtor_retType;
                  RAST._IExpr _5464___mcc_h1179 = _source299.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5348_field));
              if (_5347_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _5465_fromOwnership;
              _5465_fromOwnership = ((_5347_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1705;
              DCOMP._IOwnership _out1706;
              DCOMP.COMP.FromOwnership(r, _5465_fromOwnership, expectedOwnership, out _out1705, out _out1706);
              r = _out1705;
              resultingOwnership = _out1706;
              readIdents = _5356_recIdents;
            }
            return ;
          }
        } else if (_source292.is_NewUninitArray) {
          Dafny.ISequence<DAST._IExpression> _5466___mcc_h72 = _source292.dtor_dims;
          DAST._IType _5467___mcc_h73 = _source292.dtor_typ;
          DAST._IType _5468_fieldType = _4966___mcc_h57;
          bool _5469_isDatatype = _4965___mcc_h56;
          bool _5470_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5471_field = _4963___mcc_h54;
          DAST._IExpression _5472_on = _4962___mcc_h53;
          {
            if (_5469_isDatatype) {
              RAST._IExpr _5473_onExpr;
              DCOMP._IOwnership _5474_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5475_recIdents;
              RAST._IExpr _out1707;
              DCOMP._IOwnership _out1708;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
              (this).GenExpr(_5472_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1707, out _out1708, out _out1709);
              _5473_onExpr = _out1707;
              _5474_onOwned = _out1708;
              _5475_recIdents = _out1709;
              r = ((_5473_onExpr).Sel(DCOMP.__default.escapeName(_5471_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5476_typ;
              RAST._IType _out1710;
              _out1710 = (this).GenType(_5468_fieldType, false, false);
              _5476_typ = _out1710;
              if (((_5476_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1711;
                DCOMP._IOwnership _out1712;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1711, out _out1712);
                r = _out1711;
                resultingOwnership = _out1712;
              }
              readIdents = _5475_recIdents;
            } else {
              RAST._IExpr _5477_onExpr;
              DCOMP._IOwnership _5478_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5479_recIdents;
              RAST._IExpr _out1713;
              DCOMP._IOwnership _out1714;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1715;
              (this).GenExpr(_5472_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1713, out _out1714, out _out1715);
              _5477_onExpr = _out1713;
              _5478_onOwned = _out1714;
              _5479_recIdents = _out1715;
              r = _5477_onExpr;
              if (!object.Equals(_5477_onExpr, RAST.__default.self)) {
                RAST._IExpr _source301 = _5477_onExpr;
                if (_source301.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5480___mcc_h1183 = _source301.dtor_content;
                } else if (_source301.is_ExprFromType) {
                  RAST._IType _5481___mcc_h1185 = _source301.dtor_tpe;
                } else if (_source301.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5482___mcc_h1187 = _source301.dtor_name;
                } else if (_source301.is_Match) {
                  RAST._IExpr _5483___mcc_h1189 = _source301.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5484___mcc_h1190 = _source301.dtor_cases;
                } else if (_source301.is_StmtExpr) {
                  RAST._IExpr _5485___mcc_h1193 = _source301.dtor_stmt;
                  RAST._IExpr _5486___mcc_h1194 = _source301.dtor_rhs;
                } else if (_source301.is_Block) {
                  RAST._IExpr _5487___mcc_h1197 = _source301.dtor_underlying;
                } else if (_source301.is_StructBuild) {
                  RAST._IExpr _5488___mcc_h1199 = _source301.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5489___mcc_h1200 = _source301.dtor_assignments;
                } else if (_source301.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5490___mcc_h1203 = _source301.dtor_arguments;
                } else if (_source301.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5491___mcc_h1205 = _source301.dtor_op1;
                  RAST._IExpr _5492___mcc_h1206 = _source301.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5493___mcc_h1207 = _source301.dtor_format;
                  if (object.Equals(_5491___mcc_h1205, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source302 = _5492___mcc_h1206;
                    if (_source302.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5494___mcc_h1211 = _source302.dtor_content;
                    } else if (_source302.is_ExprFromType) {
                      RAST._IType _5495___mcc_h1213 = _source302.dtor_tpe;
                    } else if (_source302.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5496___mcc_h1215 = _source302.dtor_name;
                      if (object.Equals(_5496___mcc_h1215, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source302.is_Match) {
                      RAST._IExpr _5497___mcc_h1217 = _source302.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5498___mcc_h1218 = _source302.dtor_cases;
                    } else if (_source302.is_StmtExpr) {
                      RAST._IExpr _5499___mcc_h1221 = _source302.dtor_stmt;
                      RAST._IExpr _5500___mcc_h1222 = _source302.dtor_rhs;
                    } else if (_source302.is_Block) {
                      RAST._IExpr _5501___mcc_h1225 = _source302.dtor_underlying;
                    } else if (_source302.is_StructBuild) {
                      RAST._IExpr _5502___mcc_h1227 = _source302.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5503___mcc_h1228 = _source302.dtor_assignments;
                    } else if (_source302.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5504___mcc_h1231 = _source302.dtor_arguments;
                    } else if (_source302.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5505___mcc_h1233 = _source302.dtor_op1;
                      RAST._IExpr _5506___mcc_h1234 = _source302.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5507___mcc_h1235 = _source302.dtor_format;
                    } else if (_source302.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5508___mcc_h1239 = _source302.dtor_op2;
                      RAST._IExpr _5509___mcc_h1240 = _source302.dtor_left;
                      RAST._IExpr _5510___mcc_h1241 = _source302.dtor_right;
                      DAST.Format._IBinaryOpFormat _5511___mcc_h1242 = _source302.dtor_format2;
                    } else if (_source302.is_TypeAscription) {
                      RAST._IExpr _5512___mcc_h1247 = _source302.dtor_left;
                      RAST._IType _5513___mcc_h1248 = _source302.dtor_tpe;
                    } else if (_source302.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5514___mcc_h1251 = _source302.dtor_value;
                    } else if (_source302.is_LiteralBool) {
                      bool _5515___mcc_h1253 = _source302.dtor_bvalue;
                    } else if (_source302.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5516___mcc_h1255 = _source302.dtor_value;
                      bool _5517___mcc_h1256 = _source302.dtor_binary;
                    } else if (_source302.is_DeclareVar) {
                      RAST._IDeclareType _5518___mcc_h1259 = _source302.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5519___mcc_h1260 = _source302.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5520___mcc_h1261 = _source302.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5521___mcc_h1262 = _source302.dtor_optRhs;
                    } else if (_source302.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5522___mcc_h1267 = _source302.dtor_names;
                      RAST._IExpr _5523___mcc_h1268 = _source302.dtor_rhs;
                    } else if (_source302.is_IfExpr) {
                      RAST._IExpr _5524___mcc_h1271 = _source302.dtor_cond;
                      RAST._IExpr _5525___mcc_h1272 = _source302.dtor_thn;
                      RAST._IExpr _5526___mcc_h1273 = _source302.dtor_els;
                    } else if (_source302.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5527___mcc_h1277 = _source302.dtor_optCond;
                      RAST._IExpr _5528___mcc_h1278 = _source302.dtor_underlying;
                    } else if (_source302.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5529___mcc_h1281 = _source302.dtor_name;
                      RAST._IExpr _5530___mcc_h1282 = _source302.dtor_range;
                      RAST._IExpr _5531___mcc_h1283 = _source302.dtor_body;
                    } else if (_source302.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5532___mcc_h1287 = _source302.dtor_lbl;
                      RAST._IExpr _5533___mcc_h1288 = _source302.dtor_underlying;
                    } else if (_source302.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5534___mcc_h1291 = _source302.dtor_optLbl;
                    } else if (_source302.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5535___mcc_h1293 = _source302.dtor_optLbl;
                    } else if (_source302.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5536___mcc_h1295 = _source302.dtor_optExpr;
                    } else if (_source302.is_CallType) {
                      RAST._IExpr _5537___mcc_h1297 = _source302.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5538___mcc_h1298 = _source302.dtor_typeParameters;
                    } else if (_source302.is_Call) {
                      RAST._IExpr _5539___mcc_h1301 = _source302.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5540___mcc_h1302 = _source302.dtor_arguments;
                    } else if (_source302.is_Select) {
                      RAST._IExpr _5541___mcc_h1305 = _source302.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5542___mcc_h1306 = _source302.dtor_name;
                    } else if (_source302.is_MemberSelect) {
                      RAST._IExpr _5543___mcc_h1309 = _source302.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5544___mcc_h1310 = _source302.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5545___mcc_h1313 = _source302.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5546___mcc_h1314 = _source302.dtor_retType;
                      RAST._IExpr _5547___mcc_h1315 = _source302.dtor_body;
                    }
                  } else {
                  }
                } else if (_source301.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5548___mcc_h1319 = _source301.dtor_op2;
                  RAST._IExpr _5549___mcc_h1320 = _source301.dtor_left;
                  RAST._IExpr _5550___mcc_h1321 = _source301.dtor_right;
                  DAST.Format._IBinaryOpFormat _5551___mcc_h1322 = _source301.dtor_format2;
                } else if (_source301.is_TypeAscription) {
                  RAST._IExpr _5552___mcc_h1327 = _source301.dtor_left;
                  RAST._IType _5553___mcc_h1328 = _source301.dtor_tpe;
                } else if (_source301.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5554___mcc_h1331 = _source301.dtor_value;
                } else if (_source301.is_LiteralBool) {
                  bool _5555___mcc_h1333 = _source301.dtor_bvalue;
                } else if (_source301.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5556___mcc_h1335 = _source301.dtor_value;
                  bool _5557___mcc_h1336 = _source301.dtor_binary;
                } else if (_source301.is_DeclareVar) {
                  RAST._IDeclareType _5558___mcc_h1339 = _source301.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5559___mcc_h1340 = _source301.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5560___mcc_h1341 = _source301.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5561___mcc_h1342 = _source301.dtor_optRhs;
                } else if (_source301.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5562___mcc_h1347 = _source301.dtor_names;
                  RAST._IExpr _5563___mcc_h1348 = _source301.dtor_rhs;
                } else if (_source301.is_IfExpr) {
                  RAST._IExpr _5564___mcc_h1351 = _source301.dtor_cond;
                  RAST._IExpr _5565___mcc_h1352 = _source301.dtor_thn;
                  RAST._IExpr _5566___mcc_h1353 = _source301.dtor_els;
                } else if (_source301.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5567___mcc_h1357 = _source301.dtor_optCond;
                  RAST._IExpr _5568___mcc_h1358 = _source301.dtor_underlying;
                } else if (_source301.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5569___mcc_h1361 = _source301.dtor_name;
                  RAST._IExpr _5570___mcc_h1362 = _source301.dtor_range;
                  RAST._IExpr _5571___mcc_h1363 = _source301.dtor_body;
                } else if (_source301.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5572___mcc_h1367 = _source301.dtor_lbl;
                  RAST._IExpr _5573___mcc_h1368 = _source301.dtor_underlying;
                } else if (_source301.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5574___mcc_h1371 = _source301.dtor_optLbl;
                } else if (_source301.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5575___mcc_h1373 = _source301.dtor_optLbl;
                } else if (_source301.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5576___mcc_h1375 = _source301.dtor_optExpr;
                } else if (_source301.is_CallType) {
                  RAST._IExpr _5577___mcc_h1377 = _source301.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5578___mcc_h1378 = _source301.dtor_typeParameters;
                } else if (_source301.is_Call) {
                  RAST._IExpr _5579___mcc_h1381 = _source301.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5580___mcc_h1382 = _source301.dtor_arguments;
                } else if (_source301.is_Select) {
                  RAST._IExpr _5581___mcc_h1385 = _source301.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5582___mcc_h1386 = _source301.dtor_name;
                } else if (_source301.is_MemberSelect) {
                  RAST._IExpr _5583___mcc_h1389 = _source301.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5584___mcc_h1390 = _source301.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5585___mcc_h1393 = _source301.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5586___mcc_h1394 = _source301.dtor_retType;
                  RAST._IExpr _5587___mcc_h1395 = _source301.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5471_field));
              if (_5470_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _5588_fromOwnership;
              _5588_fromOwnership = ((_5470_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1716;
              DCOMP._IOwnership _out1717;
              DCOMP.COMP.FromOwnership(r, _5588_fromOwnership, expectedOwnership, out _out1716, out _out1717);
              r = _out1716;
              resultingOwnership = _out1717;
              readIdents = _5479_recIdents;
            }
            return ;
          }
        } else if (_source292.is_ArrayIndexToInt) {
          DAST._IExpression _5589___mcc_h76 = _source292.dtor_value;
          DAST._IType _5590_fieldType = _4966___mcc_h57;
          bool _5591_isDatatype = _4965___mcc_h56;
          bool _5592_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5593_field = _4963___mcc_h54;
          DAST._IExpression _5594_on = _4962___mcc_h53;
          {
            if (_5591_isDatatype) {
              RAST._IExpr _5595_onExpr;
              DCOMP._IOwnership _5596_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5597_recIdents;
              RAST._IExpr _out1718;
              DCOMP._IOwnership _out1719;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1720;
              (this).GenExpr(_5594_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1718, out _out1719, out _out1720);
              _5595_onExpr = _out1718;
              _5596_onOwned = _out1719;
              _5597_recIdents = _out1720;
              r = ((_5595_onExpr).Sel(DCOMP.__default.escapeName(_5593_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5598_typ;
              RAST._IType _out1721;
              _out1721 = (this).GenType(_5590_fieldType, false, false);
              _5598_typ = _out1721;
              if (((_5598_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1722;
                DCOMP._IOwnership _out1723;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1722, out _out1723);
                r = _out1722;
                resultingOwnership = _out1723;
              }
              readIdents = _5597_recIdents;
            } else {
              RAST._IExpr _5599_onExpr;
              DCOMP._IOwnership _5600_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5601_recIdents;
              RAST._IExpr _out1724;
              DCOMP._IOwnership _out1725;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1726;
              (this).GenExpr(_5594_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1724, out _out1725, out _out1726);
              _5599_onExpr = _out1724;
              _5600_onOwned = _out1725;
              _5601_recIdents = _out1726;
              r = _5599_onExpr;
              if (!object.Equals(_5599_onExpr, RAST.__default.self)) {
                RAST._IExpr _source303 = _5599_onExpr;
                if (_source303.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5602___mcc_h1399 = _source303.dtor_content;
                } else if (_source303.is_ExprFromType) {
                  RAST._IType _5603___mcc_h1401 = _source303.dtor_tpe;
                } else if (_source303.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5604___mcc_h1403 = _source303.dtor_name;
                } else if (_source303.is_Match) {
                  RAST._IExpr _5605___mcc_h1405 = _source303.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5606___mcc_h1406 = _source303.dtor_cases;
                } else if (_source303.is_StmtExpr) {
                  RAST._IExpr _5607___mcc_h1409 = _source303.dtor_stmt;
                  RAST._IExpr _5608___mcc_h1410 = _source303.dtor_rhs;
                } else if (_source303.is_Block) {
                  RAST._IExpr _5609___mcc_h1413 = _source303.dtor_underlying;
                } else if (_source303.is_StructBuild) {
                  RAST._IExpr _5610___mcc_h1415 = _source303.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5611___mcc_h1416 = _source303.dtor_assignments;
                } else if (_source303.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5612___mcc_h1419 = _source303.dtor_arguments;
                } else if (_source303.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5613___mcc_h1421 = _source303.dtor_op1;
                  RAST._IExpr _5614___mcc_h1422 = _source303.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5615___mcc_h1423 = _source303.dtor_format;
                  if (object.Equals(_5613___mcc_h1421, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source304 = _5614___mcc_h1422;
                    if (_source304.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5616___mcc_h1427 = _source304.dtor_content;
                    } else if (_source304.is_ExprFromType) {
                      RAST._IType _5617___mcc_h1429 = _source304.dtor_tpe;
                    } else if (_source304.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5618___mcc_h1431 = _source304.dtor_name;
                      if (object.Equals(_5618___mcc_h1431, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source304.is_Match) {
                      RAST._IExpr _5619___mcc_h1433 = _source304.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5620___mcc_h1434 = _source304.dtor_cases;
                    } else if (_source304.is_StmtExpr) {
                      RAST._IExpr _5621___mcc_h1437 = _source304.dtor_stmt;
                      RAST._IExpr _5622___mcc_h1438 = _source304.dtor_rhs;
                    } else if (_source304.is_Block) {
                      RAST._IExpr _5623___mcc_h1441 = _source304.dtor_underlying;
                    } else if (_source304.is_StructBuild) {
                      RAST._IExpr _5624___mcc_h1443 = _source304.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5625___mcc_h1444 = _source304.dtor_assignments;
                    } else if (_source304.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5626___mcc_h1447 = _source304.dtor_arguments;
                    } else if (_source304.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5627___mcc_h1449 = _source304.dtor_op1;
                      RAST._IExpr _5628___mcc_h1450 = _source304.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5629___mcc_h1451 = _source304.dtor_format;
                    } else if (_source304.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5630___mcc_h1455 = _source304.dtor_op2;
                      RAST._IExpr _5631___mcc_h1456 = _source304.dtor_left;
                      RAST._IExpr _5632___mcc_h1457 = _source304.dtor_right;
                      DAST.Format._IBinaryOpFormat _5633___mcc_h1458 = _source304.dtor_format2;
                    } else if (_source304.is_TypeAscription) {
                      RAST._IExpr _5634___mcc_h1463 = _source304.dtor_left;
                      RAST._IType _5635___mcc_h1464 = _source304.dtor_tpe;
                    } else if (_source304.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5636___mcc_h1467 = _source304.dtor_value;
                    } else if (_source304.is_LiteralBool) {
                      bool _5637___mcc_h1469 = _source304.dtor_bvalue;
                    } else if (_source304.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5638___mcc_h1471 = _source304.dtor_value;
                      bool _5639___mcc_h1472 = _source304.dtor_binary;
                    } else if (_source304.is_DeclareVar) {
                      RAST._IDeclareType _5640___mcc_h1475 = _source304.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5641___mcc_h1476 = _source304.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5642___mcc_h1477 = _source304.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5643___mcc_h1478 = _source304.dtor_optRhs;
                    } else if (_source304.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5644___mcc_h1483 = _source304.dtor_names;
                      RAST._IExpr _5645___mcc_h1484 = _source304.dtor_rhs;
                    } else if (_source304.is_IfExpr) {
                      RAST._IExpr _5646___mcc_h1487 = _source304.dtor_cond;
                      RAST._IExpr _5647___mcc_h1488 = _source304.dtor_thn;
                      RAST._IExpr _5648___mcc_h1489 = _source304.dtor_els;
                    } else if (_source304.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5649___mcc_h1493 = _source304.dtor_optCond;
                      RAST._IExpr _5650___mcc_h1494 = _source304.dtor_underlying;
                    } else if (_source304.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5651___mcc_h1497 = _source304.dtor_name;
                      RAST._IExpr _5652___mcc_h1498 = _source304.dtor_range;
                      RAST._IExpr _5653___mcc_h1499 = _source304.dtor_body;
                    } else if (_source304.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5654___mcc_h1503 = _source304.dtor_lbl;
                      RAST._IExpr _5655___mcc_h1504 = _source304.dtor_underlying;
                    } else if (_source304.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5656___mcc_h1507 = _source304.dtor_optLbl;
                    } else if (_source304.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5657___mcc_h1509 = _source304.dtor_optLbl;
                    } else if (_source304.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5658___mcc_h1511 = _source304.dtor_optExpr;
                    } else if (_source304.is_CallType) {
                      RAST._IExpr _5659___mcc_h1513 = _source304.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5660___mcc_h1514 = _source304.dtor_typeParameters;
                    } else if (_source304.is_Call) {
                      RAST._IExpr _5661___mcc_h1517 = _source304.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5662___mcc_h1518 = _source304.dtor_arguments;
                    } else if (_source304.is_Select) {
                      RAST._IExpr _5663___mcc_h1521 = _source304.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5664___mcc_h1522 = _source304.dtor_name;
                    } else if (_source304.is_MemberSelect) {
                      RAST._IExpr _5665___mcc_h1525 = _source304.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5666___mcc_h1526 = _source304.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5667___mcc_h1529 = _source304.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5668___mcc_h1530 = _source304.dtor_retType;
                      RAST._IExpr _5669___mcc_h1531 = _source304.dtor_body;
                    }
                  } else {
                  }
                } else if (_source303.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5670___mcc_h1535 = _source303.dtor_op2;
                  RAST._IExpr _5671___mcc_h1536 = _source303.dtor_left;
                  RAST._IExpr _5672___mcc_h1537 = _source303.dtor_right;
                  DAST.Format._IBinaryOpFormat _5673___mcc_h1538 = _source303.dtor_format2;
                } else if (_source303.is_TypeAscription) {
                  RAST._IExpr _5674___mcc_h1543 = _source303.dtor_left;
                  RAST._IType _5675___mcc_h1544 = _source303.dtor_tpe;
                } else if (_source303.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5676___mcc_h1547 = _source303.dtor_value;
                } else if (_source303.is_LiteralBool) {
                  bool _5677___mcc_h1549 = _source303.dtor_bvalue;
                } else if (_source303.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5678___mcc_h1551 = _source303.dtor_value;
                  bool _5679___mcc_h1552 = _source303.dtor_binary;
                } else if (_source303.is_DeclareVar) {
                  RAST._IDeclareType _5680___mcc_h1555 = _source303.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5681___mcc_h1556 = _source303.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5682___mcc_h1557 = _source303.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5683___mcc_h1558 = _source303.dtor_optRhs;
                } else if (_source303.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5684___mcc_h1563 = _source303.dtor_names;
                  RAST._IExpr _5685___mcc_h1564 = _source303.dtor_rhs;
                } else if (_source303.is_IfExpr) {
                  RAST._IExpr _5686___mcc_h1567 = _source303.dtor_cond;
                  RAST._IExpr _5687___mcc_h1568 = _source303.dtor_thn;
                  RAST._IExpr _5688___mcc_h1569 = _source303.dtor_els;
                } else if (_source303.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5689___mcc_h1573 = _source303.dtor_optCond;
                  RAST._IExpr _5690___mcc_h1574 = _source303.dtor_underlying;
                } else if (_source303.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5691___mcc_h1577 = _source303.dtor_name;
                  RAST._IExpr _5692___mcc_h1578 = _source303.dtor_range;
                  RAST._IExpr _5693___mcc_h1579 = _source303.dtor_body;
                } else if (_source303.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5694___mcc_h1583 = _source303.dtor_lbl;
                  RAST._IExpr _5695___mcc_h1584 = _source303.dtor_underlying;
                } else if (_source303.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5696___mcc_h1587 = _source303.dtor_optLbl;
                } else if (_source303.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5697___mcc_h1589 = _source303.dtor_optLbl;
                } else if (_source303.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5698___mcc_h1591 = _source303.dtor_optExpr;
                } else if (_source303.is_CallType) {
                  RAST._IExpr _5699___mcc_h1593 = _source303.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5700___mcc_h1594 = _source303.dtor_typeParameters;
                } else if (_source303.is_Call) {
                  RAST._IExpr _5701___mcc_h1597 = _source303.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5702___mcc_h1598 = _source303.dtor_arguments;
                } else if (_source303.is_Select) {
                  RAST._IExpr _5703___mcc_h1601 = _source303.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5704___mcc_h1602 = _source303.dtor_name;
                } else if (_source303.is_MemberSelect) {
                  RAST._IExpr _5705___mcc_h1605 = _source303.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5706___mcc_h1606 = _source303.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5707___mcc_h1609 = _source303.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5708___mcc_h1610 = _source303.dtor_retType;
                  RAST._IExpr _5709___mcc_h1611 = _source303.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5593_field));
              if (_5592_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _5710_fromOwnership;
              _5710_fromOwnership = ((_5592_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1727;
              DCOMP._IOwnership _out1728;
              DCOMP.COMP.FromOwnership(r, _5710_fromOwnership, expectedOwnership, out _out1727, out _out1728);
              r = _out1727;
              resultingOwnership = _out1728;
              readIdents = _5601_recIdents;
            }
            return ;
          }
        } else if (_source292.is_FinalizeNewArray) {
          DAST._IExpression _5711___mcc_h78 = _source292.dtor_value;
          DAST._IType _5712___mcc_h79 = _source292.dtor_typ;
          DAST._IType _5713_fieldType = _4966___mcc_h57;
          bool _5714_isDatatype = _4965___mcc_h56;
          bool _5715_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5716_field = _4963___mcc_h54;
          DAST._IExpression _5717_on = _4962___mcc_h53;
          {
            if (_5714_isDatatype) {
              RAST._IExpr _5718_onExpr;
              DCOMP._IOwnership _5719_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5720_recIdents;
              RAST._IExpr _out1729;
              DCOMP._IOwnership _out1730;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1731;
              (this).GenExpr(_5717_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1729, out _out1730, out _out1731);
              _5718_onExpr = _out1729;
              _5719_onOwned = _out1730;
              _5720_recIdents = _out1731;
              r = ((_5718_onExpr).Sel(DCOMP.__default.escapeName(_5716_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5721_typ;
              RAST._IType _out1732;
              _out1732 = (this).GenType(_5713_fieldType, false, false);
              _5721_typ = _out1732;
              if (((_5721_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1733;
                DCOMP._IOwnership _out1734;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1733, out _out1734);
                r = _out1733;
                resultingOwnership = _out1734;
              }
              readIdents = _5720_recIdents;
            } else {
              RAST._IExpr _5722_onExpr;
              DCOMP._IOwnership _5723_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5724_recIdents;
              RAST._IExpr _out1735;
              DCOMP._IOwnership _out1736;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1737;
              (this).GenExpr(_5717_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1735, out _out1736, out _out1737);
              _5722_onExpr = _out1735;
              _5723_onOwned = _out1736;
              _5724_recIdents = _out1737;
              r = _5722_onExpr;
              if (!object.Equals(_5722_onExpr, RAST.__default.self)) {
                RAST._IExpr _source305 = _5722_onExpr;
                if (_source305.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5725___mcc_h1615 = _source305.dtor_content;
                } else if (_source305.is_ExprFromType) {
                  RAST._IType _5726___mcc_h1617 = _source305.dtor_tpe;
                } else if (_source305.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5727___mcc_h1619 = _source305.dtor_name;
                } else if (_source305.is_Match) {
                  RAST._IExpr _5728___mcc_h1621 = _source305.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5729___mcc_h1622 = _source305.dtor_cases;
                } else if (_source305.is_StmtExpr) {
                  RAST._IExpr _5730___mcc_h1625 = _source305.dtor_stmt;
                  RAST._IExpr _5731___mcc_h1626 = _source305.dtor_rhs;
                } else if (_source305.is_Block) {
                  RAST._IExpr _5732___mcc_h1629 = _source305.dtor_underlying;
                } else if (_source305.is_StructBuild) {
                  RAST._IExpr _5733___mcc_h1631 = _source305.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5734___mcc_h1632 = _source305.dtor_assignments;
                } else if (_source305.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5735___mcc_h1635 = _source305.dtor_arguments;
                } else if (_source305.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5736___mcc_h1637 = _source305.dtor_op1;
                  RAST._IExpr _5737___mcc_h1638 = _source305.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5738___mcc_h1639 = _source305.dtor_format;
                  if (object.Equals(_5736___mcc_h1637, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source306 = _5737___mcc_h1638;
                    if (_source306.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5739___mcc_h1643 = _source306.dtor_content;
                    } else if (_source306.is_ExprFromType) {
                      RAST._IType _5740___mcc_h1645 = _source306.dtor_tpe;
                    } else if (_source306.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5741___mcc_h1647 = _source306.dtor_name;
                      if (object.Equals(_5741___mcc_h1647, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source306.is_Match) {
                      RAST._IExpr _5742___mcc_h1649 = _source306.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5743___mcc_h1650 = _source306.dtor_cases;
                    } else if (_source306.is_StmtExpr) {
                      RAST._IExpr _5744___mcc_h1653 = _source306.dtor_stmt;
                      RAST._IExpr _5745___mcc_h1654 = _source306.dtor_rhs;
                    } else if (_source306.is_Block) {
                      RAST._IExpr _5746___mcc_h1657 = _source306.dtor_underlying;
                    } else if (_source306.is_StructBuild) {
                      RAST._IExpr _5747___mcc_h1659 = _source306.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5748___mcc_h1660 = _source306.dtor_assignments;
                    } else if (_source306.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5749___mcc_h1663 = _source306.dtor_arguments;
                    } else if (_source306.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5750___mcc_h1665 = _source306.dtor_op1;
                      RAST._IExpr _5751___mcc_h1666 = _source306.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5752___mcc_h1667 = _source306.dtor_format;
                    } else if (_source306.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5753___mcc_h1671 = _source306.dtor_op2;
                      RAST._IExpr _5754___mcc_h1672 = _source306.dtor_left;
                      RAST._IExpr _5755___mcc_h1673 = _source306.dtor_right;
                      DAST.Format._IBinaryOpFormat _5756___mcc_h1674 = _source306.dtor_format2;
                    } else if (_source306.is_TypeAscription) {
                      RAST._IExpr _5757___mcc_h1679 = _source306.dtor_left;
                      RAST._IType _5758___mcc_h1680 = _source306.dtor_tpe;
                    } else if (_source306.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5759___mcc_h1683 = _source306.dtor_value;
                    } else if (_source306.is_LiteralBool) {
                      bool _5760___mcc_h1685 = _source306.dtor_bvalue;
                    } else if (_source306.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5761___mcc_h1687 = _source306.dtor_value;
                      bool _5762___mcc_h1688 = _source306.dtor_binary;
                    } else if (_source306.is_DeclareVar) {
                      RAST._IDeclareType _5763___mcc_h1691 = _source306.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5764___mcc_h1692 = _source306.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5765___mcc_h1693 = _source306.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5766___mcc_h1694 = _source306.dtor_optRhs;
                    } else if (_source306.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5767___mcc_h1699 = _source306.dtor_names;
                      RAST._IExpr _5768___mcc_h1700 = _source306.dtor_rhs;
                    } else if (_source306.is_IfExpr) {
                      RAST._IExpr _5769___mcc_h1703 = _source306.dtor_cond;
                      RAST._IExpr _5770___mcc_h1704 = _source306.dtor_thn;
                      RAST._IExpr _5771___mcc_h1705 = _source306.dtor_els;
                    } else if (_source306.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5772___mcc_h1709 = _source306.dtor_optCond;
                      RAST._IExpr _5773___mcc_h1710 = _source306.dtor_underlying;
                    } else if (_source306.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5774___mcc_h1713 = _source306.dtor_name;
                      RAST._IExpr _5775___mcc_h1714 = _source306.dtor_range;
                      RAST._IExpr _5776___mcc_h1715 = _source306.dtor_body;
                    } else if (_source306.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5777___mcc_h1719 = _source306.dtor_lbl;
                      RAST._IExpr _5778___mcc_h1720 = _source306.dtor_underlying;
                    } else if (_source306.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5779___mcc_h1723 = _source306.dtor_optLbl;
                    } else if (_source306.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5780___mcc_h1725 = _source306.dtor_optLbl;
                    } else if (_source306.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5781___mcc_h1727 = _source306.dtor_optExpr;
                    } else if (_source306.is_CallType) {
                      RAST._IExpr _5782___mcc_h1729 = _source306.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5783___mcc_h1730 = _source306.dtor_typeParameters;
                    } else if (_source306.is_Call) {
                      RAST._IExpr _5784___mcc_h1733 = _source306.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5785___mcc_h1734 = _source306.dtor_arguments;
                    } else if (_source306.is_Select) {
                      RAST._IExpr _5786___mcc_h1737 = _source306.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5787___mcc_h1738 = _source306.dtor_name;
                    } else if (_source306.is_MemberSelect) {
                      RAST._IExpr _5788___mcc_h1741 = _source306.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5789___mcc_h1742 = _source306.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5790___mcc_h1745 = _source306.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5791___mcc_h1746 = _source306.dtor_retType;
                      RAST._IExpr _5792___mcc_h1747 = _source306.dtor_body;
                    }
                  } else {
                  }
                } else if (_source305.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5793___mcc_h1751 = _source305.dtor_op2;
                  RAST._IExpr _5794___mcc_h1752 = _source305.dtor_left;
                  RAST._IExpr _5795___mcc_h1753 = _source305.dtor_right;
                  DAST.Format._IBinaryOpFormat _5796___mcc_h1754 = _source305.dtor_format2;
                } else if (_source305.is_TypeAscription) {
                  RAST._IExpr _5797___mcc_h1759 = _source305.dtor_left;
                  RAST._IType _5798___mcc_h1760 = _source305.dtor_tpe;
                } else if (_source305.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5799___mcc_h1763 = _source305.dtor_value;
                } else if (_source305.is_LiteralBool) {
                  bool _5800___mcc_h1765 = _source305.dtor_bvalue;
                } else if (_source305.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5801___mcc_h1767 = _source305.dtor_value;
                  bool _5802___mcc_h1768 = _source305.dtor_binary;
                } else if (_source305.is_DeclareVar) {
                  RAST._IDeclareType _5803___mcc_h1771 = _source305.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5804___mcc_h1772 = _source305.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5805___mcc_h1773 = _source305.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5806___mcc_h1774 = _source305.dtor_optRhs;
                } else if (_source305.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5807___mcc_h1779 = _source305.dtor_names;
                  RAST._IExpr _5808___mcc_h1780 = _source305.dtor_rhs;
                } else if (_source305.is_IfExpr) {
                  RAST._IExpr _5809___mcc_h1783 = _source305.dtor_cond;
                  RAST._IExpr _5810___mcc_h1784 = _source305.dtor_thn;
                  RAST._IExpr _5811___mcc_h1785 = _source305.dtor_els;
                } else if (_source305.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5812___mcc_h1789 = _source305.dtor_optCond;
                  RAST._IExpr _5813___mcc_h1790 = _source305.dtor_underlying;
                } else if (_source305.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5814___mcc_h1793 = _source305.dtor_name;
                  RAST._IExpr _5815___mcc_h1794 = _source305.dtor_range;
                  RAST._IExpr _5816___mcc_h1795 = _source305.dtor_body;
                } else if (_source305.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5817___mcc_h1799 = _source305.dtor_lbl;
                  RAST._IExpr _5818___mcc_h1800 = _source305.dtor_underlying;
                } else if (_source305.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5819___mcc_h1803 = _source305.dtor_optLbl;
                } else if (_source305.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5820___mcc_h1805 = _source305.dtor_optLbl;
                } else if (_source305.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5821___mcc_h1807 = _source305.dtor_optExpr;
                } else if (_source305.is_CallType) {
                  RAST._IExpr _5822___mcc_h1809 = _source305.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5823___mcc_h1810 = _source305.dtor_typeParameters;
                } else if (_source305.is_Call) {
                  RAST._IExpr _5824___mcc_h1813 = _source305.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5825___mcc_h1814 = _source305.dtor_arguments;
                } else if (_source305.is_Select) {
                  RAST._IExpr _5826___mcc_h1817 = _source305.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5827___mcc_h1818 = _source305.dtor_name;
                } else if (_source305.is_MemberSelect) {
                  RAST._IExpr _5828___mcc_h1821 = _source305.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5829___mcc_h1822 = _source305.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5830___mcc_h1825 = _source305.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5831___mcc_h1826 = _source305.dtor_retType;
                  RAST._IExpr _5832___mcc_h1827 = _source305.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5716_field));
              if (_5715_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _5833_fromOwnership;
              _5833_fromOwnership = ((_5715_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1738;
              DCOMP._IOwnership _out1739;
              DCOMP.COMP.FromOwnership(r, _5833_fromOwnership, expectedOwnership, out _out1738, out _out1739);
              r = _out1738;
              resultingOwnership = _out1739;
              readIdents = _5724_recIdents;
            }
            return ;
          }
        } else if (_source292.is_DatatypeValue) {
          DAST._IDatatypeType _5834___mcc_h82 = _source292.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _5835___mcc_h83 = _source292.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _5836___mcc_h84 = _source292.dtor_variant;
          bool _5837___mcc_h85 = _source292.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5838___mcc_h86 = _source292.dtor_contents;
          DAST._IType _5839_fieldType = _4966___mcc_h57;
          bool _5840_isDatatype = _4965___mcc_h56;
          bool _5841_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5842_field = _4963___mcc_h54;
          DAST._IExpression _5843_on = _4962___mcc_h53;
          {
            if (_5840_isDatatype) {
              RAST._IExpr _5844_onExpr;
              DCOMP._IOwnership _5845_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5846_recIdents;
              RAST._IExpr _out1740;
              DCOMP._IOwnership _out1741;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1742;
              (this).GenExpr(_5843_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1740, out _out1741, out _out1742);
              _5844_onExpr = _out1740;
              _5845_onOwned = _out1741;
              _5846_recIdents = _out1742;
              r = ((_5844_onExpr).Sel(DCOMP.__default.escapeName(_5842_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5847_typ;
              RAST._IType _out1743;
              _out1743 = (this).GenType(_5839_fieldType, false, false);
              _5847_typ = _out1743;
              if (((_5847_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1744;
                DCOMP._IOwnership _out1745;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1744, out _out1745);
                r = _out1744;
                resultingOwnership = _out1745;
              }
              readIdents = _5846_recIdents;
            } else {
              RAST._IExpr _5848_onExpr;
              DCOMP._IOwnership _5849_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5850_recIdents;
              RAST._IExpr _out1746;
              DCOMP._IOwnership _out1747;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1748;
              (this).GenExpr(_5843_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1746, out _out1747, out _out1748);
              _5848_onExpr = _out1746;
              _5849_onOwned = _out1747;
              _5850_recIdents = _out1748;
              r = _5848_onExpr;
              if (!object.Equals(_5848_onExpr, RAST.__default.self)) {
                RAST._IExpr _source307 = _5848_onExpr;
                if (_source307.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5851___mcc_h1831 = _source307.dtor_content;
                } else if (_source307.is_ExprFromType) {
                  RAST._IType _5852___mcc_h1833 = _source307.dtor_tpe;
                } else if (_source307.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5853___mcc_h1835 = _source307.dtor_name;
                } else if (_source307.is_Match) {
                  RAST._IExpr _5854___mcc_h1837 = _source307.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5855___mcc_h1838 = _source307.dtor_cases;
                } else if (_source307.is_StmtExpr) {
                  RAST._IExpr _5856___mcc_h1841 = _source307.dtor_stmt;
                  RAST._IExpr _5857___mcc_h1842 = _source307.dtor_rhs;
                } else if (_source307.is_Block) {
                  RAST._IExpr _5858___mcc_h1845 = _source307.dtor_underlying;
                } else if (_source307.is_StructBuild) {
                  RAST._IExpr _5859___mcc_h1847 = _source307.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5860___mcc_h1848 = _source307.dtor_assignments;
                } else if (_source307.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5861___mcc_h1851 = _source307.dtor_arguments;
                } else if (_source307.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5862___mcc_h1853 = _source307.dtor_op1;
                  RAST._IExpr _5863___mcc_h1854 = _source307.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5864___mcc_h1855 = _source307.dtor_format;
                  if (object.Equals(_5862___mcc_h1853, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source308 = _5863___mcc_h1854;
                    if (_source308.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5865___mcc_h1859 = _source308.dtor_content;
                    } else if (_source308.is_ExprFromType) {
                      RAST._IType _5866___mcc_h1861 = _source308.dtor_tpe;
                    } else if (_source308.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5867___mcc_h1863 = _source308.dtor_name;
                      if (object.Equals(_5867___mcc_h1863, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source308.is_Match) {
                      RAST._IExpr _5868___mcc_h1865 = _source308.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5869___mcc_h1866 = _source308.dtor_cases;
                    } else if (_source308.is_StmtExpr) {
                      RAST._IExpr _5870___mcc_h1869 = _source308.dtor_stmt;
                      RAST._IExpr _5871___mcc_h1870 = _source308.dtor_rhs;
                    } else if (_source308.is_Block) {
                      RAST._IExpr _5872___mcc_h1873 = _source308.dtor_underlying;
                    } else if (_source308.is_StructBuild) {
                      RAST._IExpr _5873___mcc_h1875 = _source308.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5874___mcc_h1876 = _source308.dtor_assignments;
                    } else if (_source308.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5875___mcc_h1879 = _source308.dtor_arguments;
                    } else if (_source308.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5876___mcc_h1881 = _source308.dtor_op1;
                      RAST._IExpr _5877___mcc_h1882 = _source308.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5878___mcc_h1883 = _source308.dtor_format;
                    } else if (_source308.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5879___mcc_h1887 = _source308.dtor_op2;
                      RAST._IExpr _5880___mcc_h1888 = _source308.dtor_left;
                      RAST._IExpr _5881___mcc_h1889 = _source308.dtor_right;
                      DAST.Format._IBinaryOpFormat _5882___mcc_h1890 = _source308.dtor_format2;
                    } else if (_source308.is_TypeAscription) {
                      RAST._IExpr _5883___mcc_h1895 = _source308.dtor_left;
                      RAST._IType _5884___mcc_h1896 = _source308.dtor_tpe;
                    } else if (_source308.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5885___mcc_h1899 = _source308.dtor_value;
                    } else if (_source308.is_LiteralBool) {
                      bool _5886___mcc_h1901 = _source308.dtor_bvalue;
                    } else if (_source308.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5887___mcc_h1903 = _source308.dtor_value;
                      bool _5888___mcc_h1904 = _source308.dtor_binary;
                    } else if (_source308.is_DeclareVar) {
                      RAST._IDeclareType _5889___mcc_h1907 = _source308.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5890___mcc_h1908 = _source308.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5891___mcc_h1909 = _source308.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5892___mcc_h1910 = _source308.dtor_optRhs;
                    } else if (_source308.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5893___mcc_h1915 = _source308.dtor_names;
                      RAST._IExpr _5894___mcc_h1916 = _source308.dtor_rhs;
                    } else if (_source308.is_IfExpr) {
                      RAST._IExpr _5895___mcc_h1919 = _source308.dtor_cond;
                      RAST._IExpr _5896___mcc_h1920 = _source308.dtor_thn;
                      RAST._IExpr _5897___mcc_h1921 = _source308.dtor_els;
                    } else if (_source308.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5898___mcc_h1925 = _source308.dtor_optCond;
                      RAST._IExpr _5899___mcc_h1926 = _source308.dtor_underlying;
                    } else if (_source308.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5900___mcc_h1929 = _source308.dtor_name;
                      RAST._IExpr _5901___mcc_h1930 = _source308.dtor_range;
                      RAST._IExpr _5902___mcc_h1931 = _source308.dtor_body;
                    } else if (_source308.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5903___mcc_h1935 = _source308.dtor_lbl;
                      RAST._IExpr _5904___mcc_h1936 = _source308.dtor_underlying;
                    } else if (_source308.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5905___mcc_h1939 = _source308.dtor_optLbl;
                    } else if (_source308.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5906___mcc_h1941 = _source308.dtor_optLbl;
                    } else if (_source308.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5907___mcc_h1943 = _source308.dtor_optExpr;
                    } else if (_source308.is_CallType) {
                      RAST._IExpr _5908___mcc_h1945 = _source308.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5909___mcc_h1946 = _source308.dtor_typeParameters;
                    } else if (_source308.is_Call) {
                      RAST._IExpr _5910___mcc_h1949 = _source308.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5911___mcc_h1950 = _source308.dtor_arguments;
                    } else if (_source308.is_Select) {
                      RAST._IExpr _5912___mcc_h1953 = _source308.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5913___mcc_h1954 = _source308.dtor_name;
                    } else if (_source308.is_MemberSelect) {
                      RAST._IExpr _5914___mcc_h1957 = _source308.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5915___mcc_h1958 = _source308.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5916___mcc_h1961 = _source308.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5917___mcc_h1962 = _source308.dtor_retType;
                      RAST._IExpr _5918___mcc_h1963 = _source308.dtor_body;
                    }
                  } else {
                  }
                } else if (_source307.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5919___mcc_h1967 = _source307.dtor_op2;
                  RAST._IExpr _5920___mcc_h1968 = _source307.dtor_left;
                  RAST._IExpr _5921___mcc_h1969 = _source307.dtor_right;
                  DAST.Format._IBinaryOpFormat _5922___mcc_h1970 = _source307.dtor_format2;
                } else if (_source307.is_TypeAscription) {
                  RAST._IExpr _5923___mcc_h1975 = _source307.dtor_left;
                  RAST._IType _5924___mcc_h1976 = _source307.dtor_tpe;
                } else if (_source307.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5925___mcc_h1979 = _source307.dtor_value;
                } else if (_source307.is_LiteralBool) {
                  bool _5926___mcc_h1981 = _source307.dtor_bvalue;
                } else if (_source307.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5927___mcc_h1983 = _source307.dtor_value;
                  bool _5928___mcc_h1984 = _source307.dtor_binary;
                } else if (_source307.is_DeclareVar) {
                  RAST._IDeclareType _5929___mcc_h1987 = _source307.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5930___mcc_h1988 = _source307.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5931___mcc_h1989 = _source307.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5932___mcc_h1990 = _source307.dtor_optRhs;
                } else if (_source307.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5933___mcc_h1995 = _source307.dtor_names;
                  RAST._IExpr _5934___mcc_h1996 = _source307.dtor_rhs;
                } else if (_source307.is_IfExpr) {
                  RAST._IExpr _5935___mcc_h1999 = _source307.dtor_cond;
                  RAST._IExpr _5936___mcc_h2000 = _source307.dtor_thn;
                  RAST._IExpr _5937___mcc_h2001 = _source307.dtor_els;
                } else if (_source307.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5938___mcc_h2005 = _source307.dtor_optCond;
                  RAST._IExpr _5939___mcc_h2006 = _source307.dtor_underlying;
                } else if (_source307.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5940___mcc_h2009 = _source307.dtor_name;
                  RAST._IExpr _5941___mcc_h2010 = _source307.dtor_range;
                  RAST._IExpr _5942___mcc_h2011 = _source307.dtor_body;
                } else if (_source307.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5943___mcc_h2015 = _source307.dtor_lbl;
                  RAST._IExpr _5944___mcc_h2016 = _source307.dtor_underlying;
                } else if (_source307.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5945___mcc_h2019 = _source307.dtor_optLbl;
                } else if (_source307.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5946___mcc_h2021 = _source307.dtor_optLbl;
                } else if (_source307.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5947___mcc_h2023 = _source307.dtor_optExpr;
                } else if (_source307.is_CallType) {
                  RAST._IExpr _5948___mcc_h2025 = _source307.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5949___mcc_h2026 = _source307.dtor_typeParameters;
                } else if (_source307.is_Call) {
                  RAST._IExpr _5950___mcc_h2029 = _source307.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5951___mcc_h2030 = _source307.dtor_arguments;
                } else if (_source307.is_Select) {
                  RAST._IExpr _5952___mcc_h2033 = _source307.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5953___mcc_h2034 = _source307.dtor_name;
                } else if (_source307.is_MemberSelect) {
                  RAST._IExpr _5954___mcc_h2037 = _source307.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5955___mcc_h2038 = _source307.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5956___mcc_h2041 = _source307.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5957___mcc_h2042 = _source307.dtor_retType;
                  RAST._IExpr _5958___mcc_h2043 = _source307.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5842_field));
              if (_5841_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _5959_fromOwnership;
              _5959_fromOwnership = ((_5841_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1749;
              DCOMP._IOwnership _out1750;
              DCOMP.COMP.FromOwnership(r, _5959_fromOwnership, expectedOwnership, out _out1749, out _out1750);
              r = _out1749;
              resultingOwnership = _out1750;
              readIdents = _5850_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Convert) {
          DAST._IExpression _5960___mcc_h92 = _source292.dtor_value;
          DAST._IType _5961___mcc_h93 = _source292.dtor_from;
          DAST._IType _5962___mcc_h94 = _source292.dtor_typ;
          DAST._IType _5963_fieldType = _4966___mcc_h57;
          bool _5964_isDatatype = _4965___mcc_h56;
          bool _5965_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _5966_field = _4963___mcc_h54;
          DAST._IExpression _5967_on = _4962___mcc_h53;
          {
            if (_5964_isDatatype) {
              RAST._IExpr _5968_onExpr;
              DCOMP._IOwnership _5969_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5970_recIdents;
              RAST._IExpr _out1751;
              DCOMP._IOwnership _out1752;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1753;
              (this).GenExpr(_5967_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1751, out _out1752, out _out1753);
              _5968_onExpr = _out1751;
              _5969_onOwned = _out1752;
              _5970_recIdents = _out1753;
              r = ((_5968_onExpr).Sel(DCOMP.__default.escapeName(_5966_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5971_typ;
              RAST._IType _out1754;
              _out1754 = (this).GenType(_5963_fieldType, false, false);
              _5971_typ = _out1754;
              if (((_5971_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1755;
                DCOMP._IOwnership _out1756;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1755, out _out1756);
                r = _out1755;
                resultingOwnership = _out1756;
              }
              readIdents = _5970_recIdents;
            } else {
              RAST._IExpr _5972_onExpr;
              DCOMP._IOwnership _5973_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5974_recIdents;
              RAST._IExpr _out1757;
              DCOMP._IOwnership _out1758;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1759;
              (this).GenExpr(_5967_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1757, out _out1758, out _out1759);
              _5972_onExpr = _out1757;
              _5973_onOwned = _out1758;
              _5974_recIdents = _out1759;
              r = _5972_onExpr;
              if (!object.Equals(_5972_onExpr, RAST.__default.self)) {
                RAST._IExpr _source309 = _5972_onExpr;
                if (_source309.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5975___mcc_h2047 = _source309.dtor_content;
                } else if (_source309.is_ExprFromType) {
                  RAST._IType _5976___mcc_h2049 = _source309.dtor_tpe;
                } else if (_source309.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5977___mcc_h2051 = _source309.dtor_name;
                } else if (_source309.is_Match) {
                  RAST._IExpr _5978___mcc_h2053 = _source309.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5979___mcc_h2054 = _source309.dtor_cases;
                } else if (_source309.is_StmtExpr) {
                  RAST._IExpr _5980___mcc_h2057 = _source309.dtor_stmt;
                  RAST._IExpr _5981___mcc_h2058 = _source309.dtor_rhs;
                } else if (_source309.is_Block) {
                  RAST._IExpr _5982___mcc_h2061 = _source309.dtor_underlying;
                } else if (_source309.is_StructBuild) {
                  RAST._IExpr _5983___mcc_h2063 = _source309.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5984___mcc_h2064 = _source309.dtor_assignments;
                } else if (_source309.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5985___mcc_h2067 = _source309.dtor_arguments;
                } else if (_source309.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5986___mcc_h2069 = _source309.dtor_op1;
                  RAST._IExpr _5987___mcc_h2070 = _source309.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5988___mcc_h2071 = _source309.dtor_format;
                  if (object.Equals(_5986___mcc_h2069, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source310 = _5987___mcc_h2070;
                    if (_source310.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5989___mcc_h2075 = _source310.dtor_content;
                    } else if (_source310.is_ExprFromType) {
                      RAST._IType _5990___mcc_h2077 = _source310.dtor_tpe;
                    } else if (_source310.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5991___mcc_h2079 = _source310.dtor_name;
                      if (object.Equals(_5991___mcc_h2079, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source310.is_Match) {
                      RAST._IExpr _5992___mcc_h2081 = _source310.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5993___mcc_h2082 = _source310.dtor_cases;
                    } else if (_source310.is_StmtExpr) {
                      RAST._IExpr _5994___mcc_h2085 = _source310.dtor_stmt;
                      RAST._IExpr _5995___mcc_h2086 = _source310.dtor_rhs;
                    } else if (_source310.is_Block) {
                      RAST._IExpr _5996___mcc_h2089 = _source310.dtor_underlying;
                    } else if (_source310.is_StructBuild) {
                      RAST._IExpr _5997___mcc_h2091 = _source310.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5998___mcc_h2092 = _source310.dtor_assignments;
                    } else if (_source310.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5999___mcc_h2095 = _source310.dtor_arguments;
                    } else if (_source310.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6000___mcc_h2097 = _source310.dtor_op1;
                      RAST._IExpr _6001___mcc_h2098 = _source310.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6002___mcc_h2099 = _source310.dtor_format;
                    } else if (_source310.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6003___mcc_h2103 = _source310.dtor_op2;
                      RAST._IExpr _6004___mcc_h2104 = _source310.dtor_left;
                      RAST._IExpr _6005___mcc_h2105 = _source310.dtor_right;
                      DAST.Format._IBinaryOpFormat _6006___mcc_h2106 = _source310.dtor_format2;
                    } else if (_source310.is_TypeAscription) {
                      RAST._IExpr _6007___mcc_h2111 = _source310.dtor_left;
                      RAST._IType _6008___mcc_h2112 = _source310.dtor_tpe;
                    } else if (_source310.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6009___mcc_h2115 = _source310.dtor_value;
                    } else if (_source310.is_LiteralBool) {
                      bool _6010___mcc_h2117 = _source310.dtor_bvalue;
                    } else if (_source310.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6011___mcc_h2119 = _source310.dtor_value;
                      bool _6012___mcc_h2120 = _source310.dtor_binary;
                    } else if (_source310.is_DeclareVar) {
                      RAST._IDeclareType _6013___mcc_h2123 = _source310.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6014___mcc_h2124 = _source310.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6015___mcc_h2125 = _source310.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6016___mcc_h2126 = _source310.dtor_optRhs;
                    } else if (_source310.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6017___mcc_h2131 = _source310.dtor_names;
                      RAST._IExpr _6018___mcc_h2132 = _source310.dtor_rhs;
                    } else if (_source310.is_IfExpr) {
                      RAST._IExpr _6019___mcc_h2135 = _source310.dtor_cond;
                      RAST._IExpr _6020___mcc_h2136 = _source310.dtor_thn;
                      RAST._IExpr _6021___mcc_h2137 = _source310.dtor_els;
                    } else if (_source310.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6022___mcc_h2141 = _source310.dtor_optCond;
                      RAST._IExpr _6023___mcc_h2142 = _source310.dtor_underlying;
                    } else if (_source310.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6024___mcc_h2145 = _source310.dtor_name;
                      RAST._IExpr _6025___mcc_h2146 = _source310.dtor_range;
                      RAST._IExpr _6026___mcc_h2147 = _source310.dtor_body;
                    } else if (_source310.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6027___mcc_h2151 = _source310.dtor_lbl;
                      RAST._IExpr _6028___mcc_h2152 = _source310.dtor_underlying;
                    } else if (_source310.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6029___mcc_h2155 = _source310.dtor_optLbl;
                    } else if (_source310.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6030___mcc_h2157 = _source310.dtor_optLbl;
                    } else if (_source310.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6031___mcc_h2159 = _source310.dtor_optExpr;
                    } else if (_source310.is_CallType) {
                      RAST._IExpr _6032___mcc_h2161 = _source310.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6033___mcc_h2162 = _source310.dtor_typeParameters;
                    } else if (_source310.is_Call) {
                      RAST._IExpr _6034___mcc_h2165 = _source310.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6035___mcc_h2166 = _source310.dtor_arguments;
                    } else if (_source310.is_Select) {
                      RAST._IExpr _6036___mcc_h2169 = _source310.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6037___mcc_h2170 = _source310.dtor_name;
                    } else if (_source310.is_MemberSelect) {
                      RAST._IExpr _6038___mcc_h2173 = _source310.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6039___mcc_h2174 = _source310.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6040___mcc_h2177 = _source310.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6041___mcc_h2178 = _source310.dtor_retType;
                      RAST._IExpr _6042___mcc_h2179 = _source310.dtor_body;
                    }
                  } else {
                  }
                } else if (_source309.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6043___mcc_h2183 = _source309.dtor_op2;
                  RAST._IExpr _6044___mcc_h2184 = _source309.dtor_left;
                  RAST._IExpr _6045___mcc_h2185 = _source309.dtor_right;
                  DAST.Format._IBinaryOpFormat _6046___mcc_h2186 = _source309.dtor_format2;
                } else if (_source309.is_TypeAscription) {
                  RAST._IExpr _6047___mcc_h2191 = _source309.dtor_left;
                  RAST._IType _6048___mcc_h2192 = _source309.dtor_tpe;
                } else if (_source309.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6049___mcc_h2195 = _source309.dtor_value;
                } else if (_source309.is_LiteralBool) {
                  bool _6050___mcc_h2197 = _source309.dtor_bvalue;
                } else if (_source309.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6051___mcc_h2199 = _source309.dtor_value;
                  bool _6052___mcc_h2200 = _source309.dtor_binary;
                } else if (_source309.is_DeclareVar) {
                  RAST._IDeclareType _6053___mcc_h2203 = _source309.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6054___mcc_h2204 = _source309.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6055___mcc_h2205 = _source309.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6056___mcc_h2206 = _source309.dtor_optRhs;
                } else if (_source309.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6057___mcc_h2211 = _source309.dtor_names;
                  RAST._IExpr _6058___mcc_h2212 = _source309.dtor_rhs;
                } else if (_source309.is_IfExpr) {
                  RAST._IExpr _6059___mcc_h2215 = _source309.dtor_cond;
                  RAST._IExpr _6060___mcc_h2216 = _source309.dtor_thn;
                  RAST._IExpr _6061___mcc_h2217 = _source309.dtor_els;
                } else if (_source309.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6062___mcc_h2221 = _source309.dtor_optCond;
                  RAST._IExpr _6063___mcc_h2222 = _source309.dtor_underlying;
                } else if (_source309.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6064___mcc_h2225 = _source309.dtor_name;
                  RAST._IExpr _6065___mcc_h2226 = _source309.dtor_range;
                  RAST._IExpr _6066___mcc_h2227 = _source309.dtor_body;
                } else if (_source309.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6067___mcc_h2231 = _source309.dtor_lbl;
                  RAST._IExpr _6068___mcc_h2232 = _source309.dtor_underlying;
                } else if (_source309.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6069___mcc_h2235 = _source309.dtor_optLbl;
                } else if (_source309.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6070___mcc_h2237 = _source309.dtor_optLbl;
                } else if (_source309.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6071___mcc_h2239 = _source309.dtor_optExpr;
                } else if (_source309.is_CallType) {
                  RAST._IExpr _6072___mcc_h2241 = _source309.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6073___mcc_h2242 = _source309.dtor_typeParameters;
                } else if (_source309.is_Call) {
                  RAST._IExpr _6074___mcc_h2245 = _source309.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6075___mcc_h2246 = _source309.dtor_arguments;
                } else if (_source309.is_Select) {
                  RAST._IExpr _6076___mcc_h2249 = _source309.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6077___mcc_h2250 = _source309.dtor_name;
                } else if (_source309.is_MemberSelect) {
                  RAST._IExpr _6078___mcc_h2253 = _source309.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6079___mcc_h2254 = _source309.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6080___mcc_h2257 = _source309.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6081___mcc_h2258 = _source309.dtor_retType;
                  RAST._IExpr _6082___mcc_h2259 = _source309.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5966_field));
              if (_5965_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _6083_fromOwnership;
              _6083_fromOwnership = ((_5965_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1760;
              DCOMP._IOwnership _out1761;
              DCOMP.COMP.FromOwnership(r, _6083_fromOwnership, expectedOwnership, out _out1760, out _out1761);
              r = _out1760;
              resultingOwnership = _out1761;
              readIdents = _5974_recIdents;
            }
            return ;
          }
        } else if (_source292.is_SeqConstruct) {
          DAST._IExpression _6084___mcc_h98 = _source292.dtor_length;
          DAST._IExpression _6085___mcc_h99 = _source292.dtor_elem;
          DAST._IType _6086_fieldType = _4966___mcc_h57;
          bool _6087_isDatatype = _4965___mcc_h56;
          bool _6088_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _6089_field = _4963___mcc_h54;
          DAST._IExpression _6090_on = _4962___mcc_h53;
          {
            if (_6087_isDatatype) {
              RAST._IExpr _6091_onExpr;
              DCOMP._IOwnership _6092_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6093_recIdents;
              RAST._IExpr _out1762;
              DCOMP._IOwnership _out1763;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1764;
              (this).GenExpr(_6090_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1762, out _out1763, out _out1764);
              _6091_onExpr = _out1762;
              _6092_onOwned = _out1763;
              _6093_recIdents = _out1764;
              r = ((_6091_onExpr).Sel(DCOMP.__default.escapeName(_6089_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6094_typ;
              RAST._IType _out1765;
              _out1765 = (this).GenType(_6086_fieldType, false, false);
              _6094_typ = _out1765;
              if (((_6094_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1766;
                DCOMP._IOwnership _out1767;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1766, out _out1767);
                r = _out1766;
                resultingOwnership = _out1767;
              }
              readIdents = _6093_recIdents;
            } else {
              RAST._IExpr _6095_onExpr;
              DCOMP._IOwnership _6096_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6097_recIdents;
              RAST._IExpr _out1768;
              DCOMP._IOwnership _out1769;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1770;
              (this).GenExpr(_6090_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1768, out _out1769, out _out1770);
              _6095_onExpr = _out1768;
              _6096_onOwned = _out1769;
              _6097_recIdents = _out1770;
              r = _6095_onExpr;
              if (!object.Equals(_6095_onExpr, RAST.__default.self)) {
                RAST._IExpr _source311 = _6095_onExpr;
                if (_source311.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6098___mcc_h2263 = _source311.dtor_content;
                } else if (_source311.is_ExprFromType) {
                  RAST._IType _6099___mcc_h2265 = _source311.dtor_tpe;
                } else if (_source311.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6100___mcc_h2267 = _source311.dtor_name;
                } else if (_source311.is_Match) {
                  RAST._IExpr _6101___mcc_h2269 = _source311.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6102___mcc_h2270 = _source311.dtor_cases;
                } else if (_source311.is_StmtExpr) {
                  RAST._IExpr _6103___mcc_h2273 = _source311.dtor_stmt;
                  RAST._IExpr _6104___mcc_h2274 = _source311.dtor_rhs;
                } else if (_source311.is_Block) {
                  RAST._IExpr _6105___mcc_h2277 = _source311.dtor_underlying;
                } else if (_source311.is_StructBuild) {
                  RAST._IExpr _6106___mcc_h2279 = _source311.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6107___mcc_h2280 = _source311.dtor_assignments;
                } else if (_source311.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6108___mcc_h2283 = _source311.dtor_arguments;
                } else if (_source311.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6109___mcc_h2285 = _source311.dtor_op1;
                  RAST._IExpr _6110___mcc_h2286 = _source311.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6111___mcc_h2287 = _source311.dtor_format;
                  if (object.Equals(_6109___mcc_h2285, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source312 = _6110___mcc_h2286;
                    if (_source312.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6112___mcc_h2291 = _source312.dtor_content;
                    } else if (_source312.is_ExprFromType) {
                      RAST._IType _6113___mcc_h2293 = _source312.dtor_tpe;
                    } else if (_source312.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6114___mcc_h2295 = _source312.dtor_name;
                      if (object.Equals(_6114___mcc_h2295, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source312.is_Match) {
                      RAST._IExpr _6115___mcc_h2297 = _source312.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6116___mcc_h2298 = _source312.dtor_cases;
                    } else if (_source312.is_StmtExpr) {
                      RAST._IExpr _6117___mcc_h2301 = _source312.dtor_stmt;
                      RAST._IExpr _6118___mcc_h2302 = _source312.dtor_rhs;
                    } else if (_source312.is_Block) {
                      RAST._IExpr _6119___mcc_h2305 = _source312.dtor_underlying;
                    } else if (_source312.is_StructBuild) {
                      RAST._IExpr _6120___mcc_h2307 = _source312.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6121___mcc_h2308 = _source312.dtor_assignments;
                    } else if (_source312.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6122___mcc_h2311 = _source312.dtor_arguments;
                    } else if (_source312.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6123___mcc_h2313 = _source312.dtor_op1;
                      RAST._IExpr _6124___mcc_h2314 = _source312.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6125___mcc_h2315 = _source312.dtor_format;
                    } else if (_source312.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6126___mcc_h2319 = _source312.dtor_op2;
                      RAST._IExpr _6127___mcc_h2320 = _source312.dtor_left;
                      RAST._IExpr _6128___mcc_h2321 = _source312.dtor_right;
                      DAST.Format._IBinaryOpFormat _6129___mcc_h2322 = _source312.dtor_format2;
                    } else if (_source312.is_TypeAscription) {
                      RAST._IExpr _6130___mcc_h2327 = _source312.dtor_left;
                      RAST._IType _6131___mcc_h2328 = _source312.dtor_tpe;
                    } else if (_source312.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6132___mcc_h2331 = _source312.dtor_value;
                    } else if (_source312.is_LiteralBool) {
                      bool _6133___mcc_h2333 = _source312.dtor_bvalue;
                    } else if (_source312.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6134___mcc_h2335 = _source312.dtor_value;
                      bool _6135___mcc_h2336 = _source312.dtor_binary;
                    } else if (_source312.is_DeclareVar) {
                      RAST._IDeclareType _6136___mcc_h2339 = _source312.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6137___mcc_h2340 = _source312.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6138___mcc_h2341 = _source312.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6139___mcc_h2342 = _source312.dtor_optRhs;
                    } else if (_source312.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6140___mcc_h2347 = _source312.dtor_names;
                      RAST._IExpr _6141___mcc_h2348 = _source312.dtor_rhs;
                    } else if (_source312.is_IfExpr) {
                      RAST._IExpr _6142___mcc_h2351 = _source312.dtor_cond;
                      RAST._IExpr _6143___mcc_h2352 = _source312.dtor_thn;
                      RAST._IExpr _6144___mcc_h2353 = _source312.dtor_els;
                    } else if (_source312.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6145___mcc_h2357 = _source312.dtor_optCond;
                      RAST._IExpr _6146___mcc_h2358 = _source312.dtor_underlying;
                    } else if (_source312.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6147___mcc_h2361 = _source312.dtor_name;
                      RAST._IExpr _6148___mcc_h2362 = _source312.dtor_range;
                      RAST._IExpr _6149___mcc_h2363 = _source312.dtor_body;
                    } else if (_source312.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6150___mcc_h2367 = _source312.dtor_lbl;
                      RAST._IExpr _6151___mcc_h2368 = _source312.dtor_underlying;
                    } else if (_source312.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6152___mcc_h2371 = _source312.dtor_optLbl;
                    } else if (_source312.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6153___mcc_h2373 = _source312.dtor_optLbl;
                    } else if (_source312.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6154___mcc_h2375 = _source312.dtor_optExpr;
                    } else if (_source312.is_CallType) {
                      RAST._IExpr _6155___mcc_h2377 = _source312.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6156___mcc_h2378 = _source312.dtor_typeParameters;
                    } else if (_source312.is_Call) {
                      RAST._IExpr _6157___mcc_h2381 = _source312.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6158___mcc_h2382 = _source312.dtor_arguments;
                    } else if (_source312.is_Select) {
                      RAST._IExpr _6159___mcc_h2385 = _source312.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6160___mcc_h2386 = _source312.dtor_name;
                    } else if (_source312.is_MemberSelect) {
                      RAST._IExpr _6161___mcc_h2389 = _source312.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6162___mcc_h2390 = _source312.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6163___mcc_h2393 = _source312.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6164___mcc_h2394 = _source312.dtor_retType;
                      RAST._IExpr _6165___mcc_h2395 = _source312.dtor_body;
                    }
                  } else {
                  }
                } else if (_source311.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6166___mcc_h2399 = _source311.dtor_op2;
                  RAST._IExpr _6167___mcc_h2400 = _source311.dtor_left;
                  RAST._IExpr _6168___mcc_h2401 = _source311.dtor_right;
                  DAST.Format._IBinaryOpFormat _6169___mcc_h2402 = _source311.dtor_format2;
                } else if (_source311.is_TypeAscription) {
                  RAST._IExpr _6170___mcc_h2407 = _source311.dtor_left;
                  RAST._IType _6171___mcc_h2408 = _source311.dtor_tpe;
                } else if (_source311.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6172___mcc_h2411 = _source311.dtor_value;
                } else if (_source311.is_LiteralBool) {
                  bool _6173___mcc_h2413 = _source311.dtor_bvalue;
                } else if (_source311.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6174___mcc_h2415 = _source311.dtor_value;
                  bool _6175___mcc_h2416 = _source311.dtor_binary;
                } else if (_source311.is_DeclareVar) {
                  RAST._IDeclareType _6176___mcc_h2419 = _source311.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6177___mcc_h2420 = _source311.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6178___mcc_h2421 = _source311.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6179___mcc_h2422 = _source311.dtor_optRhs;
                } else if (_source311.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6180___mcc_h2427 = _source311.dtor_names;
                  RAST._IExpr _6181___mcc_h2428 = _source311.dtor_rhs;
                } else if (_source311.is_IfExpr) {
                  RAST._IExpr _6182___mcc_h2431 = _source311.dtor_cond;
                  RAST._IExpr _6183___mcc_h2432 = _source311.dtor_thn;
                  RAST._IExpr _6184___mcc_h2433 = _source311.dtor_els;
                } else if (_source311.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6185___mcc_h2437 = _source311.dtor_optCond;
                  RAST._IExpr _6186___mcc_h2438 = _source311.dtor_underlying;
                } else if (_source311.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6187___mcc_h2441 = _source311.dtor_name;
                  RAST._IExpr _6188___mcc_h2442 = _source311.dtor_range;
                  RAST._IExpr _6189___mcc_h2443 = _source311.dtor_body;
                } else if (_source311.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6190___mcc_h2447 = _source311.dtor_lbl;
                  RAST._IExpr _6191___mcc_h2448 = _source311.dtor_underlying;
                } else if (_source311.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6192___mcc_h2451 = _source311.dtor_optLbl;
                } else if (_source311.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6193___mcc_h2453 = _source311.dtor_optLbl;
                } else if (_source311.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6194___mcc_h2455 = _source311.dtor_optExpr;
                } else if (_source311.is_CallType) {
                  RAST._IExpr _6195___mcc_h2457 = _source311.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6196___mcc_h2458 = _source311.dtor_typeParameters;
                } else if (_source311.is_Call) {
                  RAST._IExpr _6197___mcc_h2461 = _source311.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6198___mcc_h2462 = _source311.dtor_arguments;
                } else if (_source311.is_Select) {
                  RAST._IExpr _6199___mcc_h2465 = _source311.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6200___mcc_h2466 = _source311.dtor_name;
                } else if (_source311.is_MemberSelect) {
                  RAST._IExpr _6201___mcc_h2469 = _source311.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6202___mcc_h2470 = _source311.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6203___mcc_h2473 = _source311.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6204___mcc_h2474 = _source311.dtor_retType;
                  RAST._IExpr _6205___mcc_h2475 = _source311.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6089_field));
              if (_6088_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _6206_fromOwnership;
              _6206_fromOwnership = ((_6088_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1771;
              DCOMP._IOwnership _out1772;
              DCOMP.COMP.FromOwnership(r, _6206_fromOwnership, expectedOwnership, out _out1771, out _out1772);
              r = _out1771;
              resultingOwnership = _out1772;
              readIdents = _6097_recIdents;
            }
            return ;
          }
        } else if (_source292.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _6207___mcc_h102 = _source292.dtor_elements;
          DAST._IType _6208___mcc_h103 = _source292.dtor_typ;
          DAST._IType _6209_fieldType = _4966___mcc_h57;
          bool _6210_isDatatype = _4965___mcc_h56;
          bool _6211_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _6212_field = _4963___mcc_h54;
          DAST._IExpression _6213_on = _4962___mcc_h53;
          {
            if (_6210_isDatatype) {
              RAST._IExpr _6214_onExpr;
              DCOMP._IOwnership _6215_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6216_recIdents;
              RAST._IExpr _out1773;
              DCOMP._IOwnership _out1774;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1775;
              (this).GenExpr(_6213_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1773, out _out1774, out _out1775);
              _6214_onExpr = _out1773;
              _6215_onOwned = _out1774;
              _6216_recIdents = _out1775;
              r = ((_6214_onExpr).Sel(DCOMP.__default.escapeName(_6212_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6217_typ;
              RAST._IType _out1776;
              _out1776 = (this).GenType(_6209_fieldType, false, false);
              _6217_typ = _out1776;
              if (((_6217_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1777;
                DCOMP._IOwnership _out1778;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1777, out _out1778);
                r = _out1777;
                resultingOwnership = _out1778;
              }
              readIdents = _6216_recIdents;
            } else {
              RAST._IExpr _6218_onExpr;
              DCOMP._IOwnership _6219_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6220_recIdents;
              RAST._IExpr _out1779;
              DCOMP._IOwnership _out1780;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1781;
              (this).GenExpr(_6213_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1779, out _out1780, out _out1781);
              _6218_onExpr = _out1779;
              _6219_onOwned = _out1780;
              _6220_recIdents = _out1781;
              r = _6218_onExpr;
              if (!object.Equals(_6218_onExpr, RAST.__default.self)) {
                RAST._IExpr _source313 = _6218_onExpr;
                if (_source313.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6221___mcc_h2479 = _source313.dtor_content;
                } else if (_source313.is_ExprFromType) {
                  RAST._IType _6222___mcc_h2481 = _source313.dtor_tpe;
                } else if (_source313.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6223___mcc_h2483 = _source313.dtor_name;
                } else if (_source313.is_Match) {
                  RAST._IExpr _6224___mcc_h2485 = _source313.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6225___mcc_h2486 = _source313.dtor_cases;
                } else if (_source313.is_StmtExpr) {
                  RAST._IExpr _6226___mcc_h2489 = _source313.dtor_stmt;
                  RAST._IExpr _6227___mcc_h2490 = _source313.dtor_rhs;
                } else if (_source313.is_Block) {
                  RAST._IExpr _6228___mcc_h2493 = _source313.dtor_underlying;
                } else if (_source313.is_StructBuild) {
                  RAST._IExpr _6229___mcc_h2495 = _source313.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6230___mcc_h2496 = _source313.dtor_assignments;
                } else if (_source313.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6231___mcc_h2499 = _source313.dtor_arguments;
                } else if (_source313.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6232___mcc_h2501 = _source313.dtor_op1;
                  RAST._IExpr _6233___mcc_h2502 = _source313.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6234___mcc_h2503 = _source313.dtor_format;
                  if (object.Equals(_6232___mcc_h2501, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source314 = _6233___mcc_h2502;
                    if (_source314.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6235___mcc_h2507 = _source314.dtor_content;
                    } else if (_source314.is_ExprFromType) {
                      RAST._IType _6236___mcc_h2509 = _source314.dtor_tpe;
                    } else if (_source314.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6237___mcc_h2511 = _source314.dtor_name;
                      if (object.Equals(_6237___mcc_h2511, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source314.is_Match) {
                      RAST._IExpr _6238___mcc_h2513 = _source314.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6239___mcc_h2514 = _source314.dtor_cases;
                    } else if (_source314.is_StmtExpr) {
                      RAST._IExpr _6240___mcc_h2517 = _source314.dtor_stmt;
                      RAST._IExpr _6241___mcc_h2518 = _source314.dtor_rhs;
                    } else if (_source314.is_Block) {
                      RAST._IExpr _6242___mcc_h2521 = _source314.dtor_underlying;
                    } else if (_source314.is_StructBuild) {
                      RAST._IExpr _6243___mcc_h2523 = _source314.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6244___mcc_h2524 = _source314.dtor_assignments;
                    } else if (_source314.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6245___mcc_h2527 = _source314.dtor_arguments;
                    } else if (_source314.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6246___mcc_h2529 = _source314.dtor_op1;
                      RAST._IExpr _6247___mcc_h2530 = _source314.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6248___mcc_h2531 = _source314.dtor_format;
                    } else if (_source314.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6249___mcc_h2535 = _source314.dtor_op2;
                      RAST._IExpr _6250___mcc_h2536 = _source314.dtor_left;
                      RAST._IExpr _6251___mcc_h2537 = _source314.dtor_right;
                      DAST.Format._IBinaryOpFormat _6252___mcc_h2538 = _source314.dtor_format2;
                    } else if (_source314.is_TypeAscription) {
                      RAST._IExpr _6253___mcc_h2543 = _source314.dtor_left;
                      RAST._IType _6254___mcc_h2544 = _source314.dtor_tpe;
                    } else if (_source314.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6255___mcc_h2547 = _source314.dtor_value;
                    } else if (_source314.is_LiteralBool) {
                      bool _6256___mcc_h2549 = _source314.dtor_bvalue;
                    } else if (_source314.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6257___mcc_h2551 = _source314.dtor_value;
                      bool _6258___mcc_h2552 = _source314.dtor_binary;
                    } else if (_source314.is_DeclareVar) {
                      RAST._IDeclareType _6259___mcc_h2555 = _source314.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6260___mcc_h2556 = _source314.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6261___mcc_h2557 = _source314.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6262___mcc_h2558 = _source314.dtor_optRhs;
                    } else if (_source314.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6263___mcc_h2563 = _source314.dtor_names;
                      RAST._IExpr _6264___mcc_h2564 = _source314.dtor_rhs;
                    } else if (_source314.is_IfExpr) {
                      RAST._IExpr _6265___mcc_h2567 = _source314.dtor_cond;
                      RAST._IExpr _6266___mcc_h2568 = _source314.dtor_thn;
                      RAST._IExpr _6267___mcc_h2569 = _source314.dtor_els;
                    } else if (_source314.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6268___mcc_h2573 = _source314.dtor_optCond;
                      RAST._IExpr _6269___mcc_h2574 = _source314.dtor_underlying;
                    } else if (_source314.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6270___mcc_h2577 = _source314.dtor_name;
                      RAST._IExpr _6271___mcc_h2578 = _source314.dtor_range;
                      RAST._IExpr _6272___mcc_h2579 = _source314.dtor_body;
                    } else if (_source314.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6273___mcc_h2583 = _source314.dtor_lbl;
                      RAST._IExpr _6274___mcc_h2584 = _source314.dtor_underlying;
                    } else if (_source314.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6275___mcc_h2587 = _source314.dtor_optLbl;
                    } else if (_source314.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6276___mcc_h2589 = _source314.dtor_optLbl;
                    } else if (_source314.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6277___mcc_h2591 = _source314.dtor_optExpr;
                    } else if (_source314.is_CallType) {
                      RAST._IExpr _6278___mcc_h2593 = _source314.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6279___mcc_h2594 = _source314.dtor_typeParameters;
                    } else if (_source314.is_Call) {
                      RAST._IExpr _6280___mcc_h2597 = _source314.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6281___mcc_h2598 = _source314.dtor_arguments;
                    } else if (_source314.is_Select) {
                      RAST._IExpr _6282___mcc_h2601 = _source314.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6283___mcc_h2602 = _source314.dtor_name;
                    } else if (_source314.is_MemberSelect) {
                      RAST._IExpr _6284___mcc_h2605 = _source314.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6285___mcc_h2606 = _source314.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6286___mcc_h2609 = _source314.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6287___mcc_h2610 = _source314.dtor_retType;
                      RAST._IExpr _6288___mcc_h2611 = _source314.dtor_body;
                    }
                  } else {
                  }
                } else if (_source313.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6289___mcc_h2615 = _source313.dtor_op2;
                  RAST._IExpr _6290___mcc_h2616 = _source313.dtor_left;
                  RAST._IExpr _6291___mcc_h2617 = _source313.dtor_right;
                  DAST.Format._IBinaryOpFormat _6292___mcc_h2618 = _source313.dtor_format2;
                } else if (_source313.is_TypeAscription) {
                  RAST._IExpr _6293___mcc_h2623 = _source313.dtor_left;
                  RAST._IType _6294___mcc_h2624 = _source313.dtor_tpe;
                } else if (_source313.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6295___mcc_h2627 = _source313.dtor_value;
                } else if (_source313.is_LiteralBool) {
                  bool _6296___mcc_h2629 = _source313.dtor_bvalue;
                } else if (_source313.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6297___mcc_h2631 = _source313.dtor_value;
                  bool _6298___mcc_h2632 = _source313.dtor_binary;
                } else if (_source313.is_DeclareVar) {
                  RAST._IDeclareType _6299___mcc_h2635 = _source313.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6300___mcc_h2636 = _source313.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6301___mcc_h2637 = _source313.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6302___mcc_h2638 = _source313.dtor_optRhs;
                } else if (_source313.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6303___mcc_h2643 = _source313.dtor_names;
                  RAST._IExpr _6304___mcc_h2644 = _source313.dtor_rhs;
                } else if (_source313.is_IfExpr) {
                  RAST._IExpr _6305___mcc_h2647 = _source313.dtor_cond;
                  RAST._IExpr _6306___mcc_h2648 = _source313.dtor_thn;
                  RAST._IExpr _6307___mcc_h2649 = _source313.dtor_els;
                } else if (_source313.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6308___mcc_h2653 = _source313.dtor_optCond;
                  RAST._IExpr _6309___mcc_h2654 = _source313.dtor_underlying;
                } else if (_source313.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6310___mcc_h2657 = _source313.dtor_name;
                  RAST._IExpr _6311___mcc_h2658 = _source313.dtor_range;
                  RAST._IExpr _6312___mcc_h2659 = _source313.dtor_body;
                } else if (_source313.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6313___mcc_h2663 = _source313.dtor_lbl;
                  RAST._IExpr _6314___mcc_h2664 = _source313.dtor_underlying;
                } else if (_source313.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6315___mcc_h2667 = _source313.dtor_optLbl;
                } else if (_source313.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6316___mcc_h2669 = _source313.dtor_optLbl;
                } else if (_source313.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6317___mcc_h2671 = _source313.dtor_optExpr;
                } else if (_source313.is_CallType) {
                  RAST._IExpr _6318___mcc_h2673 = _source313.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6319___mcc_h2674 = _source313.dtor_typeParameters;
                } else if (_source313.is_Call) {
                  RAST._IExpr _6320___mcc_h2677 = _source313.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6321___mcc_h2678 = _source313.dtor_arguments;
                } else if (_source313.is_Select) {
                  RAST._IExpr _6322___mcc_h2681 = _source313.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6323___mcc_h2682 = _source313.dtor_name;
                } else if (_source313.is_MemberSelect) {
                  RAST._IExpr _6324___mcc_h2685 = _source313.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6325___mcc_h2686 = _source313.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6326___mcc_h2689 = _source313.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6327___mcc_h2690 = _source313.dtor_retType;
                  RAST._IExpr _6328___mcc_h2691 = _source313.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6212_field));
              if (_6211_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _6329_fromOwnership;
              _6329_fromOwnership = ((_6211_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1782;
              DCOMP._IOwnership _out1783;
              DCOMP.COMP.FromOwnership(r, _6329_fromOwnership, expectedOwnership, out _out1782, out _out1783);
              r = _out1782;
              resultingOwnership = _out1783;
              readIdents = _6220_recIdents;
            }
            return ;
          }
        } else if (_source292.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _6330___mcc_h106 = _source292.dtor_elements;
          DAST._IType _6331_fieldType = _4966___mcc_h57;
          bool _6332_isDatatype = _4965___mcc_h56;
          bool _6333_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _6334_field = _4963___mcc_h54;
          DAST._IExpression _6335_on = _4962___mcc_h53;
          {
            if (_6332_isDatatype) {
              RAST._IExpr _6336_onExpr;
              DCOMP._IOwnership _6337_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6338_recIdents;
              RAST._IExpr _out1784;
              DCOMP._IOwnership _out1785;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1786;
              (this).GenExpr(_6335_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1784, out _out1785, out _out1786);
              _6336_onExpr = _out1784;
              _6337_onOwned = _out1785;
              _6338_recIdents = _out1786;
              r = ((_6336_onExpr).Sel(DCOMP.__default.escapeName(_6334_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6339_typ;
              RAST._IType _out1787;
              _out1787 = (this).GenType(_6331_fieldType, false, false);
              _6339_typ = _out1787;
              if (((_6339_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1788;
                DCOMP._IOwnership _out1789;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1788, out _out1789);
                r = _out1788;
                resultingOwnership = _out1789;
              }
              readIdents = _6338_recIdents;
            } else {
              RAST._IExpr _6340_onExpr;
              DCOMP._IOwnership _6341_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6342_recIdents;
              RAST._IExpr _out1790;
              DCOMP._IOwnership _out1791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1792;
              (this).GenExpr(_6335_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1790, out _out1791, out _out1792);
              _6340_onExpr = _out1790;
              _6341_onOwned = _out1791;
              _6342_recIdents = _out1792;
              r = _6340_onExpr;
              if (!object.Equals(_6340_onExpr, RAST.__default.self)) {
                RAST._IExpr _source315 = _6340_onExpr;
                if (_source315.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6343___mcc_h2695 = _source315.dtor_content;
                } else if (_source315.is_ExprFromType) {
                  RAST._IType _6344___mcc_h2697 = _source315.dtor_tpe;
                } else if (_source315.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6345___mcc_h2699 = _source315.dtor_name;
                } else if (_source315.is_Match) {
                  RAST._IExpr _6346___mcc_h2701 = _source315.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6347___mcc_h2702 = _source315.dtor_cases;
                } else if (_source315.is_StmtExpr) {
                  RAST._IExpr _6348___mcc_h2705 = _source315.dtor_stmt;
                  RAST._IExpr _6349___mcc_h2706 = _source315.dtor_rhs;
                } else if (_source315.is_Block) {
                  RAST._IExpr _6350___mcc_h2709 = _source315.dtor_underlying;
                } else if (_source315.is_StructBuild) {
                  RAST._IExpr _6351___mcc_h2711 = _source315.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6352___mcc_h2712 = _source315.dtor_assignments;
                } else if (_source315.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6353___mcc_h2715 = _source315.dtor_arguments;
                } else if (_source315.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6354___mcc_h2717 = _source315.dtor_op1;
                  RAST._IExpr _6355___mcc_h2718 = _source315.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6356___mcc_h2719 = _source315.dtor_format;
                  if (object.Equals(_6354___mcc_h2717, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source316 = _6355___mcc_h2718;
                    if (_source316.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6357___mcc_h2723 = _source316.dtor_content;
                    } else if (_source316.is_ExprFromType) {
                      RAST._IType _6358___mcc_h2725 = _source316.dtor_tpe;
                    } else if (_source316.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6359___mcc_h2727 = _source316.dtor_name;
                      if (object.Equals(_6359___mcc_h2727, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source316.is_Match) {
                      RAST._IExpr _6360___mcc_h2729 = _source316.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6361___mcc_h2730 = _source316.dtor_cases;
                    } else if (_source316.is_StmtExpr) {
                      RAST._IExpr _6362___mcc_h2733 = _source316.dtor_stmt;
                      RAST._IExpr _6363___mcc_h2734 = _source316.dtor_rhs;
                    } else if (_source316.is_Block) {
                      RAST._IExpr _6364___mcc_h2737 = _source316.dtor_underlying;
                    } else if (_source316.is_StructBuild) {
                      RAST._IExpr _6365___mcc_h2739 = _source316.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6366___mcc_h2740 = _source316.dtor_assignments;
                    } else if (_source316.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6367___mcc_h2743 = _source316.dtor_arguments;
                    } else if (_source316.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6368___mcc_h2745 = _source316.dtor_op1;
                      RAST._IExpr _6369___mcc_h2746 = _source316.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6370___mcc_h2747 = _source316.dtor_format;
                    } else if (_source316.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6371___mcc_h2751 = _source316.dtor_op2;
                      RAST._IExpr _6372___mcc_h2752 = _source316.dtor_left;
                      RAST._IExpr _6373___mcc_h2753 = _source316.dtor_right;
                      DAST.Format._IBinaryOpFormat _6374___mcc_h2754 = _source316.dtor_format2;
                    } else if (_source316.is_TypeAscription) {
                      RAST._IExpr _6375___mcc_h2759 = _source316.dtor_left;
                      RAST._IType _6376___mcc_h2760 = _source316.dtor_tpe;
                    } else if (_source316.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6377___mcc_h2763 = _source316.dtor_value;
                    } else if (_source316.is_LiteralBool) {
                      bool _6378___mcc_h2765 = _source316.dtor_bvalue;
                    } else if (_source316.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6379___mcc_h2767 = _source316.dtor_value;
                      bool _6380___mcc_h2768 = _source316.dtor_binary;
                    } else if (_source316.is_DeclareVar) {
                      RAST._IDeclareType _6381___mcc_h2771 = _source316.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6382___mcc_h2772 = _source316.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6383___mcc_h2773 = _source316.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6384___mcc_h2774 = _source316.dtor_optRhs;
                    } else if (_source316.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6385___mcc_h2779 = _source316.dtor_names;
                      RAST._IExpr _6386___mcc_h2780 = _source316.dtor_rhs;
                    } else if (_source316.is_IfExpr) {
                      RAST._IExpr _6387___mcc_h2783 = _source316.dtor_cond;
                      RAST._IExpr _6388___mcc_h2784 = _source316.dtor_thn;
                      RAST._IExpr _6389___mcc_h2785 = _source316.dtor_els;
                    } else if (_source316.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6390___mcc_h2789 = _source316.dtor_optCond;
                      RAST._IExpr _6391___mcc_h2790 = _source316.dtor_underlying;
                    } else if (_source316.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6392___mcc_h2793 = _source316.dtor_name;
                      RAST._IExpr _6393___mcc_h2794 = _source316.dtor_range;
                      RAST._IExpr _6394___mcc_h2795 = _source316.dtor_body;
                    } else if (_source316.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6395___mcc_h2799 = _source316.dtor_lbl;
                      RAST._IExpr _6396___mcc_h2800 = _source316.dtor_underlying;
                    } else if (_source316.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6397___mcc_h2803 = _source316.dtor_optLbl;
                    } else if (_source316.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6398___mcc_h2805 = _source316.dtor_optLbl;
                    } else if (_source316.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6399___mcc_h2807 = _source316.dtor_optExpr;
                    } else if (_source316.is_CallType) {
                      RAST._IExpr _6400___mcc_h2809 = _source316.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6401___mcc_h2810 = _source316.dtor_typeParameters;
                    } else if (_source316.is_Call) {
                      RAST._IExpr _6402___mcc_h2813 = _source316.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6403___mcc_h2814 = _source316.dtor_arguments;
                    } else if (_source316.is_Select) {
                      RAST._IExpr _6404___mcc_h2817 = _source316.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6405___mcc_h2818 = _source316.dtor_name;
                    } else if (_source316.is_MemberSelect) {
                      RAST._IExpr _6406___mcc_h2821 = _source316.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6407___mcc_h2822 = _source316.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6408___mcc_h2825 = _source316.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6409___mcc_h2826 = _source316.dtor_retType;
                      RAST._IExpr _6410___mcc_h2827 = _source316.dtor_body;
                    }
                  } else {
                  }
                } else if (_source315.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6411___mcc_h2831 = _source315.dtor_op2;
                  RAST._IExpr _6412___mcc_h2832 = _source315.dtor_left;
                  RAST._IExpr _6413___mcc_h2833 = _source315.dtor_right;
                  DAST.Format._IBinaryOpFormat _6414___mcc_h2834 = _source315.dtor_format2;
                } else if (_source315.is_TypeAscription) {
                  RAST._IExpr _6415___mcc_h2839 = _source315.dtor_left;
                  RAST._IType _6416___mcc_h2840 = _source315.dtor_tpe;
                } else if (_source315.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6417___mcc_h2843 = _source315.dtor_value;
                } else if (_source315.is_LiteralBool) {
                  bool _6418___mcc_h2845 = _source315.dtor_bvalue;
                } else if (_source315.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6419___mcc_h2847 = _source315.dtor_value;
                  bool _6420___mcc_h2848 = _source315.dtor_binary;
                } else if (_source315.is_DeclareVar) {
                  RAST._IDeclareType _6421___mcc_h2851 = _source315.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6422___mcc_h2852 = _source315.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6423___mcc_h2853 = _source315.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6424___mcc_h2854 = _source315.dtor_optRhs;
                } else if (_source315.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6425___mcc_h2859 = _source315.dtor_names;
                  RAST._IExpr _6426___mcc_h2860 = _source315.dtor_rhs;
                } else if (_source315.is_IfExpr) {
                  RAST._IExpr _6427___mcc_h2863 = _source315.dtor_cond;
                  RAST._IExpr _6428___mcc_h2864 = _source315.dtor_thn;
                  RAST._IExpr _6429___mcc_h2865 = _source315.dtor_els;
                } else if (_source315.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6430___mcc_h2869 = _source315.dtor_optCond;
                  RAST._IExpr _6431___mcc_h2870 = _source315.dtor_underlying;
                } else if (_source315.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6432___mcc_h2873 = _source315.dtor_name;
                  RAST._IExpr _6433___mcc_h2874 = _source315.dtor_range;
                  RAST._IExpr _6434___mcc_h2875 = _source315.dtor_body;
                } else if (_source315.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6435___mcc_h2879 = _source315.dtor_lbl;
                  RAST._IExpr _6436___mcc_h2880 = _source315.dtor_underlying;
                } else if (_source315.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6437___mcc_h2883 = _source315.dtor_optLbl;
                } else if (_source315.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6438___mcc_h2885 = _source315.dtor_optLbl;
                } else if (_source315.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6439___mcc_h2887 = _source315.dtor_optExpr;
                } else if (_source315.is_CallType) {
                  RAST._IExpr _6440___mcc_h2889 = _source315.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6441___mcc_h2890 = _source315.dtor_typeParameters;
                } else if (_source315.is_Call) {
                  RAST._IExpr _6442___mcc_h2893 = _source315.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6443___mcc_h2894 = _source315.dtor_arguments;
                } else if (_source315.is_Select) {
                  RAST._IExpr _6444___mcc_h2897 = _source315.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6445___mcc_h2898 = _source315.dtor_name;
                } else if (_source315.is_MemberSelect) {
                  RAST._IExpr _6446___mcc_h2901 = _source315.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6447___mcc_h2902 = _source315.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6448___mcc_h2905 = _source315.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6449___mcc_h2906 = _source315.dtor_retType;
                  RAST._IExpr _6450___mcc_h2907 = _source315.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6334_field));
              if (_6333_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _6451_fromOwnership;
              _6451_fromOwnership = ((_6333_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1793;
              DCOMP._IOwnership _out1794;
              DCOMP.COMP.FromOwnership(r, _6451_fromOwnership, expectedOwnership, out _out1793, out _out1794);
              r = _out1793;
              resultingOwnership = _out1794;
              readIdents = _6342_recIdents;
            }
            return ;
          }
        } else if (_source292.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _6452___mcc_h108 = _source292.dtor_elements;
          DAST._IType _6453_fieldType = _4966___mcc_h57;
          bool _6454_isDatatype = _4965___mcc_h56;
          bool _6455_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _6456_field = _4963___mcc_h54;
          DAST._IExpression _6457_on = _4962___mcc_h53;
          {
            if (_6454_isDatatype) {
              RAST._IExpr _6458_onExpr;
              DCOMP._IOwnership _6459_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6460_recIdents;
              RAST._IExpr _out1795;
              DCOMP._IOwnership _out1796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1797;
              (this).GenExpr(_6457_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1795, out _out1796, out _out1797);
              _6458_onExpr = _out1795;
              _6459_onOwned = _out1796;
              _6460_recIdents = _out1797;
              r = ((_6458_onExpr).Sel(DCOMP.__default.escapeName(_6456_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6461_typ;
              RAST._IType _out1798;
              _out1798 = (this).GenType(_6453_fieldType, false, false);
              _6461_typ = _out1798;
              if (((_6461_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1799;
                DCOMP._IOwnership _out1800;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1799, out _out1800);
                r = _out1799;
                resultingOwnership = _out1800;
              }
              readIdents = _6460_recIdents;
            } else {
              RAST._IExpr _6462_onExpr;
              DCOMP._IOwnership _6463_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6464_recIdents;
              RAST._IExpr _out1801;
              DCOMP._IOwnership _out1802;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1803;
              (this).GenExpr(_6457_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1801, out _out1802, out _out1803);
              _6462_onExpr = _out1801;
              _6463_onOwned = _out1802;
              _6464_recIdents = _out1803;
              r = _6462_onExpr;
              if (!object.Equals(_6462_onExpr, RAST.__default.self)) {
                RAST._IExpr _source317 = _6462_onExpr;
                if (_source317.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6465___mcc_h2911 = _source317.dtor_content;
                } else if (_source317.is_ExprFromType) {
                  RAST._IType _6466___mcc_h2913 = _source317.dtor_tpe;
                } else if (_source317.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6467___mcc_h2915 = _source317.dtor_name;
                } else if (_source317.is_Match) {
                  RAST._IExpr _6468___mcc_h2917 = _source317.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6469___mcc_h2918 = _source317.dtor_cases;
                } else if (_source317.is_StmtExpr) {
                  RAST._IExpr _6470___mcc_h2921 = _source317.dtor_stmt;
                  RAST._IExpr _6471___mcc_h2922 = _source317.dtor_rhs;
                } else if (_source317.is_Block) {
                  RAST._IExpr _6472___mcc_h2925 = _source317.dtor_underlying;
                } else if (_source317.is_StructBuild) {
                  RAST._IExpr _6473___mcc_h2927 = _source317.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6474___mcc_h2928 = _source317.dtor_assignments;
                } else if (_source317.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6475___mcc_h2931 = _source317.dtor_arguments;
                } else if (_source317.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6476___mcc_h2933 = _source317.dtor_op1;
                  RAST._IExpr _6477___mcc_h2934 = _source317.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6478___mcc_h2935 = _source317.dtor_format;
                  if (object.Equals(_6476___mcc_h2933, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source318 = _6477___mcc_h2934;
                    if (_source318.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6479___mcc_h2939 = _source318.dtor_content;
                    } else if (_source318.is_ExprFromType) {
                      RAST._IType _6480___mcc_h2941 = _source318.dtor_tpe;
                    } else if (_source318.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6481___mcc_h2943 = _source318.dtor_name;
                      if (object.Equals(_6481___mcc_h2943, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source318.is_Match) {
                      RAST._IExpr _6482___mcc_h2945 = _source318.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6483___mcc_h2946 = _source318.dtor_cases;
                    } else if (_source318.is_StmtExpr) {
                      RAST._IExpr _6484___mcc_h2949 = _source318.dtor_stmt;
                      RAST._IExpr _6485___mcc_h2950 = _source318.dtor_rhs;
                    } else if (_source318.is_Block) {
                      RAST._IExpr _6486___mcc_h2953 = _source318.dtor_underlying;
                    } else if (_source318.is_StructBuild) {
                      RAST._IExpr _6487___mcc_h2955 = _source318.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6488___mcc_h2956 = _source318.dtor_assignments;
                    } else if (_source318.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6489___mcc_h2959 = _source318.dtor_arguments;
                    } else if (_source318.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6490___mcc_h2961 = _source318.dtor_op1;
                      RAST._IExpr _6491___mcc_h2962 = _source318.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6492___mcc_h2963 = _source318.dtor_format;
                    } else if (_source318.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6493___mcc_h2967 = _source318.dtor_op2;
                      RAST._IExpr _6494___mcc_h2968 = _source318.dtor_left;
                      RAST._IExpr _6495___mcc_h2969 = _source318.dtor_right;
                      DAST.Format._IBinaryOpFormat _6496___mcc_h2970 = _source318.dtor_format2;
                    } else if (_source318.is_TypeAscription) {
                      RAST._IExpr _6497___mcc_h2975 = _source318.dtor_left;
                      RAST._IType _6498___mcc_h2976 = _source318.dtor_tpe;
                    } else if (_source318.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6499___mcc_h2979 = _source318.dtor_value;
                    } else if (_source318.is_LiteralBool) {
                      bool _6500___mcc_h2981 = _source318.dtor_bvalue;
                    } else if (_source318.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6501___mcc_h2983 = _source318.dtor_value;
                      bool _6502___mcc_h2984 = _source318.dtor_binary;
                    } else if (_source318.is_DeclareVar) {
                      RAST._IDeclareType _6503___mcc_h2987 = _source318.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6504___mcc_h2988 = _source318.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6505___mcc_h2989 = _source318.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6506___mcc_h2990 = _source318.dtor_optRhs;
                    } else if (_source318.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6507___mcc_h2995 = _source318.dtor_names;
                      RAST._IExpr _6508___mcc_h2996 = _source318.dtor_rhs;
                    } else if (_source318.is_IfExpr) {
                      RAST._IExpr _6509___mcc_h2999 = _source318.dtor_cond;
                      RAST._IExpr _6510___mcc_h3000 = _source318.dtor_thn;
                      RAST._IExpr _6511___mcc_h3001 = _source318.dtor_els;
                    } else if (_source318.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6512___mcc_h3005 = _source318.dtor_optCond;
                      RAST._IExpr _6513___mcc_h3006 = _source318.dtor_underlying;
                    } else if (_source318.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6514___mcc_h3009 = _source318.dtor_name;
                      RAST._IExpr _6515___mcc_h3010 = _source318.dtor_range;
                      RAST._IExpr _6516___mcc_h3011 = _source318.dtor_body;
                    } else if (_source318.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6517___mcc_h3015 = _source318.dtor_lbl;
                      RAST._IExpr _6518___mcc_h3016 = _source318.dtor_underlying;
                    } else if (_source318.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6519___mcc_h3019 = _source318.dtor_optLbl;
                    } else if (_source318.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6520___mcc_h3021 = _source318.dtor_optLbl;
                    } else if (_source318.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6521___mcc_h3023 = _source318.dtor_optExpr;
                    } else if (_source318.is_CallType) {
                      RAST._IExpr _6522___mcc_h3025 = _source318.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6523___mcc_h3026 = _source318.dtor_typeParameters;
                    } else if (_source318.is_Call) {
                      RAST._IExpr _6524___mcc_h3029 = _source318.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6525___mcc_h3030 = _source318.dtor_arguments;
                    } else if (_source318.is_Select) {
                      RAST._IExpr _6526___mcc_h3033 = _source318.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6527___mcc_h3034 = _source318.dtor_name;
                    } else if (_source318.is_MemberSelect) {
                      RAST._IExpr _6528___mcc_h3037 = _source318.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6529___mcc_h3038 = _source318.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6530___mcc_h3041 = _source318.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6531___mcc_h3042 = _source318.dtor_retType;
                      RAST._IExpr _6532___mcc_h3043 = _source318.dtor_body;
                    }
                  } else {
                  }
                } else if (_source317.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6533___mcc_h3047 = _source317.dtor_op2;
                  RAST._IExpr _6534___mcc_h3048 = _source317.dtor_left;
                  RAST._IExpr _6535___mcc_h3049 = _source317.dtor_right;
                  DAST.Format._IBinaryOpFormat _6536___mcc_h3050 = _source317.dtor_format2;
                } else if (_source317.is_TypeAscription) {
                  RAST._IExpr _6537___mcc_h3055 = _source317.dtor_left;
                  RAST._IType _6538___mcc_h3056 = _source317.dtor_tpe;
                } else if (_source317.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6539___mcc_h3059 = _source317.dtor_value;
                } else if (_source317.is_LiteralBool) {
                  bool _6540___mcc_h3061 = _source317.dtor_bvalue;
                } else if (_source317.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6541___mcc_h3063 = _source317.dtor_value;
                  bool _6542___mcc_h3064 = _source317.dtor_binary;
                } else if (_source317.is_DeclareVar) {
                  RAST._IDeclareType _6543___mcc_h3067 = _source317.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6544___mcc_h3068 = _source317.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6545___mcc_h3069 = _source317.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6546___mcc_h3070 = _source317.dtor_optRhs;
                } else if (_source317.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6547___mcc_h3075 = _source317.dtor_names;
                  RAST._IExpr _6548___mcc_h3076 = _source317.dtor_rhs;
                } else if (_source317.is_IfExpr) {
                  RAST._IExpr _6549___mcc_h3079 = _source317.dtor_cond;
                  RAST._IExpr _6550___mcc_h3080 = _source317.dtor_thn;
                  RAST._IExpr _6551___mcc_h3081 = _source317.dtor_els;
                } else if (_source317.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6552___mcc_h3085 = _source317.dtor_optCond;
                  RAST._IExpr _6553___mcc_h3086 = _source317.dtor_underlying;
                } else if (_source317.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6554___mcc_h3089 = _source317.dtor_name;
                  RAST._IExpr _6555___mcc_h3090 = _source317.dtor_range;
                  RAST._IExpr _6556___mcc_h3091 = _source317.dtor_body;
                } else if (_source317.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6557___mcc_h3095 = _source317.dtor_lbl;
                  RAST._IExpr _6558___mcc_h3096 = _source317.dtor_underlying;
                } else if (_source317.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6559___mcc_h3099 = _source317.dtor_optLbl;
                } else if (_source317.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6560___mcc_h3101 = _source317.dtor_optLbl;
                } else if (_source317.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6561___mcc_h3103 = _source317.dtor_optExpr;
                } else if (_source317.is_CallType) {
                  RAST._IExpr _6562___mcc_h3105 = _source317.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6563___mcc_h3106 = _source317.dtor_typeParameters;
                } else if (_source317.is_Call) {
                  RAST._IExpr _6564___mcc_h3109 = _source317.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6565___mcc_h3110 = _source317.dtor_arguments;
                } else if (_source317.is_Select) {
                  RAST._IExpr _6566___mcc_h3113 = _source317.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6567___mcc_h3114 = _source317.dtor_name;
                } else if (_source317.is_MemberSelect) {
                  RAST._IExpr _6568___mcc_h3117 = _source317.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6569___mcc_h3118 = _source317.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6570___mcc_h3121 = _source317.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6571___mcc_h3122 = _source317.dtor_retType;
                  RAST._IExpr _6572___mcc_h3123 = _source317.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6456_field));
              if (_6455_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _6573_fromOwnership;
              _6573_fromOwnership = ((_6455_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1804;
              DCOMP._IOwnership _out1805;
              DCOMP.COMP.FromOwnership(r, _6573_fromOwnership, expectedOwnership, out _out1804, out _out1805);
              r = _out1804;
              resultingOwnership = _out1805;
              readIdents = _6464_recIdents;
            }
            return ;
          }
        } else if (_source292.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6574___mcc_h110 = _source292.dtor_mapElems;
          DAST._IType _6575_fieldType = _4966___mcc_h57;
          bool _6576_isDatatype = _4965___mcc_h56;
          bool _6577_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _6578_field = _4963___mcc_h54;
          DAST._IExpression _6579_on = _4962___mcc_h53;
          {
            if (_6576_isDatatype) {
              RAST._IExpr _6580_onExpr;
              DCOMP._IOwnership _6581_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6582_recIdents;
              RAST._IExpr _out1806;
              DCOMP._IOwnership _out1807;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1808;
              (this).GenExpr(_6579_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1806, out _out1807, out _out1808);
              _6580_onExpr = _out1806;
              _6581_onOwned = _out1807;
              _6582_recIdents = _out1808;
              r = ((_6580_onExpr).Sel(DCOMP.__default.escapeName(_6578_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6583_typ;
              RAST._IType _out1809;
              _out1809 = (this).GenType(_6575_fieldType, false, false);
              _6583_typ = _out1809;
              if (((_6583_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1810;
                DCOMP._IOwnership _out1811;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1810, out _out1811);
                r = _out1810;
                resultingOwnership = _out1811;
              }
              readIdents = _6582_recIdents;
            } else {
              RAST._IExpr _6584_onExpr;
              DCOMP._IOwnership _6585_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6586_recIdents;
              RAST._IExpr _out1812;
              DCOMP._IOwnership _out1813;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1814;
              (this).GenExpr(_6579_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1812, out _out1813, out _out1814);
              _6584_onExpr = _out1812;
              _6585_onOwned = _out1813;
              _6586_recIdents = _out1814;
              r = _6584_onExpr;
              if (!object.Equals(_6584_onExpr, RAST.__default.self)) {
                RAST._IExpr _source319 = _6584_onExpr;
                if (_source319.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6587___mcc_h3127 = _source319.dtor_content;
                } else if (_source319.is_ExprFromType) {
                  RAST._IType _6588___mcc_h3129 = _source319.dtor_tpe;
                } else if (_source319.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6589___mcc_h3131 = _source319.dtor_name;
                } else if (_source319.is_Match) {
                  RAST._IExpr _6590___mcc_h3133 = _source319.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6591___mcc_h3134 = _source319.dtor_cases;
                } else if (_source319.is_StmtExpr) {
                  RAST._IExpr _6592___mcc_h3137 = _source319.dtor_stmt;
                  RAST._IExpr _6593___mcc_h3138 = _source319.dtor_rhs;
                } else if (_source319.is_Block) {
                  RAST._IExpr _6594___mcc_h3141 = _source319.dtor_underlying;
                } else if (_source319.is_StructBuild) {
                  RAST._IExpr _6595___mcc_h3143 = _source319.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6596___mcc_h3144 = _source319.dtor_assignments;
                } else if (_source319.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6597___mcc_h3147 = _source319.dtor_arguments;
                } else if (_source319.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6598___mcc_h3149 = _source319.dtor_op1;
                  RAST._IExpr _6599___mcc_h3150 = _source319.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6600___mcc_h3151 = _source319.dtor_format;
                  if (object.Equals(_6598___mcc_h3149, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source320 = _6599___mcc_h3150;
                    if (_source320.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6601___mcc_h3155 = _source320.dtor_content;
                    } else if (_source320.is_ExprFromType) {
                      RAST._IType _6602___mcc_h3157 = _source320.dtor_tpe;
                    } else if (_source320.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6603___mcc_h3159 = _source320.dtor_name;
                      if (object.Equals(_6603___mcc_h3159, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source320.is_Match) {
                      RAST._IExpr _6604___mcc_h3161 = _source320.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6605___mcc_h3162 = _source320.dtor_cases;
                    } else if (_source320.is_StmtExpr) {
                      RAST._IExpr _6606___mcc_h3165 = _source320.dtor_stmt;
                      RAST._IExpr _6607___mcc_h3166 = _source320.dtor_rhs;
                    } else if (_source320.is_Block) {
                      RAST._IExpr _6608___mcc_h3169 = _source320.dtor_underlying;
                    } else if (_source320.is_StructBuild) {
                      RAST._IExpr _6609___mcc_h3171 = _source320.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6610___mcc_h3172 = _source320.dtor_assignments;
                    } else if (_source320.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6611___mcc_h3175 = _source320.dtor_arguments;
                    } else if (_source320.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6612___mcc_h3177 = _source320.dtor_op1;
                      RAST._IExpr _6613___mcc_h3178 = _source320.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6614___mcc_h3179 = _source320.dtor_format;
                    } else if (_source320.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6615___mcc_h3183 = _source320.dtor_op2;
                      RAST._IExpr _6616___mcc_h3184 = _source320.dtor_left;
                      RAST._IExpr _6617___mcc_h3185 = _source320.dtor_right;
                      DAST.Format._IBinaryOpFormat _6618___mcc_h3186 = _source320.dtor_format2;
                    } else if (_source320.is_TypeAscription) {
                      RAST._IExpr _6619___mcc_h3191 = _source320.dtor_left;
                      RAST._IType _6620___mcc_h3192 = _source320.dtor_tpe;
                    } else if (_source320.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6621___mcc_h3195 = _source320.dtor_value;
                    } else if (_source320.is_LiteralBool) {
                      bool _6622___mcc_h3197 = _source320.dtor_bvalue;
                    } else if (_source320.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6623___mcc_h3199 = _source320.dtor_value;
                      bool _6624___mcc_h3200 = _source320.dtor_binary;
                    } else if (_source320.is_DeclareVar) {
                      RAST._IDeclareType _6625___mcc_h3203 = _source320.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6626___mcc_h3204 = _source320.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6627___mcc_h3205 = _source320.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6628___mcc_h3206 = _source320.dtor_optRhs;
                    } else if (_source320.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6629___mcc_h3211 = _source320.dtor_names;
                      RAST._IExpr _6630___mcc_h3212 = _source320.dtor_rhs;
                    } else if (_source320.is_IfExpr) {
                      RAST._IExpr _6631___mcc_h3215 = _source320.dtor_cond;
                      RAST._IExpr _6632___mcc_h3216 = _source320.dtor_thn;
                      RAST._IExpr _6633___mcc_h3217 = _source320.dtor_els;
                    } else if (_source320.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6634___mcc_h3221 = _source320.dtor_optCond;
                      RAST._IExpr _6635___mcc_h3222 = _source320.dtor_underlying;
                    } else if (_source320.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6636___mcc_h3225 = _source320.dtor_name;
                      RAST._IExpr _6637___mcc_h3226 = _source320.dtor_range;
                      RAST._IExpr _6638___mcc_h3227 = _source320.dtor_body;
                    } else if (_source320.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6639___mcc_h3231 = _source320.dtor_lbl;
                      RAST._IExpr _6640___mcc_h3232 = _source320.dtor_underlying;
                    } else if (_source320.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6641___mcc_h3235 = _source320.dtor_optLbl;
                    } else if (_source320.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6642___mcc_h3237 = _source320.dtor_optLbl;
                    } else if (_source320.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6643___mcc_h3239 = _source320.dtor_optExpr;
                    } else if (_source320.is_CallType) {
                      RAST._IExpr _6644___mcc_h3241 = _source320.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6645___mcc_h3242 = _source320.dtor_typeParameters;
                    } else if (_source320.is_Call) {
                      RAST._IExpr _6646___mcc_h3245 = _source320.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6647___mcc_h3246 = _source320.dtor_arguments;
                    } else if (_source320.is_Select) {
                      RAST._IExpr _6648___mcc_h3249 = _source320.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6649___mcc_h3250 = _source320.dtor_name;
                    } else if (_source320.is_MemberSelect) {
                      RAST._IExpr _6650___mcc_h3253 = _source320.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6651___mcc_h3254 = _source320.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6652___mcc_h3257 = _source320.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6653___mcc_h3258 = _source320.dtor_retType;
                      RAST._IExpr _6654___mcc_h3259 = _source320.dtor_body;
                    }
                  } else {
                  }
                } else if (_source319.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6655___mcc_h3263 = _source319.dtor_op2;
                  RAST._IExpr _6656___mcc_h3264 = _source319.dtor_left;
                  RAST._IExpr _6657___mcc_h3265 = _source319.dtor_right;
                  DAST.Format._IBinaryOpFormat _6658___mcc_h3266 = _source319.dtor_format2;
                } else if (_source319.is_TypeAscription) {
                  RAST._IExpr _6659___mcc_h3271 = _source319.dtor_left;
                  RAST._IType _6660___mcc_h3272 = _source319.dtor_tpe;
                } else if (_source319.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6661___mcc_h3275 = _source319.dtor_value;
                } else if (_source319.is_LiteralBool) {
                  bool _6662___mcc_h3277 = _source319.dtor_bvalue;
                } else if (_source319.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6663___mcc_h3279 = _source319.dtor_value;
                  bool _6664___mcc_h3280 = _source319.dtor_binary;
                } else if (_source319.is_DeclareVar) {
                  RAST._IDeclareType _6665___mcc_h3283 = _source319.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6666___mcc_h3284 = _source319.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6667___mcc_h3285 = _source319.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6668___mcc_h3286 = _source319.dtor_optRhs;
                } else if (_source319.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6669___mcc_h3291 = _source319.dtor_names;
                  RAST._IExpr _6670___mcc_h3292 = _source319.dtor_rhs;
                } else if (_source319.is_IfExpr) {
                  RAST._IExpr _6671___mcc_h3295 = _source319.dtor_cond;
                  RAST._IExpr _6672___mcc_h3296 = _source319.dtor_thn;
                  RAST._IExpr _6673___mcc_h3297 = _source319.dtor_els;
                } else if (_source319.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6674___mcc_h3301 = _source319.dtor_optCond;
                  RAST._IExpr _6675___mcc_h3302 = _source319.dtor_underlying;
                } else if (_source319.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6676___mcc_h3305 = _source319.dtor_name;
                  RAST._IExpr _6677___mcc_h3306 = _source319.dtor_range;
                  RAST._IExpr _6678___mcc_h3307 = _source319.dtor_body;
                } else if (_source319.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6679___mcc_h3311 = _source319.dtor_lbl;
                  RAST._IExpr _6680___mcc_h3312 = _source319.dtor_underlying;
                } else if (_source319.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6681___mcc_h3315 = _source319.dtor_optLbl;
                } else if (_source319.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6682___mcc_h3317 = _source319.dtor_optLbl;
                } else if (_source319.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6683___mcc_h3319 = _source319.dtor_optExpr;
                } else if (_source319.is_CallType) {
                  RAST._IExpr _6684___mcc_h3321 = _source319.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6685___mcc_h3322 = _source319.dtor_typeParameters;
                } else if (_source319.is_Call) {
                  RAST._IExpr _6686___mcc_h3325 = _source319.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6687___mcc_h3326 = _source319.dtor_arguments;
                } else if (_source319.is_Select) {
                  RAST._IExpr _6688___mcc_h3329 = _source319.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6689___mcc_h3330 = _source319.dtor_name;
                } else if (_source319.is_MemberSelect) {
                  RAST._IExpr _6690___mcc_h3333 = _source319.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6691___mcc_h3334 = _source319.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6692___mcc_h3337 = _source319.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6693___mcc_h3338 = _source319.dtor_retType;
                  RAST._IExpr _6694___mcc_h3339 = _source319.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6578_field));
              if (_6577_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _6695_fromOwnership;
              _6695_fromOwnership = ((_6577_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1815;
              DCOMP._IOwnership _out1816;
              DCOMP.COMP.FromOwnership(r, _6695_fromOwnership, expectedOwnership, out _out1815, out _out1816);
              r = _out1815;
              resultingOwnership = _out1816;
              readIdents = _6586_recIdents;
            }
            return ;
          }
        } else if (_source292.is_MapBuilder) {
          DAST._IType _6696___mcc_h112 = _source292.dtor_keyType;
          DAST._IType _6697___mcc_h113 = _source292.dtor_valueType;
          DAST._IType _6698_fieldType = _4966___mcc_h57;
          bool _6699_isDatatype = _4965___mcc_h56;
          bool _6700_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _6701_field = _4963___mcc_h54;
          DAST._IExpression _6702_on = _4962___mcc_h53;
          {
            if (_6699_isDatatype) {
              RAST._IExpr _6703_onExpr;
              DCOMP._IOwnership _6704_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6705_recIdents;
              RAST._IExpr _out1817;
              DCOMP._IOwnership _out1818;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1819;
              (this).GenExpr(_6702_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1817, out _out1818, out _out1819);
              _6703_onExpr = _out1817;
              _6704_onOwned = _out1818;
              _6705_recIdents = _out1819;
              r = ((_6703_onExpr).Sel(DCOMP.__default.escapeName(_6701_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6706_typ;
              RAST._IType _out1820;
              _out1820 = (this).GenType(_6698_fieldType, false, false);
              _6706_typ = _out1820;
              if (((_6706_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1821;
                DCOMP._IOwnership _out1822;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1821, out _out1822);
                r = _out1821;
                resultingOwnership = _out1822;
              }
              readIdents = _6705_recIdents;
            } else {
              RAST._IExpr _6707_onExpr;
              DCOMP._IOwnership _6708_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6709_recIdents;
              RAST._IExpr _out1823;
              DCOMP._IOwnership _out1824;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1825;
              (this).GenExpr(_6702_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1823, out _out1824, out _out1825);
              _6707_onExpr = _out1823;
              _6708_onOwned = _out1824;
              _6709_recIdents = _out1825;
              r = _6707_onExpr;
              if (!object.Equals(_6707_onExpr, RAST.__default.self)) {
                RAST._IExpr _source321 = _6707_onExpr;
                if (_source321.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6710___mcc_h3343 = _source321.dtor_content;
                } else if (_source321.is_ExprFromType) {
                  RAST._IType _6711___mcc_h3345 = _source321.dtor_tpe;
                } else if (_source321.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6712___mcc_h3347 = _source321.dtor_name;
                } else if (_source321.is_Match) {
                  RAST._IExpr _6713___mcc_h3349 = _source321.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6714___mcc_h3350 = _source321.dtor_cases;
                } else if (_source321.is_StmtExpr) {
                  RAST._IExpr _6715___mcc_h3353 = _source321.dtor_stmt;
                  RAST._IExpr _6716___mcc_h3354 = _source321.dtor_rhs;
                } else if (_source321.is_Block) {
                  RAST._IExpr _6717___mcc_h3357 = _source321.dtor_underlying;
                } else if (_source321.is_StructBuild) {
                  RAST._IExpr _6718___mcc_h3359 = _source321.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6719___mcc_h3360 = _source321.dtor_assignments;
                } else if (_source321.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6720___mcc_h3363 = _source321.dtor_arguments;
                } else if (_source321.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6721___mcc_h3365 = _source321.dtor_op1;
                  RAST._IExpr _6722___mcc_h3366 = _source321.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6723___mcc_h3367 = _source321.dtor_format;
                  if (object.Equals(_6721___mcc_h3365, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source322 = _6722___mcc_h3366;
                    if (_source322.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6724___mcc_h3371 = _source322.dtor_content;
                    } else if (_source322.is_ExprFromType) {
                      RAST._IType _6725___mcc_h3373 = _source322.dtor_tpe;
                    } else if (_source322.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6726___mcc_h3375 = _source322.dtor_name;
                      if (object.Equals(_6726___mcc_h3375, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source322.is_Match) {
                      RAST._IExpr _6727___mcc_h3377 = _source322.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6728___mcc_h3378 = _source322.dtor_cases;
                    } else if (_source322.is_StmtExpr) {
                      RAST._IExpr _6729___mcc_h3381 = _source322.dtor_stmt;
                      RAST._IExpr _6730___mcc_h3382 = _source322.dtor_rhs;
                    } else if (_source322.is_Block) {
                      RAST._IExpr _6731___mcc_h3385 = _source322.dtor_underlying;
                    } else if (_source322.is_StructBuild) {
                      RAST._IExpr _6732___mcc_h3387 = _source322.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6733___mcc_h3388 = _source322.dtor_assignments;
                    } else if (_source322.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6734___mcc_h3391 = _source322.dtor_arguments;
                    } else if (_source322.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6735___mcc_h3393 = _source322.dtor_op1;
                      RAST._IExpr _6736___mcc_h3394 = _source322.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6737___mcc_h3395 = _source322.dtor_format;
                    } else if (_source322.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6738___mcc_h3399 = _source322.dtor_op2;
                      RAST._IExpr _6739___mcc_h3400 = _source322.dtor_left;
                      RAST._IExpr _6740___mcc_h3401 = _source322.dtor_right;
                      DAST.Format._IBinaryOpFormat _6741___mcc_h3402 = _source322.dtor_format2;
                    } else if (_source322.is_TypeAscription) {
                      RAST._IExpr _6742___mcc_h3407 = _source322.dtor_left;
                      RAST._IType _6743___mcc_h3408 = _source322.dtor_tpe;
                    } else if (_source322.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6744___mcc_h3411 = _source322.dtor_value;
                    } else if (_source322.is_LiteralBool) {
                      bool _6745___mcc_h3413 = _source322.dtor_bvalue;
                    } else if (_source322.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6746___mcc_h3415 = _source322.dtor_value;
                      bool _6747___mcc_h3416 = _source322.dtor_binary;
                    } else if (_source322.is_DeclareVar) {
                      RAST._IDeclareType _6748___mcc_h3419 = _source322.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6749___mcc_h3420 = _source322.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6750___mcc_h3421 = _source322.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6751___mcc_h3422 = _source322.dtor_optRhs;
                    } else if (_source322.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6752___mcc_h3427 = _source322.dtor_names;
                      RAST._IExpr _6753___mcc_h3428 = _source322.dtor_rhs;
                    } else if (_source322.is_IfExpr) {
                      RAST._IExpr _6754___mcc_h3431 = _source322.dtor_cond;
                      RAST._IExpr _6755___mcc_h3432 = _source322.dtor_thn;
                      RAST._IExpr _6756___mcc_h3433 = _source322.dtor_els;
                    } else if (_source322.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6757___mcc_h3437 = _source322.dtor_optCond;
                      RAST._IExpr _6758___mcc_h3438 = _source322.dtor_underlying;
                    } else if (_source322.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6759___mcc_h3441 = _source322.dtor_name;
                      RAST._IExpr _6760___mcc_h3442 = _source322.dtor_range;
                      RAST._IExpr _6761___mcc_h3443 = _source322.dtor_body;
                    } else if (_source322.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6762___mcc_h3447 = _source322.dtor_lbl;
                      RAST._IExpr _6763___mcc_h3448 = _source322.dtor_underlying;
                    } else if (_source322.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6764___mcc_h3451 = _source322.dtor_optLbl;
                    } else if (_source322.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6765___mcc_h3453 = _source322.dtor_optLbl;
                    } else if (_source322.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6766___mcc_h3455 = _source322.dtor_optExpr;
                    } else if (_source322.is_CallType) {
                      RAST._IExpr _6767___mcc_h3457 = _source322.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6768___mcc_h3458 = _source322.dtor_typeParameters;
                    } else if (_source322.is_Call) {
                      RAST._IExpr _6769___mcc_h3461 = _source322.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6770___mcc_h3462 = _source322.dtor_arguments;
                    } else if (_source322.is_Select) {
                      RAST._IExpr _6771___mcc_h3465 = _source322.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6772___mcc_h3466 = _source322.dtor_name;
                    } else if (_source322.is_MemberSelect) {
                      RAST._IExpr _6773___mcc_h3469 = _source322.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6774___mcc_h3470 = _source322.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6775___mcc_h3473 = _source322.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6776___mcc_h3474 = _source322.dtor_retType;
                      RAST._IExpr _6777___mcc_h3475 = _source322.dtor_body;
                    }
                  } else {
                  }
                } else if (_source321.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6778___mcc_h3479 = _source321.dtor_op2;
                  RAST._IExpr _6779___mcc_h3480 = _source321.dtor_left;
                  RAST._IExpr _6780___mcc_h3481 = _source321.dtor_right;
                  DAST.Format._IBinaryOpFormat _6781___mcc_h3482 = _source321.dtor_format2;
                } else if (_source321.is_TypeAscription) {
                  RAST._IExpr _6782___mcc_h3487 = _source321.dtor_left;
                  RAST._IType _6783___mcc_h3488 = _source321.dtor_tpe;
                } else if (_source321.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6784___mcc_h3491 = _source321.dtor_value;
                } else if (_source321.is_LiteralBool) {
                  bool _6785___mcc_h3493 = _source321.dtor_bvalue;
                } else if (_source321.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6786___mcc_h3495 = _source321.dtor_value;
                  bool _6787___mcc_h3496 = _source321.dtor_binary;
                } else if (_source321.is_DeclareVar) {
                  RAST._IDeclareType _6788___mcc_h3499 = _source321.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6789___mcc_h3500 = _source321.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6790___mcc_h3501 = _source321.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6791___mcc_h3502 = _source321.dtor_optRhs;
                } else if (_source321.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6792___mcc_h3507 = _source321.dtor_names;
                  RAST._IExpr _6793___mcc_h3508 = _source321.dtor_rhs;
                } else if (_source321.is_IfExpr) {
                  RAST._IExpr _6794___mcc_h3511 = _source321.dtor_cond;
                  RAST._IExpr _6795___mcc_h3512 = _source321.dtor_thn;
                  RAST._IExpr _6796___mcc_h3513 = _source321.dtor_els;
                } else if (_source321.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6797___mcc_h3517 = _source321.dtor_optCond;
                  RAST._IExpr _6798___mcc_h3518 = _source321.dtor_underlying;
                } else if (_source321.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6799___mcc_h3521 = _source321.dtor_name;
                  RAST._IExpr _6800___mcc_h3522 = _source321.dtor_range;
                  RAST._IExpr _6801___mcc_h3523 = _source321.dtor_body;
                } else if (_source321.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6802___mcc_h3527 = _source321.dtor_lbl;
                  RAST._IExpr _6803___mcc_h3528 = _source321.dtor_underlying;
                } else if (_source321.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6804___mcc_h3531 = _source321.dtor_optLbl;
                } else if (_source321.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6805___mcc_h3533 = _source321.dtor_optLbl;
                } else if (_source321.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6806___mcc_h3535 = _source321.dtor_optExpr;
                } else if (_source321.is_CallType) {
                  RAST._IExpr _6807___mcc_h3537 = _source321.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6808___mcc_h3538 = _source321.dtor_typeParameters;
                } else if (_source321.is_Call) {
                  RAST._IExpr _6809___mcc_h3541 = _source321.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6810___mcc_h3542 = _source321.dtor_arguments;
                } else if (_source321.is_Select) {
                  RAST._IExpr _6811___mcc_h3545 = _source321.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6812___mcc_h3546 = _source321.dtor_name;
                } else if (_source321.is_MemberSelect) {
                  RAST._IExpr _6813___mcc_h3549 = _source321.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6814___mcc_h3550 = _source321.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6815___mcc_h3553 = _source321.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6816___mcc_h3554 = _source321.dtor_retType;
                  RAST._IExpr _6817___mcc_h3555 = _source321.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6701_field));
              if (_6700_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _6818_fromOwnership;
              _6818_fromOwnership = ((_6700_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1826;
              DCOMP._IOwnership _out1827;
              DCOMP.COMP.FromOwnership(r, _6818_fromOwnership, expectedOwnership, out _out1826, out _out1827);
              r = _out1826;
              resultingOwnership = _out1827;
              readIdents = _6709_recIdents;
            }
            return ;
          }
        } else if (_source292.is_SeqUpdate) {
          DAST._IExpression _6819___mcc_h116 = _source292.dtor_expr;
          DAST._IExpression _6820___mcc_h117 = _source292.dtor_indexExpr;
          DAST._IExpression _6821___mcc_h118 = _source292.dtor_value;
          DAST._IType _6822_fieldType = _4966___mcc_h57;
          bool _6823_isDatatype = _4965___mcc_h56;
          bool _6824_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _6825_field = _4963___mcc_h54;
          DAST._IExpression _6826_on = _4962___mcc_h53;
          {
            if (_6823_isDatatype) {
              RAST._IExpr _6827_onExpr;
              DCOMP._IOwnership _6828_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6829_recIdents;
              RAST._IExpr _out1828;
              DCOMP._IOwnership _out1829;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1830;
              (this).GenExpr(_6826_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1828, out _out1829, out _out1830);
              _6827_onExpr = _out1828;
              _6828_onOwned = _out1829;
              _6829_recIdents = _out1830;
              r = ((_6827_onExpr).Sel(DCOMP.__default.escapeName(_6825_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6830_typ;
              RAST._IType _out1831;
              _out1831 = (this).GenType(_6822_fieldType, false, false);
              _6830_typ = _out1831;
              if (((_6830_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1832;
                DCOMP._IOwnership _out1833;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1832, out _out1833);
                r = _out1832;
                resultingOwnership = _out1833;
              }
              readIdents = _6829_recIdents;
            } else {
              RAST._IExpr _6831_onExpr;
              DCOMP._IOwnership _6832_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6833_recIdents;
              RAST._IExpr _out1834;
              DCOMP._IOwnership _out1835;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1836;
              (this).GenExpr(_6826_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1834, out _out1835, out _out1836);
              _6831_onExpr = _out1834;
              _6832_onOwned = _out1835;
              _6833_recIdents = _out1836;
              r = _6831_onExpr;
              if (!object.Equals(_6831_onExpr, RAST.__default.self)) {
                RAST._IExpr _source323 = _6831_onExpr;
                if (_source323.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6834___mcc_h3559 = _source323.dtor_content;
                } else if (_source323.is_ExprFromType) {
                  RAST._IType _6835___mcc_h3561 = _source323.dtor_tpe;
                } else if (_source323.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6836___mcc_h3563 = _source323.dtor_name;
                } else if (_source323.is_Match) {
                  RAST._IExpr _6837___mcc_h3565 = _source323.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6838___mcc_h3566 = _source323.dtor_cases;
                } else if (_source323.is_StmtExpr) {
                  RAST._IExpr _6839___mcc_h3569 = _source323.dtor_stmt;
                  RAST._IExpr _6840___mcc_h3570 = _source323.dtor_rhs;
                } else if (_source323.is_Block) {
                  RAST._IExpr _6841___mcc_h3573 = _source323.dtor_underlying;
                } else if (_source323.is_StructBuild) {
                  RAST._IExpr _6842___mcc_h3575 = _source323.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6843___mcc_h3576 = _source323.dtor_assignments;
                } else if (_source323.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6844___mcc_h3579 = _source323.dtor_arguments;
                } else if (_source323.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6845___mcc_h3581 = _source323.dtor_op1;
                  RAST._IExpr _6846___mcc_h3582 = _source323.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6847___mcc_h3583 = _source323.dtor_format;
                  if (object.Equals(_6845___mcc_h3581, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source324 = _6846___mcc_h3582;
                    if (_source324.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6848___mcc_h3587 = _source324.dtor_content;
                    } else if (_source324.is_ExprFromType) {
                      RAST._IType _6849___mcc_h3589 = _source324.dtor_tpe;
                    } else if (_source324.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6850___mcc_h3591 = _source324.dtor_name;
                      if (object.Equals(_6850___mcc_h3591, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source324.is_Match) {
                      RAST._IExpr _6851___mcc_h3593 = _source324.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6852___mcc_h3594 = _source324.dtor_cases;
                    } else if (_source324.is_StmtExpr) {
                      RAST._IExpr _6853___mcc_h3597 = _source324.dtor_stmt;
                      RAST._IExpr _6854___mcc_h3598 = _source324.dtor_rhs;
                    } else if (_source324.is_Block) {
                      RAST._IExpr _6855___mcc_h3601 = _source324.dtor_underlying;
                    } else if (_source324.is_StructBuild) {
                      RAST._IExpr _6856___mcc_h3603 = _source324.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6857___mcc_h3604 = _source324.dtor_assignments;
                    } else if (_source324.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6858___mcc_h3607 = _source324.dtor_arguments;
                    } else if (_source324.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6859___mcc_h3609 = _source324.dtor_op1;
                      RAST._IExpr _6860___mcc_h3610 = _source324.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6861___mcc_h3611 = _source324.dtor_format;
                    } else if (_source324.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6862___mcc_h3615 = _source324.dtor_op2;
                      RAST._IExpr _6863___mcc_h3616 = _source324.dtor_left;
                      RAST._IExpr _6864___mcc_h3617 = _source324.dtor_right;
                      DAST.Format._IBinaryOpFormat _6865___mcc_h3618 = _source324.dtor_format2;
                    } else if (_source324.is_TypeAscription) {
                      RAST._IExpr _6866___mcc_h3623 = _source324.dtor_left;
                      RAST._IType _6867___mcc_h3624 = _source324.dtor_tpe;
                    } else if (_source324.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6868___mcc_h3627 = _source324.dtor_value;
                    } else if (_source324.is_LiteralBool) {
                      bool _6869___mcc_h3629 = _source324.dtor_bvalue;
                    } else if (_source324.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6870___mcc_h3631 = _source324.dtor_value;
                      bool _6871___mcc_h3632 = _source324.dtor_binary;
                    } else if (_source324.is_DeclareVar) {
                      RAST._IDeclareType _6872___mcc_h3635 = _source324.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6873___mcc_h3636 = _source324.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6874___mcc_h3637 = _source324.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6875___mcc_h3638 = _source324.dtor_optRhs;
                    } else if (_source324.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6876___mcc_h3643 = _source324.dtor_names;
                      RAST._IExpr _6877___mcc_h3644 = _source324.dtor_rhs;
                    } else if (_source324.is_IfExpr) {
                      RAST._IExpr _6878___mcc_h3647 = _source324.dtor_cond;
                      RAST._IExpr _6879___mcc_h3648 = _source324.dtor_thn;
                      RAST._IExpr _6880___mcc_h3649 = _source324.dtor_els;
                    } else if (_source324.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6881___mcc_h3653 = _source324.dtor_optCond;
                      RAST._IExpr _6882___mcc_h3654 = _source324.dtor_underlying;
                    } else if (_source324.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6883___mcc_h3657 = _source324.dtor_name;
                      RAST._IExpr _6884___mcc_h3658 = _source324.dtor_range;
                      RAST._IExpr _6885___mcc_h3659 = _source324.dtor_body;
                    } else if (_source324.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6886___mcc_h3663 = _source324.dtor_lbl;
                      RAST._IExpr _6887___mcc_h3664 = _source324.dtor_underlying;
                    } else if (_source324.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6888___mcc_h3667 = _source324.dtor_optLbl;
                    } else if (_source324.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6889___mcc_h3669 = _source324.dtor_optLbl;
                    } else if (_source324.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6890___mcc_h3671 = _source324.dtor_optExpr;
                    } else if (_source324.is_CallType) {
                      RAST._IExpr _6891___mcc_h3673 = _source324.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6892___mcc_h3674 = _source324.dtor_typeParameters;
                    } else if (_source324.is_Call) {
                      RAST._IExpr _6893___mcc_h3677 = _source324.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6894___mcc_h3678 = _source324.dtor_arguments;
                    } else if (_source324.is_Select) {
                      RAST._IExpr _6895___mcc_h3681 = _source324.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6896___mcc_h3682 = _source324.dtor_name;
                    } else if (_source324.is_MemberSelect) {
                      RAST._IExpr _6897___mcc_h3685 = _source324.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6898___mcc_h3686 = _source324.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6899___mcc_h3689 = _source324.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6900___mcc_h3690 = _source324.dtor_retType;
                      RAST._IExpr _6901___mcc_h3691 = _source324.dtor_body;
                    }
                  } else {
                  }
                } else if (_source323.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6902___mcc_h3695 = _source323.dtor_op2;
                  RAST._IExpr _6903___mcc_h3696 = _source323.dtor_left;
                  RAST._IExpr _6904___mcc_h3697 = _source323.dtor_right;
                  DAST.Format._IBinaryOpFormat _6905___mcc_h3698 = _source323.dtor_format2;
                } else if (_source323.is_TypeAscription) {
                  RAST._IExpr _6906___mcc_h3703 = _source323.dtor_left;
                  RAST._IType _6907___mcc_h3704 = _source323.dtor_tpe;
                } else if (_source323.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6908___mcc_h3707 = _source323.dtor_value;
                } else if (_source323.is_LiteralBool) {
                  bool _6909___mcc_h3709 = _source323.dtor_bvalue;
                } else if (_source323.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6910___mcc_h3711 = _source323.dtor_value;
                  bool _6911___mcc_h3712 = _source323.dtor_binary;
                } else if (_source323.is_DeclareVar) {
                  RAST._IDeclareType _6912___mcc_h3715 = _source323.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6913___mcc_h3716 = _source323.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6914___mcc_h3717 = _source323.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6915___mcc_h3718 = _source323.dtor_optRhs;
                } else if (_source323.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6916___mcc_h3723 = _source323.dtor_names;
                  RAST._IExpr _6917___mcc_h3724 = _source323.dtor_rhs;
                } else if (_source323.is_IfExpr) {
                  RAST._IExpr _6918___mcc_h3727 = _source323.dtor_cond;
                  RAST._IExpr _6919___mcc_h3728 = _source323.dtor_thn;
                  RAST._IExpr _6920___mcc_h3729 = _source323.dtor_els;
                } else if (_source323.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6921___mcc_h3733 = _source323.dtor_optCond;
                  RAST._IExpr _6922___mcc_h3734 = _source323.dtor_underlying;
                } else if (_source323.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6923___mcc_h3737 = _source323.dtor_name;
                  RAST._IExpr _6924___mcc_h3738 = _source323.dtor_range;
                  RAST._IExpr _6925___mcc_h3739 = _source323.dtor_body;
                } else if (_source323.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6926___mcc_h3743 = _source323.dtor_lbl;
                  RAST._IExpr _6927___mcc_h3744 = _source323.dtor_underlying;
                } else if (_source323.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6928___mcc_h3747 = _source323.dtor_optLbl;
                } else if (_source323.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6929___mcc_h3749 = _source323.dtor_optLbl;
                } else if (_source323.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6930___mcc_h3751 = _source323.dtor_optExpr;
                } else if (_source323.is_CallType) {
                  RAST._IExpr _6931___mcc_h3753 = _source323.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6932___mcc_h3754 = _source323.dtor_typeParameters;
                } else if (_source323.is_Call) {
                  RAST._IExpr _6933___mcc_h3757 = _source323.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6934___mcc_h3758 = _source323.dtor_arguments;
                } else if (_source323.is_Select) {
                  RAST._IExpr _6935___mcc_h3761 = _source323.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6936___mcc_h3762 = _source323.dtor_name;
                } else if (_source323.is_MemberSelect) {
                  RAST._IExpr _6937___mcc_h3765 = _source323.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6938___mcc_h3766 = _source323.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6939___mcc_h3769 = _source323.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6940___mcc_h3770 = _source323.dtor_retType;
                  RAST._IExpr _6941___mcc_h3771 = _source323.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6825_field));
              if (_6824_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _6942_fromOwnership;
              _6942_fromOwnership = ((_6824_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1837;
              DCOMP._IOwnership _out1838;
              DCOMP.COMP.FromOwnership(r, _6942_fromOwnership, expectedOwnership, out _out1837, out _out1838);
              r = _out1837;
              resultingOwnership = _out1838;
              readIdents = _6833_recIdents;
            }
            return ;
          }
        } else if (_source292.is_MapUpdate) {
          DAST._IExpression _6943___mcc_h122 = _source292.dtor_expr;
          DAST._IExpression _6944___mcc_h123 = _source292.dtor_indexExpr;
          DAST._IExpression _6945___mcc_h124 = _source292.dtor_value;
          DAST._IType _6946_fieldType = _4966___mcc_h57;
          bool _6947_isDatatype = _4965___mcc_h56;
          bool _6948_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _6949_field = _4963___mcc_h54;
          DAST._IExpression _6950_on = _4962___mcc_h53;
          {
            if (_6947_isDatatype) {
              RAST._IExpr _6951_onExpr;
              DCOMP._IOwnership _6952_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6953_recIdents;
              RAST._IExpr _out1839;
              DCOMP._IOwnership _out1840;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1841;
              (this).GenExpr(_6950_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1839, out _out1840, out _out1841);
              _6951_onExpr = _out1839;
              _6952_onOwned = _out1840;
              _6953_recIdents = _out1841;
              r = ((_6951_onExpr).Sel(DCOMP.__default.escapeName(_6949_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6954_typ;
              RAST._IType _out1842;
              _out1842 = (this).GenType(_6946_fieldType, false, false);
              _6954_typ = _out1842;
              if (((_6954_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1843;
                DCOMP._IOwnership _out1844;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1843, out _out1844);
                r = _out1843;
                resultingOwnership = _out1844;
              }
              readIdents = _6953_recIdents;
            } else {
              RAST._IExpr _6955_onExpr;
              DCOMP._IOwnership _6956_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6957_recIdents;
              RAST._IExpr _out1845;
              DCOMP._IOwnership _out1846;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1847;
              (this).GenExpr(_6950_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1845, out _out1846, out _out1847);
              _6955_onExpr = _out1845;
              _6956_onOwned = _out1846;
              _6957_recIdents = _out1847;
              r = _6955_onExpr;
              if (!object.Equals(_6955_onExpr, RAST.__default.self)) {
                RAST._IExpr _source325 = _6955_onExpr;
                if (_source325.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6958___mcc_h3775 = _source325.dtor_content;
                } else if (_source325.is_ExprFromType) {
                  RAST._IType _6959___mcc_h3777 = _source325.dtor_tpe;
                } else if (_source325.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6960___mcc_h3779 = _source325.dtor_name;
                } else if (_source325.is_Match) {
                  RAST._IExpr _6961___mcc_h3781 = _source325.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6962___mcc_h3782 = _source325.dtor_cases;
                } else if (_source325.is_StmtExpr) {
                  RAST._IExpr _6963___mcc_h3785 = _source325.dtor_stmt;
                  RAST._IExpr _6964___mcc_h3786 = _source325.dtor_rhs;
                } else if (_source325.is_Block) {
                  RAST._IExpr _6965___mcc_h3789 = _source325.dtor_underlying;
                } else if (_source325.is_StructBuild) {
                  RAST._IExpr _6966___mcc_h3791 = _source325.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6967___mcc_h3792 = _source325.dtor_assignments;
                } else if (_source325.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6968___mcc_h3795 = _source325.dtor_arguments;
                } else if (_source325.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6969___mcc_h3797 = _source325.dtor_op1;
                  RAST._IExpr _6970___mcc_h3798 = _source325.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6971___mcc_h3799 = _source325.dtor_format;
                  if (object.Equals(_6969___mcc_h3797, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source326 = _6970___mcc_h3798;
                    if (_source326.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6972___mcc_h3803 = _source326.dtor_content;
                    } else if (_source326.is_ExprFromType) {
                      RAST._IType _6973___mcc_h3805 = _source326.dtor_tpe;
                    } else if (_source326.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6974___mcc_h3807 = _source326.dtor_name;
                      if (object.Equals(_6974___mcc_h3807, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source326.is_Match) {
                      RAST._IExpr _6975___mcc_h3809 = _source326.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6976___mcc_h3810 = _source326.dtor_cases;
                    } else if (_source326.is_StmtExpr) {
                      RAST._IExpr _6977___mcc_h3813 = _source326.dtor_stmt;
                      RAST._IExpr _6978___mcc_h3814 = _source326.dtor_rhs;
                    } else if (_source326.is_Block) {
                      RAST._IExpr _6979___mcc_h3817 = _source326.dtor_underlying;
                    } else if (_source326.is_StructBuild) {
                      RAST._IExpr _6980___mcc_h3819 = _source326.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6981___mcc_h3820 = _source326.dtor_assignments;
                    } else if (_source326.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6982___mcc_h3823 = _source326.dtor_arguments;
                    } else if (_source326.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6983___mcc_h3825 = _source326.dtor_op1;
                      RAST._IExpr _6984___mcc_h3826 = _source326.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6985___mcc_h3827 = _source326.dtor_format;
                    } else if (_source326.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6986___mcc_h3831 = _source326.dtor_op2;
                      RAST._IExpr _6987___mcc_h3832 = _source326.dtor_left;
                      RAST._IExpr _6988___mcc_h3833 = _source326.dtor_right;
                      DAST.Format._IBinaryOpFormat _6989___mcc_h3834 = _source326.dtor_format2;
                    } else if (_source326.is_TypeAscription) {
                      RAST._IExpr _6990___mcc_h3839 = _source326.dtor_left;
                      RAST._IType _6991___mcc_h3840 = _source326.dtor_tpe;
                    } else if (_source326.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6992___mcc_h3843 = _source326.dtor_value;
                    } else if (_source326.is_LiteralBool) {
                      bool _6993___mcc_h3845 = _source326.dtor_bvalue;
                    } else if (_source326.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6994___mcc_h3847 = _source326.dtor_value;
                      bool _6995___mcc_h3848 = _source326.dtor_binary;
                    } else if (_source326.is_DeclareVar) {
                      RAST._IDeclareType _6996___mcc_h3851 = _source326.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6997___mcc_h3852 = _source326.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6998___mcc_h3853 = _source326.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6999___mcc_h3854 = _source326.dtor_optRhs;
                    } else if (_source326.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7000___mcc_h3859 = _source326.dtor_names;
                      RAST._IExpr _7001___mcc_h3860 = _source326.dtor_rhs;
                    } else if (_source326.is_IfExpr) {
                      RAST._IExpr _7002___mcc_h3863 = _source326.dtor_cond;
                      RAST._IExpr _7003___mcc_h3864 = _source326.dtor_thn;
                      RAST._IExpr _7004___mcc_h3865 = _source326.dtor_els;
                    } else if (_source326.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7005___mcc_h3869 = _source326.dtor_optCond;
                      RAST._IExpr _7006___mcc_h3870 = _source326.dtor_underlying;
                    } else if (_source326.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7007___mcc_h3873 = _source326.dtor_name;
                      RAST._IExpr _7008___mcc_h3874 = _source326.dtor_range;
                      RAST._IExpr _7009___mcc_h3875 = _source326.dtor_body;
                    } else if (_source326.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7010___mcc_h3879 = _source326.dtor_lbl;
                      RAST._IExpr _7011___mcc_h3880 = _source326.dtor_underlying;
                    } else if (_source326.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7012___mcc_h3883 = _source326.dtor_optLbl;
                    } else if (_source326.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7013___mcc_h3885 = _source326.dtor_optLbl;
                    } else if (_source326.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7014___mcc_h3887 = _source326.dtor_optExpr;
                    } else if (_source326.is_CallType) {
                      RAST._IExpr _7015___mcc_h3889 = _source326.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7016___mcc_h3890 = _source326.dtor_typeParameters;
                    } else if (_source326.is_Call) {
                      RAST._IExpr _7017___mcc_h3893 = _source326.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7018___mcc_h3894 = _source326.dtor_arguments;
                    } else if (_source326.is_Select) {
                      RAST._IExpr _7019___mcc_h3897 = _source326.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7020___mcc_h3898 = _source326.dtor_name;
                    } else if (_source326.is_MemberSelect) {
                      RAST._IExpr _7021___mcc_h3901 = _source326.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7022___mcc_h3902 = _source326.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7023___mcc_h3905 = _source326.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7024___mcc_h3906 = _source326.dtor_retType;
                      RAST._IExpr _7025___mcc_h3907 = _source326.dtor_body;
                    }
                  } else {
                  }
                } else if (_source325.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7026___mcc_h3911 = _source325.dtor_op2;
                  RAST._IExpr _7027___mcc_h3912 = _source325.dtor_left;
                  RAST._IExpr _7028___mcc_h3913 = _source325.dtor_right;
                  DAST.Format._IBinaryOpFormat _7029___mcc_h3914 = _source325.dtor_format2;
                } else if (_source325.is_TypeAscription) {
                  RAST._IExpr _7030___mcc_h3919 = _source325.dtor_left;
                  RAST._IType _7031___mcc_h3920 = _source325.dtor_tpe;
                } else if (_source325.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7032___mcc_h3923 = _source325.dtor_value;
                } else if (_source325.is_LiteralBool) {
                  bool _7033___mcc_h3925 = _source325.dtor_bvalue;
                } else if (_source325.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7034___mcc_h3927 = _source325.dtor_value;
                  bool _7035___mcc_h3928 = _source325.dtor_binary;
                } else if (_source325.is_DeclareVar) {
                  RAST._IDeclareType _7036___mcc_h3931 = _source325.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7037___mcc_h3932 = _source325.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7038___mcc_h3933 = _source325.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7039___mcc_h3934 = _source325.dtor_optRhs;
                } else if (_source325.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7040___mcc_h3939 = _source325.dtor_names;
                  RAST._IExpr _7041___mcc_h3940 = _source325.dtor_rhs;
                } else if (_source325.is_IfExpr) {
                  RAST._IExpr _7042___mcc_h3943 = _source325.dtor_cond;
                  RAST._IExpr _7043___mcc_h3944 = _source325.dtor_thn;
                  RAST._IExpr _7044___mcc_h3945 = _source325.dtor_els;
                } else if (_source325.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7045___mcc_h3949 = _source325.dtor_optCond;
                  RAST._IExpr _7046___mcc_h3950 = _source325.dtor_underlying;
                } else if (_source325.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7047___mcc_h3953 = _source325.dtor_name;
                  RAST._IExpr _7048___mcc_h3954 = _source325.dtor_range;
                  RAST._IExpr _7049___mcc_h3955 = _source325.dtor_body;
                } else if (_source325.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7050___mcc_h3959 = _source325.dtor_lbl;
                  RAST._IExpr _7051___mcc_h3960 = _source325.dtor_underlying;
                } else if (_source325.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7052___mcc_h3963 = _source325.dtor_optLbl;
                } else if (_source325.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7053___mcc_h3965 = _source325.dtor_optLbl;
                } else if (_source325.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7054___mcc_h3967 = _source325.dtor_optExpr;
                } else if (_source325.is_CallType) {
                  RAST._IExpr _7055___mcc_h3969 = _source325.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7056___mcc_h3970 = _source325.dtor_typeParameters;
                } else if (_source325.is_Call) {
                  RAST._IExpr _7057___mcc_h3973 = _source325.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7058___mcc_h3974 = _source325.dtor_arguments;
                } else if (_source325.is_Select) {
                  RAST._IExpr _7059___mcc_h3977 = _source325.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7060___mcc_h3978 = _source325.dtor_name;
                } else if (_source325.is_MemberSelect) {
                  RAST._IExpr _7061___mcc_h3981 = _source325.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7062___mcc_h3982 = _source325.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7063___mcc_h3985 = _source325.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7064___mcc_h3986 = _source325.dtor_retType;
                  RAST._IExpr _7065___mcc_h3987 = _source325.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6949_field));
              if (_6948_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _7066_fromOwnership;
              _7066_fromOwnership = ((_6948_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1848;
              DCOMP._IOwnership _out1849;
              DCOMP.COMP.FromOwnership(r, _7066_fromOwnership, expectedOwnership, out _out1848, out _out1849);
              r = _out1848;
              resultingOwnership = _out1849;
              readIdents = _6957_recIdents;
            }
            return ;
          }
        } else if (_source292.is_SetBuilder) {
          DAST._IType _7067___mcc_h128 = _source292.dtor_elemType;
          DAST._IType _7068_fieldType = _4966___mcc_h57;
          bool _7069_isDatatype = _4965___mcc_h56;
          bool _7070_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _7071_field = _4963___mcc_h54;
          DAST._IExpression _7072_on = _4962___mcc_h53;
          {
            if (_7069_isDatatype) {
              RAST._IExpr _7073_onExpr;
              DCOMP._IOwnership _7074_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7075_recIdents;
              RAST._IExpr _out1850;
              DCOMP._IOwnership _out1851;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1852;
              (this).GenExpr(_7072_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1850, out _out1851, out _out1852);
              _7073_onExpr = _out1850;
              _7074_onOwned = _out1851;
              _7075_recIdents = _out1852;
              r = ((_7073_onExpr).Sel(DCOMP.__default.escapeName(_7071_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7076_typ;
              RAST._IType _out1853;
              _out1853 = (this).GenType(_7068_fieldType, false, false);
              _7076_typ = _out1853;
              if (((_7076_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1854;
                DCOMP._IOwnership _out1855;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1854, out _out1855);
                r = _out1854;
                resultingOwnership = _out1855;
              }
              readIdents = _7075_recIdents;
            } else {
              RAST._IExpr _7077_onExpr;
              DCOMP._IOwnership _7078_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7079_recIdents;
              RAST._IExpr _out1856;
              DCOMP._IOwnership _out1857;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1858;
              (this).GenExpr(_7072_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1856, out _out1857, out _out1858);
              _7077_onExpr = _out1856;
              _7078_onOwned = _out1857;
              _7079_recIdents = _out1858;
              r = _7077_onExpr;
              if (!object.Equals(_7077_onExpr, RAST.__default.self)) {
                RAST._IExpr _source327 = _7077_onExpr;
                if (_source327.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7080___mcc_h3991 = _source327.dtor_content;
                } else if (_source327.is_ExprFromType) {
                  RAST._IType _7081___mcc_h3993 = _source327.dtor_tpe;
                } else if (_source327.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7082___mcc_h3995 = _source327.dtor_name;
                } else if (_source327.is_Match) {
                  RAST._IExpr _7083___mcc_h3997 = _source327.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7084___mcc_h3998 = _source327.dtor_cases;
                } else if (_source327.is_StmtExpr) {
                  RAST._IExpr _7085___mcc_h4001 = _source327.dtor_stmt;
                  RAST._IExpr _7086___mcc_h4002 = _source327.dtor_rhs;
                } else if (_source327.is_Block) {
                  RAST._IExpr _7087___mcc_h4005 = _source327.dtor_underlying;
                } else if (_source327.is_StructBuild) {
                  RAST._IExpr _7088___mcc_h4007 = _source327.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7089___mcc_h4008 = _source327.dtor_assignments;
                } else if (_source327.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7090___mcc_h4011 = _source327.dtor_arguments;
                } else if (_source327.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7091___mcc_h4013 = _source327.dtor_op1;
                  RAST._IExpr _7092___mcc_h4014 = _source327.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7093___mcc_h4015 = _source327.dtor_format;
                  if (object.Equals(_7091___mcc_h4013, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source328 = _7092___mcc_h4014;
                    if (_source328.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7094___mcc_h4019 = _source328.dtor_content;
                    } else if (_source328.is_ExprFromType) {
                      RAST._IType _7095___mcc_h4021 = _source328.dtor_tpe;
                    } else if (_source328.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7096___mcc_h4023 = _source328.dtor_name;
                      if (object.Equals(_7096___mcc_h4023, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source328.is_Match) {
                      RAST._IExpr _7097___mcc_h4025 = _source328.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7098___mcc_h4026 = _source328.dtor_cases;
                    } else if (_source328.is_StmtExpr) {
                      RAST._IExpr _7099___mcc_h4029 = _source328.dtor_stmt;
                      RAST._IExpr _7100___mcc_h4030 = _source328.dtor_rhs;
                    } else if (_source328.is_Block) {
                      RAST._IExpr _7101___mcc_h4033 = _source328.dtor_underlying;
                    } else if (_source328.is_StructBuild) {
                      RAST._IExpr _7102___mcc_h4035 = _source328.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7103___mcc_h4036 = _source328.dtor_assignments;
                    } else if (_source328.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7104___mcc_h4039 = _source328.dtor_arguments;
                    } else if (_source328.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7105___mcc_h4041 = _source328.dtor_op1;
                      RAST._IExpr _7106___mcc_h4042 = _source328.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7107___mcc_h4043 = _source328.dtor_format;
                    } else if (_source328.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7108___mcc_h4047 = _source328.dtor_op2;
                      RAST._IExpr _7109___mcc_h4048 = _source328.dtor_left;
                      RAST._IExpr _7110___mcc_h4049 = _source328.dtor_right;
                      DAST.Format._IBinaryOpFormat _7111___mcc_h4050 = _source328.dtor_format2;
                    } else if (_source328.is_TypeAscription) {
                      RAST._IExpr _7112___mcc_h4055 = _source328.dtor_left;
                      RAST._IType _7113___mcc_h4056 = _source328.dtor_tpe;
                    } else if (_source328.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7114___mcc_h4059 = _source328.dtor_value;
                    } else if (_source328.is_LiteralBool) {
                      bool _7115___mcc_h4061 = _source328.dtor_bvalue;
                    } else if (_source328.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7116___mcc_h4063 = _source328.dtor_value;
                      bool _7117___mcc_h4064 = _source328.dtor_binary;
                    } else if (_source328.is_DeclareVar) {
                      RAST._IDeclareType _7118___mcc_h4067 = _source328.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7119___mcc_h4068 = _source328.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7120___mcc_h4069 = _source328.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7121___mcc_h4070 = _source328.dtor_optRhs;
                    } else if (_source328.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7122___mcc_h4075 = _source328.dtor_names;
                      RAST._IExpr _7123___mcc_h4076 = _source328.dtor_rhs;
                    } else if (_source328.is_IfExpr) {
                      RAST._IExpr _7124___mcc_h4079 = _source328.dtor_cond;
                      RAST._IExpr _7125___mcc_h4080 = _source328.dtor_thn;
                      RAST._IExpr _7126___mcc_h4081 = _source328.dtor_els;
                    } else if (_source328.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7127___mcc_h4085 = _source328.dtor_optCond;
                      RAST._IExpr _7128___mcc_h4086 = _source328.dtor_underlying;
                    } else if (_source328.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7129___mcc_h4089 = _source328.dtor_name;
                      RAST._IExpr _7130___mcc_h4090 = _source328.dtor_range;
                      RAST._IExpr _7131___mcc_h4091 = _source328.dtor_body;
                    } else if (_source328.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7132___mcc_h4095 = _source328.dtor_lbl;
                      RAST._IExpr _7133___mcc_h4096 = _source328.dtor_underlying;
                    } else if (_source328.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7134___mcc_h4099 = _source328.dtor_optLbl;
                    } else if (_source328.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7135___mcc_h4101 = _source328.dtor_optLbl;
                    } else if (_source328.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7136___mcc_h4103 = _source328.dtor_optExpr;
                    } else if (_source328.is_CallType) {
                      RAST._IExpr _7137___mcc_h4105 = _source328.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7138___mcc_h4106 = _source328.dtor_typeParameters;
                    } else if (_source328.is_Call) {
                      RAST._IExpr _7139___mcc_h4109 = _source328.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7140___mcc_h4110 = _source328.dtor_arguments;
                    } else if (_source328.is_Select) {
                      RAST._IExpr _7141___mcc_h4113 = _source328.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7142___mcc_h4114 = _source328.dtor_name;
                    } else if (_source328.is_MemberSelect) {
                      RAST._IExpr _7143___mcc_h4117 = _source328.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7144___mcc_h4118 = _source328.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7145___mcc_h4121 = _source328.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7146___mcc_h4122 = _source328.dtor_retType;
                      RAST._IExpr _7147___mcc_h4123 = _source328.dtor_body;
                    }
                  } else {
                  }
                } else if (_source327.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7148___mcc_h4127 = _source327.dtor_op2;
                  RAST._IExpr _7149___mcc_h4128 = _source327.dtor_left;
                  RAST._IExpr _7150___mcc_h4129 = _source327.dtor_right;
                  DAST.Format._IBinaryOpFormat _7151___mcc_h4130 = _source327.dtor_format2;
                } else if (_source327.is_TypeAscription) {
                  RAST._IExpr _7152___mcc_h4135 = _source327.dtor_left;
                  RAST._IType _7153___mcc_h4136 = _source327.dtor_tpe;
                } else if (_source327.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7154___mcc_h4139 = _source327.dtor_value;
                } else if (_source327.is_LiteralBool) {
                  bool _7155___mcc_h4141 = _source327.dtor_bvalue;
                } else if (_source327.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7156___mcc_h4143 = _source327.dtor_value;
                  bool _7157___mcc_h4144 = _source327.dtor_binary;
                } else if (_source327.is_DeclareVar) {
                  RAST._IDeclareType _7158___mcc_h4147 = _source327.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7159___mcc_h4148 = _source327.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7160___mcc_h4149 = _source327.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7161___mcc_h4150 = _source327.dtor_optRhs;
                } else if (_source327.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7162___mcc_h4155 = _source327.dtor_names;
                  RAST._IExpr _7163___mcc_h4156 = _source327.dtor_rhs;
                } else if (_source327.is_IfExpr) {
                  RAST._IExpr _7164___mcc_h4159 = _source327.dtor_cond;
                  RAST._IExpr _7165___mcc_h4160 = _source327.dtor_thn;
                  RAST._IExpr _7166___mcc_h4161 = _source327.dtor_els;
                } else if (_source327.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7167___mcc_h4165 = _source327.dtor_optCond;
                  RAST._IExpr _7168___mcc_h4166 = _source327.dtor_underlying;
                } else if (_source327.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7169___mcc_h4169 = _source327.dtor_name;
                  RAST._IExpr _7170___mcc_h4170 = _source327.dtor_range;
                  RAST._IExpr _7171___mcc_h4171 = _source327.dtor_body;
                } else if (_source327.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7172___mcc_h4175 = _source327.dtor_lbl;
                  RAST._IExpr _7173___mcc_h4176 = _source327.dtor_underlying;
                } else if (_source327.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7174___mcc_h4179 = _source327.dtor_optLbl;
                } else if (_source327.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7175___mcc_h4181 = _source327.dtor_optLbl;
                } else if (_source327.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7176___mcc_h4183 = _source327.dtor_optExpr;
                } else if (_source327.is_CallType) {
                  RAST._IExpr _7177___mcc_h4185 = _source327.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7178___mcc_h4186 = _source327.dtor_typeParameters;
                } else if (_source327.is_Call) {
                  RAST._IExpr _7179___mcc_h4189 = _source327.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7180___mcc_h4190 = _source327.dtor_arguments;
                } else if (_source327.is_Select) {
                  RAST._IExpr _7181___mcc_h4193 = _source327.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7182___mcc_h4194 = _source327.dtor_name;
                } else if (_source327.is_MemberSelect) {
                  RAST._IExpr _7183___mcc_h4197 = _source327.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7184___mcc_h4198 = _source327.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7185___mcc_h4201 = _source327.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7186___mcc_h4202 = _source327.dtor_retType;
                  RAST._IExpr _7187___mcc_h4203 = _source327.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7071_field));
              if (_7070_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _7188_fromOwnership;
              _7188_fromOwnership = ((_7070_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1859;
              DCOMP._IOwnership _out1860;
              DCOMP.COMP.FromOwnership(r, _7188_fromOwnership, expectedOwnership, out _out1859, out _out1860);
              r = _out1859;
              resultingOwnership = _out1860;
              readIdents = _7079_recIdents;
            }
            return ;
          }
        } else if (_source292.is_ToMultiset) {
          DAST._IExpression _7189___mcc_h130 = _source292.dtor_ToMultiset_i_a0;
          DAST._IType _7190_fieldType = _4966___mcc_h57;
          bool _7191_isDatatype = _4965___mcc_h56;
          bool _7192_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _7193_field = _4963___mcc_h54;
          DAST._IExpression _7194_on = _4962___mcc_h53;
          {
            if (_7191_isDatatype) {
              RAST._IExpr _7195_onExpr;
              DCOMP._IOwnership _7196_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7197_recIdents;
              RAST._IExpr _out1861;
              DCOMP._IOwnership _out1862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1863;
              (this).GenExpr(_7194_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1861, out _out1862, out _out1863);
              _7195_onExpr = _out1861;
              _7196_onOwned = _out1862;
              _7197_recIdents = _out1863;
              r = ((_7195_onExpr).Sel(DCOMP.__default.escapeName(_7193_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7198_typ;
              RAST._IType _out1864;
              _out1864 = (this).GenType(_7190_fieldType, false, false);
              _7198_typ = _out1864;
              if (((_7198_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1865;
                DCOMP._IOwnership _out1866;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1865, out _out1866);
                r = _out1865;
                resultingOwnership = _out1866;
              }
              readIdents = _7197_recIdents;
            } else {
              RAST._IExpr _7199_onExpr;
              DCOMP._IOwnership _7200_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7201_recIdents;
              RAST._IExpr _out1867;
              DCOMP._IOwnership _out1868;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1869;
              (this).GenExpr(_7194_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1867, out _out1868, out _out1869);
              _7199_onExpr = _out1867;
              _7200_onOwned = _out1868;
              _7201_recIdents = _out1869;
              r = _7199_onExpr;
              if (!object.Equals(_7199_onExpr, RAST.__default.self)) {
                RAST._IExpr _source329 = _7199_onExpr;
                if (_source329.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7202___mcc_h4207 = _source329.dtor_content;
                } else if (_source329.is_ExprFromType) {
                  RAST._IType _7203___mcc_h4209 = _source329.dtor_tpe;
                } else if (_source329.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7204___mcc_h4211 = _source329.dtor_name;
                } else if (_source329.is_Match) {
                  RAST._IExpr _7205___mcc_h4213 = _source329.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7206___mcc_h4214 = _source329.dtor_cases;
                } else if (_source329.is_StmtExpr) {
                  RAST._IExpr _7207___mcc_h4217 = _source329.dtor_stmt;
                  RAST._IExpr _7208___mcc_h4218 = _source329.dtor_rhs;
                } else if (_source329.is_Block) {
                  RAST._IExpr _7209___mcc_h4221 = _source329.dtor_underlying;
                } else if (_source329.is_StructBuild) {
                  RAST._IExpr _7210___mcc_h4223 = _source329.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7211___mcc_h4224 = _source329.dtor_assignments;
                } else if (_source329.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7212___mcc_h4227 = _source329.dtor_arguments;
                } else if (_source329.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7213___mcc_h4229 = _source329.dtor_op1;
                  RAST._IExpr _7214___mcc_h4230 = _source329.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7215___mcc_h4231 = _source329.dtor_format;
                  if (object.Equals(_7213___mcc_h4229, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source330 = _7214___mcc_h4230;
                    if (_source330.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7216___mcc_h4235 = _source330.dtor_content;
                    } else if (_source330.is_ExprFromType) {
                      RAST._IType _7217___mcc_h4237 = _source330.dtor_tpe;
                    } else if (_source330.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7218___mcc_h4239 = _source330.dtor_name;
                      if (object.Equals(_7218___mcc_h4239, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source330.is_Match) {
                      RAST._IExpr _7219___mcc_h4241 = _source330.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7220___mcc_h4242 = _source330.dtor_cases;
                    } else if (_source330.is_StmtExpr) {
                      RAST._IExpr _7221___mcc_h4245 = _source330.dtor_stmt;
                      RAST._IExpr _7222___mcc_h4246 = _source330.dtor_rhs;
                    } else if (_source330.is_Block) {
                      RAST._IExpr _7223___mcc_h4249 = _source330.dtor_underlying;
                    } else if (_source330.is_StructBuild) {
                      RAST._IExpr _7224___mcc_h4251 = _source330.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7225___mcc_h4252 = _source330.dtor_assignments;
                    } else if (_source330.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7226___mcc_h4255 = _source330.dtor_arguments;
                    } else if (_source330.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7227___mcc_h4257 = _source330.dtor_op1;
                      RAST._IExpr _7228___mcc_h4258 = _source330.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7229___mcc_h4259 = _source330.dtor_format;
                    } else if (_source330.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7230___mcc_h4263 = _source330.dtor_op2;
                      RAST._IExpr _7231___mcc_h4264 = _source330.dtor_left;
                      RAST._IExpr _7232___mcc_h4265 = _source330.dtor_right;
                      DAST.Format._IBinaryOpFormat _7233___mcc_h4266 = _source330.dtor_format2;
                    } else if (_source330.is_TypeAscription) {
                      RAST._IExpr _7234___mcc_h4271 = _source330.dtor_left;
                      RAST._IType _7235___mcc_h4272 = _source330.dtor_tpe;
                    } else if (_source330.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7236___mcc_h4275 = _source330.dtor_value;
                    } else if (_source330.is_LiteralBool) {
                      bool _7237___mcc_h4277 = _source330.dtor_bvalue;
                    } else if (_source330.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7238___mcc_h4279 = _source330.dtor_value;
                      bool _7239___mcc_h4280 = _source330.dtor_binary;
                    } else if (_source330.is_DeclareVar) {
                      RAST._IDeclareType _7240___mcc_h4283 = _source330.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7241___mcc_h4284 = _source330.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7242___mcc_h4285 = _source330.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7243___mcc_h4286 = _source330.dtor_optRhs;
                    } else if (_source330.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7244___mcc_h4291 = _source330.dtor_names;
                      RAST._IExpr _7245___mcc_h4292 = _source330.dtor_rhs;
                    } else if (_source330.is_IfExpr) {
                      RAST._IExpr _7246___mcc_h4295 = _source330.dtor_cond;
                      RAST._IExpr _7247___mcc_h4296 = _source330.dtor_thn;
                      RAST._IExpr _7248___mcc_h4297 = _source330.dtor_els;
                    } else if (_source330.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7249___mcc_h4301 = _source330.dtor_optCond;
                      RAST._IExpr _7250___mcc_h4302 = _source330.dtor_underlying;
                    } else if (_source330.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7251___mcc_h4305 = _source330.dtor_name;
                      RAST._IExpr _7252___mcc_h4306 = _source330.dtor_range;
                      RAST._IExpr _7253___mcc_h4307 = _source330.dtor_body;
                    } else if (_source330.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7254___mcc_h4311 = _source330.dtor_lbl;
                      RAST._IExpr _7255___mcc_h4312 = _source330.dtor_underlying;
                    } else if (_source330.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7256___mcc_h4315 = _source330.dtor_optLbl;
                    } else if (_source330.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7257___mcc_h4317 = _source330.dtor_optLbl;
                    } else if (_source330.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7258___mcc_h4319 = _source330.dtor_optExpr;
                    } else if (_source330.is_CallType) {
                      RAST._IExpr _7259___mcc_h4321 = _source330.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7260___mcc_h4322 = _source330.dtor_typeParameters;
                    } else if (_source330.is_Call) {
                      RAST._IExpr _7261___mcc_h4325 = _source330.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7262___mcc_h4326 = _source330.dtor_arguments;
                    } else if (_source330.is_Select) {
                      RAST._IExpr _7263___mcc_h4329 = _source330.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7264___mcc_h4330 = _source330.dtor_name;
                    } else if (_source330.is_MemberSelect) {
                      RAST._IExpr _7265___mcc_h4333 = _source330.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7266___mcc_h4334 = _source330.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7267___mcc_h4337 = _source330.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7268___mcc_h4338 = _source330.dtor_retType;
                      RAST._IExpr _7269___mcc_h4339 = _source330.dtor_body;
                    }
                  } else {
                  }
                } else if (_source329.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7270___mcc_h4343 = _source329.dtor_op2;
                  RAST._IExpr _7271___mcc_h4344 = _source329.dtor_left;
                  RAST._IExpr _7272___mcc_h4345 = _source329.dtor_right;
                  DAST.Format._IBinaryOpFormat _7273___mcc_h4346 = _source329.dtor_format2;
                } else if (_source329.is_TypeAscription) {
                  RAST._IExpr _7274___mcc_h4351 = _source329.dtor_left;
                  RAST._IType _7275___mcc_h4352 = _source329.dtor_tpe;
                } else if (_source329.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7276___mcc_h4355 = _source329.dtor_value;
                } else if (_source329.is_LiteralBool) {
                  bool _7277___mcc_h4357 = _source329.dtor_bvalue;
                } else if (_source329.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7278___mcc_h4359 = _source329.dtor_value;
                  bool _7279___mcc_h4360 = _source329.dtor_binary;
                } else if (_source329.is_DeclareVar) {
                  RAST._IDeclareType _7280___mcc_h4363 = _source329.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7281___mcc_h4364 = _source329.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7282___mcc_h4365 = _source329.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7283___mcc_h4366 = _source329.dtor_optRhs;
                } else if (_source329.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7284___mcc_h4371 = _source329.dtor_names;
                  RAST._IExpr _7285___mcc_h4372 = _source329.dtor_rhs;
                } else if (_source329.is_IfExpr) {
                  RAST._IExpr _7286___mcc_h4375 = _source329.dtor_cond;
                  RAST._IExpr _7287___mcc_h4376 = _source329.dtor_thn;
                  RAST._IExpr _7288___mcc_h4377 = _source329.dtor_els;
                } else if (_source329.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7289___mcc_h4381 = _source329.dtor_optCond;
                  RAST._IExpr _7290___mcc_h4382 = _source329.dtor_underlying;
                } else if (_source329.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7291___mcc_h4385 = _source329.dtor_name;
                  RAST._IExpr _7292___mcc_h4386 = _source329.dtor_range;
                  RAST._IExpr _7293___mcc_h4387 = _source329.dtor_body;
                } else if (_source329.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7294___mcc_h4391 = _source329.dtor_lbl;
                  RAST._IExpr _7295___mcc_h4392 = _source329.dtor_underlying;
                } else if (_source329.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7296___mcc_h4395 = _source329.dtor_optLbl;
                } else if (_source329.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7297___mcc_h4397 = _source329.dtor_optLbl;
                } else if (_source329.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7298___mcc_h4399 = _source329.dtor_optExpr;
                } else if (_source329.is_CallType) {
                  RAST._IExpr _7299___mcc_h4401 = _source329.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7300___mcc_h4402 = _source329.dtor_typeParameters;
                } else if (_source329.is_Call) {
                  RAST._IExpr _7301___mcc_h4405 = _source329.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7302___mcc_h4406 = _source329.dtor_arguments;
                } else if (_source329.is_Select) {
                  RAST._IExpr _7303___mcc_h4409 = _source329.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7304___mcc_h4410 = _source329.dtor_name;
                } else if (_source329.is_MemberSelect) {
                  RAST._IExpr _7305___mcc_h4413 = _source329.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7306___mcc_h4414 = _source329.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7307___mcc_h4417 = _source329.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7308___mcc_h4418 = _source329.dtor_retType;
                  RAST._IExpr _7309___mcc_h4419 = _source329.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7193_field));
              if (_7192_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _7310_fromOwnership;
              _7310_fromOwnership = ((_7192_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1870;
              DCOMP._IOwnership _out1871;
              DCOMP.COMP.FromOwnership(r, _7310_fromOwnership, expectedOwnership, out _out1870, out _out1871);
              r = _out1870;
              resultingOwnership = _out1871;
              readIdents = _7201_recIdents;
            }
            return ;
          }
        } else if (_source292.is_This) {
          DAST._IType _7311_fieldType = _4966___mcc_h57;
          bool _7312_isDatatype = _4965___mcc_h56;
          bool _7313_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _7314_field = _4963___mcc_h54;
          DAST._IExpression _7315_on = _4962___mcc_h53;
          {
            if (_7312_isDatatype) {
              RAST._IExpr _7316_onExpr;
              DCOMP._IOwnership _7317_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7318_recIdents;
              RAST._IExpr _out1872;
              DCOMP._IOwnership _out1873;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1874;
              (this).GenExpr(_7315_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1872, out _out1873, out _out1874);
              _7316_onExpr = _out1872;
              _7317_onOwned = _out1873;
              _7318_recIdents = _out1874;
              r = ((_7316_onExpr).Sel(DCOMP.__default.escapeName(_7314_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7319_typ;
              RAST._IType _out1875;
              _out1875 = (this).GenType(_7311_fieldType, false, false);
              _7319_typ = _out1875;
              if (((_7319_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1876;
                DCOMP._IOwnership _out1877;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1876, out _out1877);
                r = _out1876;
                resultingOwnership = _out1877;
              }
              readIdents = _7318_recIdents;
            } else {
              RAST._IExpr _7320_onExpr;
              DCOMP._IOwnership _7321_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7322_recIdents;
              RAST._IExpr _out1878;
              DCOMP._IOwnership _out1879;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1880;
              (this).GenExpr(_7315_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1878, out _out1879, out _out1880);
              _7320_onExpr = _out1878;
              _7321_onOwned = _out1879;
              _7322_recIdents = _out1880;
              r = _7320_onExpr;
              if (!object.Equals(_7320_onExpr, RAST.__default.self)) {
                RAST._IExpr _source331 = _7320_onExpr;
                if (_source331.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7323___mcc_h4423 = _source331.dtor_content;
                } else if (_source331.is_ExprFromType) {
                  RAST._IType _7324___mcc_h4425 = _source331.dtor_tpe;
                } else if (_source331.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7325___mcc_h4427 = _source331.dtor_name;
                } else if (_source331.is_Match) {
                  RAST._IExpr _7326___mcc_h4429 = _source331.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7327___mcc_h4430 = _source331.dtor_cases;
                } else if (_source331.is_StmtExpr) {
                  RAST._IExpr _7328___mcc_h4433 = _source331.dtor_stmt;
                  RAST._IExpr _7329___mcc_h4434 = _source331.dtor_rhs;
                } else if (_source331.is_Block) {
                  RAST._IExpr _7330___mcc_h4437 = _source331.dtor_underlying;
                } else if (_source331.is_StructBuild) {
                  RAST._IExpr _7331___mcc_h4439 = _source331.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7332___mcc_h4440 = _source331.dtor_assignments;
                } else if (_source331.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7333___mcc_h4443 = _source331.dtor_arguments;
                } else if (_source331.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7334___mcc_h4445 = _source331.dtor_op1;
                  RAST._IExpr _7335___mcc_h4446 = _source331.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7336___mcc_h4447 = _source331.dtor_format;
                  if (object.Equals(_7334___mcc_h4445, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source332 = _7335___mcc_h4446;
                    if (_source332.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7337___mcc_h4451 = _source332.dtor_content;
                    } else if (_source332.is_ExprFromType) {
                      RAST._IType _7338___mcc_h4453 = _source332.dtor_tpe;
                    } else if (_source332.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7339___mcc_h4455 = _source332.dtor_name;
                      if (object.Equals(_7339___mcc_h4455, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source332.is_Match) {
                      RAST._IExpr _7340___mcc_h4457 = _source332.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7341___mcc_h4458 = _source332.dtor_cases;
                    } else if (_source332.is_StmtExpr) {
                      RAST._IExpr _7342___mcc_h4461 = _source332.dtor_stmt;
                      RAST._IExpr _7343___mcc_h4462 = _source332.dtor_rhs;
                    } else if (_source332.is_Block) {
                      RAST._IExpr _7344___mcc_h4465 = _source332.dtor_underlying;
                    } else if (_source332.is_StructBuild) {
                      RAST._IExpr _7345___mcc_h4467 = _source332.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7346___mcc_h4468 = _source332.dtor_assignments;
                    } else if (_source332.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7347___mcc_h4471 = _source332.dtor_arguments;
                    } else if (_source332.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7348___mcc_h4473 = _source332.dtor_op1;
                      RAST._IExpr _7349___mcc_h4474 = _source332.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7350___mcc_h4475 = _source332.dtor_format;
                    } else if (_source332.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7351___mcc_h4479 = _source332.dtor_op2;
                      RAST._IExpr _7352___mcc_h4480 = _source332.dtor_left;
                      RAST._IExpr _7353___mcc_h4481 = _source332.dtor_right;
                      DAST.Format._IBinaryOpFormat _7354___mcc_h4482 = _source332.dtor_format2;
                    } else if (_source332.is_TypeAscription) {
                      RAST._IExpr _7355___mcc_h4487 = _source332.dtor_left;
                      RAST._IType _7356___mcc_h4488 = _source332.dtor_tpe;
                    } else if (_source332.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7357___mcc_h4491 = _source332.dtor_value;
                    } else if (_source332.is_LiteralBool) {
                      bool _7358___mcc_h4493 = _source332.dtor_bvalue;
                    } else if (_source332.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7359___mcc_h4495 = _source332.dtor_value;
                      bool _7360___mcc_h4496 = _source332.dtor_binary;
                    } else if (_source332.is_DeclareVar) {
                      RAST._IDeclareType _7361___mcc_h4499 = _source332.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7362___mcc_h4500 = _source332.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7363___mcc_h4501 = _source332.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7364___mcc_h4502 = _source332.dtor_optRhs;
                    } else if (_source332.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7365___mcc_h4507 = _source332.dtor_names;
                      RAST._IExpr _7366___mcc_h4508 = _source332.dtor_rhs;
                    } else if (_source332.is_IfExpr) {
                      RAST._IExpr _7367___mcc_h4511 = _source332.dtor_cond;
                      RAST._IExpr _7368___mcc_h4512 = _source332.dtor_thn;
                      RAST._IExpr _7369___mcc_h4513 = _source332.dtor_els;
                    } else if (_source332.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7370___mcc_h4517 = _source332.dtor_optCond;
                      RAST._IExpr _7371___mcc_h4518 = _source332.dtor_underlying;
                    } else if (_source332.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7372___mcc_h4521 = _source332.dtor_name;
                      RAST._IExpr _7373___mcc_h4522 = _source332.dtor_range;
                      RAST._IExpr _7374___mcc_h4523 = _source332.dtor_body;
                    } else if (_source332.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7375___mcc_h4527 = _source332.dtor_lbl;
                      RAST._IExpr _7376___mcc_h4528 = _source332.dtor_underlying;
                    } else if (_source332.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7377___mcc_h4531 = _source332.dtor_optLbl;
                    } else if (_source332.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7378___mcc_h4533 = _source332.dtor_optLbl;
                    } else if (_source332.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7379___mcc_h4535 = _source332.dtor_optExpr;
                    } else if (_source332.is_CallType) {
                      RAST._IExpr _7380___mcc_h4537 = _source332.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7381___mcc_h4538 = _source332.dtor_typeParameters;
                    } else if (_source332.is_Call) {
                      RAST._IExpr _7382___mcc_h4541 = _source332.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7383___mcc_h4542 = _source332.dtor_arguments;
                    } else if (_source332.is_Select) {
                      RAST._IExpr _7384___mcc_h4545 = _source332.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7385___mcc_h4546 = _source332.dtor_name;
                    } else if (_source332.is_MemberSelect) {
                      RAST._IExpr _7386___mcc_h4549 = _source332.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7387___mcc_h4550 = _source332.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7388___mcc_h4553 = _source332.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7389___mcc_h4554 = _source332.dtor_retType;
                      RAST._IExpr _7390___mcc_h4555 = _source332.dtor_body;
                    }
                  } else {
                  }
                } else if (_source331.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7391___mcc_h4559 = _source331.dtor_op2;
                  RAST._IExpr _7392___mcc_h4560 = _source331.dtor_left;
                  RAST._IExpr _7393___mcc_h4561 = _source331.dtor_right;
                  DAST.Format._IBinaryOpFormat _7394___mcc_h4562 = _source331.dtor_format2;
                } else if (_source331.is_TypeAscription) {
                  RAST._IExpr _7395___mcc_h4567 = _source331.dtor_left;
                  RAST._IType _7396___mcc_h4568 = _source331.dtor_tpe;
                } else if (_source331.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7397___mcc_h4571 = _source331.dtor_value;
                } else if (_source331.is_LiteralBool) {
                  bool _7398___mcc_h4573 = _source331.dtor_bvalue;
                } else if (_source331.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7399___mcc_h4575 = _source331.dtor_value;
                  bool _7400___mcc_h4576 = _source331.dtor_binary;
                } else if (_source331.is_DeclareVar) {
                  RAST._IDeclareType _7401___mcc_h4579 = _source331.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7402___mcc_h4580 = _source331.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7403___mcc_h4581 = _source331.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7404___mcc_h4582 = _source331.dtor_optRhs;
                } else if (_source331.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7405___mcc_h4587 = _source331.dtor_names;
                  RAST._IExpr _7406___mcc_h4588 = _source331.dtor_rhs;
                } else if (_source331.is_IfExpr) {
                  RAST._IExpr _7407___mcc_h4591 = _source331.dtor_cond;
                  RAST._IExpr _7408___mcc_h4592 = _source331.dtor_thn;
                  RAST._IExpr _7409___mcc_h4593 = _source331.dtor_els;
                } else if (_source331.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7410___mcc_h4597 = _source331.dtor_optCond;
                  RAST._IExpr _7411___mcc_h4598 = _source331.dtor_underlying;
                } else if (_source331.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7412___mcc_h4601 = _source331.dtor_name;
                  RAST._IExpr _7413___mcc_h4602 = _source331.dtor_range;
                  RAST._IExpr _7414___mcc_h4603 = _source331.dtor_body;
                } else if (_source331.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7415___mcc_h4607 = _source331.dtor_lbl;
                  RAST._IExpr _7416___mcc_h4608 = _source331.dtor_underlying;
                } else if (_source331.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7417___mcc_h4611 = _source331.dtor_optLbl;
                } else if (_source331.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7418___mcc_h4613 = _source331.dtor_optLbl;
                } else if (_source331.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7419___mcc_h4615 = _source331.dtor_optExpr;
                } else if (_source331.is_CallType) {
                  RAST._IExpr _7420___mcc_h4617 = _source331.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7421___mcc_h4618 = _source331.dtor_typeParameters;
                } else if (_source331.is_Call) {
                  RAST._IExpr _7422___mcc_h4621 = _source331.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7423___mcc_h4622 = _source331.dtor_arguments;
                } else if (_source331.is_Select) {
                  RAST._IExpr _7424___mcc_h4625 = _source331.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7425___mcc_h4626 = _source331.dtor_name;
                } else if (_source331.is_MemberSelect) {
                  RAST._IExpr _7426___mcc_h4629 = _source331.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7427___mcc_h4630 = _source331.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7428___mcc_h4633 = _source331.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7429___mcc_h4634 = _source331.dtor_retType;
                  RAST._IExpr _7430___mcc_h4635 = _source331.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7314_field));
              if (_7313_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _7431_fromOwnership;
              _7431_fromOwnership = ((_7313_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1881;
              DCOMP._IOwnership _out1882;
              DCOMP.COMP.FromOwnership(r, _7431_fromOwnership, expectedOwnership, out _out1881, out _out1882);
              r = _out1881;
              resultingOwnership = _out1882;
              readIdents = _7322_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Ite) {
          DAST._IExpression _7432___mcc_h132 = _source292.dtor_cond;
          DAST._IExpression _7433___mcc_h133 = _source292.dtor_thn;
          DAST._IExpression _7434___mcc_h134 = _source292.dtor_els;
          DAST._IType _7435_fieldType = _4966___mcc_h57;
          bool _7436_isDatatype = _4965___mcc_h56;
          bool _7437_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _7438_field = _4963___mcc_h54;
          DAST._IExpression _7439_on = _4962___mcc_h53;
          {
            if (_7436_isDatatype) {
              RAST._IExpr _7440_onExpr;
              DCOMP._IOwnership _7441_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7442_recIdents;
              RAST._IExpr _out1883;
              DCOMP._IOwnership _out1884;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1885;
              (this).GenExpr(_7439_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1883, out _out1884, out _out1885);
              _7440_onExpr = _out1883;
              _7441_onOwned = _out1884;
              _7442_recIdents = _out1885;
              r = ((_7440_onExpr).Sel(DCOMP.__default.escapeName(_7438_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7443_typ;
              RAST._IType _out1886;
              _out1886 = (this).GenType(_7435_fieldType, false, false);
              _7443_typ = _out1886;
              if (((_7443_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1887;
                DCOMP._IOwnership _out1888;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1887, out _out1888);
                r = _out1887;
                resultingOwnership = _out1888;
              }
              readIdents = _7442_recIdents;
            } else {
              RAST._IExpr _7444_onExpr;
              DCOMP._IOwnership _7445_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7446_recIdents;
              RAST._IExpr _out1889;
              DCOMP._IOwnership _out1890;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1891;
              (this).GenExpr(_7439_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1889, out _out1890, out _out1891);
              _7444_onExpr = _out1889;
              _7445_onOwned = _out1890;
              _7446_recIdents = _out1891;
              r = _7444_onExpr;
              if (!object.Equals(_7444_onExpr, RAST.__default.self)) {
                RAST._IExpr _source333 = _7444_onExpr;
                if (_source333.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7447___mcc_h4639 = _source333.dtor_content;
                } else if (_source333.is_ExprFromType) {
                  RAST._IType _7448___mcc_h4641 = _source333.dtor_tpe;
                } else if (_source333.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7449___mcc_h4643 = _source333.dtor_name;
                } else if (_source333.is_Match) {
                  RAST._IExpr _7450___mcc_h4645 = _source333.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7451___mcc_h4646 = _source333.dtor_cases;
                } else if (_source333.is_StmtExpr) {
                  RAST._IExpr _7452___mcc_h4649 = _source333.dtor_stmt;
                  RAST._IExpr _7453___mcc_h4650 = _source333.dtor_rhs;
                } else if (_source333.is_Block) {
                  RAST._IExpr _7454___mcc_h4653 = _source333.dtor_underlying;
                } else if (_source333.is_StructBuild) {
                  RAST._IExpr _7455___mcc_h4655 = _source333.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7456___mcc_h4656 = _source333.dtor_assignments;
                } else if (_source333.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7457___mcc_h4659 = _source333.dtor_arguments;
                } else if (_source333.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7458___mcc_h4661 = _source333.dtor_op1;
                  RAST._IExpr _7459___mcc_h4662 = _source333.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7460___mcc_h4663 = _source333.dtor_format;
                  if (object.Equals(_7458___mcc_h4661, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source334 = _7459___mcc_h4662;
                    if (_source334.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7461___mcc_h4667 = _source334.dtor_content;
                    } else if (_source334.is_ExprFromType) {
                      RAST._IType _7462___mcc_h4669 = _source334.dtor_tpe;
                    } else if (_source334.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7463___mcc_h4671 = _source334.dtor_name;
                      if (object.Equals(_7463___mcc_h4671, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source334.is_Match) {
                      RAST._IExpr _7464___mcc_h4673 = _source334.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7465___mcc_h4674 = _source334.dtor_cases;
                    } else if (_source334.is_StmtExpr) {
                      RAST._IExpr _7466___mcc_h4677 = _source334.dtor_stmt;
                      RAST._IExpr _7467___mcc_h4678 = _source334.dtor_rhs;
                    } else if (_source334.is_Block) {
                      RAST._IExpr _7468___mcc_h4681 = _source334.dtor_underlying;
                    } else if (_source334.is_StructBuild) {
                      RAST._IExpr _7469___mcc_h4683 = _source334.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7470___mcc_h4684 = _source334.dtor_assignments;
                    } else if (_source334.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7471___mcc_h4687 = _source334.dtor_arguments;
                    } else if (_source334.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7472___mcc_h4689 = _source334.dtor_op1;
                      RAST._IExpr _7473___mcc_h4690 = _source334.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7474___mcc_h4691 = _source334.dtor_format;
                    } else if (_source334.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7475___mcc_h4695 = _source334.dtor_op2;
                      RAST._IExpr _7476___mcc_h4696 = _source334.dtor_left;
                      RAST._IExpr _7477___mcc_h4697 = _source334.dtor_right;
                      DAST.Format._IBinaryOpFormat _7478___mcc_h4698 = _source334.dtor_format2;
                    } else if (_source334.is_TypeAscription) {
                      RAST._IExpr _7479___mcc_h4703 = _source334.dtor_left;
                      RAST._IType _7480___mcc_h4704 = _source334.dtor_tpe;
                    } else if (_source334.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7481___mcc_h4707 = _source334.dtor_value;
                    } else if (_source334.is_LiteralBool) {
                      bool _7482___mcc_h4709 = _source334.dtor_bvalue;
                    } else if (_source334.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7483___mcc_h4711 = _source334.dtor_value;
                      bool _7484___mcc_h4712 = _source334.dtor_binary;
                    } else if (_source334.is_DeclareVar) {
                      RAST._IDeclareType _7485___mcc_h4715 = _source334.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7486___mcc_h4716 = _source334.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7487___mcc_h4717 = _source334.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7488___mcc_h4718 = _source334.dtor_optRhs;
                    } else if (_source334.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7489___mcc_h4723 = _source334.dtor_names;
                      RAST._IExpr _7490___mcc_h4724 = _source334.dtor_rhs;
                    } else if (_source334.is_IfExpr) {
                      RAST._IExpr _7491___mcc_h4727 = _source334.dtor_cond;
                      RAST._IExpr _7492___mcc_h4728 = _source334.dtor_thn;
                      RAST._IExpr _7493___mcc_h4729 = _source334.dtor_els;
                    } else if (_source334.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7494___mcc_h4733 = _source334.dtor_optCond;
                      RAST._IExpr _7495___mcc_h4734 = _source334.dtor_underlying;
                    } else if (_source334.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7496___mcc_h4737 = _source334.dtor_name;
                      RAST._IExpr _7497___mcc_h4738 = _source334.dtor_range;
                      RAST._IExpr _7498___mcc_h4739 = _source334.dtor_body;
                    } else if (_source334.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7499___mcc_h4743 = _source334.dtor_lbl;
                      RAST._IExpr _7500___mcc_h4744 = _source334.dtor_underlying;
                    } else if (_source334.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7501___mcc_h4747 = _source334.dtor_optLbl;
                    } else if (_source334.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7502___mcc_h4749 = _source334.dtor_optLbl;
                    } else if (_source334.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7503___mcc_h4751 = _source334.dtor_optExpr;
                    } else if (_source334.is_CallType) {
                      RAST._IExpr _7504___mcc_h4753 = _source334.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7505___mcc_h4754 = _source334.dtor_typeParameters;
                    } else if (_source334.is_Call) {
                      RAST._IExpr _7506___mcc_h4757 = _source334.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7507___mcc_h4758 = _source334.dtor_arguments;
                    } else if (_source334.is_Select) {
                      RAST._IExpr _7508___mcc_h4761 = _source334.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7509___mcc_h4762 = _source334.dtor_name;
                    } else if (_source334.is_MemberSelect) {
                      RAST._IExpr _7510___mcc_h4765 = _source334.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7511___mcc_h4766 = _source334.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7512___mcc_h4769 = _source334.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7513___mcc_h4770 = _source334.dtor_retType;
                      RAST._IExpr _7514___mcc_h4771 = _source334.dtor_body;
                    }
                  } else {
                  }
                } else if (_source333.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7515___mcc_h4775 = _source333.dtor_op2;
                  RAST._IExpr _7516___mcc_h4776 = _source333.dtor_left;
                  RAST._IExpr _7517___mcc_h4777 = _source333.dtor_right;
                  DAST.Format._IBinaryOpFormat _7518___mcc_h4778 = _source333.dtor_format2;
                } else if (_source333.is_TypeAscription) {
                  RAST._IExpr _7519___mcc_h4783 = _source333.dtor_left;
                  RAST._IType _7520___mcc_h4784 = _source333.dtor_tpe;
                } else if (_source333.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7521___mcc_h4787 = _source333.dtor_value;
                } else if (_source333.is_LiteralBool) {
                  bool _7522___mcc_h4789 = _source333.dtor_bvalue;
                } else if (_source333.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7523___mcc_h4791 = _source333.dtor_value;
                  bool _7524___mcc_h4792 = _source333.dtor_binary;
                } else if (_source333.is_DeclareVar) {
                  RAST._IDeclareType _7525___mcc_h4795 = _source333.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7526___mcc_h4796 = _source333.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7527___mcc_h4797 = _source333.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7528___mcc_h4798 = _source333.dtor_optRhs;
                } else if (_source333.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7529___mcc_h4803 = _source333.dtor_names;
                  RAST._IExpr _7530___mcc_h4804 = _source333.dtor_rhs;
                } else if (_source333.is_IfExpr) {
                  RAST._IExpr _7531___mcc_h4807 = _source333.dtor_cond;
                  RAST._IExpr _7532___mcc_h4808 = _source333.dtor_thn;
                  RAST._IExpr _7533___mcc_h4809 = _source333.dtor_els;
                } else if (_source333.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7534___mcc_h4813 = _source333.dtor_optCond;
                  RAST._IExpr _7535___mcc_h4814 = _source333.dtor_underlying;
                } else if (_source333.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7536___mcc_h4817 = _source333.dtor_name;
                  RAST._IExpr _7537___mcc_h4818 = _source333.dtor_range;
                  RAST._IExpr _7538___mcc_h4819 = _source333.dtor_body;
                } else if (_source333.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7539___mcc_h4823 = _source333.dtor_lbl;
                  RAST._IExpr _7540___mcc_h4824 = _source333.dtor_underlying;
                } else if (_source333.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7541___mcc_h4827 = _source333.dtor_optLbl;
                } else if (_source333.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7542___mcc_h4829 = _source333.dtor_optLbl;
                } else if (_source333.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7543___mcc_h4831 = _source333.dtor_optExpr;
                } else if (_source333.is_CallType) {
                  RAST._IExpr _7544___mcc_h4833 = _source333.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7545___mcc_h4834 = _source333.dtor_typeParameters;
                } else if (_source333.is_Call) {
                  RAST._IExpr _7546___mcc_h4837 = _source333.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7547___mcc_h4838 = _source333.dtor_arguments;
                } else if (_source333.is_Select) {
                  RAST._IExpr _7548___mcc_h4841 = _source333.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7549___mcc_h4842 = _source333.dtor_name;
                } else if (_source333.is_MemberSelect) {
                  RAST._IExpr _7550___mcc_h4845 = _source333.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7551___mcc_h4846 = _source333.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7552___mcc_h4849 = _source333.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7553___mcc_h4850 = _source333.dtor_retType;
                  RAST._IExpr _7554___mcc_h4851 = _source333.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7438_field));
              if (_7437_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _7555_fromOwnership;
              _7555_fromOwnership = ((_7437_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1892;
              DCOMP._IOwnership _out1893;
              DCOMP.COMP.FromOwnership(r, _7555_fromOwnership, expectedOwnership, out _out1892, out _out1893);
              r = _out1892;
              resultingOwnership = _out1893;
              readIdents = _7446_recIdents;
            }
            return ;
          }
        } else if (_source292.is_UnOp) {
          DAST._IUnaryOp _7556___mcc_h138 = _source292.dtor_unOp;
          DAST._IExpression _7557___mcc_h139 = _source292.dtor_expr;
          DAST.Format._IUnaryOpFormat _7558___mcc_h140 = _source292.dtor_format1;
          DAST._IType _7559_fieldType = _4966___mcc_h57;
          bool _7560_isDatatype = _4965___mcc_h56;
          bool _7561_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _7562_field = _4963___mcc_h54;
          DAST._IExpression _7563_on = _4962___mcc_h53;
          {
            if (_7560_isDatatype) {
              RAST._IExpr _7564_onExpr;
              DCOMP._IOwnership _7565_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7566_recIdents;
              RAST._IExpr _out1894;
              DCOMP._IOwnership _out1895;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1896;
              (this).GenExpr(_7563_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1894, out _out1895, out _out1896);
              _7564_onExpr = _out1894;
              _7565_onOwned = _out1895;
              _7566_recIdents = _out1896;
              r = ((_7564_onExpr).Sel(DCOMP.__default.escapeName(_7562_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7567_typ;
              RAST._IType _out1897;
              _out1897 = (this).GenType(_7559_fieldType, false, false);
              _7567_typ = _out1897;
              if (((_7567_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1898;
                DCOMP._IOwnership _out1899;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1898, out _out1899);
                r = _out1898;
                resultingOwnership = _out1899;
              }
              readIdents = _7566_recIdents;
            } else {
              RAST._IExpr _7568_onExpr;
              DCOMP._IOwnership _7569_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7570_recIdents;
              RAST._IExpr _out1900;
              DCOMP._IOwnership _out1901;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1902;
              (this).GenExpr(_7563_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1900, out _out1901, out _out1902);
              _7568_onExpr = _out1900;
              _7569_onOwned = _out1901;
              _7570_recIdents = _out1902;
              r = _7568_onExpr;
              if (!object.Equals(_7568_onExpr, RAST.__default.self)) {
                RAST._IExpr _source335 = _7568_onExpr;
                if (_source335.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7571___mcc_h4855 = _source335.dtor_content;
                } else if (_source335.is_ExprFromType) {
                  RAST._IType _7572___mcc_h4857 = _source335.dtor_tpe;
                } else if (_source335.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7573___mcc_h4859 = _source335.dtor_name;
                } else if (_source335.is_Match) {
                  RAST._IExpr _7574___mcc_h4861 = _source335.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7575___mcc_h4862 = _source335.dtor_cases;
                } else if (_source335.is_StmtExpr) {
                  RAST._IExpr _7576___mcc_h4865 = _source335.dtor_stmt;
                  RAST._IExpr _7577___mcc_h4866 = _source335.dtor_rhs;
                } else if (_source335.is_Block) {
                  RAST._IExpr _7578___mcc_h4869 = _source335.dtor_underlying;
                } else if (_source335.is_StructBuild) {
                  RAST._IExpr _7579___mcc_h4871 = _source335.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7580___mcc_h4872 = _source335.dtor_assignments;
                } else if (_source335.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7581___mcc_h4875 = _source335.dtor_arguments;
                } else if (_source335.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7582___mcc_h4877 = _source335.dtor_op1;
                  RAST._IExpr _7583___mcc_h4878 = _source335.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7584___mcc_h4879 = _source335.dtor_format;
                  if (object.Equals(_7582___mcc_h4877, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source336 = _7583___mcc_h4878;
                    if (_source336.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7585___mcc_h4883 = _source336.dtor_content;
                    } else if (_source336.is_ExprFromType) {
                      RAST._IType _7586___mcc_h4885 = _source336.dtor_tpe;
                    } else if (_source336.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7587___mcc_h4887 = _source336.dtor_name;
                      if (object.Equals(_7587___mcc_h4887, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source336.is_Match) {
                      RAST._IExpr _7588___mcc_h4889 = _source336.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7589___mcc_h4890 = _source336.dtor_cases;
                    } else if (_source336.is_StmtExpr) {
                      RAST._IExpr _7590___mcc_h4893 = _source336.dtor_stmt;
                      RAST._IExpr _7591___mcc_h4894 = _source336.dtor_rhs;
                    } else if (_source336.is_Block) {
                      RAST._IExpr _7592___mcc_h4897 = _source336.dtor_underlying;
                    } else if (_source336.is_StructBuild) {
                      RAST._IExpr _7593___mcc_h4899 = _source336.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7594___mcc_h4900 = _source336.dtor_assignments;
                    } else if (_source336.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7595___mcc_h4903 = _source336.dtor_arguments;
                    } else if (_source336.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7596___mcc_h4905 = _source336.dtor_op1;
                      RAST._IExpr _7597___mcc_h4906 = _source336.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7598___mcc_h4907 = _source336.dtor_format;
                    } else if (_source336.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7599___mcc_h4911 = _source336.dtor_op2;
                      RAST._IExpr _7600___mcc_h4912 = _source336.dtor_left;
                      RAST._IExpr _7601___mcc_h4913 = _source336.dtor_right;
                      DAST.Format._IBinaryOpFormat _7602___mcc_h4914 = _source336.dtor_format2;
                    } else if (_source336.is_TypeAscription) {
                      RAST._IExpr _7603___mcc_h4919 = _source336.dtor_left;
                      RAST._IType _7604___mcc_h4920 = _source336.dtor_tpe;
                    } else if (_source336.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7605___mcc_h4923 = _source336.dtor_value;
                    } else if (_source336.is_LiteralBool) {
                      bool _7606___mcc_h4925 = _source336.dtor_bvalue;
                    } else if (_source336.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7607___mcc_h4927 = _source336.dtor_value;
                      bool _7608___mcc_h4928 = _source336.dtor_binary;
                    } else if (_source336.is_DeclareVar) {
                      RAST._IDeclareType _7609___mcc_h4931 = _source336.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7610___mcc_h4932 = _source336.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7611___mcc_h4933 = _source336.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7612___mcc_h4934 = _source336.dtor_optRhs;
                    } else if (_source336.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7613___mcc_h4939 = _source336.dtor_names;
                      RAST._IExpr _7614___mcc_h4940 = _source336.dtor_rhs;
                    } else if (_source336.is_IfExpr) {
                      RAST._IExpr _7615___mcc_h4943 = _source336.dtor_cond;
                      RAST._IExpr _7616___mcc_h4944 = _source336.dtor_thn;
                      RAST._IExpr _7617___mcc_h4945 = _source336.dtor_els;
                    } else if (_source336.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7618___mcc_h4949 = _source336.dtor_optCond;
                      RAST._IExpr _7619___mcc_h4950 = _source336.dtor_underlying;
                    } else if (_source336.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7620___mcc_h4953 = _source336.dtor_name;
                      RAST._IExpr _7621___mcc_h4954 = _source336.dtor_range;
                      RAST._IExpr _7622___mcc_h4955 = _source336.dtor_body;
                    } else if (_source336.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7623___mcc_h4959 = _source336.dtor_lbl;
                      RAST._IExpr _7624___mcc_h4960 = _source336.dtor_underlying;
                    } else if (_source336.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7625___mcc_h4963 = _source336.dtor_optLbl;
                    } else if (_source336.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7626___mcc_h4965 = _source336.dtor_optLbl;
                    } else if (_source336.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7627___mcc_h4967 = _source336.dtor_optExpr;
                    } else if (_source336.is_CallType) {
                      RAST._IExpr _7628___mcc_h4969 = _source336.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7629___mcc_h4970 = _source336.dtor_typeParameters;
                    } else if (_source336.is_Call) {
                      RAST._IExpr _7630___mcc_h4973 = _source336.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7631___mcc_h4974 = _source336.dtor_arguments;
                    } else if (_source336.is_Select) {
                      RAST._IExpr _7632___mcc_h4977 = _source336.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7633___mcc_h4978 = _source336.dtor_name;
                    } else if (_source336.is_MemberSelect) {
                      RAST._IExpr _7634___mcc_h4981 = _source336.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7635___mcc_h4982 = _source336.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7636___mcc_h4985 = _source336.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7637___mcc_h4986 = _source336.dtor_retType;
                      RAST._IExpr _7638___mcc_h4987 = _source336.dtor_body;
                    }
                  } else {
                  }
                } else if (_source335.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7639___mcc_h4991 = _source335.dtor_op2;
                  RAST._IExpr _7640___mcc_h4992 = _source335.dtor_left;
                  RAST._IExpr _7641___mcc_h4993 = _source335.dtor_right;
                  DAST.Format._IBinaryOpFormat _7642___mcc_h4994 = _source335.dtor_format2;
                } else if (_source335.is_TypeAscription) {
                  RAST._IExpr _7643___mcc_h4999 = _source335.dtor_left;
                  RAST._IType _7644___mcc_h5000 = _source335.dtor_tpe;
                } else if (_source335.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7645___mcc_h5003 = _source335.dtor_value;
                } else if (_source335.is_LiteralBool) {
                  bool _7646___mcc_h5005 = _source335.dtor_bvalue;
                } else if (_source335.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7647___mcc_h5007 = _source335.dtor_value;
                  bool _7648___mcc_h5008 = _source335.dtor_binary;
                } else if (_source335.is_DeclareVar) {
                  RAST._IDeclareType _7649___mcc_h5011 = _source335.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7650___mcc_h5012 = _source335.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7651___mcc_h5013 = _source335.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7652___mcc_h5014 = _source335.dtor_optRhs;
                } else if (_source335.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7653___mcc_h5019 = _source335.dtor_names;
                  RAST._IExpr _7654___mcc_h5020 = _source335.dtor_rhs;
                } else if (_source335.is_IfExpr) {
                  RAST._IExpr _7655___mcc_h5023 = _source335.dtor_cond;
                  RAST._IExpr _7656___mcc_h5024 = _source335.dtor_thn;
                  RAST._IExpr _7657___mcc_h5025 = _source335.dtor_els;
                } else if (_source335.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7658___mcc_h5029 = _source335.dtor_optCond;
                  RAST._IExpr _7659___mcc_h5030 = _source335.dtor_underlying;
                } else if (_source335.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7660___mcc_h5033 = _source335.dtor_name;
                  RAST._IExpr _7661___mcc_h5034 = _source335.dtor_range;
                  RAST._IExpr _7662___mcc_h5035 = _source335.dtor_body;
                } else if (_source335.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7663___mcc_h5039 = _source335.dtor_lbl;
                  RAST._IExpr _7664___mcc_h5040 = _source335.dtor_underlying;
                } else if (_source335.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7665___mcc_h5043 = _source335.dtor_optLbl;
                } else if (_source335.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7666___mcc_h5045 = _source335.dtor_optLbl;
                } else if (_source335.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7667___mcc_h5047 = _source335.dtor_optExpr;
                } else if (_source335.is_CallType) {
                  RAST._IExpr _7668___mcc_h5049 = _source335.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7669___mcc_h5050 = _source335.dtor_typeParameters;
                } else if (_source335.is_Call) {
                  RAST._IExpr _7670___mcc_h5053 = _source335.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7671___mcc_h5054 = _source335.dtor_arguments;
                } else if (_source335.is_Select) {
                  RAST._IExpr _7672___mcc_h5057 = _source335.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7673___mcc_h5058 = _source335.dtor_name;
                } else if (_source335.is_MemberSelect) {
                  RAST._IExpr _7674___mcc_h5061 = _source335.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7675___mcc_h5062 = _source335.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7676___mcc_h5065 = _source335.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7677___mcc_h5066 = _source335.dtor_retType;
                  RAST._IExpr _7678___mcc_h5067 = _source335.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7562_field));
              if (_7561_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _7679_fromOwnership;
              _7679_fromOwnership = ((_7561_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1903;
              DCOMP._IOwnership _out1904;
              DCOMP.COMP.FromOwnership(r, _7679_fromOwnership, expectedOwnership, out _out1903, out _out1904);
              r = _out1903;
              resultingOwnership = _out1904;
              readIdents = _7570_recIdents;
            }
            return ;
          }
        } else if (_source292.is_BinOp) {
          DAST._IBinOp _7680___mcc_h144 = _source292.dtor_op;
          DAST._IExpression _7681___mcc_h145 = _source292.dtor_left;
          DAST._IExpression _7682___mcc_h146 = _source292.dtor_right;
          DAST.Format._IBinaryOpFormat _7683___mcc_h147 = _source292.dtor_format2;
          DAST._IType _7684_fieldType = _4966___mcc_h57;
          bool _7685_isDatatype = _4965___mcc_h56;
          bool _7686_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _7687_field = _4963___mcc_h54;
          DAST._IExpression _7688_on = _4962___mcc_h53;
          {
            if (_7685_isDatatype) {
              RAST._IExpr _7689_onExpr;
              DCOMP._IOwnership _7690_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7691_recIdents;
              RAST._IExpr _out1905;
              DCOMP._IOwnership _out1906;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1907;
              (this).GenExpr(_7688_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1905, out _out1906, out _out1907);
              _7689_onExpr = _out1905;
              _7690_onOwned = _out1906;
              _7691_recIdents = _out1907;
              r = ((_7689_onExpr).Sel(DCOMP.__default.escapeName(_7687_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7692_typ;
              RAST._IType _out1908;
              _out1908 = (this).GenType(_7684_fieldType, false, false);
              _7692_typ = _out1908;
              if (((_7692_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1909;
                DCOMP._IOwnership _out1910;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1909, out _out1910);
                r = _out1909;
                resultingOwnership = _out1910;
              }
              readIdents = _7691_recIdents;
            } else {
              RAST._IExpr _7693_onExpr;
              DCOMP._IOwnership _7694_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7695_recIdents;
              RAST._IExpr _out1911;
              DCOMP._IOwnership _out1912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1913;
              (this).GenExpr(_7688_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1911, out _out1912, out _out1913);
              _7693_onExpr = _out1911;
              _7694_onOwned = _out1912;
              _7695_recIdents = _out1913;
              r = _7693_onExpr;
              if (!object.Equals(_7693_onExpr, RAST.__default.self)) {
                RAST._IExpr _source337 = _7693_onExpr;
                if (_source337.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7696___mcc_h5071 = _source337.dtor_content;
                } else if (_source337.is_ExprFromType) {
                  RAST._IType _7697___mcc_h5073 = _source337.dtor_tpe;
                } else if (_source337.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7698___mcc_h5075 = _source337.dtor_name;
                } else if (_source337.is_Match) {
                  RAST._IExpr _7699___mcc_h5077 = _source337.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7700___mcc_h5078 = _source337.dtor_cases;
                } else if (_source337.is_StmtExpr) {
                  RAST._IExpr _7701___mcc_h5081 = _source337.dtor_stmt;
                  RAST._IExpr _7702___mcc_h5082 = _source337.dtor_rhs;
                } else if (_source337.is_Block) {
                  RAST._IExpr _7703___mcc_h5085 = _source337.dtor_underlying;
                } else if (_source337.is_StructBuild) {
                  RAST._IExpr _7704___mcc_h5087 = _source337.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7705___mcc_h5088 = _source337.dtor_assignments;
                } else if (_source337.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7706___mcc_h5091 = _source337.dtor_arguments;
                } else if (_source337.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7707___mcc_h5093 = _source337.dtor_op1;
                  RAST._IExpr _7708___mcc_h5094 = _source337.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7709___mcc_h5095 = _source337.dtor_format;
                  if (object.Equals(_7707___mcc_h5093, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source338 = _7708___mcc_h5094;
                    if (_source338.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7710___mcc_h5099 = _source338.dtor_content;
                    } else if (_source338.is_ExprFromType) {
                      RAST._IType _7711___mcc_h5101 = _source338.dtor_tpe;
                    } else if (_source338.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7712___mcc_h5103 = _source338.dtor_name;
                      if (object.Equals(_7712___mcc_h5103, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source338.is_Match) {
                      RAST._IExpr _7713___mcc_h5105 = _source338.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7714___mcc_h5106 = _source338.dtor_cases;
                    } else if (_source338.is_StmtExpr) {
                      RAST._IExpr _7715___mcc_h5109 = _source338.dtor_stmt;
                      RAST._IExpr _7716___mcc_h5110 = _source338.dtor_rhs;
                    } else if (_source338.is_Block) {
                      RAST._IExpr _7717___mcc_h5113 = _source338.dtor_underlying;
                    } else if (_source338.is_StructBuild) {
                      RAST._IExpr _7718___mcc_h5115 = _source338.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7719___mcc_h5116 = _source338.dtor_assignments;
                    } else if (_source338.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7720___mcc_h5119 = _source338.dtor_arguments;
                    } else if (_source338.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7721___mcc_h5121 = _source338.dtor_op1;
                      RAST._IExpr _7722___mcc_h5122 = _source338.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7723___mcc_h5123 = _source338.dtor_format;
                    } else if (_source338.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7724___mcc_h5127 = _source338.dtor_op2;
                      RAST._IExpr _7725___mcc_h5128 = _source338.dtor_left;
                      RAST._IExpr _7726___mcc_h5129 = _source338.dtor_right;
                      DAST.Format._IBinaryOpFormat _7727___mcc_h5130 = _source338.dtor_format2;
                    } else if (_source338.is_TypeAscription) {
                      RAST._IExpr _7728___mcc_h5135 = _source338.dtor_left;
                      RAST._IType _7729___mcc_h5136 = _source338.dtor_tpe;
                    } else if (_source338.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7730___mcc_h5139 = _source338.dtor_value;
                    } else if (_source338.is_LiteralBool) {
                      bool _7731___mcc_h5141 = _source338.dtor_bvalue;
                    } else if (_source338.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7732___mcc_h5143 = _source338.dtor_value;
                      bool _7733___mcc_h5144 = _source338.dtor_binary;
                    } else if (_source338.is_DeclareVar) {
                      RAST._IDeclareType _7734___mcc_h5147 = _source338.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7735___mcc_h5148 = _source338.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7736___mcc_h5149 = _source338.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7737___mcc_h5150 = _source338.dtor_optRhs;
                    } else if (_source338.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7738___mcc_h5155 = _source338.dtor_names;
                      RAST._IExpr _7739___mcc_h5156 = _source338.dtor_rhs;
                    } else if (_source338.is_IfExpr) {
                      RAST._IExpr _7740___mcc_h5159 = _source338.dtor_cond;
                      RAST._IExpr _7741___mcc_h5160 = _source338.dtor_thn;
                      RAST._IExpr _7742___mcc_h5161 = _source338.dtor_els;
                    } else if (_source338.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7743___mcc_h5165 = _source338.dtor_optCond;
                      RAST._IExpr _7744___mcc_h5166 = _source338.dtor_underlying;
                    } else if (_source338.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7745___mcc_h5169 = _source338.dtor_name;
                      RAST._IExpr _7746___mcc_h5170 = _source338.dtor_range;
                      RAST._IExpr _7747___mcc_h5171 = _source338.dtor_body;
                    } else if (_source338.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7748___mcc_h5175 = _source338.dtor_lbl;
                      RAST._IExpr _7749___mcc_h5176 = _source338.dtor_underlying;
                    } else if (_source338.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7750___mcc_h5179 = _source338.dtor_optLbl;
                    } else if (_source338.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7751___mcc_h5181 = _source338.dtor_optLbl;
                    } else if (_source338.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7752___mcc_h5183 = _source338.dtor_optExpr;
                    } else if (_source338.is_CallType) {
                      RAST._IExpr _7753___mcc_h5185 = _source338.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7754___mcc_h5186 = _source338.dtor_typeParameters;
                    } else if (_source338.is_Call) {
                      RAST._IExpr _7755___mcc_h5189 = _source338.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7756___mcc_h5190 = _source338.dtor_arguments;
                    } else if (_source338.is_Select) {
                      RAST._IExpr _7757___mcc_h5193 = _source338.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7758___mcc_h5194 = _source338.dtor_name;
                    } else if (_source338.is_MemberSelect) {
                      RAST._IExpr _7759___mcc_h5197 = _source338.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7760___mcc_h5198 = _source338.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7761___mcc_h5201 = _source338.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7762___mcc_h5202 = _source338.dtor_retType;
                      RAST._IExpr _7763___mcc_h5203 = _source338.dtor_body;
                    }
                  } else {
                  }
                } else if (_source337.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7764___mcc_h5207 = _source337.dtor_op2;
                  RAST._IExpr _7765___mcc_h5208 = _source337.dtor_left;
                  RAST._IExpr _7766___mcc_h5209 = _source337.dtor_right;
                  DAST.Format._IBinaryOpFormat _7767___mcc_h5210 = _source337.dtor_format2;
                } else if (_source337.is_TypeAscription) {
                  RAST._IExpr _7768___mcc_h5215 = _source337.dtor_left;
                  RAST._IType _7769___mcc_h5216 = _source337.dtor_tpe;
                } else if (_source337.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7770___mcc_h5219 = _source337.dtor_value;
                } else if (_source337.is_LiteralBool) {
                  bool _7771___mcc_h5221 = _source337.dtor_bvalue;
                } else if (_source337.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7772___mcc_h5223 = _source337.dtor_value;
                  bool _7773___mcc_h5224 = _source337.dtor_binary;
                } else if (_source337.is_DeclareVar) {
                  RAST._IDeclareType _7774___mcc_h5227 = _source337.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7775___mcc_h5228 = _source337.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7776___mcc_h5229 = _source337.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7777___mcc_h5230 = _source337.dtor_optRhs;
                } else if (_source337.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7778___mcc_h5235 = _source337.dtor_names;
                  RAST._IExpr _7779___mcc_h5236 = _source337.dtor_rhs;
                } else if (_source337.is_IfExpr) {
                  RAST._IExpr _7780___mcc_h5239 = _source337.dtor_cond;
                  RAST._IExpr _7781___mcc_h5240 = _source337.dtor_thn;
                  RAST._IExpr _7782___mcc_h5241 = _source337.dtor_els;
                } else if (_source337.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7783___mcc_h5245 = _source337.dtor_optCond;
                  RAST._IExpr _7784___mcc_h5246 = _source337.dtor_underlying;
                } else if (_source337.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7785___mcc_h5249 = _source337.dtor_name;
                  RAST._IExpr _7786___mcc_h5250 = _source337.dtor_range;
                  RAST._IExpr _7787___mcc_h5251 = _source337.dtor_body;
                } else if (_source337.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7788___mcc_h5255 = _source337.dtor_lbl;
                  RAST._IExpr _7789___mcc_h5256 = _source337.dtor_underlying;
                } else if (_source337.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7790___mcc_h5259 = _source337.dtor_optLbl;
                } else if (_source337.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7791___mcc_h5261 = _source337.dtor_optLbl;
                } else if (_source337.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7792___mcc_h5263 = _source337.dtor_optExpr;
                } else if (_source337.is_CallType) {
                  RAST._IExpr _7793___mcc_h5265 = _source337.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7794___mcc_h5266 = _source337.dtor_typeParameters;
                } else if (_source337.is_Call) {
                  RAST._IExpr _7795___mcc_h5269 = _source337.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7796___mcc_h5270 = _source337.dtor_arguments;
                } else if (_source337.is_Select) {
                  RAST._IExpr _7797___mcc_h5273 = _source337.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7798___mcc_h5274 = _source337.dtor_name;
                } else if (_source337.is_MemberSelect) {
                  RAST._IExpr _7799___mcc_h5277 = _source337.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7800___mcc_h5278 = _source337.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7801___mcc_h5281 = _source337.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7802___mcc_h5282 = _source337.dtor_retType;
                  RAST._IExpr _7803___mcc_h5283 = _source337.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7687_field));
              if (_7686_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _7804_fromOwnership;
              _7804_fromOwnership = ((_7686_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1914;
              DCOMP._IOwnership _out1915;
              DCOMP.COMP.FromOwnership(r, _7804_fromOwnership, expectedOwnership, out _out1914, out _out1915);
              r = _out1914;
              resultingOwnership = _out1915;
              readIdents = _7695_recIdents;
            }
            return ;
          }
        } else if (_source292.is_ArrayLen) {
          DAST._IExpression _7805___mcc_h152 = _source292.dtor_expr;
          DAST._IType _7806___mcc_h153 = _source292.dtor_exprType;
          BigInteger _7807___mcc_h154 = _source292.dtor_dim;
          bool _7808___mcc_h155 = _source292.dtor_native;
          DAST._IType _7809_fieldType = _4966___mcc_h57;
          bool _7810_isDatatype = _4965___mcc_h56;
          bool _7811_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _7812_field = _4963___mcc_h54;
          DAST._IExpression _7813_on = _4962___mcc_h53;
          {
            if (_7810_isDatatype) {
              RAST._IExpr _7814_onExpr;
              DCOMP._IOwnership _7815_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7816_recIdents;
              RAST._IExpr _out1916;
              DCOMP._IOwnership _out1917;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1918;
              (this).GenExpr(_7813_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1916, out _out1917, out _out1918);
              _7814_onExpr = _out1916;
              _7815_onOwned = _out1917;
              _7816_recIdents = _out1918;
              r = ((_7814_onExpr).Sel(DCOMP.__default.escapeName(_7812_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7817_typ;
              RAST._IType _out1919;
              _out1919 = (this).GenType(_7809_fieldType, false, false);
              _7817_typ = _out1919;
              if (((_7817_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1920;
                DCOMP._IOwnership _out1921;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1920, out _out1921);
                r = _out1920;
                resultingOwnership = _out1921;
              }
              readIdents = _7816_recIdents;
            } else {
              RAST._IExpr _7818_onExpr;
              DCOMP._IOwnership _7819_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7820_recIdents;
              RAST._IExpr _out1922;
              DCOMP._IOwnership _out1923;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1924;
              (this).GenExpr(_7813_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1922, out _out1923, out _out1924);
              _7818_onExpr = _out1922;
              _7819_onOwned = _out1923;
              _7820_recIdents = _out1924;
              r = _7818_onExpr;
              if (!object.Equals(_7818_onExpr, RAST.__default.self)) {
                RAST._IExpr _source339 = _7818_onExpr;
                if (_source339.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7821___mcc_h5287 = _source339.dtor_content;
                } else if (_source339.is_ExprFromType) {
                  RAST._IType _7822___mcc_h5289 = _source339.dtor_tpe;
                } else if (_source339.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7823___mcc_h5291 = _source339.dtor_name;
                } else if (_source339.is_Match) {
                  RAST._IExpr _7824___mcc_h5293 = _source339.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7825___mcc_h5294 = _source339.dtor_cases;
                } else if (_source339.is_StmtExpr) {
                  RAST._IExpr _7826___mcc_h5297 = _source339.dtor_stmt;
                  RAST._IExpr _7827___mcc_h5298 = _source339.dtor_rhs;
                } else if (_source339.is_Block) {
                  RAST._IExpr _7828___mcc_h5301 = _source339.dtor_underlying;
                } else if (_source339.is_StructBuild) {
                  RAST._IExpr _7829___mcc_h5303 = _source339.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7830___mcc_h5304 = _source339.dtor_assignments;
                } else if (_source339.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7831___mcc_h5307 = _source339.dtor_arguments;
                } else if (_source339.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7832___mcc_h5309 = _source339.dtor_op1;
                  RAST._IExpr _7833___mcc_h5310 = _source339.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7834___mcc_h5311 = _source339.dtor_format;
                  if (object.Equals(_7832___mcc_h5309, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source340 = _7833___mcc_h5310;
                    if (_source340.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7835___mcc_h5315 = _source340.dtor_content;
                    } else if (_source340.is_ExprFromType) {
                      RAST._IType _7836___mcc_h5317 = _source340.dtor_tpe;
                    } else if (_source340.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7837___mcc_h5319 = _source340.dtor_name;
                      if (object.Equals(_7837___mcc_h5319, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source340.is_Match) {
                      RAST._IExpr _7838___mcc_h5321 = _source340.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7839___mcc_h5322 = _source340.dtor_cases;
                    } else if (_source340.is_StmtExpr) {
                      RAST._IExpr _7840___mcc_h5325 = _source340.dtor_stmt;
                      RAST._IExpr _7841___mcc_h5326 = _source340.dtor_rhs;
                    } else if (_source340.is_Block) {
                      RAST._IExpr _7842___mcc_h5329 = _source340.dtor_underlying;
                    } else if (_source340.is_StructBuild) {
                      RAST._IExpr _7843___mcc_h5331 = _source340.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7844___mcc_h5332 = _source340.dtor_assignments;
                    } else if (_source340.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7845___mcc_h5335 = _source340.dtor_arguments;
                    } else if (_source340.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7846___mcc_h5337 = _source340.dtor_op1;
                      RAST._IExpr _7847___mcc_h5338 = _source340.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7848___mcc_h5339 = _source340.dtor_format;
                    } else if (_source340.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7849___mcc_h5343 = _source340.dtor_op2;
                      RAST._IExpr _7850___mcc_h5344 = _source340.dtor_left;
                      RAST._IExpr _7851___mcc_h5345 = _source340.dtor_right;
                      DAST.Format._IBinaryOpFormat _7852___mcc_h5346 = _source340.dtor_format2;
                    } else if (_source340.is_TypeAscription) {
                      RAST._IExpr _7853___mcc_h5351 = _source340.dtor_left;
                      RAST._IType _7854___mcc_h5352 = _source340.dtor_tpe;
                    } else if (_source340.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7855___mcc_h5355 = _source340.dtor_value;
                    } else if (_source340.is_LiteralBool) {
                      bool _7856___mcc_h5357 = _source340.dtor_bvalue;
                    } else if (_source340.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7857___mcc_h5359 = _source340.dtor_value;
                      bool _7858___mcc_h5360 = _source340.dtor_binary;
                    } else if (_source340.is_DeclareVar) {
                      RAST._IDeclareType _7859___mcc_h5363 = _source340.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7860___mcc_h5364 = _source340.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7861___mcc_h5365 = _source340.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7862___mcc_h5366 = _source340.dtor_optRhs;
                    } else if (_source340.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7863___mcc_h5371 = _source340.dtor_names;
                      RAST._IExpr _7864___mcc_h5372 = _source340.dtor_rhs;
                    } else if (_source340.is_IfExpr) {
                      RAST._IExpr _7865___mcc_h5375 = _source340.dtor_cond;
                      RAST._IExpr _7866___mcc_h5376 = _source340.dtor_thn;
                      RAST._IExpr _7867___mcc_h5377 = _source340.dtor_els;
                    } else if (_source340.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7868___mcc_h5381 = _source340.dtor_optCond;
                      RAST._IExpr _7869___mcc_h5382 = _source340.dtor_underlying;
                    } else if (_source340.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7870___mcc_h5385 = _source340.dtor_name;
                      RAST._IExpr _7871___mcc_h5386 = _source340.dtor_range;
                      RAST._IExpr _7872___mcc_h5387 = _source340.dtor_body;
                    } else if (_source340.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7873___mcc_h5391 = _source340.dtor_lbl;
                      RAST._IExpr _7874___mcc_h5392 = _source340.dtor_underlying;
                    } else if (_source340.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7875___mcc_h5395 = _source340.dtor_optLbl;
                    } else if (_source340.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7876___mcc_h5397 = _source340.dtor_optLbl;
                    } else if (_source340.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7877___mcc_h5399 = _source340.dtor_optExpr;
                    } else if (_source340.is_CallType) {
                      RAST._IExpr _7878___mcc_h5401 = _source340.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7879___mcc_h5402 = _source340.dtor_typeParameters;
                    } else if (_source340.is_Call) {
                      RAST._IExpr _7880___mcc_h5405 = _source340.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7881___mcc_h5406 = _source340.dtor_arguments;
                    } else if (_source340.is_Select) {
                      RAST._IExpr _7882___mcc_h5409 = _source340.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7883___mcc_h5410 = _source340.dtor_name;
                    } else if (_source340.is_MemberSelect) {
                      RAST._IExpr _7884___mcc_h5413 = _source340.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7885___mcc_h5414 = _source340.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7886___mcc_h5417 = _source340.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7887___mcc_h5418 = _source340.dtor_retType;
                      RAST._IExpr _7888___mcc_h5419 = _source340.dtor_body;
                    }
                  } else {
                  }
                } else if (_source339.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7889___mcc_h5423 = _source339.dtor_op2;
                  RAST._IExpr _7890___mcc_h5424 = _source339.dtor_left;
                  RAST._IExpr _7891___mcc_h5425 = _source339.dtor_right;
                  DAST.Format._IBinaryOpFormat _7892___mcc_h5426 = _source339.dtor_format2;
                } else if (_source339.is_TypeAscription) {
                  RAST._IExpr _7893___mcc_h5431 = _source339.dtor_left;
                  RAST._IType _7894___mcc_h5432 = _source339.dtor_tpe;
                } else if (_source339.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7895___mcc_h5435 = _source339.dtor_value;
                } else if (_source339.is_LiteralBool) {
                  bool _7896___mcc_h5437 = _source339.dtor_bvalue;
                } else if (_source339.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7897___mcc_h5439 = _source339.dtor_value;
                  bool _7898___mcc_h5440 = _source339.dtor_binary;
                } else if (_source339.is_DeclareVar) {
                  RAST._IDeclareType _7899___mcc_h5443 = _source339.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7900___mcc_h5444 = _source339.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7901___mcc_h5445 = _source339.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7902___mcc_h5446 = _source339.dtor_optRhs;
                } else if (_source339.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7903___mcc_h5451 = _source339.dtor_names;
                  RAST._IExpr _7904___mcc_h5452 = _source339.dtor_rhs;
                } else if (_source339.is_IfExpr) {
                  RAST._IExpr _7905___mcc_h5455 = _source339.dtor_cond;
                  RAST._IExpr _7906___mcc_h5456 = _source339.dtor_thn;
                  RAST._IExpr _7907___mcc_h5457 = _source339.dtor_els;
                } else if (_source339.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7908___mcc_h5461 = _source339.dtor_optCond;
                  RAST._IExpr _7909___mcc_h5462 = _source339.dtor_underlying;
                } else if (_source339.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7910___mcc_h5465 = _source339.dtor_name;
                  RAST._IExpr _7911___mcc_h5466 = _source339.dtor_range;
                  RAST._IExpr _7912___mcc_h5467 = _source339.dtor_body;
                } else if (_source339.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7913___mcc_h5471 = _source339.dtor_lbl;
                  RAST._IExpr _7914___mcc_h5472 = _source339.dtor_underlying;
                } else if (_source339.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7915___mcc_h5475 = _source339.dtor_optLbl;
                } else if (_source339.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7916___mcc_h5477 = _source339.dtor_optLbl;
                } else if (_source339.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7917___mcc_h5479 = _source339.dtor_optExpr;
                } else if (_source339.is_CallType) {
                  RAST._IExpr _7918___mcc_h5481 = _source339.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7919___mcc_h5482 = _source339.dtor_typeParameters;
                } else if (_source339.is_Call) {
                  RAST._IExpr _7920___mcc_h5485 = _source339.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7921___mcc_h5486 = _source339.dtor_arguments;
                } else if (_source339.is_Select) {
                  RAST._IExpr _7922___mcc_h5489 = _source339.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7923___mcc_h5490 = _source339.dtor_name;
                } else if (_source339.is_MemberSelect) {
                  RAST._IExpr _7924___mcc_h5493 = _source339.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7925___mcc_h5494 = _source339.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7926___mcc_h5497 = _source339.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7927___mcc_h5498 = _source339.dtor_retType;
                  RAST._IExpr _7928___mcc_h5499 = _source339.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7812_field));
              if (_7811_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _7929_fromOwnership;
              _7929_fromOwnership = ((_7811_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1925;
              DCOMP._IOwnership _out1926;
              DCOMP.COMP.FromOwnership(r, _7929_fromOwnership, expectedOwnership, out _out1925, out _out1926);
              r = _out1925;
              resultingOwnership = _out1926;
              readIdents = _7820_recIdents;
            }
            return ;
          }
        } else if (_source292.is_MapKeys) {
          DAST._IExpression _7930___mcc_h160 = _source292.dtor_expr;
          DAST._IType _7931_fieldType = _4966___mcc_h57;
          bool _7932_isDatatype = _4965___mcc_h56;
          bool _7933_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _7934_field = _4963___mcc_h54;
          DAST._IExpression _7935_on = _4962___mcc_h53;
          {
            if (_7932_isDatatype) {
              RAST._IExpr _7936_onExpr;
              DCOMP._IOwnership _7937_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7938_recIdents;
              RAST._IExpr _out1927;
              DCOMP._IOwnership _out1928;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1929;
              (this).GenExpr(_7935_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1927, out _out1928, out _out1929);
              _7936_onExpr = _out1927;
              _7937_onOwned = _out1928;
              _7938_recIdents = _out1929;
              r = ((_7936_onExpr).Sel(DCOMP.__default.escapeName(_7934_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7939_typ;
              RAST._IType _out1930;
              _out1930 = (this).GenType(_7931_fieldType, false, false);
              _7939_typ = _out1930;
              if (((_7939_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1931;
                DCOMP._IOwnership _out1932;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1931, out _out1932);
                r = _out1931;
                resultingOwnership = _out1932;
              }
              readIdents = _7938_recIdents;
            } else {
              RAST._IExpr _7940_onExpr;
              DCOMP._IOwnership _7941_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7942_recIdents;
              RAST._IExpr _out1933;
              DCOMP._IOwnership _out1934;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1935;
              (this).GenExpr(_7935_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1933, out _out1934, out _out1935);
              _7940_onExpr = _out1933;
              _7941_onOwned = _out1934;
              _7942_recIdents = _out1935;
              r = _7940_onExpr;
              if (!object.Equals(_7940_onExpr, RAST.__default.self)) {
                RAST._IExpr _source341 = _7940_onExpr;
                if (_source341.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7943___mcc_h5503 = _source341.dtor_content;
                } else if (_source341.is_ExprFromType) {
                  RAST._IType _7944___mcc_h5505 = _source341.dtor_tpe;
                } else if (_source341.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7945___mcc_h5507 = _source341.dtor_name;
                } else if (_source341.is_Match) {
                  RAST._IExpr _7946___mcc_h5509 = _source341.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7947___mcc_h5510 = _source341.dtor_cases;
                } else if (_source341.is_StmtExpr) {
                  RAST._IExpr _7948___mcc_h5513 = _source341.dtor_stmt;
                  RAST._IExpr _7949___mcc_h5514 = _source341.dtor_rhs;
                } else if (_source341.is_Block) {
                  RAST._IExpr _7950___mcc_h5517 = _source341.dtor_underlying;
                } else if (_source341.is_StructBuild) {
                  RAST._IExpr _7951___mcc_h5519 = _source341.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7952___mcc_h5520 = _source341.dtor_assignments;
                } else if (_source341.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7953___mcc_h5523 = _source341.dtor_arguments;
                } else if (_source341.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7954___mcc_h5525 = _source341.dtor_op1;
                  RAST._IExpr _7955___mcc_h5526 = _source341.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7956___mcc_h5527 = _source341.dtor_format;
                  if (object.Equals(_7954___mcc_h5525, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source342 = _7955___mcc_h5526;
                    if (_source342.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7957___mcc_h5531 = _source342.dtor_content;
                    } else if (_source342.is_ExprFromType) {
                      RAST._IType _7958___mcc_h5533 = _source342.dtor_tpe;
                    } else if (_source342.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7959___mcc_h5535 = _source342.dtor_name;
                      if (object.Equals(_7959___mcc_h5535, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source342.is_Match) {
                      RAST._IExpr _7960___mcc_h5537 = _source342.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7961___mcc_h5538 = _source342.dtor_cases;
                    } else if (_source342.is_StmtExpr) {
                      RAST._IExpr _7962___mcc_h5541 = _source342.dtor_stmt;
                      RAST._IExpr _7963___mcc_h5542 = _source342.dtor_rhs;
                    } else if (_source342.is_Block) {
                      RAST._IExpr _7964___mcc_h5545 = _source342.dtor_underlying;
                    } else if (_source342.is_StructBuild) {
                      RAST._IExpr _7965___mcc_h5547 = _source342.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7966___mcc_h5548 = _source342.dtor_assignments;
                    } else if (_source342.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7967___mcc_h5551 = _source342.dtor_arguments;
                    } else if (_source342.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7968___mcc_h5553 = _source342.dtor_op1;
                      RAST._IExpr _7969___mcc_h5554 = _source342.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7970___mcc_h5555 = _source342.dtor_format;
                    } else if (_source342.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7971___mcc_h5559 = _source342.dtor_op2;
                      RAST._IExpr _7972___mcc_h5560 = _source342.dtor_left;
                      RAST._IExpr _7973___mcc_h5561 = _source342.dtor_right;
                      DAST.Format._IBinaryOpFormat _7974___mcc_h5562 = _source342.dtor_format2;
                    } else if (_source342.is_TypeAscription) {
                      RAST._IExpr _7975___mcc_h5567 = _source342.dtor_left;
                      RAST._IType _7976___mcc_h5568 = _source342.dtor_tpe;
                    } else if (_source342.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7977___mcc_h5571 = _source342.dtor_value;
                    } else if (_source342.is_LiteralBool) {
                      bool _7978___mcc_h5573 = _source342.dtor_bvalue;
                    } else if (_source342.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7979___mcc_h5575 = _source342.dtor_value;
                      bool _7980___mcc_h5576 = _source342.dtor_binary;
                    } else if (_source342.is_DeclareVar) {
                      RAST._IDeclareType _7981___mcc_h5579 = _source342.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7982___mcc_h5580 = _source342.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7983___mcc_h5581 = _source342.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7984___mcc_h5582 = _source342.dtor_optRhs;
                    } else if (_source342.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7985___mcc_h5587 = _source342.dtor_names;
                      RAST._IExpr _7986___mcc_h5588 = _source342.dtor_rhs;
                    } else if (_source342.is_IfExpr) {
                      RAST._IExpr _7987___mcc_h5591 = _source342.dtor_cond;
                      RAST._IExpr _7988___mcc_h5592 = _source342.dtor_thn;
                      RAST._IExpr _7989___mcc_h5593 = _source342.dtor_els;
                    } else if (_source342.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7990___mcc_h5597 = _source342.dtor_optCond;
                      RAST._IExpr _7991___mcc_h5598 = _source342.dtor_underlying;
                    } else if (_source342.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7992___mcc_h5601 = _source342.dtor_name;
                      RAST._IExpr _7993___mcc_h5602 = _source342.dtor_range;
                      RAST._IExpr _7994___mcc_h5603 = _source342.dtor_body;
                    } else if (_source342.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7995___mcc_h5607 = _source342.dtor_lbl;
                      RAST._IExpr _7996___mcc_h5608 = _source342.dtor_underlying;
                    } else if (_source342.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7997___mcc_h5611 = _source342.dtor_optLbl;
                    } else if (_source342.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7998___mcc_h5613 = _source342.dtor_optLbl;
                    } else if (_source342.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7999___mcc_h5615 = _source342.dtor_optExpr;
                    } else if (_source342.is_CallType) {
                      RAST._IExpr _8000___mcc_h5617 = _source342.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8001___mcc_h5618 = _source342.dtor_typeParameters;
                    } else if (_source342.is_Call) {
                      RAST._IExpr _8002___mcc_h5621 = _source342.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8003___mcc_h5622 = _source342.dtor_arguments;
                    } else if (_source342.is_Select) {
                      RAST._IExpr _8004___mcc_h5625 = _source342.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8005___mcc_h5626 = _source342.dtor_name;
                    } else if (_source342.is_MemberSelect) {
                      RAST._IExpr _8006___mcc_h5629 = _source342.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8007___mcc_h5630 = _source342.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8008___mcc_h5633 = _source342.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8009___mcc_h5634 = _source342.dtor_retType;
                      RAST._IExpr _8010___mcc_h5635 = _source342.dtor_body;
                    }
                  } else {
                  }
                } else if (_source341.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8011___mcc_h5639 = _source341.dtor_op2;
                  RAST._IExpr _8012___mcc_h5640 = _source341.dtor_left;
                  RAST._IExpr _8013___mcc_h5641 = _source341.dtor_right;
                  DAST.Format._IBinaryOpFormat _8014___mcc_h5642 = _source341.dtor_format2;
                } else if (_source341.is_TypeAscription) {
                  RAST._IExpr _8015___mcc_h5647 = _source341.dtor_left;
                  RAST._IType _8016___mcc_h5648 = _source341.dtor_tpe;
                } else if (_source341.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8017___mcc_h5651 = _source341.dtor_value;
                } else if (_source341.is_LiteralBool) {
                  bool _8018___mcc_h5653 = _source341.dtor_bvalue;
                } else if (_source341.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8019___mcc_h5655 = _source341.dtor_value;
                  bool _8020___mcc_h5656 = _source341.dtor_binary;
                } else if (_source341.is_DeclareVar) {
                  RAST._IDeclareType _8021___mcc_h5659 = _source341.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8022___mcc_h5660 = _source341.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8023___mcc_h5661 = _source341.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8024___mcc_h5662 = _source341.dtor_optRhs;
                } else if (_source341.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8025___mcc_h5667 = _source341.dtor_names;
                  RAST._IExpr _8026___mcc_h5668 = _source341.dtor_rhs;
                } else if (_source341.is_IfExpr) {
                  RAST._IExpr _8027___mcc_h5671 = _source341.dtor_cond;
                  RAST._IExpr _8028___mcc_h5672 = _source341.dtor_thn;
                  RAST._IExpr _8029___mcc_h5673 = _source341.dtor_els;
                } else if (_source341.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8030___mcc_h5677 = _source341.dtor_optCond;
                  RAST._IExpr _8031___mcc_h5678 = _source341.dtor_underlying;
                } else if (_source341.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8032___mcc_h5681 = _source341.dtor_name;
                  RAST._IExpr _8033___mcc_h5682 = _source341.dtor_range;
                  RAST._IExpr _8034___mcc_h5683 = _source341.dtor_body;
                } else if (_source341.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8035___mcc_h5687 = _source341.dtor_lbl;
                  RAST._IExpr _8036___mcc_h5688 = _source341.dtor_underlying;
                } else if (_source341.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8037___mcc_h5691 = _source341.dtor_optLbl;
                } else if (_source341.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8038___mcc_h5693 = _source341.dtor_optLbl;
                } else if (_source341.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8039___mcc_h5695 = _source341.dtor_optExpr;
                } else if (_source341.is_CallType) {
                  RAST._IExpr _8040___mcc_h5697 = _source341.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8041___mcc_h5698 = _source341.dtor_typeParameters;
                } else if (_source341.is_Call) {
                  RAST._IExpr _8042___mcc_h5701 = _source341.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8043___mcc_h5702 = _source341.dtor_arguments;
                } else if (_source341.is_Select) {
                  RAST._IExpr _8044___mcc_h5705 = _source341.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8045___mcc_h5706 = _source341.dtor_name;
                } else if (_source341.is_MemberSelect) {
                  RAST._IExpr _8046___mcc_h5709 = _source341.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8047___mcc_h5710 = _source341.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8048___mcc_h5713 = _source341.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8049___mcc_h5714 = _source341.dtor_retType;
                  RAST._IExpr _8050___mcc_h5715 = _source341.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7934_field));
              if (_7933_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _8051_fromOwnership;
              _8051_fromOwnership = ((_7933_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1936;
              DCOMP._IOwnership _out1937;
              DCOMP.COMP.FromOwnership(r, _8051_fromOwnership, expectedOwnership, out _out1936, out _out1937);
              r = _out1936;
              resultingOwnership = _out1937;
              readIdents = _7942_recIdents;
            }
            return ;
          }
        } else if (_source292.is_MapValues) {
          DAST._IExpression _8052___mcc_h162 = _source292.dtor_expr;
          DAST._IType _8053_fieldType = _4966___mcc_h57;
          bool _8054_isDatatype = _4965___mcc_h56;
          bool _8055_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _8056_field = _4963___mcc_h54;
          DAST._IExpression _8057_on = _4962___mcc_h53;
          {
            if (_8054_isDatatype) {
              RAST._IExpr _8058_onExpr;
              DCOMP._IOwnership _8059_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8060_recIdents;
              RAST._IExpr _out1938;
              DCOMP._IOwnership _out1939;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1940;
              (this).GenExpr(_8057_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1938, out _out1939, out _out1940);
              _8058_onExpr = _out1938;
              _8059_onOwned = _out1939;
              _8060_recIdents = _out1940;
              r = ((_8058_onExpr).Sel(DCOMP.__default.escapeName(_8056_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8061_typ;
              RAST._IType _out1941;
              _out1941 = (this).GenType(_8053_fieldType, false, false);
              _8061_typ = _out1941;
              if (((_8061_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1942;
                DCOMP._IOwnership _out1943;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1942, out _out1943);
                r = _out1942;
                resultingOwnership = _out1943;
              }
              readIdents = _8060_recIdents;
            } else {
              RAST._IExpr _8062_onExpr;
              DCOMP._IOwnership _8063_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8064_recIdents;
              RAST._IExpr _out1944;
              DCOMP._IOwnership _out1945;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1946;
              (this).GenExpr(_8057_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1944, out _out1945, out _out1946);
              _8062_onExpr = _out1944;
              _8063_onOwned = _out1945;
              _8064_recIdents = _out1946;
              r = _8062_onExpr;
              if (!object.Equals(_8062_onExpr, RAST.__default.self)) {
                RAST._IExpr _source343 = _8062_onExpr;
                if (_source343.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8065___mcc_h5719 = _source343.dtor_content;
                } else if (_source343.is_ExprFromType) {
                  RAST._IType _8066___mcc_h5721 = _source343.dtor_tpe;
                } else if (_source343.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8067___mcc_h5723 = _source343.dtor_name;
                } else if (_source343.is_Match) {
                  RAST._IExpr _8068___mcc_h5725 = _source343.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8069___mcc_h5726 = _source343.dtor_cases;
                } else if (_source343.is_StmtExpr) {
                  RAST._IExpr _8070___mcc_h5729 = _source343.dtor_stmt;
                  RAST._IExpr _8071___mcc_h5730 = _source343.dtor_rhs;
                } else if (_source343.is_Block) {
                  RAST._IExpr _8072___mcc_h5733 = _source343.dtor_underlying;
                } else if (_source343.is_StructBuild) {
                  RAST._IExpr _8073___mcc_h5735 = _source343.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8074___mcc_h5736 = _source343.dtor_assignments;
                } else if (_source343.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8075___mcc_h5739 = _source343.dtor_arguments;
                } else if (_source343.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8076___mcc_h5741 = _source343.dtor_op1;
                  RAST._IExpr _8077___mcc_h5742 = _source343.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8078___mcc_h5743 = _source343.dtor_format;
                  if (object.Equals(_8076___mcc_h5741, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source344 = _8077___mcc_h5742;
                    if (_source344.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8079___mcc_h5747 = _source344.dtor_content;
                    } else if (_source344.is_ExprFromType) {
                      RAST._IType _8080___mcc_h5749 = _source344.dtor_tpe;
                    } else if (_source344.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8081___mcc_h5751 = _source344.dtor_name;
                      if (object.Equals(_8081___mcc_h5751, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source344.is_Match) {
                      RAST._IExpr _8082___mcc_h5753 = _source344.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8083___mcc_h5754 = _source344.dtor_cases;
                    } else if (_source344.is_StmtExpr) {
                      RAST._IExpr _8084___mcc_h5757 = _source344.dtor_stmt;
                      RAST._IExpr _8085___mcc_h5758 = _source344.dtor_rhs;
                    } else if (_source344.is_Block) {
                      RAST._IExpr _8086___mcc_h5761 = _source344.dtor_underlying;
                    } else if (_source344.is_StructBuild) {
                      RAST._IExpr _8087___mcc_h5763 = _source344.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8088___mcc_h5764 = _source344.dtor_assignments;
                    } else if (_source344.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8089___mcc_h5767 = _source344.dtor_arguments;
                    } else if (_source344.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8090___mcc_h5769 = _source344.dtor_op1;
                      RAST._IExpr _8091___mcc_h5770 = _source344.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8092___mcc_h5771 = _source344.dtor_format;
                    } else if (_source344.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8093___mcc_h5775 = _source344.dtor_op2;
                      RAST._IExpr _8094___mcc_h5776 = _source344.dtor_left;
                      RAST._IExpr _8095___mcc_h5777 = _source344.dtor_right;
                      DAST.Format._IBinaryOpFormat _8096___mcc_h5778 = _source344.dtor_format2;
                    } else if (_source344.is_TypeAscription) {
                      RAST._IExpr _8097___mcc_h5783 = _source344.dtor_left;
                      RAST._IType _8098___mcc_h5784 = _source344.dtor_tpe;
                    } else if (_source344.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8099___mcc_h5787 = _source344.dtor_value;
                    } else if (_source344.is_LiteralBool) {
                      bool _8100___mcc_h5789 = _source344.dtor_bvalue;
                    } else if (_source344.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8101___mcc_h5791 = _source344.dtor_value;
                      bool _8102___mcc_h5792 = _source344.dtor_binary;
                    } else if (_source344.is_DeclareVar) {
                      RAST._IDeclareType _8103___mcc_h5795 = _source344.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8104___mcc_h5796 = _source344.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8105___mcc_h5797 = _source344.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8106___mcc_h5798 = _source344.dtor_optRhs;
                    } else if (_source344.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8107___mcc_h5803 = _source344.dtor_names;
                      RAST._IExpr _8108___mcc_h5804 = _source344.dtor_rhs;
                    } else if (_source344.is_IfExpr) {
                      RAST._IExpr _8109___mcc_h5807 = _source344.dtor_cond;
                      RAST._IExpr _8110___mcc_h5808 = _source344.dtor_thn;
                      RAST._IExpr _8111___mcc_h5809 = _source344.dtor_els;
                    } else if (_source344.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8112___mcc_h5813 = _source344.dtor_optCond;
                      RAST._IExpr _8113___mcc_h5814 = _source344.dtor_underlying;
                    } else if (_source344.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8114___mcc_h5817 = _source344.dtor_name;
                      RAST._IExpr _8115___mcc_h5818 = _source344.dtor_range;
                      RAST._IExpr _8116___mcc_h5819 = _source344.dtor_body;
                    } else if (_source344.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8117___mcc_h5823 = _source344.dtor_lbl;
                      RAST._IExpr _8118___mcc_h5824 = _source344.dtor_underlying;
                    } else if (_source344.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8119___mcc_h5827 = _source344.dtor_optLbl;
                    } else if (_source344.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8120___mcc_h5829 = _source344.dtor_optLbl;
                    } else if (_source344.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8121___mcc_h5831 = _source344.dtor_optExpr;
                    } else if (_source344.is_CallType) {
                      RAST._IExpr _8122___mcc_h5833 = _source344.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8123___mcc_h5834 = _source344.dtor_typeParameters;
                    } else if (_source344.is_Call) {
                      RAST._IExpr _8124___mcc_h5837 = _source344.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8125___mcc_h5838 = _source344.dtor_arguments;
                    } else if (_source344.is_Select) {
                      RAST._IExpr _8126___mcc_h5841 = _source344.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8127___mcc_h5842 = _source344.dtor_name;
                    } else if (_source344.is_MemberSelect) {
                      RAST._IExpr _8128___mcc_h5845 = _source344.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8129___mcc_h5846 = _source344.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8130___mcc_h5849 = _source344.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8131___mcc_h5850 = _source344.dtor_retType;
                      RAST._IExpr _8132___mcc_h5851 = _source344.dtor_body;
                    }
                  } else {
                  }
                } else if (_source343.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8133___mcc_h5855 = _source343.dtor_op2;
                  RAST._IExpr _8134___mcc_h5856 = _source343.dtor_left;
                  RAST._IExpr _8135___mcc_h5857 = _source343.dtor_right;
                  DAST.Format._IBinaryOpFormat _8136___mcc_h5858 = _source343.dtor_format2;
                } else if (_source343.is_TypeAscription) {
                  RAST._IExpr _8137___mcc_h5863 = _source343.dtor_left;
                  RAST._IType _8138___mcc_h5864 = _source343.dtor_tpe;
                } else if (_source343.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8139___mcc_h5867 = _source343.dtor_value;
                } else if (_source343.is_LiteralBool) {
                  bool _8140___mcc_h5869 = _source343.dtor_bvalue;
                } else if (_source343.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8141___mcc_h5871 = _source343.dtor_value;
                  bool _8142___mcc_h5872 = _source343.dtor_binary;
                } else if (_source343.is_DeclareVar) {
                  RAST._IDeclareType _8143___mcc_h5875 = _source343.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8144___mcc_h5876 = _source343.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8145___mcc_h5877 = _source343.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8146___mcc_h5878 = _source343.dtor_optRhs;
                } else if (_source343.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8147___mcc_h5883 = _source343.dtor_names;
                  RAST._IExpr _8148___mcc_h5884 = _source343.dtor_rhs;
                } else if (_source343.is_IfExpr) {
                  RAST._IExpr _8149___mcc_h5887 = _source343.dtor_cond;
                  RAST._IExpr _8150___mcc_h5888 = _source343.dtor_thn;
                  RAST._IExpr _8151___mcc_h5889 = _source343.dtor_els;
                } else if (_source343.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8152___mcc_h5893 = _source343.dtor_optCond;
                  RAST._IExpr _8153___mcc_h5894 = _source343.dtor_underlying;
                } else if (_source343.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8154___mcc_h5897 = _source343.dtor_name;
                  RAST._IExpr _8155___mcc_h5898 = _source343.dtor_range;
                  RAST._IExpr _8156___mcc_h5899 = _source343.dtor_body;
                } else if (_source343.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8157___mcc_h5903 = _source343.dtor_lbl;
                  RAST._IExpr _8158___mcc_h5904 = _source343.dtor_underlying;
                } else if (_source343.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8159___mcc_h5907 = _source343.dtor_optLbl;
                } else if (_source343.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8160___mcc_h5909 = _source343.dtor_optLbl;
                } else if (_source343.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8161___mcc_h5911 = _source343.dtor_optExpr;
                } else if (_source343.is_CallType) {
                  RAST._IExpr _8162___mcc_h5913 = _source343.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8163___mcc_h5914 = _source343.dtor_typeParameters;
                } else if (_source343.is_Call) {
                  RAST._IExpr _8164___mcc_h5917 = _source343.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8165___mcc_h5918 = _source343.dtor_arguments;
                } else if (_source343.is_Select) {
                  RAST._IExpr _8166___mcc_h5921 = _source343.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8167___mcc_h5922 = _source343.dtor_name;
                } else if (_source343.is_MemberSelect) {
                  RAST._IExpr _8168___mcc_h5925 = _source343.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8169___mcc_h5926 = _source343.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8170___mcc_h5929 = _source343.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8171___mcc_h5930 = _source343.dtor_retType;
                  RAST._IExpr _8172___mcc_h5931 = _source343.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8056_field));
              if (_8055_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _8173_fromOwnership;
              _8173_fromOwnership = ((_8055_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1947;
              DCOMP._IOwnership _out1948;
              DCOMP.COMP.FromOwnership(r, _8173_fromOwnership, expectedOwnership, out _out1947, out _out1948);
              r = _out1947;
              resultingOwnership = _out1948;
              readIdents = _8064_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Select) {
          DAST._IExpression _8174___mcc_h164 = _source292.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _8175___mcc_h165 = _source292.dtor_field;
          bool _8176___mcc_h166 = _source292.dtor_isConstant;
          bool _8177___mcc_h167 = _source292.dtor_onDatatype;
          DAST._IType _8178___mcc_h168 = _source292.dtor_fieldType;
          DAST._IType _8179_fieldType = _4966___mcc_h57;
          bool _8180_isDatatype = _4965___mcc_h56;
          bool _8181_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _8182_field = _4963___mcc_h54;
          DAST._IExpression _8183_on = _4962___mcc_h53;
          {
            if (_8180_isDatatype) {
              RAST._IExpr _8184_onExpr;
              DCOMP._IOwnership _8185_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8186_recIdents;
              RAST._IExpr _out1949;
              DCOMP._IOwnership _out1950;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1951;
              (this).GenExpr(_8183_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1949, out _out1950, out _out1951);
              _8184_onExpr = _out1949;
              _8185_onOwned = _out1950;
              _8186_recIdents = _out1951;
              r = ((_8184_onExpr).Sel(DCOMP.__default.escapeName(_8182_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8187_typ;
              RAST._IType _out1952;
              _out1952 = (this).GenType(_8179_fieldType, false, false);
              _8187_typ = _out1952;
              if (((_8187_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1953;
                DCOMP._IOwnership _out1954;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1953, out _out1954);
                r = _out1953;
                resultingOwnership = _out1954;
              }
              readIdents = _8186_recIdents;
            } else {
              RAST._IExpr _8188_onExpr;
              DCOMP._IOwnership _8189_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8190_recIdents;
              RAST._IExpr _out1955;
              DCOMP._IOwnership _out1956;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1957;
              (this).GenExpr(_8183_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1955, out _out1956, out _out1957);
              _8188_onExpr = _out1955;
              _8189_onOwned = _out1956;
              _8190_recIdents = _out1957;
              r = _8188_onExpr;
              if (!object.Equals(_8188_onExpr, RAST.__default.self)) {
                RAST._IExpr _source345 = _8188_onExpr;
                if (_source345.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8191___mcc_h5935 = _source345.dtor_content;
                } else if (_source345.is_ExprFromType) {
                  RAST._IType _8192___mcc_h5937 = _source345.dtor_tpe;
                } else if (_source345.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8193___mcc_h5939 = _source345.dtor_name;
                } else if (_source345.is_Match) {
                  RAST._IExpr _8194___mcc_h5941 = _source345.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8195___mcc_h5942 = _source345.dtor_cases;
                } else if (_source345.is_StmtExpr) {
                  RAST._IExpr _8196___mcc_h5945 = _source345.dtor_stmt;
                  RAST._IExpr _8197___mcc_h5946 = _source345.dtor_rhs;
                } else if (_source345.is_Block) {
                  RAST._IExpr _8198___mcc_h5949 = _source345.dtor_underlying;
                } else if (_source345.is_StructBuild) {
                  RAST._IExpr _8199___mcc_h5951 = _source345.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8200___mcc_h5952 = _source345.dtor_assignments;
                } else if (_source345.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8201___mcc_h5955 = _source345.dtor_arguments;
                } else if (_source345.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8202___mcc_h5957 = _source345.dtor_op1;
                  RAST._IExpr _8203___mcc_h5958 = _source345.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8204___mcc_h5959 = _source345.dtor_format;
                  if (object.Equals(_8202___mcc_h5957, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source346 = _8203___mcc_h5958;
                    if (_source346.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8205___mcc_h5963 = _source346.dtor_content;
                    } else if (_source346.is_ExprFromType) {
                      RAST._IType _8206___mcc_h5965 = _source346.dtor_tpe;
                    } else if (_source346.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8207___mcc_h5967 = _source346.dtor_name;
                      if (object.Equals(_8207___mcc_h5967, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source346.is_Match) {
                      RAST._IExpr _8208___mcc_h5969 = _source346.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8209___mcc_h5970 = _source346.dtor_cases;
                    } else if (_source346.is_StmtExpr) {
                      RAST._IExpr _8210___mcc_h5973 = _source346.dtor_stmt;
                      RAST._IExpr _8211___mcc_h5974 = _source346.dtor_rhs;
                    } else if (_source346.is_Block) {
                      RAST._IExpr _8212___mcc_h5977 = _source346.dtor_underlying;
                    } else if (_source346.is_StructBuild) {
                      RAST._IExpr _8213___mcc_h5979 = _source346.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8214___mcc_h5980 = _source346.dtor_assignments;
                    } else if (_source346.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8215___mcc_h5983 = _source346.dtor_arguments;
                    } else if (_source346.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8216___mcc_h5985 = _source346.dtor_op1;
                      RAST._IExpr _8217___mcc_h5986 = _source346.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8218___mcc_h5987 = _source346.dtor_format;
                    } else if (_source346.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8219___mcc_h5991 = _source346.dtor_op2;
                      RAST._IExpr _8220___mcc_h5992 = _source346.dtor_left;
                      RAST._IExpr _8221___mcc_h5993 = _source346.dtor_right;
                      DAST.Format._IBinaryOpFormat _8222___mcc_h5994 = _source346.dtor_format2;
                    } else if (_source346.is_TypeAscription) {
                      RAST._IExpr _8223___mcc_h5999 = _source346.dtor_left;
                      RAST._IType _8224___mcc_h6000 = _source346.dtor_tpe;
                    } else if (_source346.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8225___mcc_h6003 = _source346.dtor_value;
                    } else if (_source346.is_LiteralBool) {
                      bool _8226___mcc_h6005 = _source346.dtor_bvalue;
                    } else if (_source346.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8227___mcc_h6007 = _source346.dtor_value;
                      bool _8228___mcc_h6008 = _source346.dtor_binary;
                    } else if (_source346.is_DeclareVar) {
                      RAST._IDeclareType _8229___mcc_h6011 = _source346.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8230___mcc_h6012 = _source346.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8231___mcc_h6013 = _source346.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8232___mcc_h6014 = _source346.dtor_optRhs;
                    } else if (_source346.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8233___mcc_h6019 = _source346.dtor_names;
                      RAST._IExpr _8234___mcc_h6020 = _source346.dtor_rhs;
                    } else if (_source346.is_IfExpr) {
                      RAST._IExpr _8235___mcc_h6023 = _source346.dtor_cond;
                      RAST._IExpr _8236___mcc_h6024 = _source346.dtor_thn;
                      RAST._IExpr _8237___mcc_h6025 = _source346.dtor_els;
                    } else if (_source346.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8238___mcc_h6029 = _source346.dtor_optCond;
                      RAST._IExpr _8239___mcc_h6030 = _source346.dtor_underlying;
                    } else if (_source346.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8240___mcc_h6033 = _source346.dtor_name;
                      RAST._IExpr _8241___mcc_h6034 = _source346.dtor_range;
                      RAST._IExpr _8242___mcc_h6035 = _source346.dtor_body;
                    } else if (_source346.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8243___mcc_h6039 = _source346.dtor_lbl;
                      RAST._IExpr _8244___mcc_h6040 = _source346.dtor_underlying;
                    } else if (_source346.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8245___mcc_h6043 = _source346.dtor_optLbl;
                    } else if (_source346.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8246___mcc_h6045 = _source346.dtor_optLbl;
                    } else if (_source346.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8247___mcc_h6047 = _source346.dtor_optExpr;
                    } else if (_source346.is_CallType) {
                      RAST._IExpr _8248___mcc_h6049 = _source346.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8249___mcc_h6050 = _source346.dtor_typeParameters;
                    } else if (_source346.is_Call) {
                      RAST._IExpr _8250___mcc_h6053 = _source346.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8251___mcc_h6054 = _source346.dtor_arguments;
                    } else if (_source346.is_Select) {
                      RAST._IExpr _8252___mcc_h6057 = _source346.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8253___mcc_h6058 = _source346.dtor_name;
                    } else if (_source346.is_MemberSelect) {
                      RAST._IExpr _8254___mcc_h6061 = _source346.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8255___mcc_h6062 = _source346.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8256___mcc_h6065 = _source346.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8257___mcc_h6066 = _source346.dtor_retType;
                      RAST._IExpr _8258___mcc_h6067 = _source346.dtor_body;
                    }
                  } else {
                  }
                } else if (_source345.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8259___mcc_h6071 = _source345.dtor_op2;
                  RAST._IExpr _8260___mcc_h6072 = _source345.dtor_left;
                  RAST._IExpr _8261___mcc_h6073 = _source345.dtor_right;
                  DAST.Format._IBinaryOpFormat _8262___mcc_h6074 = _source345.dtor_format2;
                } else if (_source345.is_TypeAscription) {
                  RAST._IExpr _8263___mcc_h6079 = _source345.dtor_left;
                  RAST._IType _8264___mcc_h6080 = _source345.dtor_tpe;
                } else if (_source345.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8265___mcc_h6083 = _source345.dtor_value;
                } else if (_source345.is_LiteralBool) {
                  bool _8266___mcc_h6085 = _source345.dtor_bvalue;
                } else if (_source345.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8267___mcc_h6087 = _source345.dtor_value;
                  bool _8268___mcc_h6088 = _source345.dtor_binary;
                } else if (_source345.is_DeclareVar) {
                  RAST._IDeclareType _8269___mcc_h6091 = _source345.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8270___mcc_h6092 = _source345.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8271___mcc_h6093 = _source345.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8272___mcc_h6094 = _source345.dtor_optRhs;
                } else if (_source345.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8273___mcc_h6099 = _source345.dtor_names;
                  RAST._IExpr _8274___mcc_h6100 = _source345.dtor_rhs;
                } else if (_source345.is_IfExpr) {
                  RAST._IExpr _8275___mcc_h6103 = _source345.dtor_cond;
                  RAST._IExpr _8276___mcc_h6104 = _source345.dtor_thn;
                  RAST._IExpr _8277___mcc_h6105 = _source345.dtor_els;
                } else if (_source345.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8278___mcc_h6109 = _source345.dtor_optCond;
                  RAST._IExpr _8279___mcc_h6110 = _source345.dtor_underlying;
                } else if (_source345.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8280___mcc_h6113 = _source345.dtor_name;
                  RAST._IExpr _8281___mcc_h6114 = _source345.dtor_range;
                  RAST._IExpr _8282___mcc_h6115 = _source345.dtor_body;
                } else if (_source345.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8283___mcc_h6119 = _source345.dtor_lbl;
                  RAST._IExpr _8284___mcc_h6120 = _source345.dtor_underlying;
                } else if (_source345.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8285___mcc_h6123 = _source345.dtor_optLbl;
                } else if (_source345.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8286___mcc_h6125 = _source345.dtor_optLbl;
                } else if (_source345.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8287___mcc_h6127 = _source345.dtor_optExpr;
                } else if (_source345.is_CallType) {
                  RAST._IExpr _8288___mcc_h6129 = _source345.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8289___mcc_h6130 = _source345.dtor_typeParameters;
                } else if (_source345.is_Call) {
                  RAST._IExpr _8290___mcc_h6133 = _source345.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8291___mcc_h6134 = _source345.dtor_arguments;
                } else if (_source345.is_Select) {
                  RAST._IExpr _8292___mcc_h6137 = _source345.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8293___mcc_h6138 = _source345.dtor_name;
                } else if (_source345.is_MemberSelect) {
                  RAST._IExpr _8294___mcc_h6141 = _source345.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8295___mcc_h6142 = _source345.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8296___mcc_h6145 = _source345.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8297___mcc_h6146 = _source345.dtor_retType;
                  RAST._IExpr _8298___mcc_h6147 = _source345.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8182_field));
              if (_8181_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _8299_fromOwnership;
              _8299_fromOwnership = ((_8181_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1958;
              DCOMP._IOwnership _out1959;
              DCOMP.COMP.FromOwnership(r, _8299_fromOwnership, expectedOwnership, out _out1958, out _out1959);
              r = _out1958;
              resultingOwnership = _out1959;
              readIdents = _8190_recIdents;
            }
            return ;
          }
        } else if (_source292.is_SelectFn) {
          DAST._IExpression _8300___mcc_h174 = _source292.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _8301___mcc_h175 = _source292.dtor_field;
          bool _8302___mcc_h176 = _source292.dtor_onDatatype;
          bool _8303___mcc_h177 = _source292.dtor_isStatic;
          BigInteger _8304___mcc_h178 = _source292.dtor_arity;
          DAST._IType _8305_fieldType = _4966___mcc_h57;
          bool _8306_isDatatype = _4965___mcc_h56;
          bool _8307_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _8308_field = _4963___mcc_h54;
          DAST._IExpression _8309_on = _4962___mcc_h53;
          {
            if (_8306_isDatatype) {
              RAST._IExpr _8310_onExpr;
              DCOMP._IOwnership _8311_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8312_recIdents;
              RAST._IExpr _out1960;
              DCOMP._IOwnership _out1961;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1962;
              (this).GenExpr(_8309_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1960, out _out1961, out _out1962);
              _8310_onExpr = _out1960;
              _8311_onOwned = _out1961;
              _8312_recIdents = _out1962;
              r = ((_8310_onExpr).Sel(DCOMP.__default.escapeName(_8308_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8313_typ;
              RAST._IType _out1963;
              _out1963 = (this).GenType(_8305_fieldType, false, false);
              _8313_typ = _out1963;
              if (((_8313_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1964;
                DCOMP._IOwnership _out1965;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1964, out _out1965);
                r = _out1964;
                resultingOwnership = _out1965;
              }
              readIdents = _8312_recIdents;
            } else {
              RAST._IExpr _8314_onExpr;
              DCOMP._IOwnership _8315_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8316_recIdents;
              RAST._IExpr _out1966;
              DCOMP._IOwnership _out1967;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1968;
              (this).GenExpr(_8309_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1966, out _out1967, out _out1968);
              _8314_onExpr = _out1966;
              _8315_onOwned = _out1967;
              _8316_recIdents = _out1968;
              r = _8314_onExpr;
              if (!object.Equals(_8314_onExpr, RAST.__default.self)) {
                RAST._IExpr _source347 = _8314_onExpr;
                if (_source347.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8317___mcc_h6151 = _source347.dtor_content;
                } else if (_source347.is_ExprFromType) {
                  RAST._IType _8318___mcc_h6153 = _source347.dtor_tpe;
                } else if (_source347.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8319___mcc_h6155 = _source347.dtor_name;
                } else if (_source347.is_Match) {
                  RAST._IExpr _8320___mcc_h6157 = _source347.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8321___mcc_h6158 = _source347.dtor_cases;
                } else if (_source347.is_StmtExpr) {
                  RAST._IExpr _8322___mcc_h6161 = _source347.dtor_stmt;
                  RAST._IExpr _8323___mcc_h6162 = _source347.dtor_rhs;
                } else if (_source347.is_Block) {
                  RAST._IExpr _8324___mcc_h6165 = _source347.dtor_underlying;
                } else if (_source347.is_StructBuild) {
                  RAST._IExpr _8325___mcc_h6167 = _source347.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8326___mcc_h6168 = _source347.dtor_assignments;
                } else if (_source347.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8327___mcc_h6171 = _source347.dtor_arguments;
                } else if (_source347.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8328___mcc_h6173 = _source347.dtor_op1;
                  RAST._IExpr _8329___mcc_h6174 = _source347.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8330___mcc_h6175 = _source347.dtor_format;
                  if (object.Equals(_8328___mcc_h6173, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source348 = _8329___mcc_h6174;
                    if (_source348.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8331___mcc_h6179 = _source348.dtor_content;
                    } else if (_source348.is_ExprFromType) {
                      RAST._IType _8332___mcc_h6181 = _source348.dtor_tpe;
                    } else if (_source348.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8333___mcc_h6183 = _source348.dtor_name;
                      if (object.Equals(_8333___mcc_h6183, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source348.is_Match) {
                      RAST._IExpr _8334___mcc_h6185 = _source348.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8335___mcc_h6186 = _source348.dtor_cases;
                    } else if (_source348.is_StmtExpr) {
                      RAST._IExpr _8336___mcc_h6189 = _source348.dtor_stmt;
                      RAST._IExpr _8337___mcc_h6190 = _source348.dtor_rhs;
                    } else if (_source348.is_Block) {
                      RAST._IExpr _8338___mcc_h6193 = _source348.dtor_underlying;
                    } else if (_source348.is_StructBuild) {
                      RAST._IExpr _8339___mcc_h6195 = _source348.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8340___mcc_h6196 = _source348.dtor_assignments;
                    } else if (_source348.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8341___mcc_h6199 = _source348.dtor_arguments;
                    } else if (_source348.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8342___mcc_h6201 = _source348.dtor_op1;
                      RAST._IExpr _8343___mcc_h6202 = _source348.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8344___mcc_h6203 = _source348.dtor_format;
                    } else if (_source348.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8345___mcc_h6207 = _source348.dtor_op2;
                      RAST._IExpr _8346___mcc_h6208 = _source348.dtor_left;
                      RAST._IExpr _8347___mcc_h6209 = _source348.dtor_right;
                      DAST.Format._IBinaryOpFormat _8348___mcc_h6210 = _source348.dtor_format2;
                    } else if (_source348.is_TypeAscription) {
                      RAST._IExpr _8349___mcc_h6215 = _source348.dtor_left;
                      RAST._IType _8350___mcc_h6216 = _source348.dtor_tpe;
                    } else if (_source348.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8351___mcc_h6219 = _source348.dtor_value;
                    } else if (_source348.is_LiteralBool) {
                      bool _8352___mcc_h6221 = _source348.dtor_bvalue;
                    } else if (_source348.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8353___mcc_h6223 = _source348.dtor_value;
                      bool _8354___mcc_h6224 = _source348.dtor_binary;
                    } else if (_source348.is_DeclareVar) {
                      RAST._IDeclareType _8355___mcc_h6227 = _source348.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8356___mcc_h6228 = _source348.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8357___mcc_h6229 = _source348.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8358___mcc_h6230 = _source348.dtor_optRhs;
                    } else if (_source348.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8359___mcc_h6235 = _source348.dtor_names;
                      RAST._IExpr _8360___mcc_h6236 = _source348.dtor_rhs;
                    } else if (_source348.is_IfExpr) {
                      RAST._IExpr _8361___mcc_h6239 = _source348.dtor_cond;
                      RAST._IExpr _8362___mcc_h6240 = _source348.dtor_thn;
                      RAST._IExpr _8363___mcc_h6241 = _source348.dtor_els;
                    } else if (_source348.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8364___mcc_h6245 = _source348.dtor_optCond;
                      RAST._IExpr _8365___mcc_h6246 = _source348.dtor_underlying;
                    } else if (_source348.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8366___mcc_h6249 = _source348.dtor_name;
                      RAST._IExpr _8367___mcc_h6250 = _source348.dtor_range;
                      RAST._IExpr _8368___mcc_h6251 = _source348.dtor_body;
                    } else if (_source348.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8369___mcc_h6255 = _source348.dtor_lbl;
                      RAST._IExpr _8370___mcc_h6256 = _source348.dtor_underlying;
                    } else if (_source348.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8371___mcc_h6259 = _source348.dtor_optLbl;
                    } else if (_source348.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8372___mcc_h6261 = _source348.dtor_optLbl;
                    } else if (_source348.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8373___mcc_h6263 = _source348.dtor_optExpr;
                    } else if (_source348.is_CallType) {
                      RAST._IExpr _8374___mcc_h6265 = _source348.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8375___mcc_h6266 = _source348.dtor_typeParameters;
                    } else if (_source348.is_Call) {
                      RAST._IExpr _8376___mcc_h6269 = _source348.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8377___mcc_h6270 = _source348.dtor_arguments;
                    } else if (_source348.is_Select) {
                      RAST._IExpr _8378___mcc_h6273 = _source348.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8379___mcc_h6274 = _source348.dtor_name;
                    } else if (_source348.is_MemberSelect) {
                      RAST._IExpr _8380___mcc_h6277 = _source348.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8381___mcc_h6278 = _source348.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8382___mcc_h6281 = _source348.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8383___mcc_h6282 = _source348.dtor_retType;
                      RAST._IExpr _8384___mcc_h6283 = _source348.dtor_body;
                    }
                  } else {
                  }
                } else if (_source347.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8385___mcc_h6287 = _source347.dtor_op2;
                  RAST._IExpr _8386___mcc_h6288 = _source347.dtor_left;
                  RAST._IExpr _8387___mcc_h6289 = _source347.dtor_right;
                  DAST.Format._IBinaryOpFormat _8388___mcc_h6290 = _source347.dtor_format2;
                } else if (_source347.is_TypeAscription) {
                  RAST._IExpr _8389___mcc_h6295 = _source347.dtor_left;
                  RAST._IType _8390___mcc_h6296 = _source347.dtor_tpe;
                } else if (_source347.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8391___mcc_h6299 = _source347.dtor_value;
                } else if (_source347.is_LiteralBool) {
                  bool _8392___mcc_h6301 = _source347.dtor_bvalue;
                } else if (_source347.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8393___mcc_h6303 = _source347.dtor_value;
                  bool _8394___mcc_h6304 = _source347.dtor_binary;
                } else if (_source347.is_DeclareVar) {
                  RAST._IDeclareType _8395___mcc_h6307 = _source347.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8396___mcc_h6308 = _source347.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8397___mcc_h6309 = _source347.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8398___mcc_h6310 = _source347.dtor_optRhs;
                } else if (_source347.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8399___mcc_h6315 = _source347.dtor_names;
                  RAST._IExpr _8400___mcc_h6316 = _source347.dtor_rhs;
                } else if (_source347.is_IfExpr) {
                  RAST._IExpr _8401___mcc_h6319 = _source347.dtor_cond;
                  RAST._IExpr _8402___mcc_h6320 = _source347.dtor_thn;
                  RAST._IExpr _8403___mcc_h6321 = _source347.dtor_els;
                } else if (_source347.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8404___mcc_h6325 = _source347.dtor_optCond;
                  RAST._IExpr _8405___mcc_h6326 = _source347.dtor_underlying;
                } else if (_source347.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8406___mcc_h6329 = _source347.dtor_name;
                  RAST._IExpr _8407___mcc_h6330 = _source347.dtor_range;
                  RAST._IExpr _8408___mcc_h6331 = _source347.dtor_body;
                } else if (_source347.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8409___mcc_h6335 = _source347.dtor_lbl;
                  RAST._IExpr _8410___mcc_h6336 = _source347.dtor_underlying;
                } else if (_source347.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8411___mcc_h6339 = _source347.dtor_optLbl;
                } else if (_source347.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8412___mcc_h6341 = _source347.dtor_optLbl;
                } else if (_source347.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8413___mcc_h6343 = _source347.dtor_optExpr;
                } else if (_source347.is_CallType) {
                  RAST._IExpr _8414___mcc_h6345 = _source347.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8415___mcc_h6346 = _source347.dtor_typeParameters;
                } else if (_source347.is_Call) {
                  RAST._IExpr _8416___mcc_h6349 = _source347.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8417___mcc_h6350 = _source347.dtor_arguments;
                } else if (_source347.is_Select) {
                  RAST._IExpr _8418___mcc_h6353 = _source347.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8419___mcc_h6354 = _source347.dtor_name;
                } else if (_source347.is_MemberSelect) {
                  RAST._IExpr _8420___mcc_h6357 = _source347.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8421___mcc_h6358 = _source347.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8422___mcc_h6361 = _source347.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8423___mcc_h6362 = _source347.dtor_retType;
                  RAST._IExpr _8424___mcc_h6363 = _source347.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8308_field));
              if (_8307_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _8425_fromOwnership;
              _8425_fromOwnership = ((_8307_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1969;
              DCOMP._IOwnership _out1970;
              DCOMP.COMP.FromOwnership(r, _8425_fromOwnership, expectedOwnership, out _out1969, out _out1970);
              r = _out1969;
              resultingOwnership = _out1970;
              readIdents = _8316_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Index) {
          DAST._IExpression _8426___mcc_h184 = _source292.dtor_expr;
          DAST._ICollKind _8427___mcc_h185 = _source292.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _8428___mcc_h186 = _source292.dtor_indices;
          DAST._IType _8429_fieldType = _4966___mcc_h57;
          bool _8430_isDatatype = _4965___mcc_h56;
          bool _8431_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _8432_field = _4963___mcc_h54;
          DAST._IExpression _8433_on = _4962___mcc_h53;
          {
            if (_8430_isDatatype) {
              RAST._IExpr _8434_onExpr;
              DCOMP._IOwnership _8435_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8436_recIdents;
              RAST._IExpr _out1971;
              DCOMP._IOwnership _out1972;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1973;
              (this).GenExpr(_8433_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1971, out _out1972, out _out1973);
              _8434_onExpr = _out1971;
              _8435_onOwned = _out1972;
              _8436_recIdents = _out1973;
              r = ((_8434_onExpr).Sel(DCOMP.__default.escapeName(_8432_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8437_typ;
              RAST._IType _out1974;
              _out1974 = (this).GenType(_8429_fieldType, false, false);
              _8437_typ = _out1974;
              if (((_8437_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1975;
                DCOMP._IOwnership _out1976;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1975, out _out1976);
                r = _out1975;
                resultingOwnership = _out1976;
              }
              readIdents = _8436_recIdents;
            } else {
              RAST._IExpr _8438_onExpr;
              DCOMP._IOwnership _8439_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8440_recIdents;
              RAST._IExpr _out1977;
              DCOMP._IOwnership _out1978;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1979;
              (this).GenExpr(_8433_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1977, out _out1978, out _out1979);
              _8438_onExpr = _out1977;
              _8439_onOwned = _out1978;
              _8440_recIdents = _out1979;
              r = _8438_onExpr;
              if (!object.Equals(_8438_onExpr, RAST.__default.self)) {
                RAST._IExpr _source349 = _8438_onExpr;
                if (_source349.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8441___mcc_h6367 = _source349.dtor_content;
                } else if (_source349.is_ExprFromType) {
                  RAST._IType _8442___mcc_h6369 = _source349.dtor_tpe;
                } else if (_source349.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8443___mcc_h6371 = _source349.dtor_name;
                } else if (_source349.is_Match) {
                  RAST._IExpr _8444___mcc_h6373 = _source349.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8445___mcc_h6374 = _source349.dtor_cases;
                } else if (_source349.is_StmtExpr) {
                  RAST._IExpr _8446___mcc_h6377 = _source349.dtor_stmt;
                  RAST._IExpr _8447___mcc_h6378 = _source349.dtor_rhs;
                } else if (_source349.is_Block) {
                  RAST._IExpr _8448___mcc_h6381 = _source349.dtor_underlying;
                } else if (_source349.is_StructBuild) {
                  RAST._IExpr _8449___mcc_h6383 = _source349.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8450___mcc_h6384 = _source349.dtor_assignments;
                } else if (_source349.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8451___mcc_h6387 = _source349.dtor_arguments;
                } else if (_source349.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8452___mcc_h6389 = _source349.dtor_op1;
                  RAST._IExpr _8453___mcc_h6390 = _source349.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8454___mcc_h6391 = _source349.dtor_format;
                  if (object.Equals(_8452___mcc_h6389, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source350 = _8453___mcc_h6390;
                    if (_source350.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8455___mcc_h6395 = _source350.dtor_content;
                    } else if (_source350.is_ExprFromType) {
                      RAST._IType _8456___mcc_h6397 = _source350.dtor_tpe;
                    } else if (_source350.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8457___mcc_h6399 = _source350.dtor_name;
                      if (object.Equals(_8457___mcc_h6399, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source350.is_Match) {
                      RAST._IExpr _8458___mcc_h6401 = _source350.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8459___mcc_h6402 = _source350.dtor_cases;
                    } else if (_source350.is_StmtExpr) {
                      RAST._IExpr _8460___mcc_h6405 = _source350.dtor_stmt;
                      RAST._IExpr _8461___mcc_h6406 = _source350.dtor_rhs;
                    } else if (_source350.is_Block) {
                      RAST._IExpr _8462___mcc_h6409 = _source350.dtor_underlying;
                    } else if (_source350.is_StructBuild) {
                      RAST._IExpr _8463___mcc_h6411 = _source350.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8464___mcc_h6412 = _source350.dtor_assignments;
                    } else if (_source350.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8465___mcc_h6415 = _source350.dtor_arguments;
                    } else if (_source350.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8466___mcc_h6417 = _source350.dtor_op1;
                      RAST._IExpr _8467___mcc_h6418 = _source350.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8468___mcc_h6419 = _source350.dtor_format;
                    } else if (_source350.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8469___mcc_h6423 = _source350.dtor_op2;
                      RAST._IExpr _8470___mcc_h6424 = _source350.dtor_left;
                      RAST._IExpr _8471___mcc_h6425 = _source350.dtor_right;
                      DAST.Format._IBinaryOpFormat _8472___mcc_h6426 = _source350.dtor_format2;
                    } else if (_source350.is_TypeAscription) {
                      RAST._IExpr _8473___mcc_h6431 = _source350.dtor_left;
                      RAST._IType _8474___mcc_h6432 = _source350.dtor_tpe;
                    } else if (_source350.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8475___mcc_h6435 = _source350.dtor_value;
                    } else if (_source350.is_LiteralBool) {
                      bool _8476___mcc_h6437 = _source350.dtor_bvalue;
                    } else if (_source350.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8477___mcc_h6439 = _source350.dtor_value;
                      bool _8478___mcc_h6440 = _source350.dtor_binary;
                    } else if (_source350.is_DeclareVar) {
                      RAST._IDeclareType _8479___mcc_h6443 = _source350.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8480___mcc_h6444 = _source350.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8481___mcc_h6445 = _source350.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8482___mcc_h6446 = _source350.dtor_optRhs;
                    } else if (_source350.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8483___mcc_h6451 = _source350.dtor_names;
                      RAST._IExpr _8484___mcc_h6452 = _source350.dtor_rhs;
                    } else if (_source350.is_IfExpr) {
                      RAST._IExpr _8485___mcc_h6455 = _source350.dtor_cond;
                      RAST._IExpr _8486___mcc_h6456 = _source350.dtor_thn;
                      RAST._IExpr _8487___mcc_h6457 = _source350.dtor_els;
                    } else if (_source350.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8488___mcc_h6461 = _source350.dtor_optCond;
                      RAST._IExpr _8489___mcc_h6462 = _source350.dtor_underlying;
                    } else if (_source350.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8490___mcc_h6465 = _source350.dtor_name;
                      RAST._IExpr _8491___mcc_h6466 = _source350.dtor_range;
                      RAST._IExpr _8492___mcc_h6467 = _source350.dtor_body;
                    } else if (_source350.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8493___mcc_h6471 = _source350.dtor_lbl;
                      RAST._IExpr _8494___mcc_h6472 = _source350.dtor_underlying;
                    } else if (_source350.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8495___mcc_h6475 = _source350.dtor_optLbl;
                    } else if (_source350.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8496___mcc_h6477 = _source350.dtor_optLbl;
                    } else if (_source350.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8497___mcc_h6479 = _source350.dtor_optExpr;
                    } else if (_source350.is_CallType) {
                      RAST._IExpr _8498___mcc_h6481 = _source350.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8499___mcc_h6482 = _source350.dtor_typeParameters;
                    } else if (_source350.is_Call) {
                      RAST._IExpr _8500___mcc_h6485 = _source350.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8501___mcc_h6486 = _source350.dtor_arguments;
                    } else if (_source350.is_Select) {
                      RAST._IExpr _8502___mcc_h6489 = _source350.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8503___mcc_h6490 = _source350.dtor_name;
                    } else if (_source350.is_MemberSelect) {
                      RAST._IExpr _8504___mcc_h6493 = _source350.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8505___mcc_h6494 = _source350.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8506___mcc_h6497 = _source350.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8507___mcc_h6498 = _source350.dtor_retType;
                      RAST._IExpr _8508___mcc_h6499 = _source350.dtor_body;
                    }
                  } else {
                  }
                } else if (_source349.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8509___mcc_h6503 = _source349.dtor_op2;
                  RAST._IExpr _8510___mcc_h6504 = _source349.dtor_left;
                  RAST._IExpr _8511___mcc_h6505 = _source349.dtor_right;
                  DAST.Format._IBinaryOpFormat _8512___mcc_h6506 = _source349.dtor_format2;
                } else if (_source349.is_TypeAscription) {
                  RAST._IExpr _8513___mcc_h6511 = _source349.dtor_left;
                  RAST._IType _8514___mcc_h6512 = _source349.dtor_tpe;
                } else if (_source349.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8515___mcc_h6515 = _source349.dtor_value;
                } else if (_source349.is_LiteralBool) {
                  bool _8516___mcc_h6517 = _source349.dtor_bvalue;
                } else if (_source349.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8517___mcc_h6519 = _source349.dtor_value;
                  bool _8518___mcc_h6520 = _source349.dtor_binary;
                } else if (_source349.is_DeclareVar) {
                  RAST._IDeclareType _8519___mcc_h6523 = _source349.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8520___mcc_h6524 = _source349.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8521___mcc_h6525 = _source349.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8522___mcc_h6526 = _source349.dtor_optRhs;
                } else if (_source349.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8523___mcc_h6531 = _source349.dtor_names;
                  RAST._IExpr _8524___mcc_h6532 = _source349.dtor_rhs;
                } else if (_source349.is_IfExpr) {
                  RAST._IExpr _8525___mcc_h6535 = _source349.dtor_cond;
                  RAST._IExpr _8526___mcc_h6536 = _source349.dtor_thn;
                  RAST._IExpr _8527___mcc_h6537 = _source349.dtor_els;
                } else if (_source349.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8528___mcc_h6541 = _source349.dtor_optCond;
                  RAST._IExpr _8529___mcc_h6542 = _source349.dtor_underlying;
                } else if (_source349.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8530___mcc_h6545 = _source349.dtor_name;
                  RAST._IExpr _8531___mcc_h6546 = _source349.dtor_range;
                  RAST._IExpr _8532___mcc_h6547 = _source349.dtor_body;
                } else if (_source349.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8533___mcc_h6551 = _source349.dtor_lbl;
                  RAST._IExpr _8534___mcc_h6552 = _source349.dtor_underlying;
                } else if (_source349.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8535___mcc_h6555 = _source349.dtor_optLbl;
                } else if (_source349.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8536___mcc_h6557 = _source349.dtor_optLbl;
                } else if (_source349.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8537___mcc_h6559 = _source349.dtor_optExpr;
                } else if (_source349.is_CallType) {
                  RAST._IExpr _8538___mcc_h6561 = _source349.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8539___mcc_h6562 = _source349.dtor_typeParameters;
                } else if (_source349.is_Call) {
                  RAST._IExpr _8540___mcc_h6565 = _source349.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8541___mcc_h6566 = _source349.dtor_arguments;
                } else if (_source349.is_Select) {
                  RAST._IExpr _8542___mcc_h6569 = _source349.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8543___mcc_h6570 = _source349.dtor_name;
                } else if (_source349.is_MemberSelect) {
                  RAST._IExpr _8544___mcc_h6573 = _source349.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8545___mcc_h6574 = _source349.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8546___mcc_h6577 = _source349.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8547___mcc_h6578 = _source349.dtor_retType;
                  RAST._IExpr _8548___mcc_h6579 = _source349.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8432_field));
              if (_8431_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _8549_fromOwnership;
              _8549_fromOwnership = ((_8431_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1980;
              DCOMP._IOwnership _out1981;
              DCOMP.COMP.FromOwnership(r, _8549_fromOwnership, expectedOwnership, out _out1980, out _out1981);
              r = _out1980;
              resultingOwnership = _out1981;
              readIdents = _8440_recIdents;
            }
            return ;
          }
        } else if (_source292.is_IndexRange) {
          DAST._IExpression _8550___mcc_h190 = _source292.dtor_expr;
          bool _8551___mcc_h191 = _source292.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _8552___mcc_h192 = _source292.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _8553___mcc_h193 = _source292.dtor_high;
          DAST._IType _8554_fieldType = _4966___mcc_h57;
          bool _8555_isDatatype = _4965___mcc_h56;
          bool _8556_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _8557_field = _4963___mcc_h54;
          DAST._IExpression _8558_on = _4962___mcc_h53;
          {
            if (_8555_isDatatype) {
              RAST._IExpr _8559_onExpr;
              DCOMP._IOwnership _8560_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8561_recIdents;
              RAST._IExpr _out1982;
              DCOMP._IOwnership _out1983;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1984;
              (this).GenExpr(_8558_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1982, out _out1983, out _out1984);
              _8559_onExpr = _out1982;
              _8560_onOwned = _out1983;
              _8561_recIdents = _out1984;
              r = ((_8559_onExpr).Sel(DCOMP.__default.escapeName(_8557_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8562_typ;
              RAST._IType _out1985;
              _out1985 = (this).GenType(_8554_fieldType, false, false);
              _8562_typ = _out1985;
              if (((_8562_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1986;
                DCOMP._IOwnership _out1987;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1986, out _out1987);
                r = _out1986;
                resultingOwnership = _out1987;
              }
              readIdents = _8561_recIdents;
            } else {
              RAST._IExpr _8563_onExpr;
              DCOMP._IOwnership _8564_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8565_recIdents;
              RAST._IExpr _out1988;
              DCOMP._IOwnership _out1989;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1990;
              (this).GenExpr(_8558_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1988, out _out1989, out _out1990);
              _8563_onExpr = _out1988;
              _8564_onOwned = _out1989;
              _8565_recIdents = _out1990;
              r = _8563_onExpr;
              if (!object.Equals(_8563_onExpr, RAST.__default.self)) {
                RAST._IExpr _source351 = _8563_onExpr;
                if (_source351.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8566___mcc_h6583 = _source351.dtor_content;
                } else if (_source351.is_ExprFromType) {
                  RAST._IType _8567___mcc_h6585 = _source351.dtor_tpe;
                } else if (_source351.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8568___mcc_h6587 = _source351.dtor_name;
                } else if (_source351.is_Match) {
                  RAST._IExpr _8569___mcc_h6589 = _source351.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8570___mcc_h6590 = _source351.dtor_cases;
                } else if (_source351.is_StmtExpr) {
                  RAST._IExpr _8571___mcc_h6593 = _source351.dtor_stmt;
                  RAST._IExpr _8572___mcc_h6594 = _source351.dtor_rhs;
                } else if (_source351.is_Block) {
                  RAST._IExpr _8573___mcc_h6597 = _source351.dtor_underlying;
                } else if (_source351.is_StructBuild) {
                  RAST._IExpr _8574___mcc_h6599 = _source351.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8575___mcc_h6600 = _source351.dtor_assignments;
                } else if (_source351.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8576___mcc_h6603 = _source351.dtor_arguments;
                } else if (_source351.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8577___mcc_h6605 = _source351.dtor_op1;
                  RAST._IExpr _8578___mcc_h6606 = _source351.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8579___mcc_h6607 = _source351.dtor_format;
                  if (object.Equals(_8577___mcc_h6605, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source352 = _8578___mcc_h6606;
                    if (_source352.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8580___mcc_h6611 = _source352.dtor_content;
                    } else if (_source352.is_ExprFromType) {
                      RAST._IType _8581___mcc_h6613 = _source352.dtor_tpe;
                    } else if (_source352.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8582___mcc_h6615 = _source352.dtor_name;
                      if (object.Equals(_8582___mcc_h6615, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source352.is_Match) {
                      RAST._IExpr _8583___mcc_h6617 = _source352.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8584___mcc_h6618 = _source352.dtor_cases;
                    } else if (_source352.is_StmtExpr) {
                      RAST._IExpr _8585___mcc_h6621 = _source352.dtor_stmt;
                      RAST._IExpr _8586___mcc_h6622 = _source352.dtor_rhs;
                    } else if (_source352.is_Block) {
                      RAST._IExpr _8587___mcc_h6625 = _source352.dtor_underlying;
                    } else if (_source352.is_StructBuild) {
                      RAST._IExpr _8588___mcc_h6627 = _source352.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8589___mcc_h6628 = _source352.dtor_assignments;
                    } else if (_source352.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8590___mcc_h6631 = _source352.dtor_arguments;
                    } else if (_source352.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8591___mcc_h6633 = _source352.dtor_op1;
                      RAST._IExpr _8592___mcc_h6634 = _source352.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8593___mcc_h6635 = _source352.dtor_format;
                    } else if (_source352.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8594___mcc_h6639 = _source352.dtor_op2;
                      RAST._IExpr _8595___mcc_h6640 = _source352.dtor_left;
                      RAST._IExpr _8596___mcc_h6641 = _source352.dtor_right;
                      DAST.Format._IBinaryOpFormat _8597___mcc_h6642 = _source352.dtor_format2;
                    } else if (_source352.is_TypeAscription) {
                      RAST._IExpr _8598___mcc_h6647 = _source352.dtor_left;
                      RAST._IType _8599___mcc_h6648 = _source352.dtor_tpe;
                    } else if (_source352.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8600___mcc_h6651 = _source352.dtor_value;
                    } else if (_source352.is_LiteralBool) {
                      bool _8601___mcc_h6653 = _source352.dtor_bvalue;
                    } else if (_source352.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8602___mcc_h6655 = _source352.dtor_value;
                      bool _8603___mcc_h6656 = _source352.dtor_binary;
                    } else if (_source352.is_DeclareVar) {
                      RAST._IDeclareType _8604___mcc_h6659 = _source352.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8605___mcc_h6660 = _source352.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8606___mcc_h6661 = _source352.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8607___mcc_h6662 = _source352.dtor_optRhs;
                    } else if (_source352.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8608___mcc_h6667 = _source352.dtor_names;
                      RAST._IExpr _8609___mcc_h6668 = _source352.dtor_rhs;
                    } else if (_source352.is_IfExpr) {
                      RAST._IExpr _8610___mcc_h6671 = _source352.dtor_cond;
                      RAST._IExpr _8611___mcc_h6672 = _source352.dtor_thn;
                      RAST._IExpr _8612___mcc_h6673 = _source352.dtor_els;
                    } else if (_source352.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8613___mcc_h6677 = _source352.dtor_optCond;
                      RAST._IExpr _8614___mcc_h6678 = _source352.dtor_underlying;
                    } else if (_source352.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8615___mcc_h6681 = _source352.dtor_name;
                      RAST._IExpr _8616___mcc_h6682 = _source352.dtor_range;
                      RAST._IExpr _8617___mcc_h6683 = _source352.dtor_body;
                    } else if (_source352.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8618___mcc_h6687 = _source352.dtor_lbl;
                      RAST._IExpr _8619___mcc_h6688 = _source352.dtor_underlying;
                    } else if (_source352.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8620___mcc_h6691 = _source352.dtor_optLbl;
                    } else if (_source352.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8621___mcc_h6693 = _source352.dtor_optLbl;
                    } else if (_source352.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8622___mcc_h6695 = _source352.dtor_optExpr;
                    } else if (_source352.is_CallType) {
                      RAST._IExpr _8623___mcc_h6697 = _source352.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8624___mcc_h6698 = _source352.dtor_typeParameters;
                    } else if (_source352.is_Call) {
                      RAST._IExpr _8625___mcc_h6701 = _source352.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8626___mcc_h6702 = _source352.dtor_arguments;
                    } else if (_source352.is_Select) {
                      RAST._IExpr _8627___mcc_h6705 = _source352.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8628___mcc_h6706 = _source352.dtor_name;
                    } else if (_source352.is_MemberSelect) {
                      RAST._IExpr _8629___mcc_h6709 = _source352.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8630___mcc_h6710 = _source352.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8631___mcc_h6713 = _source352.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8632___mcc_h6714 = _source352.dtor_retType;
                      RAST._IExpr _8633___mcc_h6715 = _source352.dtor_body;
                    }
                  } else {
                  }
                } else if (_source351.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8634___mcc_h6719 = _source351.dtor_op2;
                  RAST._IExpr _8635___mcc_h6720 = _source351.dtor_left;
                  RAST._IExpr _8636___mcc_h6721 = _source351.dtor_right;
                  DAST.Format._IBinaryOpFormat _8637___mcc_h6722 = _source351.dtor_format2;
                } else if (_source351.is_TypeAscription) {
                  RAST._IExpr _8638___mcc_h6727 = _source351.dtor_left;
                  RAST._IType _8639___mcc_h6728 = _source351.dtor_tpe;
                } else if (_source351.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8640___mcc_h6731 = _source351.dtor_value;
                } else if (_source351.is_LiteralBool) {
                  bool _8641___mcc_h6733 = _source351.dtor_bvalue;
                } else if (_source351.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8642___mcc_h6735 = _source351.dtor_value;
                  bool _8643___mcc_h6736 = _source351.dtor_binary;
                } else if (_source351.is_DeclareVar) {
                  RAST._IDeclareType _8644___mcc_h6739 = _source351.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8645___mcc_h6740 = _source351.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8646___mcc_h6741 = _source351.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8647___mcc_h6742 = _source351.dtor_optRhs;
                } else if (_source351.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8648___mcc_h6747 = _source351.dtor_names;
                  RAST._IExpr _8649___mcc_h6748 = _source351.dtor_rhs;
                } else if (_source351.is_IfExpr) {
                  RAST._IExpr _8650___mcc_h6751 = _source351.dtor_cond;
                  RAST._IExpr _8651___mcc_h6752 = _source351.dtor_thn;
                  RAST._IExpr _8652___mcc_h6753 = _source351.dtor_els;
                } else if (_source351.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8653___mcc_h6757 = _source351.dtor_optCond;
                  RAST._IExpr _8654___mcc_h6758 = _source351.dtor_underlying;
                } else if (_source351.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8655___mcc_h6761 = _source351.dtor_name;
                  RAST._IExpr _8656___mcc_h6762 = _source351.dtor_range;
                  RAST._IExpr _8657___mcc_h6763 = _source351.dtor_body;
                } else if (_source351.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8658___mcc_h6767 = _source351.dtor_lbl;
                  RAST._IExpr _8659___mcc_h6768 = _source351.dtor_underlying;
                } else if (_source351.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8660___mcc_h6771 = _source351.dtor_optLbl;
                } else if (_source351.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8661___mcc_h6773 = _source351.dtor_optLbl;
                } else if (_source351.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8662___mcc_h6775 = _source351.dtor_optExpr;
                } else if (_source351.is_CallType) {
                  RAST._IExpr _8663___mcc_h6777 = _source351.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8664___mcc_h6778 = _source351.dtor_typeParameters;
                } else if (_source351.is_Call) {
                  RAST._IExpr _8665___mcc_h6781 = _source351.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8666___mcc_h6782 = _source351.dtor_arguments;
                } else if (_source351.is_Select) {
                  RAST._IExpr _8667___mcc_h6785 = _source351.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8668___mcc_h6786 = _source351.dtor_name;
                } else if (_source351.is_MemberSelect) {
                  RAST._IExpr _8669___mcc_h6789 = _source351.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8670___mcc_h6790 = _source351.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8671___mcc_h6793 = _source351.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8672___mcc_h6794 = _source351.dtor_retType;
                  RAST._IExpr _8673___mcc_h6795 = _source351.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8557_field));
              if (_8556_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _8674_fromOwnership;
              _8674_fromOwnership = ((_8556_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out1991;
              DCOMP._IOwnership _out1992;
              DCOMP.COMP.FromOwnership(r, _8674_fromOwnership, expectedOwnership, out _out1991, out _out1992);
              r = _out1991;
              resultingOwnership = _out1992;
              readIdents = _8565_recIdents;
            }
            return ;
          }
        } else if (_source292.is_TupleSelect) {
          DAST._IExpression _8675___mcc_h198 = _source292.dtor_expr;
          BigInteger _8676___mcc_h199 = _source292.dtor_index;
          DAST._IType _8677___mcc_h200 = _source292.dtor_fieldType;
          DAST._IType _8678_fieldType = _4966___mcc_h57;
          bool _8679_isDatatype = _4965___mcc_h56;
          bool _8680_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _8681_field = _4963___mcc_h54;
          DAST._IExpression _8682_on = _4962___mcc_h53;
          {
            if (_8679_isDatatype) {
              RAST._IExpr _8683_onExpr;
              DCOMP._IOwnership _8684_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8685_recIdents;
              RAST._IExpr _out1993;
              DCOMP._IOwnership _out1994;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1995;
              (this).GenExpr(_8682_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1993, out _out1994, out _out1995);
              _8683_onExpr = _out1993;
              _8684_onOwned = _out1994;
              _8685_recIdents = _out1995;
              r = ((_8683_onExpr).Sel(DCOMP.__default.escapeName(_8681_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8686_typ;
              RAST._IType _out1996;
              _out1996 = (this).GenType(_8678_fieldType, false, false);
              _8686_typ = _out1996;
              if (((_8686_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out1997;
                DCOMP._IOwnership _out1998;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1997, out _out1998);
                r = _out1997;
                resultingOwnership = _out1998;
              }
              readIdents = _8685_recIdents;
            } else {
              RAST._IExpr _8687_onExpr;
              DCOMP._IOwnership _8688_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8689_recIdents;
              RAST._IExpr _out1999;
              DCOMP._IOwnership _out2000;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2001;
              (this).GenExpr(_8682_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1999, out _out2000, out _out2001);
              _8687_onExpr = _out1999;
              _8688_onOwned = _out2000;
              _8689_recIdents = _out2001;
              r = _8687_onExpr;
              if (!object.Equals(_8687_onExpr, RAST.__default.self)) {
                RAST._IExpr _source353 = _8687_onExpr;
                if (_source353.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8690___mcc_h6799 = _source353.dtor_content;
                } else if (_source353.is_ExprFromType) {
                  RAST._IType _8691___mcc_h6801 = _source353.dtor_tpe;
                } else if (_source353.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8692___mcc_h6803 = _source353.dtor_name;
                } else if (_source353.is_Match) {
                  RAST._IExpr _8693___mcc_h6805 = _source353.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8694___mcc_h6806 = _source353.dtor_cases;
                } else if (_source353.is_StmtExpr) {
                  RAST._IExpr _8695___mcc_h6809 = _source353.dtor_stmt;
                  RAST._IExpr _8696___mcc_h6810 = _source353.dtor_rhs;
                } else if (_source353.is_Block) {
                  RAST._IExpr _8697___mcc_h6813 = _source353.dtor_underlying;
                } else if (_source353.is_StructBuild) {
                  RAST._IExpr _8698___mcc_h6815 = _source353.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8699___mcc_h6816 = _source353.dtor_assignments;
                } else if (_source353.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8700___mcc_h6819 = _source353.dtor_arguments;
                } else if (_source353.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8701___mcc_h6821 = _source353.dtor_op1;
                  RAST._IExpr _8702___mcc_h6822 = _source353.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8703___mcc_h6823 = _source353.dtor_format;
                  if (object.Equals(_8701___mcc_h6821, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source354 = _8702___mcc_h6822;
                    if (_source354.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8704___mcc_h6827 = _source354.dtor_content;
                    } else if (_source354.is_ExprFromType) {
                      RAST._IType _8705___mcc_h6829 = _source354.dtor_tpe;
                    } else if (_source354.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8706___mcc_h6831 = _source354.dtor_name;
                      if (object.Equals(_8706___mcc_h6831, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source354.is_Match) {
                      RAST._IExpr _8707___mcc_h6833 = _source354.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8708___mcc_h6834 = _source354.dtor_cases;
                    } else if (_source354.is_StmtExpr) {
                      RAST._IExpr _8709___mcc_h6837 = _source354.dtor_stmt;
                      RAST._IExpr _8710___mcc_h6838 = _source354.dtor_rhs;
                    } else if (_source354.is_Block) {
                      RAST._IExpr _8711___mcc_h6841 = _source354.dtor_underlying;
                    } else if (_source354.is_StructBuild) {
                      RAST._IExpr _8712___mcc_h6843 = _source354.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8713___mcc_h6844 = _source354.dtor_assignments;
                    } else if (_source354.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8714___mcc_h6847 = _source354.dtor_arguments;
                    } else if (_source354.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8715___mcc_h6849 = _source354.dtor_op1;
                      RAST._IExpr _8716___mcc_h6850 = _source354.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8717___mcc_h6851 = _source354.dtor_format;
                    } else if (_source354.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8718___mcc_h6855 = _source354.dtor_op2;
                      RAST._IExpr _8719___mcc_h6856 = _source354.dtor_left;
                      RAST._IExpr _8720___mcc_h6857 = _source354.dtor_right;
                      DAST.Format._IBinaryOpFormat _8721___mcc_h6858 = _source354.dtor_format2;
                    } else if (_source354.is_TypeAscription) {
                      RAST._IExpr _8722___mcc_h6863 = _source354.dtor_left;
                      RAST._IType _8723___mcc_h6864 = _source354.dtor_tpe;
                    } else if (_source354.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8724___mcc_h6867 = _source354.dtor_value;
                    } else if (_source354.is_LiteralBool) {
                      bool _8725___mcc_h6869 = _source354.dtor_bvalue;
                    } else if (_source354.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8726___mcc_h6871 = _source354.dtor_value;
                      bool _8727___mcc_h6872 = _source354.dtor_binary;
                    } else if (_source354.is_DeclareVar) {
                      RAST._IDeclareType _8728___mcc_h6875 = _source354.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8729___mcc_h6876 = _source354.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8730___mcc_h6877 = _source354.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8731___mcc_h6878 = _source354.dtor_optRhs;
                    } else if (_source354.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8732___mcc_h6883 = _source354.dtor_names;
                      RAST._IExpr _8733___mcc_h6884 = _source354.dtor_rhs;
                    } else if (_source354.is_IfExpr) {
                      RAST._IExpr _8734___mcc_h6887 = _source354.dtor_cond;
                      RAST._IExpr _8735___mcc_h6888 = _source354.dtor_thn;
                      RAST._IExpr _8736___mcc_h6889 = _source354.dtor_els;
                    } else if (_source354.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8737___mcc_h6893 = _source354.dtor_optCond;
                      RAST._IExpr _8738___mcc_h6894 = _source354.dtor_underlying;
                    } else if (_source354.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8739___mcc_h6897 = _source354.dtor_name;
                      RAST._IExpr _8740___mcc_h6898 = _source354.dtor_range;
                      RAST._IExpr _8741___mcc_h6899 = _source354.dtor_body;
                    } else if (_source354.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8742___mcc_h6903 = _source354.dtor_lbl;
                      RAST._IExpr _8743___mcc_h6904 = _source354.dtor_underlying;
                    } else if (_source354.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8744___mcc_h6907 = _source354.dtor_optLbl;
                    } else if (_source354.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8745___mcc_h6909 = _source354.dtor_optLbl;
                    } else if (_source354.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8746___mcc_h6911 = _source354.dtor_optExpr;
                    } else if (_source354.is_CallType) {
                      RAST._IExpr _8747___mcc_h6913 = _source354.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8748___mcc_h6914 = _source354.dtor_typeParameters;
                    } else if (_source354.is_Call) {
                      RAST._IExpr _8749___mcc_h6917 = _source354.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8750___mcc_h6918 = _source354.dtor_arguments;
                    } else if (_source354.is_Select) {
                      RAST._IExpr _8751___mcc_h6921 = _source354.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8752___mcc_h6922 = _source354.dtor_name;
                    } else if (_source354.is_MemberSelect) {
                      RAST._IExpr _8753___mcc_h6925 = _source354.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8754___mcc_h6926 = _source354.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8755___mcc_h6929 = _source354.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8756___mcc_h6930 = _source354.dtor_retType;
                      RAST._IExpr _8757___mcc_h6931 = _source354.dtor_body;
                    }
                  } else {
                  }
                } else if (_source353.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8758___mcc_h6935 = _source353.dtor_op2;
                  RAST._IExpr _8759___mcc_h6936 = _source353.dtor_left;
                  RAST._IExpr _8760___mcc_h6937 = _source353.dtor_right;
                  DAST.Format._IBinaryOpFormat _8761___mcc_h6938 = _source353.dtor_format2;
                } else if (_source353.is_TypeAscription) {
                  RAST._IExpr _8762___mcc_h6943 = _source353.dtor_left;
                  RAST._IType _8763___mcc_h6944 = _source353.dtor_tpe;
                } else if (_source353.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8764___mcc_h6947 = _source353.dtor_value;
                } else if (_source353.is_LiteralBool) {
                  bool _8765___mcc_h6949 = _source353.dtor_bvalue;
                } else if (_source353.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8766___mcc_h6951 = _source353.dtor_value;
                  bool _8767___mcc_h6952 = _source353.dtor_binary;
                } else if (_source353.is_DeclareVar) {
                  RAST._IDeclareType _8768___mcc_h6955 = _source353.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8769___mcc_h6956 = _source353.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8770___mcc_h6957 = _source353.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8771___mcc_h6958 = _source353.dtor_optRhs;
                } else if (_source353.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8772___mcc_h6963 = _source353.dtor_names;
                  RAST._IExpr _8773___mcc_h6964 = _source353.dtor_rhs;
                } else if (_source353.is_IfExpr) {
                  RAST._IExpr _8774___mcc_h6967 = _source353.dtor_cond;
                  RAST._IExpr _8775___mcc_h6968 = _source353.dtor_thn;
                  RAST._IExpr _8776___mcc_h6969 = _source353.dtor_els;
                } else if (_source353.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8777___mcc_h6973 = _source353.dtor_optCond;
                  RAST._IExpr _8778___mcc_h6974 = _source353.dtor_underlying;
                } else if (_source353.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8779___mcc_h6977 = _source353.dtor_name;
                  RAST._IExpr _8780___mcc_h6978 = _source353.dtor_range;
                  RAST._IExpr _8781___mcc_h6979 = _source353.dtor_body;
                } else if (_source353.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8782___mcc_h6983 = _source353.dtor_lbl;
                  RAST._IExpr _8783___mcc_h6984 = _source353.dtor_underlying;
                } else if (_source353.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8784___mcc_h6987 = _source353.dtor_optLbl;
                } else if (_source353.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8785___mcc_h6989 = _source353.dtor_optLbl;
                } else if (_source353.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8786___mcc_h6991 = _source353.dtor_optExpr;
                } else if (_source353.is_CallType) {
                  RAST._IExpr _8787___mcc_h6993 = _source353.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8788___mcc_h6994 = _source353.dtor_typeParameters;
                } else if (_source353.is_Call) {
                  RAST._IExpr _8789___mcc_h6997 = _source353.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8790___mcc_h6998 = _source353.dtor_arguments;
                } else if (_source353.is_Select) {
                  RAST._IExpr _8791___mcc_h7001 = _source353.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8792___mcc_h7002 = _source353.dtor_name;
                } else if (_source353.is_MemberSelect) {
                  RAST._IExpr _8793___mcc_h7005 = _source353.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8794___mcc_h7006 = _source353.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8795___mcc_h7009 = _source353.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8796___mcc_h7010 = _source353.dtor_retType;
                  RAST._IExpr _8797___mcc_h7011 = _source353.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8681_field));
              if (_8680_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _8798_fromOwnership;
              _8798_fromOwnership = ((_8680_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2002;
              DCOMP._IOwnership _out2003;
              DCOMP.COMP.FromOwnership(r, _8798_fromOwnership, expectedOwnership, out _out2002, out _out2003);
              r = _out2002;
              resultingOwnership = _out2003;
              readIdents = _8689_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Call) {
          DAST._IExpression _8799___mcc_h204 = _source292.dtor_on;
          DAST._ICallName _8800___mcc_h205 = _source292.dtor_callName;
          Dafny.ISequence<DAST._IType> _8801___mcc_h206 = _source292.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _8802___mcc_h207 = _source292.dtor_args;
          DAST._IType _8803_fieldType = _4966___mcc_h57;
          bool _8804_isDatatype = _4965___mcc_h56;
          bool _8805_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _8806_field = _4963___mcc_h54;
          DAST._IExpression _8807_on = _4962___mcc_h53;
          {
            if (_8804_isDatatype) {
              RAST._IExpr _8808_onExpr;
              DCOMP._IOwnership _8809_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8810_recIdents;
              RAST._IExpr _out2004;
              DCOMP._IOwnership _out2005;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2006;
              (this).GenExpr(_8807_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2004, out _out2005, out _out2006);
              _8808_onExpr = _out2004;
              _8809_onOwned = _out2005;
              _8810_recIdents = _out2006;
              r = ((_8808_onExpr).Sel(DCOMP.__default.escapeName(_8806_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8811_typ;
              RAST._IType _out2007;
              _out2007 = (this).GenType(_8803_fieldType, false, false);
              _8811_typ = _out2007;
              if (((_8811_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2008;
                DCOMP._IOwnership _out2009;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2008, out _out2009);
                r = _out2008;
                resultingOwnership = _out2009;
              }
              readIdents = _8810_recIdents;
            } else {
              RAST._IExpr _8812_onExpr;
              DCOMP._IOwnership _8813_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8814_recIdents;
              RAST._IExpr _out2010;
              DCOMP._IOwnership _out2011;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2012;
              (this).GenExpr(_8807_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2010, out _out2011, out _out2012);
              _8812_onExpr = _out2010;
              _8813_onOwned = _out2011;
              _8814_recIdents = _out2012;
              r = _8812_onExpr;
              if (!object.Equals(_8812_onExpr, RAST.__default.self)) {
                RAST._IExpr _source355 = _8812_onExpr;
                if (_source355.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8815___mcc_h7015 = _source355.dtor_content;
                } else if (_source355.is_ExprFromType) {
                  RAST._IType _8816___mcc_h7017 = _source355.dtor_tpe;
                } else if (_source355.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8817___mcc_h7019 = _source355.dtor_name;
                } else if (_source355.is_Match) {
                  RAST._IExpr _8818___mcc_h7021 = _source355.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8819___mcc_h7022 = _source355.dtor_cases;
                } else if (_source355.is_StmtExpr) {
                  RAST._IExpr _8820___mcc_h7025 = _source355.dtor_stmt;
                  RAST._IExpr _8821___mcc_h7026 = _source355.dtor_rhs;
                } else if (_source355.is_Block) {
                  RAST._IExpr _8822___mcc_h7029 = _source355.dtor_underlying;
                } else if (_source355.is_StructBuild) {
                  RAST._IExpr _8823___mcc_h7031 = _source355.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8824___mcc_h7032 = _source355.dtor_assignments;
                } else if (_source355.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8825___mcc_h7035 = _source355.dtor_arguments;
                } else if (_source355.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8826___mcc_h7037 = _source355.dtor_op1;
                  RAST._IExpr _8827___mcc_h7038 = _source355.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8828___mcc_h7039 = _source355.dtor_format;
                  if (object.Equals(_8826___mcc_h7037, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source356 = _8827___mcc_h7038;
                    if (_source356.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8829___mcc_h7043 = _source356.dtor_content;
                    } else if (_source356.is_ExprFromType) {
                      RAST._IType _8830___mcc_h7045 = _source356.dtor_tpe;
                    } else if (_source356.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8831___mcc_h7047 = _source356.dtor_name;
                      if (object.Equals(_8831___mcc_h7047, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source356.is_Match) {
                      RAST._IExpr _8832___mcc_h7049 = _source356.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8833___mcc_h7050 = _source356.dtor_cases;
                    } else if (_source356.is_StmtExpr) {
                      RAST._IExpr _8834___mcc_h7053 = _source356.dtor_stmt;
                      RAST._IExpr _8835___mcc_h7054 = _source356.dtor_rhs;
                    } else if (_source356.is_Block) {
                      RAST._IExpr _8836___mcc_h7057 = _source356.dtor_underlying;
                    } else if (_source356.is_StructBuild) {
                      RAST._IExpr _8837___mcc_h7059 = _source356.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8838___mcc_h7060 = _source356.dtor_assignments;
                    } else if (_source356.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8839___mcc_h7063 = _source356.dtor_arguments;
                    } else if (_source356.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8840___mcc_h7065 = _source356.dtor_op1;
                      RAST._IExpr _8841___mcc_h7066 = _source356.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8842___mcc_h7067 = _source356.dtor_format;
                    } else if (_source356.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8843___mcc_h7071 = _source356.dtor_op2;
                      RAST._IExpr _8844___mcc_h7072 = _source356.dtor_left;
                      RAST._IExpr _8845___mcc_h7073 = _source356.dtor_right;
                      DAST.Format._IBinaryOpFormat _8846___mcc_h7074 = _source356.dtor_format2;
                    } else if (_source356.is_TypeAscription) {
                      RAST._IExpr _8847___mcc_h7079 = _source356.dtor_left;
                      RAST._IType _8848___mcc_h7080 = _source356.dtor_tpe;
                    } else if (_source356.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8849___mcc_h7083 = _source356.dtor_value;
                    } else if (_source356.is_LiteralBool) {
                      bool _8850___mcc_h7085 = _source356.dtor_bvalue;
                    } else if (_source356.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8851___mcc_h7087 = _source356.dtor_value;
                      bool _8852___mcc_h7088 = _source356.dtor_binary;
                    } else if (_source356.is_DeclareVar) {
                      RAST._IDeclareType _8853___mcc_h7091 = _source356.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8854___mcc_h7092 = _source356.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8855___mcc_h7093 = _source356.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8856___mcc_h7094 = _source356.dtor_optRhs;
                    } else if (_source356.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8857___mcc_h7099 = _source356.dtor_names;
                      RAST._IExpr _8858___mcc_h7100 = _source356.dtor_rhs;
                    } else if (_source356.is_IfExpr) {
                      RAST._IExpr _8859___mcc_h7103 = _source356.dtor_cond;
                      RAST._IExpr _8860___mcc_h7104 = _source356.dtor_thn;
                      RAST._IExpr _8861___mcc_h7105 = _source356.dtor_els;
                    } else if (_source356.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8862___mcc_h7109 = _source356.dtor_optCond;
                      RAST._IExpr _8863___mcc_h7110 = _source356.dtor_underlying;
                    } else if (_source356.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8864___mcc_h7113 = _source356.dtor_name;
                      RAST._IExpr _8865___mcc_h7114 = _source356.dtor_range;
                      RAST._IExpr _8866___mcc_h7115 = _source356.dtor_body;
                    } else if (_source356.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8867___mcc_h7119 = _source356.dtor_lbl;
                      RAST._IExpr _8868___mcc_h7120 = _source356.dtor_underlying;
                    } else if (_source356.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8869___mcc_h7123 = _source356.dtor_optLbl;
                    } else if (_source356.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8870___mcc_h7125 = _source356.dtor_optLbl;
                    } else if (_source356.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8871___mcc_h7127 = _source356.dtor_optExpr;
                    } else if (_source356.is_CallType) {
                      RAST._IExpr _8872___mcc_h7129 = _source356.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8873___mcc_h7130 = _source356.dtor_typeParameters;
                    } else if (_source356.is_Call) {
                      RAST._IExpr _8874___mcc_h7133 = _source356.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8875___mcc_h7134 = _source356.dtor_arguments;
                    } else if (_source356.is_Select) {
                      RAST._IExpr _8876___mcc_h7137 = _source356.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8877___mcc_h7138 = _source356.dtor_name;
                    } else if (_source356.is_MemberSelect) {
                      RAST._IExpr _8878___mcc_h7141 = _source356.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8879___mcc_h7142 = _source356.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8880___mcc_h7145 = _source356.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8881___mcc_h7146 = _source356.dtor_retType;
                      RAST._IExpr _8882___mcc_h7147 = _source356.dtor_body;
                    }
                  } else {
                  }
                } else if (_source355.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8883___mcc_h7151 = _source355.dtor_op2;
                  RAST._IExpr _8884___mcc_h7152 = _source355.dtor_left;
                  RAST._IExpr _8885___mcc_h7153 = _source355.dtor_right;
                  DAST.Format._IBinaryOpFormat _8886___mcc_h7154 = _source355.dtor_format2;
                } else if (_source355.is_TypeAscription) {
                  RAST._IExpr _8887___mcc_h7159 = _source355.dtor_left;
                  RAST._IType _8888___mcc_h7160 = _source355.dtor_tpe;
                } else if (_source355.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8889___mcc_h7163 = _source355.dtor_value;
                } else if (_source355.is_LiteralBool) {
                  bool _8890___mcc_h7165 = _source355.dtor_bvalue;
                } else if (_source355.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8891___mcc_h7167 = _source355.dtor_value;
                  bool _8892___mcc_h7168 = _source355.dtor_binary;
                } else if (_source355.is_DeclareVar) {
                  RAST._IDeclareType _8893___mcc_h7171 = _source355.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8894___mcc_h7172 = _source355.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8895___mcc_h7173 = _source355.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8896___mcc_h7174 = _source355.dtor_optRhs;
                } else if (_source355.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8897___mcc_h7179 = _source355.dtor_names;
                  RAST._IExpr _8898___mcc_h7180 = _source355.dtor_rhs;
                } else if (_source355.is_IfExpr) {
                  RAST._IExpr _8899___mcc_h7183 = _source355.dtor_cond;
                  RAST._IExpr _8900___mcc_h7184 = _source355.dtor_thn;
                  RAST._IExpr _8901___mcc_h7185 = _source355.dtor_els;
                } else if (_source355.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8902___mcc_h7189 = _source355.dtor_optCond;
                  RAST._IExpr _8903___mcc_h7190 = _source355.dtor_underlying;
                } else if (_source355.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8904___mcc_h7193 = _source355.dtor_name;
                  RAST._IExpr _8905___mcc_h7194 = _source355.dtor_range;
                  RAST._IExpr _8906___mcc_h7195 = _source355.dtor_body;
                } else if (_source355.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8907___mcc_h7199 = _source355.dtor_lbl;
                  RAST._IExpr _8908___mcc_h7200 = _source355.dtor_underlying;
                } else if (_source355.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8909___mcc_h7203 = _source355.dtor_optLbl;
                } else if (_source355.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8910___mcc_h7205 = _source355.dtor_optLbl;
                } else if (_source355.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8911___mcc_h7207 = _source355.dtor_optExpr;
                } else if (_source355.is_CallType) {
                  RAST._IExpr _8912___mcc_h7209 = _source355.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8913___mcc_h7210 = _source355.dtor_typeParameters;
                } else if (_source355.is_Call) {
                  RAST._IExpr _8914___mcc_h7213 = _source355.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8915___mcc_h7214 = _source355.dtor_arguments;
                } else if (_source355.is_Select) {
                  RAST._IExpr _8916___mcc_h7217 = _source355.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8917___mcc_h7218 = _source355.dtor_name;
                } else if (_source355.is_MemberSelect) {
                  RAST._IExpr _8918___mcc_h7221 = _source355.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8919___mcc_h7222 = _source355.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8920___mcc_h7225 = _source355.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8921___mcc_h7226 = _source355.dtor_retType;
                  RAST._IExpr _8922___mcc_h7227 = _source355.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8806_field));
              if (_8805_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _8923_fromOwnership;
              _8923_fromOwnership = ((_8805_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2013;
              DCOMP._IOwnership _out2014;
              DCOMP.COMP.FromOwnership(r, _8923_fromOwnership, expectedOwnership, out _out2013, out _out2014);
              r = _out2013;
              resultingOwnership = _out2014;
              readIdents = _8814_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _8924___mcc_h212 = _source292.dtor_params;
          DAST._IType _8925___mcc_h213 = _source292.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _8926___mcc_h214 = _source292.dtor_body;
          DAST._IType _8927_fieldType = _4966___mcc_h57;
          bool _8928_isDatatype = _4965___mcc_h56;
          bool _8929_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _8930_field = _4963___mcc_h54;
          DAST._IExpression _8931_on = _4962___mcc_h53;
          {
            if (_8928_isDatatype) {
              RAST._IExpr _8932_onExpr;
              DCOMP._IOwnership _8933_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8934_recIdents;
              RAST._IExpr _out2015;
              DCOMP._IOwnership _out2016;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2017;
              (this).GenExpr(_8931_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2015, out _out2016, out _out2017);
              _8932_onExpr = _out2015;
              _8933_onOwned = _out2016;
              _8934_recIdents = _out2017;
              r = ((_8932_onExpr).Sel(DCOMP.__default.escapeName(_8930_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8935_typ;
              RAST._IType _out2018;
              _out2018 = (this).GenType(_8927_fieldType, false, false);
              _8935_typ = _out2018;
              if (((_8935_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2019;
                DCOMP._IOwnership _out2020;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2019, out _out2020);
                r = _out2019;
                resultingOwnership = _out2020;
              }
              readIdents = _8934_recIdents;
            } else {
              RAST._IExpr _8936_onExpr;
              DCOMP._IOwnership _8937_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8938_recIdents;
              RAST._IExpr _out2021;
              DCOMP._IOwnership _out2022;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2023;
              (this).GenExpr(_8931_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2021, out _out2022, out _out2023);
              _8936_onExpr = _out2021;
              _8937_onOwned = _out2022;
              _8938_recIdents = _out2023;
              r = _8936_onExpr;
              if (!object.Equals(_8936_onExpr, RAST.__default.self)) {
                RAST._IExpr _source357 = _8936_onExpr;
                if (_source357.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8939___mcc_h7231 = _source357.dtor_content;
                } else if (_source357.is_ExprFromType) {
                  RAST._IType _8940___mcc_h7233 = _source357.dtor_tpe;
                } else if (_source357.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8941___mcc_h7235 = _source357.dtor_name;
                } else if (_source357.is_Match) {
                  RAST._IExpr _8942___mcc_h7237 = _source357.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8943___mcc_h7238 = _source357.dtor_cases;
                } else if (_source357.is_StmtExpr) {
                  RAST._IExpr _8944___mcc_h7241 = _source357.dtor_stmt;
                  RAST._IExpr _8945___mcc_h7242 = _source357.dtor_rhs;
                } else if (_source357.is_Block) {
                  RAST._IExpr _8946___mcc_h7245 = _source357.dtor_underlying;
                } else if (_source357.is_StructBuild) {
                  RAST._IExpr _8947___mcc_h7247 = _source357.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8948___mcc_h7248 = _source357.dtor_assignments;
                } else if (_source357.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8949___mcc_h7251 = _source357.dtor_arguments;
                } else if (_source357.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8950___mcc_h7253 = _source357.dtor_op1;
                  RAST._IExpr _8951___mcc_h7254 = _source357.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8952___mcc_h7255 = _source357.dtor_format;
                  if (object.Equals(_8950___mcc_h7253, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source358 = _8951___mcc_h7254;
                    if (_source358.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8953___mcc_h7259 = _source358.dtor_content;
                    } else if (_source358.is_ExprFromType) {
                      RAST._IType _8954___mcc_h7261 = _source358.dtor_tpe;
                    } else if (_source358.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8955___mcc_h7263 = _source358.dtor_name;
                      if (object.Equals(_8955___mcc_h7263, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source358.is_Match) {
                      RAST._IExpr _8956___mcc_h7265 = _source358.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8957___mcc_h7266 = _source358.dtor_cases;
                    } else if (_source358.is_StmtExpr) {
                      RAST._IExpr _8958___mcc_h7269 = _source358.dtor_stmt;
                      RAST._IExpr _8959___mcc_h7270 = _source358.dtor_rhs;
                    } else if (_source358.is_Block) {
                      RAST._IExpr _8960___mcc_h7273 = _source358.dtor_underlying;
                    } else if (_source358.is_StructBuild) {
                      RAST._IExpr _8961___mcc_h7275 = _source358.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8962___mcc_h7276 = _source358.dtor_assignments;
                    } else if (_source358.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8963___mcc_h7279 = _source358.dtor_arguments;
                    } else if (_source358.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8964___mcc_h7281 = _source358.dtor_op1;
                      RAST._IExpr _8965___mcc_h7282 = _source358.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8966___mcc_h7283 = _source358.dtor_format;
                    } else if (_source358.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8967___mcc_h7287 = _source358.dtor_op2;
                      RAST._IExpr _8968___mcc_h7288 = _source358.dtor_left;
                      RAST._IExpr _8969___mcc_h7289 = _source358.dtor_right;
                      DAST.Format._IBinaryOpFormat _8970___mcc_h7290 = _source358.dtor_format2;
                    } else if (_source358.is_TypeAscription) {
                      RAST._IExpr _8971___mcc_h7295 = _source358.dtor_left;
                      RAST._IType _8972___mcc_h7296 = _source358.dtor_tpe;
                    } else if (_source358.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8973___mcc_h7299 = _source358.dtor_value;
                    } else if (_source358.is_LiteralBool) {
                      bool _8974___mcc_h7301 = _source358.dtor_bvalue;
                    } else if (_source358.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8975___mcc_h7303 = _source358.dtor_value;
                      bool _8976___mcc_h7304 = _source358.dtor_binary;
                    } else if (_source358.is_DeclareVar) {
                      RAST._IDeclareType _8977___mcc_h7307 = _source358.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8978___mcc_h7308 = _source358.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8979___mcc_h7309 = _source358.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8980___mcc_h7310 = _source358.dtor_optRhs;
                    } else if (_source358.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8981___mcc_h7315 = _source358.dtor_names;
                      RAST._IExpr _8982___mcc_h7316 = _source358.dtor_rhs;
                    } else if (_source358.is_IfExpr) {
                      RAST._IExpr _8983___mcc_h7319 = _source358.dtor_cond;
                      RAST._IExpr _8984___mcc_h7320 = _source358.dtor_thn;
                      RAST._IExpr _8985___mcc_h7321 = _source358.dtor_els;
                    } else if (_source358.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8986___mcc_h7325 = _source358.dtor_optCond;
                      RAST._IExpr _8987___mcc_h7326 = _source358.dtor_underlying;
                    } else if (_source358.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8988___mcc_h7329 = _source358.dtor_name;
                      RAST._IExpr _8989___mcc_h7330 = _source358.dtor_range;
                      RAST._IExpr _8990___mcc_h7331 = _source358.dtor_body;
                    } else if (_source358.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8991___mcc_h7335 = _source358.dtor_lbl;
                      RAST._IExpr _8992___mcc_h7336 = _source358.dtor_underlying;
                    } else if (_source358.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8993___mcc_h7339 = _source358.dtor_optLbl;
                    } else if (_source358.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8994___mcc_h7341 = _source358.dtor_optLbl;
                    } else if (_source358.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8995___mcc_h7343 = _source358.dtor_optExpr;
                    } else if (_source358.is_CallType) {
                      RAST._IExpr _8996___mcc_h7345 = _source358.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8997___mcc_h7346 = _source358.dtor_typeParameters;
                    } else if (_source358.is_Call) {
                      RAST._IExpr _8998___mcc_h7349 = _source358.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8999___mcc_h7350 = _source358.dtor_arguments;
                    } else if (_source358.is_Select) {
                      RAST._IExpr _9000___mcc_h7353 = _source358.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9001___mcc_h7354 = _source358.dtor_name;
                    } else if (_source358.is_MemberSelect) {
                      RAST._IExpr _9002___mcc_h7357 = _source358.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9003___mcc_h7358 = _source358.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9004___mcc_h7361 = _source358.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9005___mcc_h7362 = _source358.dtor_retType;
                      RAST._IExpr _9006___mcc_h7363 = _source358.dtor_body;
                    }
                  } else {
                  }
                } else if (_source357.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9007___mcc_h7367 = _source357.dtor_op2;
                  RAST._IExpr _9008___mcc_h7368 = _source357.dtor_left;
                  RAST._IExpr _9009___mcc_h7369 = _source357.dtor_right;
                  DAST.Format._IBinaryOpFormat _9010___mcc_h7370 = _source357.dtor_format2;
                } else if (_source357.is_TypeAscription) {
                  RAST._IExpr _9011___mcc_h7375 = _source357.dtor_left;
                  RAST._IType _9012___mcc_h7376 = _source357.dtor_tpe;
                } else if (_source357.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9013___mcc_h7379 = _source357.dtor_value;
                } else if (_source357.is_LiteralBool) {
                  bool _9014___mcc_h7381 = _source357.dtor_bvalue;
                } else if (_source357.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9015___mcc_h7383 = _source357.dtor_value;
                  bool _9016___mcc_h7384 = _source357.dtor_binary;
                } else if (_source357.is_DeclareVar) {
                  RAST._IDeclareType _9017___mcc_h7387 = _source357.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9018___mcc_h7388 = _source357.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9019___mcc_h7389 = _source357.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9020___mcc_h7390 = _source357.dtor_optRhs;
                } else if (_source357.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9021___mcc_h7395 = _source357.dtor_names;
                  RAST._IExpr _9022___mcc_h7396 = _source357.dtor_rhs;
                } else if (_source357.is_IfExpr) {
                  RAST._IExpr _9023___mcc_h7399 = _source357.dtor_cond;
                  RAST._IExpr _9024___mcc_h7400 = _source357.dtor_thn;
                  RAST._IExpr _9025___mcc_h7401 = _source357.dtor_els;
                } else if (_source357.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9026___mcc_h7405 = _source357.dtor_optCond;
                  RAST._IExpr _9027___mcc_h7406 = _source357.dtor_underlying;
                } else if (_source357.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9028___mcc_h7409 = _source357.dtor_name;
                  RAST._IExpr _9029___mcc_h7410 = _source357.dtor_range;
                  RAST._IExpr _9030___mcc_h7411 = _source357.dtor_body;
                } else if (_source357.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9031___mcc_h7415 = _source357.dtor_lbl;
                  RAST._IExpr _9032___mcc_h7416 = _source357.dtor_underlying;
                } else if (_source357.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9033___mcc_h7419 = _source357.dtor_optLbl;
                } else if (_source357.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9034___mcc_h7421 = _source357.dtor_optLbl;
                } else if (_source357.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9035___mcc_h7423 = _source357.dtor_optExpr;
                } else if (_source357.is_CallType) {
                  RAST._IExpr _9036___mcc_h7425 = _source357.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9037___mcc_h7426 = _source357.dtor_typeParameters;
                } else if (_source357.is_Call) {
                  RAST._IExpr _9038___mcc_h7429 = _source357.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9039___mcc_h7430 = _source357.dtor_arguments;
                } else if (_source357.is_Select) {
                  RAST._IExpr _9040___mcc_h7433 = _source357.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9041___mcc_h7434 = _source357.dtor_name;
                } else if (_source357.is_MemberSelect) {
                  RAST._IExpr _9042___mcc_h7437 = _source357.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9043___mcc_h7438 = _source357.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9044___mcc_h7441 = _source357.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9045___mcc_h7442 = _source357.dtor_retType;
                  RAST._IExpr _9046___mcc_h7443 = _source357.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8930_field));
              if (_8929_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _9047_fromOwnership;
              _9047_fromOwnership = ((_8929_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2024;
              DCOMP._IOwnership _out2025;
              DCOMP.COMP.FromOwnership(r, _9047_fromOwnership, expectedOwnership, out _out2024, out _out2025);
              r = _out2024;
              resultingOwnership = _out2025;
              readIdents = _8938_recIdents;
            }
            return ;
          }
        } else if (_source292.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9048___mcc_h218 = _source292.dtor_values;
          DAST._IType _9049___mcc_h219 = _source292.dtor_retType;
          DAST._IExpression _9050___mcc_h220 = _source292.dtor_expr;
          DAST._IType _9051_fieldType = _4966___mcc_h57;
          bool _9052_isDatatype = _4965___mcc_h56;
          bool _9053_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _9054_field = _4963___mcc_h54;
          DAST._IExpression _9055_on = _4962___mcc_h53;
          {
            if (_9052_isDatatype) {
              RAST._IExpr _9056_onExpr;
              DCOMP._IOwnership _9057_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9058_recIdents;
              RAST._IExpr _out2026;
              DCOMP._IOwnership _out2027;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2028;
              (this).GenExpr(_9055_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2026, out _out2027, out _out2028);
              _9056_onExpr = _out2026;
              _9057_onOwned = _out2027;
              _9058_recIdents = _out2028;
              r = ((_9056_onExpr).Sel(DCOMP.__default.escapeName(_9054_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9059_typ;
              RAST._IType _out2029;
              _out2029 = (this).GenType(_9051_fieldType, false, false);
              _9059_typ = _out2029;
              if (((_9059_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2030;
                DCOMP._IOwnership _out2031;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2030, out _out2031);
                r = _out2030;
                resultingOwnership = _out2031;
              }
              readIdents = _9058_recIdents;
            } else {
              RAST._IExpr _9060_onExpr;
              DCOMP._IOwnership _9061_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9062_recIdents;
              RAST._IExpr _out2032;
              DCOMP._IOwnership _out2033;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2034;
              (this).GenExpr(_9055_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2032, out _out2033, out _out2034);
              _9060_onExpr = _out2032;
              _9061_onOwned = _out2033;
              _9062_recIdents = _out2034;
              r = _9060_onExpr;
              if (!object.Equals(_9060_onExpr, RAST.__default.self)) {
                RAST._IExpr _source359 = _9060_onExpr;
                if (_source359.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9063___mcc_h7447 = _source359.dtor_content;
                } else if (_source359.is_ExprFromType) {
                  RAST._IType _9064___mcc_h7449 = _source359.dtor_tpe;
                } else if (_source359.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9065___mcc_h7451 = _source359.dtor_name;
                } else if (_source359.is_Match) {
                  RAST._IExpr _9066___mcc_h7453 = _source359.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9067___mcc_h7454 = _source359.dtor_cases;
                } else if (_source359.is_StmtExpr) {
                  RAST._IExpr _9068___mcc_h7457 = _source359.dtor_stmt;
                  RAST._IExpr _9069___mcc_h7458 = _source359.dtor_rhs;
                } else if (_source359.is_Block) {
                  RAST._IExpr _9070___mcc_h7461 = _source359.dtor_underlying;
                } else if (_source359.is_StructBuild) {
                  RAST._IExpr _9071___mcc_h7463 = _source359.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9072___mcc_h7464 = _source359.dtor_assignments;
                } else if (_source359.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9073___mcc_h7467 = _source359.dtor_arguments;
                } else if (_source359.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9074___mcc_h7469 = _source359.dtor_op1;
                  RAST._IExpr _9075___mcc_h7470 = _source359.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9076___mcc_h7471 = _source359.dtor_format;
                  if (object.Equals(_9074___mcc_h7469, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source360 = _9075___mcc_h7470;
                    if (_source360.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9077___mcc_h7475 = _source360.dtor_content;
                    } else if (_source360.is_ExprFromType) {
                      RAST._IType _9078___mcc_h7477 = _source360.dtor_tpe;
                    } else if (_source360.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9079___mcc_h7479 = _source360.dtor_name;
                      if (object.Equals(_9079___mcc_h7479, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source360.is_Match) {
                      RAST._IExpr _9080___mcc_h7481 = _source360.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9081___mcc_h7482 = _source360.dtor_cases;
                    } else if (_source360.is_StmtExpr) {
                      RAST._IExpr _9082___mcc_h7485 = _source360.dtor_stmt;
                      RAST._IExpr _9083___mcc_h7486 = _source360.dtor_rhs;
                    } else if (_source360.is_Block) {
                      RAST._IExpr _9084___mcc_h7489 = _source360.dtor_underlying;
                    } else if (_source360.is_StructBuild) {
                      RAST._IExpr _9085___mcc_h7491 = _source360.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9086___mcc_h7492 = _source360.dtor_assignments;
                    } else if (_source360.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9087___mcc_h7495 = _source360.dtor_arguments;
                    } else if (_source360.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9088___mcc_h7497 = _source360.dtor_op1;
                      RAST._IExpr _9089___mcc_h7498 = _source360.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9090___mcc_h7499 = _source360.dtor_format;
                    } else if (_source360.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9091___mcc_h7503 = _source360.dtor_op2;
                      RAST._IExpr _9092___mcc_h7504 = _source360.dtor_left;
                      RAST._IExpr _9093___mcc_h7505 = _source360.dtor_right;
                      DAST.Format._IBinaryOpFormat _9094___mcc_h7506 = _source360.dtor_format2;
                    } else if (_source360.is_TypeAscription) {
                      RAST._IExpr _9095___mcc_h7511 = _source360.dtor_left;
                      RAST._IType _9096___mcc_h7512 = _source360.dtor_tpe;
                    } else if (_source360.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9097___mcc_h7515 = _source360.dtor_value;
                    } else if (_source360.is_LiteralBool) {
                      bool _9098___mcc_h7517 = _source360.dtor_bvalue;
                    } else if (_source360.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9099___mcc_h7519 = _source360.dtor_value;
                      bool _9100___mcc_h7520 = _source360.dtor_binary;
                    } else if (_source360.is_DeclareVar) {
                      RAST._IDeclareType _9101___mcc_h7523 = _source360.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9102___mcc_h7524 = _source360.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9103___mcc_h7525 = _source360.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9104___mcc_h7526 = _source360.dtor_optRhs;
                    } else if (_source360.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9105___mcc_h7531 = _source360.dtor_names;
                      RAST._IExpr _9106___mcc_h7532 = _source360.dtor_rhs;
                    } else if (_source360.is_IfExpr) {
                      RAST._IExpr _9107___mcc_h7535 = _source360.dtor_cond;
                      RAST._IExpr _9108___mcc_h7536 = _source360.dtor_thn;
                      RAST._IExpr _9109___mcc_h7537 = _source360.dtor_els;
                    } else if (_source360.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9110___mcc_h7541 = _source360.dtor_optCond;
                      RAST._IExpr _9111___mcc_h7542 = _source360.dtor_underlying;
                    } else if (_source360.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9112___mcc_h7545 = _source360.dtor_name;
                      RAST._IExpr _9113___mcc_h7546 = _source360.dtor_range;
                      RAST._IExpr _9114___mcc_h7547 = _source360.dtor_body;
                    } else if (_source360.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9115___mcc_h7551 = _source360.dtor_lbl;
                      RAST._IExpr _9116___mcc_h7552 = _source360.dtor_underlying;
                    } else if (_source360.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9117___mcc_h7555 = _source360.dtor_optLbl;
                    } else if (_source360.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9118___mcc_h7557 = _source360.dtor_optLbl;
                    } else if (_source360.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9119___mcc_h7559 = _source360.dtor_optExpr;
                    } else if (_source360.is_CallType) {
                      RAST._IExpr _9120___mcc_h7561 = _source360.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9121___mcc_h7562 = _source360.dtor_typeParameters;
                    } else if (_source360.is_Call) {
                      RAST._IExpr _9122___mcc_h7565 = _source360.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9123___mcc_h7566 = _source360.dtor_arguments;
                    } else if (_source360.is_Select) {
                      RAST._IExpr _9124___mcc_h7569 = _source360.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9125___mcc_h7570 = _source360.dtor_name;
                    } else if (_source360.is_MemberSelect) {
                      RAST._IExpr _9126___mcc_h7573 = _source360.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9127___mcc_h7574 = _source360.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9128___mcc_h7577 = _source360.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9129___mcc_h7578 = _source360.dtor_retType;
                      RAST._IExpr _9130___mcc_h7579 = _source360.dtor_body;
                    }
                  } else {
                  }
                } else if (_source359.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9131___mcc_h7583 = _source359.dtor_op2;
                  RAST._IExpr _9132___mcc_h7584 = _source359.dtor_left;
                  RAST._IExpr _9133___mcc_h7585 = _source359.dtor_right;
                  DAST.Format._IBinaryOpFormat _9134___mcc_h7586 = _source359.dtor_format2;
                } else if (_source359.is_TypeAscription) {
                  RAST._IExpr _9135___mcc_h7591 = _source359.dtor_left;
                  RAST._IType _9136___mcc_h7592 = _source359.dtor_tpe;
                } else if (_source359.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9137___mcc_h7595 = _source359.dtor_value;
                } else if (_source359.is_LiteralBool) {
                  bool _9138___mcc_h7597 = _source359.dtor_bvalue;
                } else if (_source359.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9139___mcc_h7599 = _source359.dtor_value;
                  bool _9140___mcc_h7600 = _source359.dtor_binary;
                } else if (_source359.is_DeclareVar) {
                  RAST._IDeclareType _9141___mcc_h7603 = _source359.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9142___mcc_h7604 = _source359.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9143___mcc_h7605 = _source359.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9144___mcc_h7606 = _source359.dtor_optRhs;
                } else if (_source359.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9145___mcc_h7611 = _source359.dtor_names;
                  RAST._IExpr _9146___mcc_h7612 = _source359.dtor_rhs;
                } else if (_source359.is_IfExpr) {
                  RAST._IExpr _9147___mcc_h7615 = _source359.dtor_cond;
                  RAST._IExpr _9148___mcc_h7616 = _source359.dtor_thn;
                  RAST._IExpr _9149___mcc_h7617 = _source359.dtor_els;
                } else if (_source359.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9150___mcc_h7621 = _source359.dtor_optCond;
                  RAST._IExpr _9151___mcc_h7622 = _source359.dtor_underlying;
                } else if (_source359.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9152___mcc_h7625 = _source359.dtor_name;
                  RAST._IExpr _9153___mcc_h7626 = _source359.dtor_range;
                  RAST._IExpr _9154___mcc_h7627 = _source359.dtor_body;
                } else if (_source359.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9155___mcc_h7631 = _source359.dtor_lbl;
                  RAST._IExpr _9156___mcc_h7632 = _source359.dtor_underlying;
                } else if (_source359.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9157___mcc_h7635 = _source359.dtor_optLbl;
                } else if (_source359.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9158___mcc_h7637 = _source359.dtor_optLbl;
                } else if (_source359.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9159___mcc_h7639 = _source359.dtor_optExpr;
                } else if (_source359.is_CallType) {
                  RAST._IExpr _9160___mcc_h7641 = _source359.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9161___mcc_h7642 = _source359.dtor_typeParameters;
                } else if (_source359.is_Call) {
                  RAST._IExpr _9162___mcc_h7645 = _source359.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9163___mcc_h7646 = _source359.dtor_arguments;
                } else if (_source359.is_Select) {
                  RAST._IExpr _9164___mcc_h7649 = _source359.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9165___mcc_h7650 = _source359.dtor_name;
                } else if (_source359.is_MemberSelect) {
                  RAST._IExpr _9166___mcc_h7653 = _source359.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9167___mcc_h7654 = _source359.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9168___mcc_h7657 = _source359.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9169___mcc_h7658 = _source359.dtor_retType;
                  RAST._IExpr _9170___mcc_h7659 = _source359.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9054_field));
              if (_9053_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _9171_fromOwnership;
              _9171_fromOwnership = ((_9053_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2035;
              DCOMP._IOwnership _out2036;
              DCOMP.COMP.FromOwnership(r, _9171_fromOwnership, expectedOwnership, out _out2035, out _out2036);
              r = _out2035;
              resultingOwnership = _out2036;
              readIdents = _9062_recIdents;
            }
            return ;
          }
        } else if (_source292.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _9172___mcc_h224 = _source292.dtor_name;
          DAST._IType _9173___mcc_h225 = _source292.dtor_typ;
          DAST._IExpression _9174___mcc_h226 = _source292.dtor_value;
          DAST._IExpression _9175___mcc_h227 = _source292.dtor_iifeBody;
          DAST._IType _9176_fieldType = _4966___mcc_h57;
          bool _9177_isDatatype = _4965___mcc_h56;
          bool _9178_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _9179_field = _4963___mcc_h54;
          DAST._IExpression _9180_on = _4962___mcc_h53;
          {
            if (_9177_isDatatype) {
              RAST._IExpr _9181_onExpr;
              DCOMP._IOwnership _9182_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9183_recIdents;
              RAST._IExpr _out2037;
              DCOMP._IOwnership _out2038;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2039;
              (this).GenExpr(_9180_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2037, out _out2038, out _out2039);
              _9181_onExpr = _out2037;
              _9182_onOwned = _out2038;
              _9183_recIdents = _out2039;
              r = ((_9181_onExpr).Sel(DCOMP.__default.escapeName(_9179_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9184_typ;
              RAST._IType _out2040;
              _out2040 = (this).GenType(_9176_fieldType, false, false);
              _9184_typ = _out2040;
              if (((_9184_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2041;
                DCOMP._IOwnership _out2042;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2041, out _out2042);
                r = _out2041;
                resultingOwnership = _out2042;
              }
              readIdents = _9183_recIdents;
            } else {
              RAST._IExpr _9185_onExpr;
              DCOMP._IOwnership _9186_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9187_recIdents;
              RAST._IExpr _out2043;
              DCOMP._IOwnership _out2044;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2045;
              (this).GenExpr(_9180_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2043, out _out2044, out _out2045);
              _9185_onExpr = _out2043;
              _9186_onOwned = _out2044;
              _9187_recIdents = _out2045;
              r = _9185_onExpr;
              if (!object.Equals(_9185_onExpr, RAST.__default.self)) {
                RAST._IExpr _source361 = _9185_onExpr;
                if (_source361.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9188___mcc_h7663 = _source361.dtor_content;
                } else if (_source361.is_ExprFromType) {
                  RAST._IType _9189___mcc_h7665 = _source361.dtor_tpe;
                } else if (_source361.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9190___mcc_h7667 = _source361.dtor_name;
                } else if (_source361.is_Match) {
                  RAST._IExpr _9191___mcc_h7669 = _source361.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9192___mcc_h7670 = _source361.dtor_cases;
                } else if (_source361.is_StmtExpr) {
                  RAST._IExpr _9193___mcc_h7673 = _source361.dtor_stmt;
                  RAST._IExpr _9194___mcc_h7674 = _source361.dtor_rhs;
                } else if (_source361.is_Block) {
                  RAST._IExpr _9195___mcc_h7677 = _source361.dtor_underlying;
                } else if (_source361.is_StructBuild) {
                  RAST._IExpr _9196___mcc_h7679 = _source361.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9197___mcc_h7680 = _source361.dtor_assignments;
                } else if (_source361.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9198___mcc_h7683 = _source361.dtor_arguments;
                } else if (_source361.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9199___mcc_h7685 = _source361.dtor_op1;
                  RAST._IExpr _9200___mcc_h7686 = _source361.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9201___mcc_h7687 = _source361.dtor_format;
                  if (object.Equals(_9199___mcc_h7685, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source362 = _9200___mcc_h7686;
                    if (_source362.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9202___mcc_h7691 = _source362.dtor_content;
                    } else if (_source362.is_ExprFromType) {
                      RAST._IType _9203___mcc_h7693 = _source362.dtor_tpe;
                    } else if (_source362.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9204___mcc_h7695 = _source362.dtor_name;
                      if (object.Equals(_9204___mcc_h7695, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source362.is_Match) {
                      RAST._IExpr _9205___mcc_h7697 = _source362.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9206___mcc_h7698 = _source362.dtor_cases;
                    } else if (_source362.is_StmtExpr) {
                      RAST._IExpr _9207___mcc_h7701 = _source362.dtor_stmt;
                      RAST._IExpr _9208___mcc_h7702 = _source362.dtor_rhs;
                    } else if (_source362.is_Block) {
                      RAST._IExpr _9209___mcc_h7705 = _source362.dtor_underlying;
                    } else if (_source362.is_StructBuild) {
                      RAST._IExpr _9210___mcc_h7707 = _source362.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9211___mcc_h7708 = _source362.dtor_assignments;
                    } else if (_source362.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9212___mcc_h7711 = _source362.dtor_arguments;
                    } else if (_source362.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9213___mcc_h7713 = _source362.dtor_op1;
                      RAST._IExpr _9214___mcc_h7714 = _source362.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9215___mcc_h7715 = _source362.dtor_format;
                    } else if (_source362.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9216___mcc_h7719 = _source362.dtor_op2;
                      RAST._IExpr _9217___mcc_h7720 = _source362.dtor_left;
                      RAST._IExpr _9218___mcc_h7721 = _source362.dtor_right;
                      DAST.Format._IBinaryOpFormat _9219___mcc_h7722 = _source362.dtor_format2;
                    } else if (_source362.is_TypeAscription) {
                      RAST._IExpr _9220___mcc_h7727 = _source362.dtor_left;
                      RAST._IType _9221___mcc_h7728 = _source362.dtor_tpe;
                    } else if (_source362.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9222___mcc_h7731 = _source362.dtor_value;
                    } else if (_source362.is_LiteralBool) {
                      bool _9223___mcc_h7733 = _source362.dtor_bvalue;
                    } else if (_source362.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9224___mcc_h7735 = _source362.dtor_value;
                      bool _9225___mcc_h7736 = _source362.dtor_binary;
                    } else if (_source362.is_DeclareVar) {
                      RAST._IDeclareType _9226___mcc_h7739 = _source362.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9227___mcc_h7740 = _source362.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9228___mcc_h7741 = _source362.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9229___mcc_h7742 = _source362.dtor_optRhs;
                    } else if (_source362.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9230___mcc_h7747 = _source362.dtor_names;
                      RAST._IExpr _9231___mcc_h7748 = _source362.dtor_rhs;
                    } else if (_source362.is_IfExpr) {
                      RAST._IExpr _9232___mcc_h7751 = _source362.dtor_cond;
                      RAST._IExpr _9233___mcc_h7752 = _source362.dtor_thn;
                      RAST._IExpr _9234___mcc_h7753 = _source362.dtor_els;
                    } else if (_source362.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9235___mcc_h7757 = _source362.dtor_optCond;
                      RAST._IExpr _9236___mcc_h7758 = _source362.dtor_underlying;
                    } else if (_source362.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9237___mcc_h7761 = _source362.dtor_name;
                      RAST._IExpr _9238___mcc_h7762 = _source362.dtor_range;
                      RAST._IExpr _9239___mcc_h7763 = _source362.dtor_body;
                    } else if (_source362.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9240___mcc_h7767 = _source362.dtor_lbl;
                      RAST._IExpr _9241___mcc_h7768 = _source362.dtor_underlying;
                    } else if (_source362.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9242___mcc_h7771 = _source362.dtor_optLbl;
                    } else if (_source362.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9243___mcc_h7773 = _source362.dtor_optLbl;
                    } else if (_source362.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9244___mcc_h7775 = _source362.dtor_optExpr;
                    } else if (_source362.is_CallType) {
                      RAST._IExpr _9245___mcc_h7777 = _source362.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9246___mcc_h7778 = _source362.dtor_typeParameters;
                    } else if (_source362.is_Call) {
                      RAST._IExpr _9247___mcc_h7781 = _source362.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9248___mcc_h7782 = _source362.dtor_arguments;
                    } else if (_source362.is_Select) {
                      RAST._IExpr _9249___mcc_h7785 = _source362.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9250___mcc_h7786 = _source362.dtor_name;
                    } else if (_source362.is_MemberSelect) {
                      RAST._IExpr _9251___mcc_h7789 = _source362.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9252___mcc_h7790 = _source362.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9253___mcc_h7793 = _source362.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9254___mcc_h7794 = _source362.dtor_retType;
                      RAST._IExpr _9255___mcc_h7795 = _source362.dtor_body;
                    }
                  } else {
                  }
                } else if (_source361.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9256___mcc_h7799 = _source361.dtor_op2;
                  RAST._IExpr _9257___mcc_h7800 = _source361.dtor_left;
                  RAST._IExpr _9258___mcc_h7801 = _source361.dtor_right;
                  DAST.Format._IBinaryOpFormat _9259___mcc_h7802 = _source361.dtor_format2;
                } else if (_source361.is_TypeAscription) {
                  RAST._IExpr _9260___mcc_h7807 = _source361.dtor_left;
                  RAST._IType _9261___mcc_h7808 = _source361.dtor_tpe;
                } else if (_source361.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9262___mcc_h7811 = _source361.dtor_value;
                } else if (_source361.is_LiteralBool) {
                  bool _9263___mcc_h7813 = _source361.dtor_bvalue;
                } else if (_source361.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9264___mcc_h7815 = _source361.dtor_value;
                  bool _9265___mcc_h7816 = _source361.dtor_binary;
                } else if (_source361.is_DeclareVar) {
                  RAST._IDeclareType _9266___mcc_h7819 = _source361.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9267___mcc_h7820 = _source361.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9268___mcc_h7821 = _source361.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9269___mcc_h7822 = _source361.dtor_optRhs;
                } else if (_source361.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9270___mcc_h7827 = _source361.dtor_names;
                  RAST._IExpr _9271___mcc_h7828 = _source361.dtor_rhs;
                } else if (_source361.is_IfExpr) {
                  RAST._IExpr _9272___mcc_h7831 = _source361.dtor_cond;
                  RAST._IExpr _9273___mcc_h7832 = _source361.dtor_thn;
                  RAST._IExpr _9274___mcc_h7833 = _source361.dtor_els;
                } else if (_source361.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9275___mcc_h7837 = _source361.dtor_optCond;
                  RAST._IExpr _9276___mcc_h7838 = _source361.dtor_underlying;
                } else if (_source361.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9277___mcc_h7841 = _source361.dtor_name;
                  RAST._IExpr _9278___mcc_h7842 = _source361.dtor_range;
                  RAST._IExpr _9279___mcc_h7843 = _source361.dtor_body;
                } else if (_source361.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9280___mcc_h7847 = _source361.dtor_lbl;
                  RAST._IExpr _9281___mcc_h7848 = _source361.dtor_underlying;
                } else if (_source361.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9282___mcc_h7851 = _source361.dtor_optLbl;
                } else if (_source361.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9283___mcc_h7853 = _source361.dtor_optLbl;
                } else if (_source361.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9284___mcc_h7855 = _source361.dtor_optExpr;
                } else if (_source361.is_CallType) {
                  RAST._IExpr _9285___mcc_h7857 = _source361.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9286___mcc_h7858 = _source361.dtor_typeParameters;
                } else if (_source361.is_Call) {
                  RAST._IExpr _9287___mcc_h7861 = _source361.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9288___mcc_h7862 = _source361.dtor_arguments;
                } else if (_source361.is_Select) {
                  RAST._IExpr _9289___mcc_h7865 = _source361.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9290___mcc_h7866 = _source361.dtor_name;
                } else if (_source361.is_MemberSelect) {
                  RAST._IExpr _9291___mcc_h7869 = _source361.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9292___mcc_h7870 = _source361.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9293___mcc_h7873 = _source361.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9294___mcc_h7874 = _source361.dtor_retType;
                  RAST._IExpr _9295___mcc_h7875 = _source361.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9179_field));
              if (_9178_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _9296_fromOwnership;
              _9296_fromOwnership = ((_9178_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2046;
              DCOMP._IOwnership _out2047;
              DCOMP.COMP.FromOwnership(r, _9296_fromOwnership, expectedOwnership, out _out2046, out _out2047);
              r = _out2046;
              resultingOwnership = _out2047;
              readIdents = _9187_recIdents;
            }
            return ;
          }
        } else if (_source292.is_Apply) {
          DAST._IExpression _9297___mcc_h232 = _source292.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _9298___mcc_h233 = _source292.dtor_args;
          DAST._IType _9299_fieldType = _4966___mcc_h57;
          bool _9300_isDatatype = _4965___mcc_h56;
          bool _9301_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _9302_field = _4963___mcc_h54;
          DAST._IExpression _9303_on = _4962___mcc_h53;
          {
            if (_9300_isDatatype) {
              RAST._IExpr _9304_onExpr;
              DCOMP._IOwnership _9305_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9306_recIdents;
              RAST._IExpr _out2048;
              DCOMP._IOwnership _out2049;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2050;
              (this).GenExpr(_9303_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2048, out _out2049, out _out2050);
              _9304_onExpr = _out2048;
              _9305_onOwned = _out2049;
              _9306_recIdents = _out2050;
              r = ((_9304_onExpr).Sel(DCOMP.__default.escapeName(_9302_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9307_typ;
              RAST._IType _out2051;
              _out2051 = (this).GenType(_9299_fieldType, false, false);
              _9307_typ = _out2051;
              if (((_9307_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2052;
                DCOMP._IOwnership _out2053;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2052, out _out2053);
                r = _out2052;
                resultingOwnership = _out2053;
              }
              readIdents = _9306_recIdents;
            } else {
              RAST._IExpr _9308_onExpr;
              DCOMP._IOwnership _9309_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9310_recIdents;
              RAST._IExpr _out2054;
              DCOMP._IOwnership _out2055;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2056;
              (this).GenExpr(_9303_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2054, out _out2055, out _out2056);
              _9308_onExpr = _out2054;
              _9309_onOwned = _out2055;
              _9310_recIdents = _out2056;
              r = _9308_onExpr;
              if (!object.Equals(_9308_onExpr, RAST.__default.self)) {
                RAST._IExpr _source363 = _9308_onExpr;
                if (_source363.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9311___mcc_h7879 = _source363.dtor_content;
                } else if (_source363.is_ExprFromType) {
                  RAST._IType _9312___mcc_h7881 = _source363.dtor_tpe;
                } else if (_source363.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9313___mcc_h7883 = _source363.dtor_name;
                } else if (_source363.is_Match) {
                  RAST._IExpr _9314___mcc_h7885 = _source363.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9315___mcc_h7886 = _source363.dtor_cases;
                } else if (_source363.is_StmtExpr) {
                  RAST._IExpr _9316___mcc_h7889 = _source363.dtor_stmt;
                  RAST._IExpr _9317___mcc_h7890 = _source363.dtor_rhs;
                } else if (_source363.is_Block) {
                  RAST._IExpr _9318___mcc_h7893 = _source363.dtor_underlying;
                } else if (_source363.is_StructBuild) {
                  RAST._IExpr _9319___mcc_h7895 = _source363.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9320___mcc_h7896 = _source363.dtor_assignments;
                } else if (_source363.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9321___mcc_h7899 = _source363.dtor_arguments;
                } else if (_source363.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9322___mcc_h7901 = _source363.dtor_op1;
                  RAST._IExpr _9323___mcc_h7902 = _source363.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9324___mcc_h7903 = _source363.dtor_format;
                  if (object.Equals(_9322___mcc_h7901, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source364 = _9323___mcc_h7902;
                    if (_source364.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9325___mcc_h7907 = _source364.dtor_content;
                    } else if (_source364.is_ExprFromType) {
                      RAST._IType _9326___mcc_h7909 = _source364.dtor_tpe;
                    } else if (_source364.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9327___mcc_h7911 = _source364.dtor_name;
                      if (object.Equals(_9327___mcc_h7911, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source364.is_Match) {
                      RAST._IExpr _9328___mcc_h7913 = _source364.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9329___mcc_h7914 = _source364.dtor_cases;
                    } else if (_source364.is_StmtExpr) {
                      RAST._IExpr _9330___mcc_h7917 = _source364.dtor_stmt;
                      RAST._IExpr _9331___mcc_h7918 = _source364.dtor_rhs;
                    } else if (_source364.is_Block) {
                      RAST._IExpr _9332___mcc_h7921 = _source364.dtor_underlying;
                    } else if (_source364.is_StructBuild) {
                      RAST._IExpr _9333___mcc_h7923 = _source364.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9334___mcc_h7924 = _source364.dtor_assignments;
                    } else if (_source364.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9335___mcc_h7927 = _source364.dtor_arguments;
                    } else if (_source364.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9336___mcc_h7929 = _source364.dtor_op1;
                      RAST._IExpr _9337___mcc_h7930 = _source364.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9338___mcc_h7931 = _source364.dtor_format;
                    } else if (_source364.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9339___mcc_h7935 = _source364.dtor_op2;
                      RAST._IExpr _9340___mcc_h7936 = _source364.dtor_left;
                      RAST._IExpr _9341___mcc_h7937 = _source364.dtor_right;
                      DAST.Format._IBinaryOpFormat _9342___mcc_h7938 = _source364.dtor_format2;
                    } else if (_source364.is_TypeAscription) {
                      RAST._IExpr _9343___mcc_h7943 = _source364.dtor_left;
                      RAST._IType _9344___mcc_h7944 = _source364.dtor_tpe;
                    } else if (_source364.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9345___mcc_h7947 = _source364.dtor_value;
                    } else if (_source364.is_LiteralBool) {
                      bool _9346___mcc_h7949 = _source364.dtor_bvalue;
                    } else if (_source364.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9347___mcc_h7951 = _source364.dtor_value;
                      bool _9348___mcc_h7952 = _source364.dtor_binary;
                    } else if (_source364.is_DeclareVar) {
                      RAST._IDeclareType _9349___mcc_h7955 = _source364.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9350___mcc_h7956 = _source364.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9351___mcc_h7957 = _source364.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9352___mcc_h7958 = _source364.dtor_optRhs;
                    } else if (_source364.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9353___mcc_h7963 = _source364.dtor_names;
                      RAST._IExpr _9354___mcc_h7964 = _source364.dtor_rhs;
                    } else if (_source364.is_IfExpr) {
                      RAST._IExpr _9355___mcc_h7967 = _source364.dtor_cond;
                      RAST._IExpr _9356___mcc_h7968 = _source364.dtor_thn;
                      RAST._IExpr _9357___mcc_h7969 = _source364.dtor_els;
                    } else if (_source364.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9358___mcc_h7973 = _source364.dtor_optCond;
                      RAST._IExpr _9359___mcc_h7974 = _source364.dtor_underlying;
                    } else if (_source364.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9360___mcc_h7977 = _source364.dtor_name;
                      RAST._IExpr _9361___mcc_h7978 = _source364.dtor_range;
                      RAST._IExpr _9362___mcc_h7979 = _source364.dtor_body;
                    } else if (_source364.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9363___mcc_h7983 = _source364.dtor_lbl;
                      RAST._IExpr _9364___mcc_h7984 = _source364.dtor_underlying;
                    } else if (_source364.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9365___mcc_h7987 = _source364.dtor_optLbl;
                    } else if (_source364.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9366___mcc_h7989 = _source364.dtor_optLbl;
                    } else if (_source364.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9367___mcc_h7991 = _source364.dtor_optExpr;
                    } else if (_source364.is_CallType) {
                      RAST._IExpr _9368___mcc_h7993 = _source364.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9369___mcc_h7994 = _source364.dtor_typeParameters;
                    } else if (_source364.is_Call) {
                      RAST._IExpr _9370___mcc_h7997 = _source364.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9371___mcc_h7998 = _source364.dtor_arguments;
                    } else if (_source364.is_Select) {
                      RAST._IExpr _9372___mcc_h8001 = _source364.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9373___mcc_h8002 = _source364.dtor_name;
                    } else if (_source364.is_MemberSelect) {
                      RAST._IExpr _9374___mcc_h8005 = _source364.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9375___mcc_h8006 = _source364.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9376___mcc_h8009 = _source364.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9377___mcc_h8010 = _source364.dtor_retType;
                      RAST._IExpr _9378___mcc_h8011 = _source364.dtor_body;
                    }
                  } else {
                  }
                } else if (_source363.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9379___mcc_h8015 = _source363.dtor_op2;
                  RAST._IExpr _9380___mcc_h8016 = _source363.dtor_left;
                  RAST._IExpr _9381___mcc_h8017 = _source363.dtor_right;
                  DAST.Format._IBinaryOpFormat _9382___mcc_h8018 = _source363.dtor_format2;
                } else if (_source363.is_TypeAscription) {
                  RAST._IExpr _9383___mcc_h8023 = _source363.dtor_left;
                  RAST._IType _9384___mcc_h8024 = _source363.dtor_tpe;
                } else if (_source363.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9385___mcc_h8027 = _source363.dtor_value;
                } else if (_source363.is_LiteralBool) {
                  bool _9386___mcc_h8029 = _source363.dtor_bvalue;
                } else if (_source363.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9387___mcc_h8031 = _source363.dtor_value;
                  bool _9388___mcc_h8032 = _source363.dtor_binary;
                } else if (_source363.is_DeclareVar) {
                  RAST._IDeclareType _9389___mcc_h8035 = _source363.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9390___mcc_h8036 = _source363.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9391___mcc_h8037 = _source363.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9392___mcc_h8038 = _source363.dtor_optRhs;
                } else if (_source363.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9393___mcc_h8043 = _source363.dtor_names;
                  RAST._IExpr _9394___mcc_h8044 = _source363.dtor_rhs;
                } else if (_source363.is_IfExpr) {
                  RAST._IExpr _9395___mcc_h8047 = _source363.dtor_cond;
                  RAST._IExpr _9396___mcc_h8048 = _source363.dtor_thn;
                  RAST._IExpr _9397___mcc_h8049 = _source363.dtor_els;
                } else if (_source363.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9398___mcc_h8053 = _source363.dtor_optCond;
                  RAST._IExpr _9399___mcc_h8054 = _source363.dtor_underlying;
                } else if (_source363.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9400___mcc_h8057 = _source363.dtor_name;
                  RAST._IExpr _9401___mcc_h8058 = _source363.dtor_range;
                  RAST._IExpr _9402___mcc_h8059 = _source363.dtor_body;
                } else if (_source363.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9403___mcc_h8063 = _source363.dtor_lbl;
                  RAST._IExpr _9404___mcc_h8064 = _source363.dtor_underlying;
                } else if (_source363.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9405___mcc_h8067 = _source363.dtor_optLbl;
                } else if (_source363.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9406___mcc_h8069 = _source363.dtor_optLbl;
                } else if (_source363.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9407___mcc_h8071 = _source363.dtor_optExpr;
                } else if (_source363.is_CallType) {
                  RAST._IExpr _9408___mcc_h8073 = _source363.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9409___mcc_h8074 = _source363.dtor_typeParameters;
                } else if (_source363.is_Call) {
                  RAST._IExpr _9410___mcc_h8077 = _source363.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9411___mcc_h8078 = _source363.dtor_arguments;
                } else if (_source363.is_Select) {
                  RAST._IExpr _9412___mcc_h8081 = _source363.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9413___mcc_h8082 = _source363.dtor_name;
                } else if (_source363.is_MemberSelect) {
                  RAST._IExpr _9414___mcc_h8085 = _source363.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9415___mcc_h8086 = _source363.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9416___mcc_h8089 = _source363.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9417___mcc_h8090 = _source363.dtor_retType;
                  RAST._IExpr _9418___mcc_h8091 = _source363.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9302_field));
              if (_9301_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _9419_fromOwnership;
              _9419_fromOwnership = ((_9301_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2057;
              DCOMP._IOwnership _out2058;
              DCOMP.COMP.FromOwnership(r, _9419_fromOwnership, expectedOwnership, out _out2057, out _out2058);
              r = _out2057;
              resultingOwnership = _out2058;
              readIdents = _9310_recIdents;
            }
            return ;
          }
        } else if (_source292.is_TypeTest) {
          DAST._IExpression _9420___mcc_h236 = _source292.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9421___mcc_h237 = _source292.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _9422___mcc_h238 = _source292.dtor_variant;
          DAST._IType _9423_fieldType = _4966___mcc_h57;
          bool _9424_isDatatype = _4965___mcc_h56;
          bool _9425_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _9426_field = _4963___mcc_h54;
          DAST._IExpression _9427_on = _4962___mcc_h53;
          {
            if (_9424_isDatatype) {
              RAST._IExpr _9428_onExpr;
              DCOMP._IOwnership _9429_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9430_recIdents;
              RAST._IExpr _out2059;
              DCOMP._IOwnership _out2060;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2061;
              (this).GenExpr(_9427_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2059, out _out2060, out _out2061);
              _9428_onExpr = _out2059;
              _9429_onOwned = _out2060;
              _9430_recIdents = _out2061;
              r = ((_9428_onExpr).Sel(DCOMP.__default.escapeName(_9426_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9431_typ;
              RAST._IType _out2062;
              _out2062 = (this).GenType(_9423_fieldType, false, false);
              _9431_typ = _out2062;
              if (((_9431_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2063;
                DCOMP._IOwnership _out2064;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2063, out _out2064);
                r = _out2063;
                resultingOwnership = _out2064;
              }
              readIdents = _9430_recIdents;
            } else {
              RAST._IExpr _9432_onExpr;
              DCOMP._IOwnership _9433_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9434_recIdents;
              RAST._IExpr _out2065;
              DCOMP._IOwnership _out2066;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2067;
              (this).GenExpr(_9427_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2065, out _out2066, out _out2067);
              _9432_onExpr = _out2065;
              _9433_onOwned = _out2066;
              _9434_recIdents = _out2067;
              r = _9432_onExpr;
              if (!object.Equals(_9432_onExpr, RAST.__default.self)) {
                RAST._IExpr _source365 = _9432_onExpr;
                if (_source365.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9435___mcc_h8095 = _source365.dtor_content;
                } else if (_source365.is_ExprFromType) {
                  RAST._IType _9436___mcc_h8097 = _source365.dtor_tpe;
                } else if (_source365.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9437___mcc_h8099 = _source365.dtor_name;
                } else if (_source365.is_Match) {
                  RAST._IExpr _9438___mcc_h8101 = _source365.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9439___mcc_h8102 = _source365.dtor_cases;
                } else if (_source365.is_StmtExpr) {
                  RAST._IExpr _9440___mcc_h8105 = _source365.dtor_stmt;
                  RAST._IExpr _9441___mcc_h8106 = _source365.dtor_rhs;
                } else if (_source365.is_Block) {
                  RAST._IExpr _9442___mcc_h8109 = _source365.dtor_underlying;
                } else if (_source365.is_StructBuild) {
                  RAST._IExpr _9443___mcc_h8111 = _source365.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9444___mcc_h8112 = _source365.dtor_assignments;
                } else if (_source365.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9445___mcc_h8115 = _source365.dtor_arguments;
                } else if (_source365.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9446___mcc_h8117 = _source365.dtor_op1;
                  RAST._IExpr _9447___mcc_h8118 = _source365.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9448___mcc_h8119 = _source365.dtor_format;
                  if (object.Equals(_9446___mcc_h8117, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source366 = _9447___mcc_h8118;
                    if (_source366.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9449___mcc_h8123 = _source366.dtor_content;
                    } else if (_source366.is_ExprFromType) {
                      RAST._IType _9450___mcc_h8125 = _source366.dtor_tpe;
                    } else if (_source366.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9451___mcc_h8127 = _source366.dtor_name;
                      if (object.Equals(_9451___mcc_h8127, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source366.is_Match) {
                      RAST._IExpr _9452___mcc_h8129 = _source366.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9453___mcc_h8130 = _source366.dtor_cases;
                    } else if (_source366.is_StmtExpr) {
                      RAST._IExpr _9454___mcc_h8133 = _source366.dtor_stmt;
                      RAST._IExpr _9455___mcc_h8134 = _source366.dtor_rhs;
                    } else if (_source366.is_Block) {
                      RAST._IExpr _9456___mcc_h8137 = _source366.dtor_underlying;
                    } else if (_source366.is_StructBuild) {
                      RAST._IExpr _9457___mcc_h8139 = _source366.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9458___mcc_h8140 = _source366.dtor_assignments;
                    } else if (_source366.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9459___mcc_h8143 = _source366.dtor_arguments;
                    } else if (_source366.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9460___mcc_h8145 = _source366.dtor_op1;
                      RAST._IExpr _9461___mcc_h8146 = _source366.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9462___mcc_h8147 = _source366.dtor_format;
                    } else if (_source366.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9463___mcc_h8151 = _source366.dtor_op2;
                      RAST._IExpr _9464___mcc_h8152 = _source366.dtor_left;
                      RAST._IExpr _9465___mcc_h8153 = _source366.dtor_right;
                      DAST.Format._IBinaryOpFormat _9466___mcc_h8154 = _source366.dtor_format2;
                    } else if (_source366.is_TypeAscription) {
                      RAST._IExpr _9467___mcc_h8159 = _source366.dtor_left;
                      RAST._IType _9468___mcc_h8160 = _source366.dtor_tpe;
                    } else if (_source366.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9469___mcc_h8163 = _source366.dtor_value;
                    } else if (_source366.is_LiteralBool) {
                      bool _9470___mcc_h8165 = _source366.dtor_bvalue;
                    } else if (_source366.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9471___mcc_h8167 = _source366.dtor_value;
                      bool _9472___mcc_h8168 = _source366.dtor_binary;
                    } else if (_source366.is_DeclareVar) {
                      RAST._IDeclareType _9473___mcc_h8171 = _source366.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9474___mcc_h8172 = _source366.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9475___mcc_h8173 = _source366.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9476___mcc_h8174 = _source366.dtor_optRhs;
                    } else if (_source366.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9477___mcc_h8179 = _source366.dtor_names;
                      RAST._IExpr _9478___mcc_h8180 = _source366.dtor_rhs;
                    } else if (_source366.is_IfExpr) {
                      RAST._IExpr _9479___mcc_h8183 = _source366.dtor_cond;
                      RAST._IExpr _9480___mcc_h8184 = _source366.dtor_thn;
                      RAST._IExpr _9481___mcc_h8185 = _source366.dtor_els;
                    } else if (_source366.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9482___mcc_h8189 = _source366.dtor_optCond;
                      RAST._IExpr _9483___mcc_h8190 = _source366.dtor_underlying;
                    } else if (_source366.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9484___mcc_h8193 = _source366.dtor_name;
                      RAST._IExpr _9485___mcc_h8194 = _source366.dtor_range;
                      RAST._IExpr _9486___mcc_h8195 = _source366.dtor_body;
                    } else if (_source366.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9487___mcc_h8199 = _source366.dtor_lbl;
                      RAST._IExpr _9488___mcc_h8200 = _source366.dtor_underlying;
                    } else if (_source366.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9489___mcc_h8203 = _source366.dtor_optLbl;
                    } else if (_source366.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9490___mcc_h8205 = _source366.dtor_optLbl;
                    } else if (_source366.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9491___mcc_h8207 = _source366.dtor_optExpr;
                    } else if (_source366.is_CallType) {
                      RAST._IExpr _9492___mcc_h8209 = _source366.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9493___mcc_h8210 = _source366.dtor_typeParameters;
                    } else if (_source366.is_Call) {
                      RAST._IExpr _9494___mcc_h8213 = _source366.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9495___mcc_h8214 = _source366.dtor_arguments;
                    } else if (_source366.is_Select) {
                      RAST._IExpr _9496___mcc_h8217 = _source366.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9497___mcc_h8218 = _source366.dtor_name;
                    } else if (_source366.is_MemberSelect) {
                      RAST._IExpr _9498___mcc_h8221 = _source366.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9499___mcc_h8222 = _source366.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9500___mcc_h8225 = _source366.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9501___mcc_h8226 = _source366.dtor_retType;
                      RAST._IExpr _9502___mcc_h8227 = _source366.dtor_body;
                    }
                  } else {
                  }
                } else if (_source365.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9503___mcc_h8231 = _source365.dtor_op2;
                  RAST._IExpr _9504___mcc_h8232 = _source365.dtor_left;
                  RAST._IExpr _9505___mcc_h8233 = _source365.dtor_right;
                  DAST.Format._IBinaryOpFormat _9506___mcc_h8234 = _source365.dtor_format2;
                } else if (_source365.is_TypeAscription) {
                  RAST._IExpr _9507___mcc_h8239 = _source365.dtor_left;
                  RAST._IType _9508___mcc_h8240 = _source365.dtor_tpe;
                } else if (_source365.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9509___mcc_h8243 = _source365.dtor_value;
                } else if (_source365.is_LiteralBool) {
                  bool _9510___mcc_h8245 = _source365.dtor_bvalue;
                } else if (_source365.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9511___mcc_h8247 = _source365.dtor_value;
                  bool _9512___mcc_h8248 = _source365.dtor_binary;
                } else if (_source365.is_DeclareVar) {
                  RAST._IDeclareType _9513___mcc_h8251 = _source365.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9514___mcc_h8252 = _source365.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9515___mcc_h8253 = _source365.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9516___mcc_h8254 = _source365.dtor_optRhs;
                } else if (_source365.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9517___mcc_h8259 = _source365.dtor_names;
                  RAST._IExpr _9518___mcc_h8260 = _source365.dtor_rhs;
                } else if (_source365.is_IfExpr) {
                  RAST._IExpr _9519___mcc_h8263 = _source365.dtor_cond;
                  RAST._IExpr _9520___mcc_h8264 = _source365.dtor_thn;
                  RAST._IExpr _9521___mcc_h8265 = _source365.dtor_els;
                } else if (_source365.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9522___mcc_h8269 = _source365.dtor_optCond;
                  RAST._IExpr _9523___mcc_h8270 = _source365.dtor_underlying;
                } else if (_source365.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9524___mcc_h8273 = _source365.dtor_name;
                  RAST._IExpr _9525___mcc_h8274 = _source365.dtor_range;
                  RAST._IExpr _9526___mcc_h8275 = _source365.dtor_body;
                } else if (_source365.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9527___mcc_h8279 = _source365.dtor_lbl;
                  RAST._IExpr _9528___mcc_h8280 = _source365.dtor_underlying;
                } else if (_source365.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9529___mcc_h8283 = _source365.dtor_optLbl;
                } else if (_source365.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9530___mcc_h8285 = _source365.dtor_optLbl;
                } else if (_source365.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9531___mcc_h8287 = _source365.dtor_optExpr;
                } else if (_source365.is_CallType) {
                  RAST._IExpr _9532___mcc_h8289 = _source365.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9533___mcc_h8290 = _source365.dtor_typeParameters;
                } else if (_source365.is_Call) {
                  RAST._IExpr _9534___mcc_h8293 = _source365.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9535___mcc_h8294 = _source365.dtor_arguments;
                } else if (_source365.is_Select) {
                  RAST._IExpr _9536___mcc_h8297 = _source365.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9537___mcc_h8298 = _source365.dtor_name;
                } else if (_source365.is_MemberSelect) {
                  RAST._IExpr _9538___mcc_h8301 = _source365.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9539___mcc_h8302 = _source365.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9540___mcc_h8305 = _source365.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9541___mcc_h8306 = _source365.dtor_retType;
                  RAST._IExpr _9542___mcc_h8307 = _source365.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9426_field));
              if (_9425_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _9543_fromOwnership;
              _9543_fromOwnership = ((_9425_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2068;
              DCOMP._IOwnership _out2069;
              DCOMP.COMP.FromOwnership(r, _9543_fromOwnership, expectedOwnership, out _out2068, out _out2069);
              r = _out2068;
              resultingOwnership = _out2069;
              readIdents = _9434_recIdents;
            }
            return ;
          }
        } else if (_source292.is_InitializationValue) {
          DAST._IType _9544___mcc_h242 = _source292.dtor_typ;
          DAST._IType _9545_fieldType = _4966___mcc_h57;
          bool _9546_isDatatype = _4965___mcc_h56;
          bool _9547_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _9548_field = _4963___mcc_h54;
          DAST._IExpression _9549_on = _4962___mcc_h53;
          {
            if (_9546_isDatatype) {
              RAST._IExpr _9550_onExpr;
              DCOMP._IOwnership _9551_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9552_recIdents;
              RAST._IExpr _out2070;
              DCOMP._IOwnership _out2071;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2072;
              (this).GenExpr(_9549_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2070, out _out2071, out _out2072);
              _9550_onExpr = _out2070;
              _9551_onOwned = _out2071;
              _9552_recIdents = _out2072;
              r = ((_9550_onExpr).Sel(DCOMP.__default.escapeName(_9548_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9553_typ;
              RAST._IType _out2073;
              _out2073 = (this).GenType(_9545_fieldType, false, false);
              _9553_typ = _out2073;
              if (((_9553_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2074;
                DCOMP._IOwnership _out2075;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2074, out _out2075);
                r = _out2074;
                resultingOwnership = _out2075;
              }
              readIdents = _9552_recIdents;
            } else {
              RAST._IExpr _9554_onExpr;
              DCOMP._IOwnership _9555_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9556_recIdents;
              RAST._IExpr _out2076;
              DCOMP._IOwnership _out2077;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2078;
              (this).GenExpr(_9549_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2076, out _out2077, out _out2078);
              _9554_onExpr = _out2076;
              _9555_onOwned = _out2077;
              _9556_recIdents = _out2078;
              r = _9554_onExpr;
              if (!object.Equals(_9554_onExpr, RAST.__default.self)) {
                RAST._IExpr _source367 = _9554_onExpr;
                if (_source367.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9557___mcc_h8311 = _source367.dtor_content;
                } else if (_source367.is_ExprFromType) {
                  RAST._IType _9558___mcc_h8313 = _source367.dtor_tpe;
                } else if (_source367.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9559___mcc_h8315 = _source367.dtor_name;
                } else if (_source367.is_Match) {
                  RAST._IExpr _9560___mcc_h8317 = _source367.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9561___mcc_h8318 = _source367.dtor_cases;
                } else if (_source367.is_StmtExpr) {
                  RAST._IExpr _9562___mcc_h8321 = _source367.dtor_stmt;
                  RAST._IExpr _9563___mcc_h8322 = _source367.dtor_rhs;
                } else if (_source367.is_Block) {
                  RAST._IExpr _9564___mcc_h8325 = _source367.dtor_underlying;
                } else if (_source367.is_StructBuild) {
                  RAST._IExpr _9565___mcc_h8327 = _source367.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9566___mcc_h8328 = _source367.dtor_assignments;
                } else if (_source367.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9567___mcc_h8331 = _source367.dtor_arguments;
                } else if (_source367.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9568___mcc_h8333 = _source367.dtor_op1;
                  RAST._IExpr _9569___mcc_h8334 = _source367.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9570___mcc_h8335 = _source367.dtor_format;
                  if (object.Equals(_9568___mcc_h8333, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source368 = _9569___mcc_h8334;
                    if (_source368.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9571___mcc_h8339 = _source368.dtor_content;
                    } else if (_source368.is_ExprFromType) {
                      RAST._IType _9572___mcc_h8341 = _source368.dtor_tpe;
                    } else if (_source368.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9573___mcc_h8343 = _source368.dtor_name;
                      if (object.Equals(_9573___mcc_h8343, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source368.is_Match) {
                      RAST._IExpr _9574___mcc_h8345 = _source368.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9575___mcc_h8346 = _source368.dtor_cases;
                    } else if (_source368.is_StmtExpr) {
                      RAST._IExpr _9576___mcc_h8349 = _source368.dtor_stmt;
                      RAST._IExpr _9577___mcc_h8350 = _source368.dtor_rhs;
                    } else if (_source368.is_Block) {
                      RAST._IExpr _9578___mcc_h8353 = _source368.dtor_underlying;
                    } else if (_source368.is_StructBuild) {
                      RAST._IExpr _9579___mcc_h8355 = _source368.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9580___mcc_h8356 = _source368.dtor_assignments;
                    } else if (_source368.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9581___mcc_h8359 = _source368.dtor_arguments;
                    } else if (_source368.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9582___mcc_h8361 = _source368.dtor_op1;
                      RAST._IExpr _9583___mcc_h8362 = _source368.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9584___mcc_h8363 = _source368.dtor_format;
                    } else if (_source368.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9585___mcc_h8367 = _source368.dtor_op2;
                      RAST._IExpr _9586___mcc_h8368 = _source368.dtor_left;
                      RAST._IExpr _9587___mcc_h8369 = _source368.dtor_right;
                      DAST.Format._IBinaryOpFormat _9588___mcc_h8370 = _source368.dtor_format2;
                    } else if (_source368.is_TypeAscription) {
                      RAST._IExpr _9589___mcc_h8375 = _source368.dtor_left;
                      RAST._IType _9590___mcc_h8376 = _source368.dtor_tpe;
                    } else if (_source368.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9591___mcc_h8379 = _source368.dtor_value;
                    } else if (_source368.is_LiteralBool) {
                      bool _9592___mcc_h8381 = _source368.dtor_bvalue;
                    } else if (_source368.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9593___mcc_h8383 = _source368.dtor_value;
                      bool _9594___mcc_h8384 = _source368.dtor_binary;
                    } else if (_source368.is_DeclareVar) {
                      RAST._IDeclareType _9595___mcc_h8387 = _source368.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9596___mcc_h8388 = _source368.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9597___mcc_h8389 = _source368.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9598___mcc_h8390 = _source368.dtor_optRhs;
                    } else if (_source368.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9599___mcc_h8395 = _source368.dtor_names;
                      RAST._IExpr _9600___mcc_h8396 = _source368.dtor_rhs;
                    } else if (_source368.is_IfExpr) {
                      RAST._IExpr _9601___mcc_h8399 = _source368.dtor_cond;
                      RAST._IExpr _9602___mcc_h8400 = _source368.dtor_thn;
                      RAST._IExpr _9603___mcc_h8401 = _source368.dtor_els;
                    } else if (_source368.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9604___mcc_h8405 = _source368.dtor_optCond;
                      RAST._IExpr _9605___mcc_h8406 = _source368.dtor_underlying;
                    } else if (_source368.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9606___mcc_h8409 = _source368.dtor_name;
                      RAST._IExpr _9607___mcc_h8410 = _source368.dtor_range;
                      RAST._IExpr _9608___mcc_h8411 = _source368.dtor_body;
                    } else if (_source368.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9609___mcc_h8415 = _source368.dtor_lbl;
                      RAST._IExpr _9610___mcc_h8416 = _source368.dtor_underlying;
                    } else if (_source368.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9611___mcc_h8419 = _source368.dtor_optLbl;
                    } else if (_source368.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9612___mcc_h8421 = _source368.dtor_optLbl;
                    } else if (_source368.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9613___mcc_h8423 = _source368.dtor_optExpr;
                    } else if (_source368.is_CallType) {
                      RAST._IExpr _9614___mcc_h8425 = _source368.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9615___mcc_h8426 = _source368.dtor_typeParameters;
                    } else if (_source368.is_Call) {
                      RAST._IExpr _9616___mcc_h8429 = _source368.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9617___mcc_h8430 = _source368.dtor_arguments;
                    } else if (_source368.is_Select) {
                      RAST._IExpr _9618___mcc_h8433 = _source368.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9619___mcc_h8434 = _source368.dtor_name;
                    } else if (_source368.is_MemberSelect) {
                      RAST._IExpr _9620___mcc_h8437 = _source368.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9621___mcc_h8438 = _source368.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9622___mcc_h8441 = _source368.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9623___mcc_h8442 = _source368.dtor_retType;
                      RAST._IExpr _9624___mcc_h8443 = _source368.dtor_body;
                    }
                  } else {
                  }
                } else if (_source367.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9625___mcc_h8447 = _source367.dtor_op2;
                  RAST._IExpr _9626___mcc_h8448 = _source367.dtor_left;
                  RAST._IExpr _9627___mcc_h8449 = _source367.dtor_right;
                  DAST.Format._IBinaryOpFormat _9628___mcc_h8450 = _source367.dtor_format2;
                } else if (_source367.is_TypeAscription) {
                  RAST._IExpr _9629___mcc_h8455 = _source367.dtor_left;
                  RAST._IType _9630___mcc_h8456 = _source367.dtor_tpe;
                } else if (_source367.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9631___mcc_h8459 = _source367.dtor_value;
                } else if (_source367.is_LiteralBool) {
                  bool _9632___mcc_h8461 = _source367.dtor_bvalue;
                } else if (_source367.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9633___mcc_h8463 = _source367.dtor_value;
                  bool _9634___mcc_h8464 = _source367.dtor_binary;
                } else if (_source367.is_DeclareVar) {
                  RAST._IDeclareType _9635___mcc_h8467 = _source367.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9636___mcc_h8468 = _source367.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9637___mcc_h8469 = _source367.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9638___mcc_h8470 = _source367.dtor_optRhs;
                } else if (_source367.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9639___mcc_h8475 = _source367.dtor_names;
                  RAST._IExpr _9640___mcc_h8476 = _source367.dtor_rhs;
                } else if (_source367.is_IfExpr) {
                  RAST._IExpr _9641___mcc_h8479 = _source367.dtor_cond;
                  RAST._IExpr _9642___mcc_h8480 = _source367.dtor_thn;
                  RAST._IExpr _9643___mcc_h8481 = _source367.dtor_els;
                } else if (_source367.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9644___mcc_h8485 = _source367.dtor_optCond;
                  RAST._IExpr _9645___mcc_h8486 = _source367.dtor_underlying;
                } else if (_source367.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9646___mcc_h8489 = _source367.dtor_name;
                  RAST._IExpr _9647___mcc_h8490 = _source367.dtor_range;
                  RAST._IExpr _9648___mcc_h8491 = _source367.dtor_body;
                } else if (_source367.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9649___mcc_h8495 = _source367.dtor_lbl;
                  RAST._IExpr _9650___mcc_h8496 = _source367.dtor_underlying;
                } else if (_source367.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9651___mcc_h8499 = _source367.dtor_optLbl;
                } else if (_source367.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9652___mcc_h8501 = _source367.dtor_optLbl;
                } else if (_source367.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9653___mcc_h8503 = _source367.dtor_optExpr;
                } else if (_source367.is_CallType) {
                  RAST._IExpr _9654___mcc_h8505 = _source367.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9655___mcc_h8506 = _source367.dtor_typeParameters;
                } else if (_source367.is_Call) {
                  RAST._IExpr _9656___mcc_h8509 = _source367.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9657___mcc_h8510 = _source367.dtor_arguments;
                } else if (_source367.is_Select) {
                  RAST._IExpr _9658___mcc_h8513 = _source367.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9659___mcc_h8514 = _source367.dtor_name;
                } else if (_source367.is_MemberSelect) {
                  RAST._IExpr _9660___mcc_h8517 = _source367.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9661___mcc_h8518 = _source367.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9662___mcc_h8521 = _source367.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9663___mcc_h8522 = _source367.dtor_retType;
                  RAST._IExpr _9664___mcc_h8523 = _source367.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9548_field));
              if (_9547_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _9665_fromOwnership;
              _9665_fromOwnership = ((_9547_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2079;
              DCOMP._IOwnership _out2080;
              DCOMP.COMP.FromOwnership(r, _9665_fromOwnership, expectedOwnership, out _out2079, out _out2080);
              r = _out2079;
              resultingOwnership = _out2080;
              readIdents = _9556_recIdents;
            }
            return ;
          }
        } else if (_source292.is_BoolBoundedPool) {
          DAST._IType _9666_fieldType = _4966___mcc_h57;
          bool _9667_isDatatype = _4965___mcc_h56;
          bool _9668_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _9669_field = _4963___mcc_h54;
          DAST._IExpression _9670_on = _4962___mcc_h53;
          {
            if (_9667_isDatatype) {
              RAST._IExpr _9671_onExpr;
              DCOMP._IOwnership _9672_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9673_recIdents;
              RAST._IExpr _out2081;
              DCOMP._IOwnership _out2082;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2083;
              (this).GenExpr(_9670_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2081, out _out2082, out _out2083);
              _9671_onExpr = _out2081;
              _9672_onOwned = _out2082;
              _9673_recIdents = _out2083;
              r = ((_9671_onExpr).Sel(DCOMP.__default.escapeName(_9669_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9674_typ;
              RAST._IType _out2084;
              _out2084 = (this).GenType(_9666_fieldType, false, false);
              _9674_typ = _out2084;
              if (((_9674_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2085;
                DCOMP._IOwnership _out2086;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2085, out _out2086);
                r = _out2085;
                resultingOwnership = _out2086;
              }
              readIdents = _9673_recIdents;
            } else {
              RAST._IExpr _9675_onExpr;
              DCOMP._IOwnership _9676_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9677_recIdents;
              RAST._IExpr _out2087;
              DCOMP._IOwnership _out2088;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2089;
              (this).GenExpr(_9670_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2087, out _out2088, out _out2089);
              _9675_onExpr = _out2087;
              _9676_onOwned = _out2088;
              _9677_recIdents = _out2089;
              r = _9675_onExpr;
              if (!object.Equals(_9675_onExpr, RAST.__default.self)) {
                RAST._IExpr _source369 = _9675_onExpr;
                if (_source369.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9678___mcc_h8527 = _source369.dtor_content;
                } else if (_source369.is_ExprFromType) {
                  RAST._IType _9679___mcc_h8529 = _source369.dtor_tpe;
                } else if (_source369.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9680___mcc_h8531 = _source369.dtor_name;
                } else if (_source369.is_Match) {
                  RAST._IExpr _9681___mcc_h8533 = _source369.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9682___mcc_h8534 = _source369.dtor_cases;
                } else if (_source369.is_StmtExpr) {
                  RAST._IExpr _9683___mcc_h8537 = _source369.dtor_stmt;
                  RAST._IExpr _9684___mcc_h8538 = _source369.dtor_rhs;
                } else if (_source369.is_Block) {
                  RAST._IExpr _9685___mcc_h8541 = _source369.dtor_underlying;
                } else if (_source369.is_StructBuild) {
                  RAST._IExpr _9686___mcc_h8543 = _source369.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9687___mcc_h8544 = _source369.dtor_assignments;
                } else if (_source369.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9688___mcc_h8547 = _source369.dtor_arguments;
                } else if (_source369.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9689___mcc_h8549 = _source369.dtor_op1;
                  RAST._IExpr _9690___mcc_h8550 = _source369.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9691___mcc_h8551 = _source369.dtor_format;
                  if (object.Equals(_9689___mcc_h8549, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source370 = _9690___mcc_h8550;
                    if (_source370.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9692___mcc_h8555 = _source370.dtor_content;
                    } else if (_source370.is_ExprFromType) {
                      RAST._IType _9693___mcc_h8557 = _source370.dtor_tpe;
                    } else if (_source370.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9694___mcc_h8559 = _source370.dtor_name;
                      if (object.Equals(_9694___mcc_h8559, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source370.is_Match) {
                      RAST._IExpr _9695___mcc_h8561 = _source370.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9696___mcc_h8562 = _source370.dtor_cases;
                    } else if (_source370.is_StmtExpr) {
                      RAST._IExpr _9697___mcc_h8565 = _source370.dtor_stmt;
                      RAST._IExpr _9698___mcc_h8566 = _source370.dtor_rhs;
                    } else if (_source370.is_Block) {
                      RAST._IExpr _9699___mcc_h8569 = _source370.dtor_underlying;
                    } else if (_source370.is_StructBuild) {
                      RAST._IExpr _9700___mcc_h8571 = _source370.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9701___mcc_h8572 = _source370.dtor_assignments;
                    } else if (_source370.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9702___mcc_h8575 = _source370.dtor_arguments;
                    } else if (_source370.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9703___mcc_h8577 = _source370.dtor_op1;
                      RAST._IExpr _9704___mcc_h8578 = _source370.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9705___mcc_h8579 = _source370.dtor_format;
                    } else if (_source370.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9706___mcc_h8583 = _source370.dtor_op2;
                      RAST._IExpr _9707___mcc_h8584 = _source370.dtor_left;
                      RAST._IExpr _9708___mcc_h8585 = _source370.dtor_right;
                      DAST.Format._IBinaryOpFormat _9709___mcc_h8586 = _source370.dtor_format2;
                    } else if (_source370.is_TypeAscription) {
                      RAST._IExpr _9710___mcc_h8591 = _source370.dtor_left;
                      RAST._IType _9711___mcc_h8592 = _source370.dtor_tpe;
                    } else if (_source370.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9712___mcc_h8595 = _source370.dtor_value;
                    } else if (_source370.is_LiteralBool) {
                      bool _9713___mcc_h8597 = _source370.dtor_bvalue;
                    } else if (_source370.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9714___mcc_h8599 = _source370.dtor_value;
                      bool _9715___mcc_h8600 = _source370.dtor_binary;
                    } else if (_source370.is_DeclareVar) {
                      RAST._IDeclareType _9716___mcc_h8603 = _source370.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9717___mcc_h8604 = _source370.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9718___mcc_h8605 = _source370.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9719___mcc_h8606 = _source370.dtor_optRhs;
                    } else if (_source370.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9720___mcc_h8611 = _source370.dtor_names;
                      RAST._IExpr _9721___mcc_h8612 = _source370.dtor_rhs;
                    } else if (_source370.is_IfExpr) {
                      RAST._IExpr _9722___mcc_h8615 = _source370.dtor_cond;
                      RAST._IExpr _9723___mcc_h8616 = _source370.dtor_thn;
                      RAST._IExpr _9724___mcc_h8617 = _source370.dtor_els;
                    } else if (_source370.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9725___mcc_h8621 = _source370.dtor_optCond;
                      RAST._IExpr _9726___mcc_h8622 = _source370.dtor_underlying;
                    } else if (_source370.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9727___mcc_h8625 = _source370.dtor_name;
                      RAST._IExpr _9728___mcc_h8626 = _source370.dtor_range;
                      RAST._IExpr _9729___mcc_h8627 = _source370.dtor_body;
                    } else if (_source370.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9730___mcc_h8631 = _source370.dtor_lbl;
                      RAST._IExpr _9731___mcc_h8632 = _source370.dtor_underlying;
                    } else if (_source370.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9732___mcc_h8635 = _source370.dtor_optLbl;
                    } else if (_source370.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9733___mcc_h8637 = _source370.dtor_optLbl;
                    } else if (_source370.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9734___mcc_h8639 = _source370.dtor_optExpr;
                    } else if (_source370.is_CallType) {
                      RAST._IExpr _9735___mcc_h8641 = _source370.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9736___mcc_h8642 = _source370.dtor_typeParameters;
                    } else if (_source370.is_Call) {
                      RAST._IExpr _9737___mcc_h8645 = _source370.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9738___mcc_h8646 = _source370.dtor_arguments;
                    } else if (_source370.is_Select) {
                      RAST._IExpr _9739___mcc_h8649 = _source370.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9740___mcc_h8650 = _source370.dtor_name;
                    } else if (_source370.is_MemberSelect) {
                      RAST._IExpr _9741___mcc_h8653 = _source370.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9742___mcc_h8654 = _source370.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9743___mcc_h8657 = _source370.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9744___mcc_h8658 = _source370.dtor_retType;
                      RAST._IExpr _9745___mcc_h8659 = _source370.dtor_body;
                    }
                  } else {
                  }
                } else if (_source369.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9746___mcc_h8663 = _source369.dtor_op2;
                  RAST._IExpr _9747___mcc_h8664 = _source369.dtor_left;
                  RAST._IExpr _9748___mcc_h8665 = _source369.dtor_right;
                  DAST.Format._IBinaryOpFormat _9749___mcc_h8666 = _source369.dtor_format2;
                } else if (_source369.is_TypeAscription) {
                  RAST._IExpr _9750___mcc_h8671 = _source369.dtor_left;
                  RAST._IType _9751___mcc_h8672 = _source369.dtor_tpe;
                } else if (_source369.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9752___mcc_h8675 = _source369.dtor_value;
                } else if (_source369.is_LiteralBool) {
                  bool _9753___mcc_h8677 = _source369.dtor_bvalue;
                } else if (_source369.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9754___mcc_h8679 = _source369.dtor_value;
                  bool _9755___mcc_h8680 = _source369.dtor_binary;
                } else if (_source369.is_DeclareVar) {
                  RAST._IDeclareType _9756___mcc_h8683 = _source369.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9757___mcc_h8684 = _source369.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9758___mcc_h8685 = _source369.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9759___mcc_h8686 = _source369.dtor_optRhs;
                } else if (_source369.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9760___mcc_h8691 = _source369.dtor_names;
                  RAST._IExpr _9761___mcc_h8692 = _source369.dtor_rhs;
                } else if (_source369.is_IfExpr) {
                  RAST._IExpr _9762___mcc_h8695 = _source369.dtor_cond;
                  RAST._IExpr _9763___mcc_h8696 = _source369.dtor_thn;
                  RAST._IExpr _9764___mcc_h8697 = _source369.dtor_els;
                } else if (_source369.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9765___mcc_h8701 = _source369.dtor_optCond;
                  RAST._IExpr _9766___mcc_h8702 = _source369.dtor_underlying;
                } else if (_source369.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9767___mcc_h8705 = _source369.dtor_name;
                  RAST._IExpr _9768___mcc_h8706 = _source369.dtor_range;
                  RAST._IExpr _9769___mcc_h8707 = _source369.dtor_body;
                } else if (_source369.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9770___mcc_h8711 = _source369.dtor_lbl;
                  RAST._IExpr _9771___mcc_h8712 = _source369.dtor_underlying;
                } else if (_source369.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9772___mcc_h8715 = _source369.dtor_optLbl;
                } else if (_source369.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9773___mcc_h8717 = _source369.dtor_optLbl;
                } else if (_source369.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9774___mcc_h8719 = _source369.dtor_optExpr;
                } else if (_source369.is_CallType) {
                  RAST._IExpr _9775___mcc_h8721 = _source369.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9776___mcc_h8722 = _source369.dtor_typeParameters;
                } else if (_source369.is_Call) {
                  RAST._IExpr _9777___mcc_h8725 = _source369.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9778___mcc_h8726 = _source369.dtor_arguments;
                } else if (_source369.is_Select) {
                  RAST._IExpr _9779___mcc_h8729 = _source369.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9780___mcc_h8730 = _source369.dtor_name;
                } else if (_source369.is_MemberSelect) {
                  RAST._IExpr _9781___mcc_h8733 = _source369.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9782___mcc_h8734 = _source369.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9783___mcc_h8737 = _source369.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9784___mcc_h8738 = _source369.dtor_retType;
                  RAST._IExpr _9785___mcc_h8739 = _source369.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9669_field));
              if (_9668_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _9786_fromOwnership;
              _9786_fromOwnership = ((_9668_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2090;
              DCOMP._IOwnership _out2091;
              DCOMP.COMP.FromOwnership(r, _9786_fromOwnership, expectedOwnership, out _out2090, out _out2091);
              r = _out2090;
              resultingOwnership = _out2091;
              readIdents = _9677_recIdents;
            }
            return ;
          }
        } else if (_source292.is_SetBoundedPool) {
          DAST._IExpression _9787___mcc_h244 = _source292.dtor_of;
          DAST._IType _9788_fieldType = _4966___mcc_h57;
          bool _9789_isDatatype = _4965___mcc_h56;
          bool _9790_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _9791_field = _4963___mcc_h54;
          DAST._IExpression _9792_on = _4962___mcc_h53;
          {
            if (_9789_isDatatype) {
              RAST._IExpr _9793_onExpr;
              DCOMP._IOwnership _9794_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9795_recIdents;
              RAST._IExpr _out2092;
              DCOMP._IOwnership _out2093;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2094;
              (this).GenExpr(_9792_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2092, out _out2093, out _out2094);
              _9793_onExpr = _out2092;
              _9794_onOwned = _out2093;
              _9795_recIdents = _out2094;
              r = ((_9793_onExpr).Sel(DCOMP.__default.escapeName(_9791_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9796_typ;
              RAST._IType _out2095;
              _out2095 = (this).GenType(_9788_fieldType, false, false);
              _9796_typ = _out2095;
              if (((_9796_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2096;
                DCOMP._IOwnership _out2097;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2096, out _out2097);
                r = _out2096;
                resultingOwnership = _out2097;
              }
              readIdents = _9795_recIdents;
            } else {
              RAST._IExpr _9797_onExpr;
              DCOMP._IOwnership _9798_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9799_recIdents;
              RAST._IExpr _out2098;
              DCOMP._IOwnership _out2099;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2100;
              (this).GenExpr(_9792_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2098, out _out2099, out _out2100);
              _9797_onExpr = _out2098;
              _9798_onOwned = _out2099;
              _9799_recIdents = _out2100;
              r = _9797_onExpr;
              if (!object.Equals(_9797_onExpr, RAST.__default.self)) {
                RAST._IExpr _source371 = _9797_onExpr;
                if (_source371.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9800___mcc_h8743 = _source371.dtor_content;
                } else if (_source371.is_ExprFromType) {
                  RAST._IType _9801___mcc_h8745 = _source371.dtor_tpe;
                } else if (_source371.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9802___mcc_h8747 = _source371.dtor_name;
                } else if (_source371.is_Match) {
                  RAST._IExpr _9803___mcc_h8749 = _source371.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9804___mcc_h8750 = _source371.dtor_cases;
                } else if (_source371.is_StmtExpr) {
                  RAST._IExpr _9805___mcc_h8753 = _source371.dtor_stmt;
                  RAST._IExpr _9806___mcc_h8754 = _source371.dtor_rhs;
                } else if (_source371.is_Block) {
                  RAST._IExpr _9807___mcc_h8757 = _source371.dtor_underlying;
                } else if (_source371.is_StructBuild) {
                  RAST._IExpr _9808___mcc_h8759 = _source371.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9809___mcc_h8760 = _source371.dtor_assignments;
                } else if (_source371.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9810___mcc_h8763 = _source371.dtor_arguments;
                } else if (_source371.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9811___mcc_h8765 = _source371.dtor_op1;
                  RAST._IExpr _9812___mcc_h8766 = _source371.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9813___mcc_h8767 = _source371.dtor_format;
                  if (object.Equals(_9811___mcc_h8765, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source372 = _9812___mcc_h8766;
                    if (_source372.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9814___mcc_h8771 = _source372.dtor_content;
                    } else if (_source372.is_ExprFromType) {
                      RAST._IType _9815___mcc_h8773 = _source372.dtor_tpe;
                    } else if (_source372.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9816___mcc_h8775 = _source372.dtor_name;
                      if (object.Equals(_9816___mcc_h8775, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source372.is_Match) {
                      RAST._IExpr _9817___mcc_h8777 = _source372.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9818___mcc_h8778 = _source372.dtor_cases;
                    } else if (_source372.is_StmtExpr) {
                      RAST._IExpr _9819___mcc_h8781 = _source372.dtor_stmt;
                      RAST._IExpr _9820___mcc_h8782 = _source372.dtor_rhs;
                    } else if (_source372.is_Block) {
                      RAST._IExpr _9821___mcc_h8785 = _source372.dtor_underlying;
                    } else if (_source372.is_StructBuild) {
                      RAST._IExpr _9822___mcc_h8787 = _source372.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9823___mcc_h8788 = _source372.dtor_assignments;
                    } else if (_source372.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9824___mcc_h8791 = _source372.dtor_arguments;
                    } else if (_source372.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9825___mcc_h8793 = _source372.dtor_op1;
                      RAST._IExpr _9826___mcc_h8794 = _source372.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9827___mcc_h8795 = _source372.dtor_format;
                    } else if (_source372.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9828___mcc_h8799 = _source372.dtor_op2;
                      RAST._IExpr _9829___mcc_h8800 = _source372.dtor_left;
                      RAST._IExpr _9830___mcc_h8801 = _source372.dtor_right;
                      DAST.Format._IBinaryOpFormat _9831___mcc_h8802 = _source372.dtor_format2;
                    } else if (_source372.is_TypeAscription) {
                      RAST._IExpr _9832___mcc_h8807 = _source372.dtor_left;
                      RAST._IType _9833___mcc_h8808 = _source372.dtor_tpe;
                    } else if (_source372.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9834___mcc_h8811 = _source372.dtor_value;
                    } else if (_source372.is_LiteralBool) {
                      bool _9835___mcc_h8813 = _source372.dtor_bvalue;
                    } else if (_source372.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9836___mcc_h8815 = _source372.dtor_value;
                      bool _9837___mcc_h8816 = _source372.dtor_binary;
                    } else if (_source372.is_DeclareVar) {
                      RAST._IDeclareType _9838___mcc_h8819 = _source372.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9839___mcc_h8820 = _source372.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9840___mcc_h8821 = _source372.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9841___mcc_h8822 = _source372.dtor_optRhs;
                    } else if (_source372.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9842___mcc_h8827 = _source372.dtor_names;
                      RAST._IExpr _9843___mcc_h8828 = _source372.dtor_rhs;
                    } else if (_source372.is_IfExpr) {
                      RAST._IExpr _9844___mcc_h8831 = _source372.dtor_cond;
                      RAST._IExpr _9845___mcc_h8832 = _source372.dtor_thn;
                      RAST._IExpr _9846___mcc_h8833 = _source372.dtor_els;
                    } else if (_source372.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9847___mcc_h8837 = _source372.dtor_optCond;
                      RAST._IExpr _9848___mcc_h8838 = _source372.dtor_underlying;
                    } else if (_source372.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9849___mcc_h8841 = _source372.dtor_name;
                      RAST._IExpr _9850___mcc_h8842 = _source372.dtor_range;
                      RAST._IExpr _9851___mcc_h8843 = _source372.dtor_body;
                    } else if (_source372.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9852___mcc_h8847 = _source372.dtor_lbl;
                      RAST._IExpr _9853___mcc_h8848 = _source372.dtor_underlying;
                    } else if (_source372.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9854___mcc_h8851 = _source372.dtor_optLbl;
                    } else if (_source372.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9855___mcc_h8853 = _source372.dtor_optLbl;
                    } else if (_source372.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9856___mcc_h8855 = _source372.dtor_optExpr;
                    } else if (_source372.is_CallType) {
                      RAST._IExpr _9857___mcc_h8857 = _source372.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9858___mcc_h8858 = _source372.dtor_typeParameters;
                    } else if (_source372.is_Call) {
                      RAST._IExpr _9859___mcc_h8861 = _source372.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9860___mcc_h8862 = _source372.dtor_arguments;
                    } else if (_source372.is_Select) {
                      RAST._IExpr _9861___mcc_h8865 = _source372.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9862___mcc_h8866 = _source372.dtor_name;
                    } else if (_source372.is_MemberSelect) {
                      RAST._IExpr _9863___mcc_h8869 = _source372.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9864___mcc_h8870 = _source372.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9865___mcc_h8873 = _source372.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9866___mcc_h8874 = _source372.dtor_retType;
                      RAST._IExpr _9867___mcc_h8875 = _source372.dtor_body;
                    }
                  } else {
                  }
                } else if (_source371.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9868___mcc_h8879 = _source371.dtor_op2;
                  RAST._IExpr _9869___mcc_h8880 = _source371.dtor_left;
                  RAST._IExpr _9870___mcc_h8881 = _source371.dtor_right;
                  DAST.Format._IBinaryOpFormat _9871___mcc_h8882 = _source371.dtor_format2;
                } else if (_source371.is_TypeAscription) {
                  RAST._IExpr _9872___mcc_h8887 = _source371.dtor_left;
                  RAST._IType _9873___mcc_h8888 = _source371.dtor_tpe;
                } else if (_source371.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9874___mcc_h8891 = _source371.dtor_value;
                } else if (_source371.is_LiteralBool) {
                  bool _9875___mcc_h8893 = _source371.dtor_bvalue;
                } else if (_source371.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9876___mcc_h8895 = _source371.dtor_value;
                  bool _9877___mcc_h8896 = _source371.dtor_binary;
                } else if (_source371.is_DeclareVar) {
                  RAST._IDeclareType _9878___mcc_h8899 = _source371.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9879___mcc_h8900 = _source371.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9880___mcc_h8901 = _source371.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9881___mcc_h8902 = _source371.dtor_optRhs;
                } else if (_source371.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9882___mcc_h8907 = _source371.dtor_names;
                  RAST._IExpr _9883___mcc_h8908 = _source371.dtor_rhs;
                } else if (_source371.is_IfExpr) {
                  RAST._IExpr _9884___mcc_h8911 = _source371.dtor_cond;
                  RAST._IExpr _9885___mcc_h8912 = _source371.dtor_thn;
                  RAST._IExpr _9886___mcc_h8913 = _source371.dtor_els;
                } else if (_source371.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9887___mcc_h8917 = _source371.dtor_optCond;
                  RAST._IExpr _9888___mcc_h8918 = _source371.dtor_underlying;
                } else if (_source371.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9889___mcc_h8921 = _source371.dtor_name;
                  RAST._IExpr _9890___mcc_h8922 = _source371.dtor_range;
                  RAST._IExpr _9891___mcc_h8923 = _source371.dtor_body;
                } else if (_source371.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9892___mcc_h8927 = _source371.dtor_lbl;
                  RAST._IExpr _9893___mcc_h8928 = _source371.dtor_underlying;
                } else if (_source371.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9894___mcc_h8931 = _source371.dtor_optLbl;
                } else if (_source371.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9895___mcc_h8933 = _source371.dtor_optLbl;
                } else if (_source371.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9896___mcc_h8935 = _source371.dtor_optExpr;
                } else if (_source371.is_CallType) {
                  RAST._IExpr _9897___mcc_h8937 = _source371.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9898___mcc_h8938 = _source371.dtor_typeParameters;
                } else if (_source371.is_Call) {
                  RAST._IExpr _9899___mcc_h8941 = _source371.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9900___mcc_h8942 = _source371.dtor_arguments;
                } else if (_source371.is_Select) {
                  RAST._IExpr _9901___mcc_h8945 = _source371.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9902___mcc_h8946 = _source371.dtor_name;
                } else if (_source371.is_MemberSelect) {
                  RAST._IExpr _9903___mcc_h8949 = _source371.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9904___mcc_h8950 = _source371.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9905___mcc_h8953 = _source371.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9906___mcc_h8954 = _source371.dtor_retType;
                  RAST._IExpr _9907___mcc_h8955 = _source371.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9791_field));
              if (_9790_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _9908_fromOwnership;
              _9908_fromOwnership = ((_9790_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2101;
              DCOMP._IOwnership _out2102;
              DCOMP.COMP.FromOwnership(r, _9908_fromOwnership, expectedOwnership, out _out2101, out _out2102);
              r = _out2101;
              resultingOwnership = _out2102;
              readIdents = _9799_recIdents;
            }
            return ;
          }
        } else if (_source292.is_MapBoundedPool) {
          DAST._IExpression _9909___mcc_h246 = _source292.dtor_of;
          DAST._IType _9910_fieldType = _4966___mcc_h57;
          bool _9911_isDatatype = _4965___mcc_h56;
          bool _9912_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _9913_field = _4963___mcc_h54;
          DAST._IExpression _9914_on = _4962___mcc_h53;
          {
            if (_9911_isDatatype) {
              RAST._IExpr _9915_onExpr;
              DCOMP._IOwnership _9916_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9917_recIdents;
              RAST._IExpr _out2103;
              DCOMP._IOwnership _out2104;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2105;
              (this).GenExpr(_9914_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2103, out _out2104, out _out2105);
              _9915_onExpr = _out2103;
              _9916_onOwned = _out2104;
              _9917_recIdents = _out2105;
              r = ((_9915_onExpr).Sel(DCOMP.__default.escapeName(_9913_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9918_typ;
              RAST._IType _out2106;
              _out2106 = (this).GenType(_9910_fieldType, false, false);
              _9918_typ = _out2106;
              if (((_9918_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2107;
                DCOMP._IOwnership _out2108;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2107, out _out2108);
                r = _out2107;
                resultingOwnership = _out2108;
              }
              readIdents = _9917_recIdents;
            } else {
              RAST._IExpr _9919_onExpr;
              DCOMP._IOwnership _9920_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9921_recIdents;
              RAST._IExpr _out2109;
              DCOMP._IOwnership _out2110;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2111;
              (this).GenExpr(_9914_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2109, out _out2110, out _out2111);
              _9919_onExpr = _out2109;
              _9920_onOwned = _out2110;
              _9921_recIdents = _out2111;
              r = _9919_onExpr;
              if (!object.Equals(_9919_onExpr, RAST.__default.self)) {
                RAST._IExpr _source373 = _9919_onExpr;
                if (_source373.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9922___mcc_h8959 = _source373.dtor_content;
                } else if (_source373.is_ExprFromType) {
                  RAST._IType _9923___mcc_h8961 = _source373.dtor_tpe;
                } else if (_source373.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9924___mcc_h8963 = _source373.dtor_name;
                } else if (_source373.is_Match) {
                  RAST._IExpr _9925___mcc_h8965 = _source373.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9926___mcc_h8966 = _source373.dtor_cases;
                } else if (_source373.is_StmtExpr) {
                  RAST._IExpr _9927___mcc_h8969 = _source373.dtor_stmt;
                  RAST._IExpr _9928___mcc_h8970 = _source373.dtor_rhs;
                } else if (_source373.is_Block) {
                  RAST._IExpr _9929___mcc_h8973 = _source373.dtor_underlying;
                } else if (_source373.is_StructBuild) {
                  RAST._IExpr _9930___mcc_h8975 = _source373.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9931___mcc_h8976 = _source373.dtor_assignments;
                } else if (_source373.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9932___mcc_h8979 = _source373.dtor_arguments;
                } else if (_source373.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9933___mcc_h8981 = _source373.dtor_op1;
                  RAST._IExpr _9934___mcc_h8982 = _source373.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9935___mcc_h8983 = _source373.dtor_format;
                  if (object.Equals(_9933___mcc_h8981, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source374 = _9934___mcc_h8982;
                    if (_source374.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9936___mcc_h8987 = _source374.dtor_content;
                    } else if (_source374.is_ExprFromType) {
                      RAST._IType _9937___mcc_h8989 = _source374.dtor_tpe;
                    } else if (_source374.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9938___mcc_h8991 = _source374.dtor_name;
                      if (object.Equals(_9938___mcc_h8991, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source374.is_Match) {
                      RAST._IExpr _9939___mcc_h8993 = _source374.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9940___mcc_h8994 = _source374.dtor_cases;
                    } else if (_source374.is_StmtExpr) {
                      RAST._IExpr _9941___mcc_h8997 = _source374.dtor_stmt;
                      RAST._IExpr _9942___mcc_h8998 = _source374.dtor_rhs;
                    } else if (_source374.is_Block) {
                      RAST._IExpr _9943___mcc_h9001 = _source374.dtor_underlying;
                    } else if (_source374.is_StructBuild) {
                      RAST._IExpr _9944___mcc_h9003 = _source374.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9945___mcc_h9004 = _source374.dtor_assignments;
                    } else if (_source374.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9946___mcc_h9007 = _source374.dtor_arguments;
                    } else if (_source374.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9947___mcc_h9009 = _source374.dtor_op1;
                      RAST._IExpr _9948___mcc_h9010 = _source374.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9949___mcc_h9011 = _source374.dtor_format;
                    } else if (_source374.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9950___mcc_h9015 = _source374.dtor_op2;
                      RAST._IExpr _9951___mcc_h9016 = _source374.dtor_left;
                      RAST._IExpr _9952___mcc_h9017 = _source374.dtor_right;
                      DAST.Format._IBinaryOpFormat _9953___mcc_h9018 = _source374.dtor_format2;
                    } else if (_source374.is_TypeAscription) {
                      RAST._IExpr _9954___mcc_h9023 = _source374.dtor_left;
                      RAST._IType _9955___mcc_h9024 = _source374.dtor_tpe;
                    } else if (_source374.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9956___mcc_h9027 = _source374.dtor_value;
                    } else if (_source374.is_LiteralBool) {
                      bool _9957___mcc_h9029 = _source374.dtor_bvalue;
                    } else if (_source374.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9958___mcc_h9031 = _source374.dtor_value;
                      bool _9959___mcc_h9032 = _source374.dtor_binary;
                    } else if (_source374.is_DeclareVar) {
                      RAST._IDeclareType _9960___mcc_h9035 = _source374.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9961___mcc_h9036 = _source374.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9962___mcc_h9037 = _source374.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9963___mcc_h9038 = _source374.dtor_optRhs;
                    } else if (_source374.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9964___mcc_h9043 = _source374.dtor_names;
                      RAST._IExpr _9965___mcc_h9044 = _source374.dtor_rhs;
                    } else if (_source374.is_IfExpr) {
                      RAST._IExpr _9966___mcc_h9047 = _source374.dtor_cond;
                      RAST._IExpr _9967___mcc_h9048 = _source374.dtor_thn;
                      RAST._IExpr _9968___mcc_h9049 = _source374.dtor_els;
                    } else if (_source374.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9969___mcc_h9053 = _source374.dtor_optCond;
                      RAST._IExpr _9970___mcc_h9054 = _source374.dtor_underlying;
                    } else if (_source374.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9971___mcc_h9057 = _source374.dtor_name;
                      RAST._IExpr _9972___mcc_h9058 = _source374.dtor_range;
                      RAST._IExpr _9973___mcc_h9059 = _source374.dtor_body;
                    } else if (_source374.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9974___mcc_h9063 = _source374.dtor_lbl;
                      RAST._IExpr _9975___mcc_h9064 = _source374.dtor_underlying;
                    } else if (_source374.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9976___mcc_h9067 = _source374.dtor_optLbl;
                    } else if (_source374.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9977___mcc_h9069 = _source374.dtor_optLbl;
                    } else if (_source374.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9978___mcc_h9071 = _source374.dtor_optExpr;
                    } else if (_source374.is_CallType) {
                      RAST._IExpr _9979___mcc_h9073 = _source374.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9980___mcc_h9074 = _source374.dtor_typeParameters;
                    } else if (_source374.is_Call) {
                      RAST._IExpr _9981___mcc_h9077 = _source374.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9982___mcc_h9078 = _source374.dtor_arguments;
                    } else if (_source374.is_Select) {
                      RAST._IExpr _9983___mcc_h9081 = _source374.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9984___mcc_h9082 = _source374.dtor_name;
                    } else if (_source374.is_MemberSelect) {
                      RAST._IExpr _9985___mcc_h9085 = _source374.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9986___mcc_h9086 = _source374.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9987___mcc_h9089 = _source374.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9988___mcc_h9090 = _source374.dtor_retType;
                      RAST._IExpr _9989___mcc_h9091 = _source374.dtor_body;
                    }
                  } else {
                  }
                } else if (_source373.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9990___mcc_h9095 = _source373.dtor_op2;
                  RAST._IExpr _9991___mcc_h9096 = _source373.dtor_left;
                  RAST._IExpr _9992___mcc_h9097 = _source373.dtor_right;
                  DAST.Format._IBinaryOpFormat _9993___mcc_h9098 = _source373.dtor_format2;
                } else if (_source373.is_TypeAscription) {
                  RAST._IExpr _9994___mcc_h9103 = _source373.dtor_left;
                  RAST._IType _9995___mcc_h9104 = _source373.dtor_tpe;
                } else if (_source373.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9996___mcc_h9107 = _source373.dtor_value;
                } else if (_source373.is_LiteralBool) {
                  bool _9997___mcc_h9109 = _source373.dtor_bvalue;
                } else if (_source373.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9998___mcc_h9111 = _source373.dtor_value;
                  bool _9999___mcc_h9112 = _source373.dtor_binary;
                } else if (_source373.is_DeclareVar) {
                  RAST._IDeclareType _10000___mcc_h9115 = _source373.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10001___mcc_h9116 = _source373.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10002___mcc_h9117 = _source373.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10003___mcc_h9118 = _source373.dtor_optRhs;
                } else if (_source373.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10004___mcc_h9123 = _source373.dtor_names;
                  RAST._IExpr _10005___mcc_h9124 = _source373.dtor_rhs;
                } else if (_source373.is_IfExpr) {
                  RAST._IExpr _10006___mcc_h9127 = _source373.dtor_cond;
                  RAST._IExpr _10007___mcc_h9128 = _source373.dtor_thn;
                  RAST._IExpr _10008___mcc_h9129 = _source373.dtor_els;
                } else if (_source373.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10009___mcc_h9133 = _source373.dtor_optCond;
                  RAST._IExpr _10010___mcc_h9134 = _source373.dtor_underlying;
                } else if (_source373.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10011___mcc_h9137 = _source373.dtor_name;
                  RAST._IExpr _10012___mcc_h9138 = _source373.dtor_range;
                  RAST._IExpr _10013___mcc_h9139 = _source373.dtor_body;
                } else if (_source373.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10014___mcc_h9143 = _source373.dtor_lbl;
                  RAST._IExpr _10015___mcc_h9144 = _source373.dtor_underlying;
                } else if (_source373.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10016___mcc_h9147 = _source373.dtor_optLbl;
                } else if (_source373.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10017___mcc_h9149 = _source373.dtor_optLbl;
                } else if (_source373.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10018___mcc_h9151 = _source373.dtor_optExpr;
                } else if (_source373.is_CallType) {
                  RAST._IExpr _10019___mcc_h9153 = _source373.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10020___mcc_h9154 = _source373.dtor_typeParameters;
                } else if (_source373.is_Call) {
                  RAST._IExpr _10021___mcc_h9157 = _source373.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10022___mcc_h9158 = _source373.dtor_arguments;
                } else if (_source373.is_Select) {
                  RAST._IExpr _10023___mcc_h9161 = _source373.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10024___mcc_h9162 = _source373.dtor_name;
                } else if (_source373.is_MemberSelect) {
                  RAST._IExpr _10025___mcc_h9165 = _source373.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10026___mcc_h9166 = _source373.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10027___mcc_h9169 = _source373.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10028___mcc_h9170 = _source373.dtor_retType;
                  RAST._IExpr _10029___mcc_h9171 = _source373.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9913_field));
              if (_9912_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _10030_fromOwnership;
              _10030_fromOwnership = ((_9912_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2112;
              DCOMP._IOwnership _out2113;
              DCOMP.COMP.FromOwnership(r, _10030_fromOwnership, expectedOwnership, out _out2112, out _out2113);
              r = _out2112;
              resultingOwnership = _out2113;
              readIdents = _9921_recIdents;
            }
            return ;
          }
        } else if (_source292.is_SeqBoundedPool) {
          DAST._IExpression _10031___mcc_h248 = _source292.dtor_of;
          bool _10032___mcc_h249 = _source292.dtor_includeDuplicates;
          DAST._IType _10033_fieldType = _4966___mcc_h57;
          bool _10034_isDatatype = _4965___mcc_h56;
          bool _10035_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _10036_field = _4963___mcc_h54;
          DAST._IExpression _10037_on = _4962___mcc_h53;
          {
            if (_10034_isDatatype) {
              RAST._IExpr _10038_onExpr;
              DCOMP._IOwnership _10039_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10040_recIdents;
              RAST._IExpr _out2114;
              DCOMP._IOwnership _out2115;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2116;
              (this).GenExpr(_10037_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2114, out _out2115, out _out2116);
              _10038_onExpr = _out2114;
              _10039_onOwned = _out2115;
              _10040_recIdents = _out2116;
              r = ((_10038_onExpr).Sel(DCOMP.__default.escapeName(_10036_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _10041_typ;
              RAST._IType _out2117;
              _out2117 = (this).GenType(_10033_fieldType, false, false);
              _10041_typ = _out2117;
              if (((_10041_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2118;
                DCOMP._IOwnership _out2119;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2118, out _out2119);
                r = _out2118;
                resultingOwnership = _out2119;
              }
              readIdents = _10040_recIdents;
            } else {
              RAST._IExpr _10042_onExpr;
              DCOMP._IOwnership _10043_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10044_recIdents;
              RAST._IExpr _out2120;
              DCOMP._IOwnership _out2121;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2122;
              (this).GenExpr(_10037_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2120, out _out2121, out _out2122);
              _10042_onExpr = _out2120;
              _10043_onOwned = _out2121;
              _10044_recIdents = _out2122;
              r = _10042_onExpr;
              if (!object.Equals(_10042_onExpr, RAST.__default.self)) {
                RAST._IExpr _source375 = _10042_onExpr;
                if (_source375.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _10045___mcc_h9175 = _source375.dtor_content;
                } else if (_source375.is_ExprFromType) {
                  RAST._IType _10046___mcc_h9177 = _source375.dtor_tpe;
                } else if (_source375.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _10047___mcc_h9179 = _source375.dtor_name;
                } else if (_source375.is_Match) {
                  RAST._IExpr _10048___mcc_h9181 = _source375.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _10049___mcc_h9182 = _source375.dtor_cases;
                } else if (_source375.is_StmtExpr) {
                  RAST._IExpr _10050___mcc_h9185 = _source375.dtor_stmt;
                  RAST._IExpr _10051___mcc_h9186 = _source375.dtor_rhs;
                } else if (_source375.is_Block) {
                  RAST._IExpr _10052___mcc_h9189 = _source375.dtor_underlying;
                } else if (_source375.is_StructBuild) {
                  RAST._IExpr _10053___mcc_h9191 = _source375.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _10054___mcc_h9192 = _source375.dtor_assignments;
                } else if (_source375.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _10055___mcc_h9195 = _source375.dtor_arguments;
                } else if (_source375.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10056___mcc_h9197 = _source375.dtor_op1;
                  RAST._IExpr _10057___mcc_h9198 = _source375.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _10058___mcc_h9199 = _source375.dtor_format;
                  if (object.Equals(_10056___mcc_h9197, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source376 = _10057___mcc_h9198;
                    if (_source376.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _10059___mcc_h9203 = _source376.dtor_content;
                    } else if (_source376.is_ExprFromType) {
                      RAST._IType _10060___mcc_h9205 = _source376.dtor_tpe;
                    } else if (_source376.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _10061___mcc_h9207 = _source376.dtor_name;
                      if (object.Equals(_10061___mcc_h9207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source376.is_Match) {
                      RAST._IExpr _10062___mcc_h9209 = _source376.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _10063___mcc_h9210 = _source376.dtor_cases;
                    } else if (_source376.is_StmtExpr) {
                      RAST._IExpr _10064___mcc_h9213 = _source376.dtor_stmt;
                      RAST._IExpr _10065___mcc_h9214 = _source376.dtor_rhs;
                    } else if (_source376.is_Block) {
                      RAST._IExpr _10066___mcc_h9217 = _source376.dtor_underlying;
                    } else if (_source376.is_StructBuild) {
                      RAST._IExpr _10067___mcc_h9219 = _source376.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _10068___mcc_h9220 = _source376.dtor_assignments;
                    } else if (_source376.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _10069___mcc_h9223 = _source376.dtor_arguments;
                    } else if (_source376.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10070___mcc_h9225 = _source376.dtor_op1;
                      RAST._IExpr _10071___mcc_h9226 = _source376.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _10072___mcc_h9227 = _source376.dtor_format;
                    } else if (_source376.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10073___mcc_h9231 = _source376.dtor_op2;
                      RAST._IExpr _10074___mcc_h9232 = _source376.dtor_left;
                      RAST._IExpr _10075___mcc_h9233 = _source376.dtor_right;
                      DAST.Format._IBinaryOpFormat _10076___mcc_h9234 = _source376.dtor_format2;
                    } else if (_source376.is_TypeAscription) {
                      RAST._IExpr _10077___mcc_h9239 = _source376.dtor_left;
                      RAST._IType _10078___mcc_h9240 = _source376.dtor_tpe;
                    } else if (_source376.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10079___mcc_h9243 = _source376.dtor_value;
                    } else if (_source376.is_LiteralBool) {
                      bool _10080___mcc_h9245 = _source376.dtor_bvalue;
                    } else if (_source376.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10081___mcc_h9247 = _source376.dtor_value;
                      bool _10082___mcc_h9248 = _source376.dtor_binary;
                    } else if (_source376.is_DeclareVar) {
                      RAST._IDeclareType _10083___mcc_h9251 = _source376.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10084___mcc_h9252 = _source376.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10085___mcc_h9253 = _source376.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10086___mcc_h9254 = _source376.dtor_optRhs;
                    } else if (_source376.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10087___mcc_h9259 = _source376.dtor_names;
                      RAST._IExpr _10088___mcc_h9260 = _source376.dtor_rhs;
                    } else if (_source376.is_IfExpr) {
                      RAST._IExpr _10089___mcc_h9263 = _source376.dtor_cond;
                      RAST._IExpr _10090___mcc_h9264 = _source376.dtor_thn;
                      RAST._IExpr _10091___mcc_h9265 = _source376.dtor_els;
                    } else if (_source376.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10092___mcc_h9269 = _source376.dtor_optCond;
                      RAST._IExpr _10093___mcc_h9270 = _source376.dtor_underlying;
                    } else if (_source376.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10094___mcc_h9273 = _source376.dtor_name;
                      RAST._IExpr _10095___mcc_h9274 = _source376.dtor_range;
                      RAST._IExpr _10096___mcc_h9275 = _source376.dtor_body;
                    } else if (_source376.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10097___mcc_h9279 = _source376.dtor_lbl;
                      RAST._IExpr _10098___mcc_h9280 = _source376.dtor_underlying;
                    } else if (_source376.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10099___mcc_h9283 = _source376.dtor_optLbl;
                    } else if (_source376.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10100___mcc_h9285 = _source376.dtor_optLbl;
                    } else if (_source376.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10101___mcc_h9287 = _source376.dtor_optExpr;
                    } else if (_source376.is_CallType) {
                      RAST._IExpr _10102___mcc_h9289 = _source376.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10103___mcc_h9290 = _source376.dtor_typeParameters;
                    } else if (_source376.is_Call) {
                      RAST._IExpr _10104___mcc_h9293 = _source376.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10105___mcc_h9294 = _source376.dtor_arguments;
                    } else if (_source376.is_Select) {
                      RAST._IExpr _10106___mcc_h9297 = _source376.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10107___mcc_h9298 = _source376.dtor_name;
                    } else if (_source376.is_MemberSelect) {
                      RAST._IExpr _10108___mcc_h9301 = _source376.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10109___mcc_h9302 = _source376.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10110___mcc_h9305 = _source376.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10111___mcc_h9306 = _source376.dtor_retType;
                      RAST._IExpr _10112___mcc_h9307 = _source376.dtor_body;
                    }
                  } else {
                  }
                } else if (_source375.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10113___mcc_h9311 = _source375.dtor_op2;
                  RAST._IExpr _10114___mcc_h9312 = _source375.dtor_left;
                  RAST._IExpr _10115___mcc_h9313 = _source375.dtor_right;
                  DAST.Format._IBinaryOpFormat _10116___mcc_h9314 = _source375.dtor_format2;
                } else if (_source375.is_TypeAscription) {
                  RAST._IExpr _10117___mcc_h9319 = _source375.dtor_left;
                  RAST._IType _10118___mcc_h9320 = _source375.dtor_tpe;
                } else if (_source375.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10119___mcc_h9323 = _source375.dtor_value;
                } else if (_source375.is_LiteralBool) {
                  bool _10120___mcc_h9325 = _source375.dtor_bvalue;
                } else if (_source375.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10121___mcc_h9327 = _source375.dtor_value;
                  bool _10122___mcc_h9328 = _source375.dtor_binary;
                } else if (_source375.is_DeclareVar) {
                  RAST._IDeclareType _10123___mcc_h9331 = _source375.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10124___mcc_h9332 = _source375.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10125___mcc_h9333 = _source375.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10126___mcc_h9334 = _source375.dtor_optRhs;
                } else if (_source375.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10127___mcc_h9339 = _source375.dtor_names;
                  RAST._IExpr _10128___mcc_h9340 = _source375.dtor_rhs;
                } else if (_source375.is_IfExpr) {
                  RAST._IExpr _10129___mcc_h9343 = _source375.dtor_cond;
                  RAST._IExpr _10130___mcc_h9344 = _source375.dtor_thn;
                  RAST._IExpr _10131___mcc_h9345 = _source375.dtor_els;
                } else if (_source375.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10132___mcc_h9349 = _source375.dtor_optCond;
                  RAST._IExpr _10133___mcc_h9350 = _source375.dtor_underlying;
                } else if (_source375.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10134___mcc_h9353 = _source375.dtor_name;
                  RAST._IExpr _10135___mcc_h9354 = _source375.dtor_range;
                  RAST._IExpr _10136___mcc_h9355 = _source375.dtor_body;
                } else if (_source375.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10137___mcc_h9359 = _source375.dtor_lbl;
                  RAST._IExpr _10138___mcc_h9360 = _source375.dtor_underlying;
                } else if (_source375.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10139___mcc_h9363 = _source375.dtor_optLbl;
                } else if (_source375.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10140___mcc_h9365 = _source375.dtor_optLbl;
                } else if (_source375.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10141___mcc_h9367 = _source375.dtor_optExpr;
                } else if (_source375.is_CallType) {
                  RAST._IExpr _10142___mcc_h9369 = _source375.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10143___mcc_h9370 = _source375.dtor_typeParameters;
                } else if (_source375.is_Call) {
                  RAST._IExpr _10144___mcc_h9373 = _source375.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10145___mcc_h9374 = _source375.dtor_arguments;
                } else if (_source375.is_Select) {
                  RAST._IExpr _10146___mcc_h9377 = _source375.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10147___mcc_h9378 = _source375.dtor_name;
                } else if (_source375.is_MemberSelect) {
                  RAST._IExpr _10148___mcc_h9381 = _source375.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10149___mcc_h9382 = _source375.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10150___mcc_h9385 = _source375.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10151___mcc_h9386 = _source375.dtor_retType;
                  RAST._IExpr _10152___mcc_h9387 = _source375.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_10036_field));
              if (_10035_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _10153_fromOwnership;
              _10153_fromOwnership = ((_10035_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2123;
              DCOMP._IOwnership _out2124;
              DCOMP.COMP.FromOwnership(r, _10153_fromOwnership, expectedOwnership, out _out2123, out _out2124);
              r = _out2123;
              resultingOwnership = _out2124;
              readIdents = _10044_recIdents;
            }
            return ;
          }
        } else if (_source292.is_IntRange) {
          DAST._IExpression _10154___mcc_h252 = _source292.dtor_lo;
          DAST._IExpression _10155___mcc_h253 = _source292.dtor_hi;
          bool _10156___mcc_h254 = _source292.dtor_up;
          DAST._IType _10157_fieldType = _4966___mcc_h57;
          bool _10158_isDatatype = _4965___mcc_h56;
          bool _10159_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _10160_field = _4963___mcc_h54;
          DAST._IExpression _10161_on = _4962___mcc_h53;
          {
            if (_10158_isDatatype) {
              RAST._IExpr _10162_onExpr;
              DCOMP._IOwnership _10163_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10164_recIdents;
              RAST._IExpr _out2125;
              DCOMP._IOwnership _out2126;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2127;
              (this).GenExpr(_10161_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2125, out _out2126, out _out2127);
              _10162_onExpr = _out2125;
              _10163_onOwned = _out2126;
              _10164_recIdents = _out2127;
              r = ((_10162_onExpr).Sel(DCOMP.__default.escapeName(_10160_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _10165_typ;
              RAST._IType _out2128;
              _out2128 = (this).GenType(_10157_fieldType, false, false);
              _10165_typ = _out2128;
              if (((_10165_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2129;
                DCOMP._IOwnership _out2130;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2129, out _out2130);
                r = _out2129;
                resultingOwnership = _out2130;
              }
              readIdents = _10164_recIdents;
            } else {
              RAST._IExpr _10166_onExpr;
              DCOMP._IOwnership _10167_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10168_recIdents;
              RAST._IExpr _out2131;
              DCOMP._IOwnership _out2132;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2133;
              (this).GenExpr(_10161_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2131, out _out2132, out _out2133);
              _10166_onExpr = _out2131;
              _10167_onOwned = _out2132;
              _10168_recIdents = _out2133;
              r = _10166_onExpr;
              if (!object.Equals(_10166_onExpr, RAST.__default.self)) {
                RAST._IExpr _source377 = _10166_onExpr;
                if (_source377.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _10169___mcc_h9391 = _source377.dtor_content;
                } else if (_source377.is_ExprFromType) {
                  RAST._IType _10170___mcc_h9393 = _source377.dtor_tpe;
                } else if (_source377.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _10171___mcc_h9395 = _source377.dtor_name;
                } else if (_source377.is_Match) {
                  RAST._IExpr _10172___mcc_h9397 = _source377.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _10173___mcc_h9398 = _source377.dtor_cases;
                } else if (_source377.is_StmtExpr) {
                  RAST._IExpr _10174___mcc_h9401 = _source377.dtor_stmt;
                  RAST._IExpr _10175___mcc_h9402 = _source377.dtor_rhs;
                } else if (_source377.is_Block) {
                  RAST._IExpr _10176___mcc_h9405 = _source377.dtor_underlying;
                } else if (_source377.is_StructBuild) {
                  RAST._IExpr _10177___mcc_h9407 = _source377.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _10178___mcc_h9408 = _source377.dtor_assignments;
                } else if (_source377.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _10179___mcc_h9411 = _source377.dtor_arguments;
                } else if (_source377.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10180___mcc_h9413 = _source377.dtor_op1;
                  RAST._IExpr _10181___mcc_h9414 = _source377.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _10182___mcc_h9415 = _source377.dtor_format;
                  if (object.Equals(_10180___mcc_h9413, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source378 = _10181___mcc_h9414;
                    if (_source378.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _10183___mcc_h9419 = _source378.dtor_content;
                    } else if (_source378.is_ExprFromType) {
                      RAST._IType _10184___mcc_h9421 = _source378.dtor_tpe;
                    } else if (_source378.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _10185___mcc_h9423 = _source378.dtor_name;
                      if (object.Equals(_10185___mcc_h9423, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source378.is_Match) {
                      RAST._IExpr _10186___mcc_h9425 = _source378.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _10187___mcc_h9426 = _source378.dtor_cases;
                    } else if (_source378.is_StmtExpr) {
                      RAST._IExpr _10188___mcc_h9429 = _source378.dtor_stmt;
                      RAST._IExpr _10189___mcc_h9430 = _source378.dtor_rhs;
                    } else if (_source378.is_Block) {
                      RAST._IExpr _10190___mcc_h9433 = _source378.dtor_underlying;
                    } else if (_source378.is_StructBuild) {
                      RAST._IExpr _10191___mcc_h9435 = _source378.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _10192___mcc_h9436 = _source378.dtor_assignments;
                    } else if (_source378.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _10193___mcc_h9439 = _source378.dtor_arguments;
                    } else if (_source378.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10194___mcc_h9441 = _source378.dtor_op1;
                      RAST._IExpr _10195___mcc_h9442 = _source378.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _10196___mcc_h9443 = _source378.dtor_format;
                    } else if (_source378.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10197___mcc_h9447 = _source378.dtor_op2;
                      RAST._IExpr _10198___mcc_h9448 = _source378.dtor_left;
                      RAST._IExpr _10199___mcc_h9449 = _source378.dtor_right;
                      DAST.Format._IBinaryOpFormat _10200___mcc_h9450 = _source378.dtor_format2;
                    } else if (_source378.is_TypeAscription) {
                      RAST._IExpr _10201___mcc_h9455 = _source378.dtor_left;
                      RAST._IType _10202___mcc_h9456 = _source378.dtor_tpe;
                    } else if (_source378.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10203___mcc_h9459 = _source378.dtor_value;
                    } else if (_source378.is_LiteralBool) {
                      bool _10204___mcc_h9461 = _source378.dtor_bvalue;
                    } else if (_source378.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10205___mcc_h9463 = _source378.dtor_value;
                      bool _10206___mcc_h9464 = _source378.dtor_binary;
                    } else if (_source378.is_DeclareVar) {
                      RAST._IDeclareType _10207___mcc_h9467 = _source378.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10208___mcc_h9468 = _source378.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10209___mcc_h9469 = _source378.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10210___mcc_h9470 = _source378.dtor_optRhs;
                    } else if (_source378.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10211___mcc_h9475 = _source378.dtor_names;
                      RAST._IExpr _10212___mcc_h9476 = _source378.dtor_rhs;
                    } else if (_source378.is_IfExpr) {
                      RAST._IExpr _10213___mcc_h9479 = _source378.dtor_cond;
                      RAST._IExpr _10214___mcc_h9480 = _source378.dtor_thn;
                      RAST._IExpr _10215___mcc_h9481 = _source378.dtor_els;
                    } else if (_source378.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10216___mcc_h9485 = _source378.dtor_optCond;
                      RAST._IExpr _10217___mcc_h9486 = _source378.dtor_underlying;
                    } else if (_source378.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10218___mcc_h9489 = _source378.dtor_name;
                      RAST._IExpr _10219___mcc_h9490 = _source378.dtor_range;
                      RAST._IExpr _10220___mcc_h9491 = _source378.dtor_body;
                    } else if (_source378.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10221___mcc_h9495 = _source378.dtor_lbl;
                      RAST._IExpr _10222___mcc_h9496 = _source378.dtor_underlying;
                    } else if (_source378.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10223___mcc_h9499 = _source378.dtor_optLbl;
                    } else if (_source378.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10224___mcc_h9501 = _source378.dtor_optLbl;
                    } else if (_source378.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10225___mcc_h9503 = _source378.dtor_optExpr;
                    } else if (_source378.is_CallType) {
                      RAST._IExpr _10226___mcc_h9505 = _source378.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10227___mcc_h9506 = _source378.dtor_typeParameters;
                    } else if (_source378.is_Call) {
                      RAST._IExpr _10228___mcc_h9509 = _source378.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10229___mcc_h9510 = _source378.dtor_arguments;
                    } else if (_source378.is_Select) {
                      RAST._IExpr _10230___mcc_h9513 = _source378.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10231___mcc_h9514 = _source378.dtor_name;
                    } else if (_source378.is_MemberSelect) {
                      RAST._IExpr _10232___mcc_h9517 = _source378.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10233___mcc_h9518 = _source378.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10234___mcc_h9521 = _source378.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10235___mcc_h9522 = _source378.dtor_retType;
                      RAST._IExpr _10236___mcc_h9523 = _source378.dtor_body;
                    }
                  } else {
                  }
                } else if (_source377.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10237___mcc_h9527 = _source377.dtor_op2;
                  RAST._IExpr _10238___mcc_h9528 = _source377.dtor_left;
                  RAST._IExpr _10239___mcc_h9529 = _source377.dtor_right;
                  DAST.Format._IBinaryOpFormat _10240___mcc_h9530 = _source377.dtor_format2;
                } else if (_source377.is_TypeAscription) {
                  RAST._IExpr _10241___mcc_h9535 = _source377.dtor_left;
                  RAST._IType _10242___mcc_h9536 = _source377.dtor_tpe;
                } else if (_source377.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10243___mcc_h9539 = _source377.dtor_value;
                } else if (_source377.is_LiteralBool) {
                  bool _10244___mcc_h9541 = _source377.dtor_bvalue;
                } else if (_source377.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10245___mcc_h9543 = _source377.dtor_value;
                  bool _10246___mcc_h9544 = _source377.dtor_binary;
                } else if (_source377.is_DeclareVar) {
                  RAST._IDeclareType _10247___mcc_h9547 = _source377.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10248___mcc_h9548 = _source377.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10249___mcc_h9549 = _source377.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10250___mcc_h9550 = _source377.dtor_optRhs;
                } else if (_source377.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10251___mcc_h9555 = _source377.dtor_names;
                  RAST._IExpr _10252___mcc_h9556 = _source377.dtor_rhs;
                } else if (_source377.is_IfExpr) {
                  RAST._IExpr _10253___mcc_h9559 = _source377.dtor_cond;
                  RAST._IExpr _10254___mcc_h9560 = _source377.dtor_thn;
                  RAST._IExpr _10255___mcc_h9561 = _source377.dtor_els;
                } else if (_source377.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10256___mcc_h9565 = _source377.dtor_optCond;
                  RAST._IExpr _10257___mcc_h9566 = _source377.dtor_underlying;
                } else if (_source377.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10258___mcc_h9569 = _source377.dtor_name;
                  RAST._IExpr _10259___mcc_h9570 = _source377.dtor_range;
                  RAST._IExpr _10260___mcc_h9571 = _source377.dtor_body;
                } else if (_source377.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10261___mcc_h9575 = _source377.dtor_lbl;
                  RAST._IExpr _10262___mcc_h9576 = _source377.dtor_underlying;
                } else if (_source377.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10263___mcc_h9579 = _source377.dtor_optLbl;
                } else if (_source377.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10264___mcc_h9581 = _source377.dtor_optLbl;
                } else if (_source377.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10265___mcc_h9583 = _source377.dtor_optExpr;
                } else if (_source377.is_CallType) {
                  RAST._IExpr _10266___mcc_h9585 = _source377.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10267___mcc_h9586 = _source377.dtor_typeParameters;
                } else if (_source377.is_Call) {
                  RAST._IExpr _10268___mcc_h9589 = _source377.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10269___mcc_h9590 = _source377.dtor_arguments;
                } else if (_source377.is_Select) {
                  RAST._IExpr _10270___mcc_h9593 = _source377.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10271___mcc_h9594 = _source377.dtor_name;
                } else if (_source377.is_MemberSelect) {
                  RAST._IExpr _10272___mcc_h9597 = _source377.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10273___mcc_h9598 = _source377.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10274___mcc_h9601 = _source377.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10275___mcc_h9602 = _source377.dtor_retType;
                  RAST._IExpr _10276___mcc_h9603 = _source377.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_10160_field));
              if (_10159_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _10277_fromOwnership;
              _10277_fromOwnership = ((_10159_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2134;
              DCOMP._IOwnership _out2135;
              DCOMP.COMP.FromOwnership(r, _10277_fromOwnership, expectedOwnership, out _out2134, out _out2135);
              r = _out2134;
              resultingOwnership = _out2135;
              readIdents = _10168_recIdents;
            }
            return ;
          }
        } else if (_source292.is_UnboundedIntRange) {
          DAST._IExpression _10278___mcc_h258 = _source292.dtor_start;
          bool _10279___mcc_h259 = _source292.dtor_up;
          DAST._IType _10280_fieldType = _4966___mcc_h57;
          bool _10281_isDatatype = _4965___mcc_h56;
          bool _10282_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _10283_field = _4963___mcc_h54;
          DAST._IExpression _10284_on = _4962___mcc_h53;
          {
            if (_10281_isDatatype) {
              RAST._IExpr _10285_onExpr;
              DCOMP._IOwnership _10286_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10287_recIdents;
              RAST._IExpr _out2136;
              DCOMP._IOwnership _out2137;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2138;
              (this).GenExpr(_10284_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2136, out _out2137, out _out2138);
              _10285_onExpr = _out2136;
              _10286_onOwned = _out2137;
              _10287_recIdents = _out2138;
              r = ((_10285_onExpr).Sel(DCOMP.__default.escapeName(_10283_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _10288_typ;
              RAST._IType _out2139;
              _out2139 = (this).GenType(_10280_fieldType, false, false);
              _10288_typ = _out2139;
              if (((_10288_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2140;
                DCOMP._IOwnership _out2141;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2140, out _out2141);
                r = _out2140;
                resultingOwnership = _out2141;
              }
              readIdents = _10287_recIdents;
            } else {
              RAST._IExpr _10289_onExpr;
              DCOMP._IOwnership _10290_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10291_recIdents;
              RAST._IExpr _out2142;
              DCOMP._IOwnership _out2143;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2144;
              (this).GenExpr(_10284_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2142, out _out2143, out _out2144);
              _10289_onExpr = _out2142;
              _10290_onOwned = _out2143;
              _10291_recIdents = _out2144;
              r = _10289_onExpr;
              if (!object.Equals(_10289_onExpr, RAST.__default.self)) {
                RAST._IExpr _source379 = _10289_onExpr;
                if (_source379.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _10292___mcc_h9607 = _source379.dtor_content;
                } else if (_source379.is_ExprFromType) {
                  RAST._IType _10293___mcc_h9609 = _source379.dtor_tpe;
                } else if (_source379.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _10294___mcc_h9611 = _source379.dtor_name;
                } else if (_source379.is_Match) {
                  RAST._IExpr _10295___mcc_h9613 = _source379.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _10296___mcc_h9614 = _source379.dtor_cases;
                } else if (_source379.is_StmtExpr) {
                  RAST._IExpr _10297___mcc_h9617 = _source379.dtor_stmt;
                  RAST._IExpr _10298___mcc_h9618 = _source379.dtor_rhs;
                } else if (_source379.is_Block) {
                  RAST._IExpr _10299___mcc_h9621 = _source379.dtor_underlying;
                } else if (_source379.is_StructBuild) {
                  RAST._IExpr _10300___mcc_h9623 = _source379.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _10301___mcc_h9624 = _source379.dtor_assignments;
                } else if (_source379.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _10302___mcc_h9627 = _source379.dtor_arguments;
                } else if (_source379.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10303___mcc_h9629 = _source379.dtor_op1;
                  RAST._IExpr _10304___mcc_h9630 = _source379.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _10305___mcc_h9631 = _source379.dtor_format;
                  if (object.Equals(_10303___mcc_h9629, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source380 = _10304___mcc_h9630;
                    if (_source380.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _10306___mcc_h9635 = _source380.dtor_content;
                    } else if (_source380.is_ExprFromType) {
                      RAST._IType _10307___mcc_h9637 = _source380.dtor_tpe;
                    } else if (_source380.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _10308___mcc_h9639 = _source380.dtor_name;
                      if (object.Equals(_10308___mcc_h9639, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source380.is_Match) {
                      RAST._IExpr _10309___mcc_h9641 = _source380.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _10310___mcc_h9642 = _source380.dtor_cases;
                    } else if (_source380.is_StmtExpr) {
                      RAST._IExpr _10311___mcc_h9645 = _source380.dtor_stmt;
                      RAST._IExpr _10312___mcc_h9646 = _source380.dtor_rhs;
                    } else if (_source380.is_Block) {
                      RAST._IExpr _10313___mcc_h9649 = _source380.dtor_underlying;
                    } else if (_source380.is_StructBuild) {
                      RAST._IExpr _10314___mcc_h9651 = _source380.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _10315___mcc_h9652 = _source380.dtor_assignments;
                    } else if (_source380.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _10316___mcc_h9655 = _source380.dtor_arguments;
                    } else if (_source380.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10317___mcc_h9657 = _source380.dtor_op1;
                      RAST._IExpr _10318___mcc_h9658 = _source380.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _10319___mcc_h9659 = _source380.dtor_format;
                    } else if (_source380.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10320___mcc_h9663 = _source380.dtor_op2;
                      RAST._IExpr _10321___mcc_h9664 = _source380.dtor_left;
                      RAST._IExpr _10322___mcc_h9665 = _source380.dtor_right;
                      DAST.Format._IBinaryOpFormat _10323___mcc_h9666 = _source380.dtor_format2;
                    } else if (_source380.is_TypeAscription) {
                      RAST._IExpr _10324___mcc_h9671 = _source380.dtor_left;
                      RAST._IType _10325___mcc_h9672 = _source380.dtor_tpe;
                    } else if (_source380.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10326___mcc_h9675 = _source380.dtor_value;
                    } else if (_source380.is_LiteralBool) {
                      bool _10327___mcc_h9677 = _source380.dtor_bvalue;
                    } else if (_source380.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10328___mcc_h9679 = _source380.dtor_value;
                      bool _10329___mcc_h9680 = _source380.dtor_binary;
                    } else if (_source380.is_DeclareVar) {
                      RAST._IDeclareType _10330___mcc_h9683 = _source380.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10331___mcc_h9684 = _source380.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10332___mcc_h9685 = _source380.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10333___mcc_h9686 = _source380.dtor_optRhs;
                    } else if (_source380.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10334___mcc_h9691 = _source380.dtor_names;
                      RAST._IExpr _10335___mcc_h9692 = _source380.dtor_rhs;
                    } else if (_source380.is_IfExpr) {
                      RAST._IExpr _10336___mcc_h9695 = _source380.dtor_cond;
                      RAST._IExpr _10337___mcc_h9696 = _source380.dtor_thn;
                      RAST._IExpr _10338___mcc_h9697 = _source380.dtor_els;
                    } else if (_source380.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10339___mcc_h9701 = _source380.dtor_optCond;
                      RAST._IExpr _10340___mcc_h9702 = _source380.dtor_underlying;
                    } else if (_source380.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10341___mcc_h9705 = _source380.dtor_name;
                      RAST._IExpr _10342___mcc_h9706 = _source380.dtor_range;
                      RAST._IExpr _10343___mcc_h9707 = _source380.dtor_body;
                    } else if (_source380.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10344___mcc_h9711 = _source380.dtor_lbl;
                      RAST._IExpr _10345___mcc_h9712 = _source380.dtor_underlying;
                    } else if (_source380.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10346___mcc_h9715 = _source380.dtor_optLbl;
                    } else if (_source380.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10347___mcc_h9717 = _source380.dtor_optLbl;
                    } else if (_source380.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10348___mcc_h9719 = _source380.dtor_optExpr;
                    } else if (_source380.is_CallType) {
                      RAST._IExpr _10349___mcc_h9721 = _source380.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10350___mcc_h9722 = _source380.dtor_typeParameters;
                    } else if (_source380.is_Call) {
                      RAST._IExpr _10351___mcc_h9725 = _source380.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10352___mcc_h9726 = _source380.dtor_arguments;
                    } else if (_source380.is_Select) {
                      RAST._IExpr _10353___mcc_h9729 = _source380.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10354___mcc_h9730 = _source380.dtor_name;
                    } else if (_source380.is_MemberSelect) {
                      RAST._IExpr _10355___mcc_h9733 = _source380.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10356___mcc_h9734 = _source380.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10357___mcc_h9737 = _source380.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10358___mcc_h9738 = _source380.dtor_retType;
                      RAST._IExpr _10359___mcc_h9739 = _source380.dtor_body;
                    }
                  } else {
                  }
                } else if (_source379.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10360___mcc_h9743 = _source379.dtor_op2;
                  RAST._IExpr _10361___mcc_h9744 = _source379.dtor_left;
                  RAST._IExpr _10362___mcc_h9745 = _source379.dtor_right;
                  DAST.Format._IBinaryOpFormat _10363___mcc_h9746 = _source379.dtor_format2;
                } else if (_source379.is_TypeAscription) {
                  RAST._IExpr _10364___mcc_h9751 = _source379.dtor_left;
                  RAST._IType _10365___mcc_h9752 = _source379.dtor_tpe;
                } else if (_source379.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10366___mcc_h9755 = _source379.dtor_value;
                } else if (_source379.is_LiteralBool) {
                  bool _10367___mcc_h9757 = _source379.dtor_bvalue;
                } else if (_source379.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10368___mcc_h9759 = _source379.dtor_value;
                  bool _10369___mcc_h9760 = _source379.dtor_binary;
                } else if (_source379.is_DeclareVar) {
                  RAST._IDeclareType _10370___mcc_h9763 = _source379.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10371___mcc_h9764 = _source379.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10372___mcc_h9765 = _source379.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10373___mcc_h9766 = _source379.dtor_optRhs;
                } else if (_source379.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10374___mcc_h9771 = _source379.dtor_names;
                  RAST._IExpr _10375___mcc_h9772 = _source379.dtor_rhs;
                } else if (_source379.is_IfExpr) {
                  RAST._IExpr _10376___mcc_h9775 = _source379.dtor_cond;
                  RAST._IExpr _10377___mcc_h9776 = _source379.dtor_thn;
                  RAST._IExpr _10378___mcc_h9777 = _source379.dtor_els;
                } else if (_source379.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10379___mcc_h9781 = _source379.dtor_optCond;
                  RAST._IExpr _10380___mcc_h9782 = _source379.dtor_underlying;
                } else if (_source379.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10381___mcc_h9785 = _source379.dtor_name;
                  RAST._IExpr _10382___mcc_h9786 = _source379.dtor_range;
                  RAST._IExpr _10383___mcc_h9787 = _source379.dtor_body;
                } else if (_source379.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10384___mcc_h9791 = _source379.dtor_lbl;
                  RAST._IExpr _10385___mcc_h9792 = _source379.dtor_underlying;
                } else if (_source379.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10386___mcc_h9795 = _source379.dtor_optLbl;
                } else if (_source379.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10387___mcc_h9797 = _source379.dtor_optLbl;
                } else if (_source379.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10388___mcc_h9799 = _source379.dtor_optExpr;
                } else if (_source379.is_CallType) {
                  RAST._IExpr _10389___mcc_h9801 = _source379.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10390___mcc_h9802 = _source379.dtor_typeParameters;
                } else if (_source379.is_Call) {
                  RAST._IExpr _10391___mcc_h9805 = _source379.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10392___mcc_h9806 = _source379.dtor_arguments;
                } else if (_source379.is_Select) {
                  RAST._IExpr _10393___mcc_h9809 = _source379.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10394___mcc_h9810 = _source379.dtor_name;
                } else if (_source379.is_MemberSelect) {
                  RAST._IExpr _10395___mcc_h9813 = _source379.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10396___mcc_h9814 = _source379.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10397___mcc_h9817 = _source379.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10398___mcc_h9818 = _source379.dtor_retType;
                  RAST._IExpr _10399___mcc_h9819 = _source379.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_10283_field));
              if (_10282_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _10400_fromOwnership;
              _10400_fromOwnership = ((_10282_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2145;
              DCOMP._IOwnership _out2146;
              DCOMP.COMP.FromOwnership(r, _10400_fromOwnership, expectedOwnership, out _out2145, out _out2146);
              r = _out2145;
              resultingOwnership = _out2146;
              readIdents = _10291_recIdents;
            }
            return ;
          }
        } else {
          DAST._IType _10401___mcc_h262 = _source292.dtor_elemType;
          DAST._IExpression _10402___mcc_h263 = _source292.dtor_collection;
          bool _10403___mcc_h264 = _source292.dtor_is__forall;
          DAST._IExpression _10404___mcc_h265 = _source292.dtor_lambda;
          DAST._IType _10405_fieldType = _4966___mcc_h57;
          bool _10406_isDatatype = _4965___mcc_h56;
          bool _10407_isConstant = _4964___mcc_h55;
          Dafny.ISequence<Dafny.Rune> _10408_field = _4963___mcc_h54;
          DAST._IExpression _10409_on = _4962___mcc_h53;
          {
            if (_10406_isDatatype) {
              RAST._IExpr _10410_onExpr;
              DCOMP._IOwnership _10411_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10412_recIdents;
              RAST._IExpr _out2147;
              DCOMP._IOwnership _out2148;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2149;
              (this).GenExpr(_10409_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2147, out _out2148, out _out2149);
              _10410_onExpr = _out2147;
              _10411_onOwned = _out2148;
              _10412_recIdents = _out2149;
              r = ((_10410_onExpr).Sel(DCOMP.__default.escapeName(_10408_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _10413_typ;
              RAST._IType _out2150;
              _out2150 = (this).GenType(_10405_fieldType, false, false);
              _10413_typ = _out2150;
              if (((_10413_typ).CanReadWithoutClone()) && ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())))) {
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                RAST._IExpr _out2151;
                DCOMP._IOwnership _out2152;
                DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2151, out _out2152);
                r = _out2151;
                resultingOwnership = _out2152;
              }
              readIdents = _10412_recIdents;
            } else {
              RAST._IExpr _10414_onExpr;
              DCOMP._IOwnership _10415_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10416_recIdents;
              RAST._IExpr _out2153;
              DCOMP._IOwnership _out2154;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2155;
              (this).GenExpr(_10409_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2153, out _out2154, out _out2155);
              _10414_onExpr = _out2153;
              _10415_onOwned = _out2154;
              _10416_recIdents = _out2155;
              r = _10414_onExpr;
              if (!object.Equals(_10414_onExpr, RAST.__default.self)) {
                RAST._IExpr _source381 = _10414_onExpr;
                if (_source381.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _10417___mcc_h9823 = _source381.dtor_content;
                } else if (_source381.is_ExprFromType) {
                  RAST._IType _10418___mcc_h9825 = _source381.dtor_tpe;
                } else if (_source381.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _10419___mcc_h9827 = _source381.dtor_name;
                } else if (_source381.is_Match) {
                  RAST._IExpr _10420___mcc_h9829 = _source381.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _10421___mcc_h9830 = _source381.dtor_cases;
                } else if (_source381.is_StmtExpr) {
                  RAST._IExpr _10422___mcc_h9833 = _source381.dtor_stmt;
                  RAST._IExpr _10423___mcc_h9834 = _source381.dtor_rhs;
                } else if (_source381.is_Block) {
                  RAST._IExpr _10424___mcc_h9837 = _source381.dtor_underlying;
                } else if (_source381.is_StructBuild) {
                  RAST._IExpr _10425___mcc_h9839 = _source381.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _10426___mcc_h9840 = _source381.dtor_assignments;
                } else if (_source381.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _10427___mcc_h9843 = _source381.dtor_arguments;
                } else if (_source381.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10428___mcc_h9845 = _source381.dtor_op1;
                  RAST._IExpr _10429___mcc_h9846 = _source381.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _10430___mcc_h9847 = _source381.dtor_format;
                  if (object.Equals(_10428___mcc_h9845, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source382 = _10429___mcc_h9846;
                    if (_source382.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _10431___mcc_h9851 = _source382.dtor_content;
                    } else if (_source382.is_ExprFromType) {
                      RAST._IType _10432___mcc_h9853 = _source382.dtor_tpe;
                    } else if (_source382.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _10433___mcc_h9855 = _source382.dtor_name;
                      if (object.Equals(_10433___mcc_h9855, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source382.is_Match) {
                      RAST._IExpr _10434___mcc_h9857 = _source382.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _10435___mcc_h9858 = _source382.dtor_cases;
                    } else if (_source382.is_StmtExpr) {
                      RAST._IExpr _10436___mcc_h9861 = _source382.dtor_stmt;
                      RAST._IExpr _10437___mcc_h9862 = _source382.dtor_rhs;
                    } else if (_source382.is_Block) {
                      RAST._IExpr _10438___mcc_h9865 = _source382.dtor_underlying;
                    } else if (_source382.is_StructBuild) {
                      RAST._IExpr _10439___mcc_h9867 = _source382.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _10440___mcc_h9868 = _source382.dtor_assignments;
                    } else if (_source382.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _10441___mcc_h9871 = _source382.dtor_arguments;
                    } else if (_source382.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10442___mcc_h9873 = _source382.dtor_op1;
                      RAST._IExpr _10443___mcc_h9874 = _source382.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _10444___mcc_h9875 = _source382.dtor_format;
                    } else if (_source382.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10445___mcc_h9879 = _source382.dtor_op2;
                      RAST._IExpr _10446___mcc_h9880 = _source382.dtor_left;
                      RAST._IExpr _10447___mcc_h9881 = _source382.dtor_right;
                      DAST.Format._IBinaryOpFormat _10448___mcc_h9882 = _source382.dtor_format2;
                    } else if (_source382.is_TypeAscription) {
                      RAST._IExpr _10449___mcc_h9887 = _source382.dtor_left;
                      RAST._IType _10450___mcc_h9888 = _source382.dtor_tpe;
                    } else if (_source382.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10451___mcc_h9891 = _source382.dtor_value;
                    } else if (_source382.is_LiteralBool) {
                      bool _10452___mcc_h9893 = _source382.dtor_bvalue;
                    } else if (_source382.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10453___mcc_h9895 = _source382.dtor_value;
                      bool _10454___mcc_h9896 = _source382.dtor_binary;
                    } else if (_source382.is_DeclareVar) {
                      RAST._IDeclareType _10455___mcc_h9899 = _source382.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10456___mcc_h9900 = _source382.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10457___mcc_h9901 = _source382.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10458___mcc_h9902 = _source382.dtor_optRhs;
                    } else if (_source382.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10459___mcc_h9907 = _source382.dtor_names;
                      RAST._IExpr _10460___mcc_h9908 = _source382.dtor_rhs;
                    } else if (_source382.is_IfExpr) {
                      RAST._IExpr _10461___mcc_h9911 = _source382.dtor_cond;
                      RAST._IExpr _10462___mcc_h9912 = _source382.dtor_thn;
                      RAST._IExpr _10463___mcc_h9913 = _source382.dtor_els;
                    } else if (_source382.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10464___mcc_h9917 = _source382.dtor_optCond;
                      RAST._IExpr _10465___mcc_h9918 = _source382.dtor_underlying;
                    } else if (_source382.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10466___mcc_h9921 = _source382.dtor_name;
                      RAST._IExpr _10467___mcc_h9922 = _source382.dtor_range;
                      RAST._IExpr _10468___mcc_h9923 = _source382.dtor_body;
                    } else if (_source382.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10469___mcc_h9927 = _source382.dtor_lbl;
                      RAST._IExpr _10470___mcc_h9928 = _source382.dtor_underlying;
                    } else if (_source382.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10471___mcc_h9931 = _source382.dtor_optLbl;
                    } else if (_source382.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10472___mcc_h9933 = _source382.dtor_optLbl;
                    } else if (_source382.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10473___mcc_h9935 = _source382.dtor_optExpr;
                    } else if (_source382.is_CallType) {
                      RAST._IExpr _10474___mcc_h9937 = _source382.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10475___mcc_h9938 = _source382.dtor_typeParameters;
                    } else if (_source382.is_Call) {
                      RAST._IExpr _10476___mcc_h9941 = _source382.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10477___mcc_h9942 = _source382.dtor_arguments;
                    } else if (_source382.is_Select) {
                      RAST._IExpr _10478___mcc_h9945 = _source382.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10479___mcc_h9946 = _source382.dtor_name;
                    } else if (_source382.is_MemberSelect) {
                      RAST._IExpr _10480___mcc_h9949 = _source382.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10481___mcc_h9950 = _source382.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10482___mcc_h9953 = _source382.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10483___mcc_h9954 = _source382.dtor_retType;
                      RAST._IExpr _10484___mcc_h9955 = _source382.dtor_body;
                    }
                  } else {
                  }
                } else if (_source381.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10485___mcc_h9959 = _source381.dtor_op2;
                  RAST._IExpr _10486___mcc_h9960 = _source381.dtor_left;
                  RAST._IExpr _10487___mcc_h9961 = _source381.dtor_right;
                  DAST.Format._IBinaryOpFormat _10488___mcc_h9962 = _source381.dtor_format2;
                } else if (_source381.is_TypeAscription) {
                  RAST._IExpr _10489___mcc_h9967 = _source381.dtor_left;
                  RAST._IType _10490___mcc_h9968 = _source381.dtor_tpe;
                } else if (_source381.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10491___mcc_h9971 = _source381.dtor_value;
                } else if (_source381.is_LiteralBool) {
                  bool _10492___mcc_h9973 = _source381.dtor_bvalue;
                } else if (_source381.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10493___mcc_h9975 = _source381.dtor_value;
                  bool _10494___mcc_h9976 = _source381.dtor_binary;
                } else if (_source381.is_DeclareVar) {
                  RAST._IDeclareType _10495___mcc_h9979 = _source381.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10496___mcc_h9980 = _source381.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10497___mcc_h9981 = _source381.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10498___mcc_h9982 = _source381.dtor_optRhs;
                } else if (_source381.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10499___mcc_h9987 = _source381.dtor_names;
                  RAST._IExpr _10500___mcc_h9988 = _source381.dtor_rhs;
                } else if (_source381.is_IfExpr) {
                  RAST._IExpr _10501___mcc_h9991 = _source381.dtor_cond;
                  RAST._IExpr _10502___mcc_h9992 = _source381.dtor_thn;
                  RAST._IExpr _10503___mcc_h9993 = _source381.dtor_els;
                } else if (_source381.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10504___mcc_h9997 = _source381.dtor_optCond;
                  RAST._IExpr _10505___mcc_h9998 = _source381.dtor_underlying;
                } else if (_source381.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10506___mcc_h10001 = _source381.dtor_name;
                  RAST._IExpr _10507___mcc_h10002 = _source381.dtor_range;
                  RAST._IExpr _10508___mcc_h10003 = _source381.dtor_body;
                } else if (_source381.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10509___mcc_h10007 = _source381.dtor_lbl;
                  RAST._IExpr _10510___mcc_h10008 = _source381.dtor_underlying;
                } else if (_source381.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10511___mcc_h10011 = _source381.dtor_optLbl;
                } else if (_source381.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10512___mcc_h10013 = _source381.dtor_optLbl;
                } else if (_source381.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10513___mcc_h10015 = _source381.dtor_optExpr;
                } else if (_source381.is_CallType) {
                  RAST._IExpr _10514___mcc_h10017 = _source381.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10515___mcc_h10018 = _source381.dtor_typeParameters;
                } else if (_source381.is_Call) {
                  RAST._IExpr _10516___mcc_h10021 = _source381.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10517___mcc_h10022 = _source381.dtor_arguments;
                } else if (_source381.is_Select) {
                  RAST._IExpr _10518___mcc_h10025 = _source381.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10519___mcc_h10026 = _source381.dtor_name;
                } else if (_source381.is_MemberSelect) {
                  RAST._IExpr _10520___mcc_h10029 = _source381.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10521___mcc_h10030 = _source381.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10522___mcc_h10033 = _source381.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10523___mcc_h10034 = _source381.dtor_retType;
                  RAST._IExpr _10524___mcc_h10035 = _source381.dtor_body;
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_10408_field));
              if (_10407_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              DCOMP._IOwnership _10525_fromOwnership;
              _10525_fromOwnership = ((_10407_isConstant) ? (DCOMP.Ownership.create_OwnershipOwned()) : (DCOMP.Ownership.create_OwnershipBorrowed()));
              RAST._IExpr _out2156;
              DCOMP._IOwnership _out2157;
              DCOMP.COMP.FromOwnership(r, _10525_fromOwnership, expectedOwnership, out _out2156, out _out2157);
              r = _out2156;
              resultingOwnership = _out2157;
              readIdents = _10416_recIdents;
            }
            return ;
          }
        }
      } else if (_source289.is_SelectFn) {
        DAST._IExpression _10526___mcc_h270 = _source289.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _10527___mcc_h271 = _source289.dtor_field;
        bool _10528___mcc_h272 = _source289.dtor_onDatatype;
        bool _10529___mcc_h273 = _source289.dtor_isStatic;
        BigInteger _10530___mcc_h274 = _source289.dtor_arity;
        BigInteger _10531_arity = _10530___mcc_h274;
        bool _10532_isStatic = _10529___mcc_h273;
        bool _10533_isDatatype = _10528___mcc_h272;
        Dafny.ISequence<Dafny.Rune> _10534_field = _10527___mcc_h271;
        DAST._IExpression _10535_on = _10526___mcc_h270;
        {
          RAST._IExpr _10536_onExpr;
          DCOMP._IOwnership _10537_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10538_recIdents;
          RAST._IExpr _out2158;
          DCOMP._IOwnership _out2159;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2160;
          (this).GenExpr(_10535_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2158, out _out2159, out _out2160);
          _10536_onExpr = _out2158;
          _10537_onOwned = _out2159;
          _10538_recIdents = _out2160;
          Dafny.ISequence<Dafny.Rune> _10539_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _10540_onString;
          _10540_onString = (_10536_onExpr)._ToString(DCOMP.__default.IND);
          if (_10532_isStatic) {
            _10539_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10540_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeName(_10534_field));
          } else {
            _10539_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _10539_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10539_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _10540_onString), ((object.Equals(_10537_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _10541_args;
            _10541_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _10542_i;
            _10542_i = BigInteger.Zero;
            while ((_10542_i) < (_10531_arity)) {
              if ((_10542_i).Sign == 1) {
                _10541_args = Dafny.Sequence<Dafny.Rune>.Concat(_10541_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _10541_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10541_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_10542_i));
              _10542_i = (_10542_i) + (BigInteger.One);
            }
            _10539_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10539_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _10541_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _10539_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10539_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), DCOMP.__default.escapeName(_10534_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _10541_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _10539_s = Dafny.Sequence<Dafny.Rune>.Concat(_10539_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _10539_s = Dafny.Sequence<Dafny.Rune>.Concat(_10539_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _10543_typeShape;
          _10543_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _10544_i;
          _10544_i = BigInteger.Zero;
          while ((_10544_i) < (_10531_arity)) {
            if ((_10544_i).Sign == 1) {
              _10543_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10543_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _10543_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10543_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _10544_i = (_10544_i) + (BigInteger.One);
          }
          _10543_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10543_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _10539_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _10539_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _10543_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          r = RAST.Expr.create_RawExpr(_10539_s);
          RAST._IExpr _out2161;
          DCOMP._IOwnership _out2162;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2161, out _out2162);
          r = _out2161;
          resultingOwnership = _out2162;
          readIdents = _10538_recIdents;
          return ;
        }
      } else if (_source289.is_Index) {
        DAST._IExpression _10545___mcc_h275 = _source289.dtor_expr;
        DAST._ICollKind _10546___mcc_h276 = _source289.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _10547___mcc_h277 = _source289.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _10548_indices = _10547___mcc_h277;
        DAST._ICollKind _10549_collKind = _10546___mcc_h276;
        DAST._IExpression _10550_on = _10545___mcc_h275;
        {
          RAST._IExpr _10551_onExpr;
          DCOMP._IOwnership _10552_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10553_recIdents;
          RAST._IExpr _out2163;
          DCOMP._IOwnership _out2164;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2165;
          (this).GenExpr(_10550_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2163, out _out2164, out _out2165);
          _10551_onExpr = _out2163;
          _10552_onOwned = _out2164;
          _10553_recIdents = _out2165;
          readIdents = _10553_recIdents;
          r = _10551_onExpr;
          BigInteger _10554_i;
          _10554_i = BigInteger.Zero;
          while ((_10554_i) < (new BigInteger((_10548_indices).Count))) {
            if (object.Equals(_10549_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _10555_idx;
            DCOMP._IOwnership _10556_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10557_recIdentsIdx;
            RAST._IExpr _out2166;
            DCOMP._IOwnership _out2167;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2168;
            (this).GenExpr((_10548_indices).Select(_10554_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2166, out _out2167, out _out2168);
            _10555_idx = _out2166;
            _10556_idxOwned = _out2167;
            _10557_recIdentsIdx = _out2168;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_10555_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10557_recIdentsIdx);
            _10554_i = (_10554_i) + (BigInteger.One);
          }
          RAST._IExpr _out2169;
          DCOMP._IOwnership _out2170;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2169, out _out2170);
          r = _out2169;
          resultingOwnership = _out2170;
          return ;
        }
      } else if (_source289.is_IndexRange) {
        DAST._IExpression _10558___mcc_h278 = _source289.dtor_expr;
        bool _10559___mcc_h279 = _source289.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _10560___mcc_h280 = _source289.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _10561___mcc_h281 = _source289.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _10562_high = _10561___mcc_h281;
        Std.Wrappers._IOption<DAST._IExpression> _10563_low = _10560___mcc_h280;
        bool _10564_isArray = _10559___mcc_h279;
        DAST._IExpression _10565_on = _10558___mcc_h278;
        {
          RAST._IExpr _10566_onExpr;
          DCOMP._IOwnership _10567_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10568_recIdents;
          RAST._IExpr _out2171;
          DCOMP._IOwnership _out2172;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2173;
          (this).GenExpr(_10565_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2171, out _out2172, out _out2173);
          _10566_onExpr = _out2171;
          _10567_onOwned = _out2172;
          _10568_recIdents = _out2173;
          readIdents = _10568_recIdents;
          Dafny.ISequence<Dafny.Rune> _10569_methodName;
          _10569_methodName = (((_10563_low).is_Some) ? ((((_10562_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_10562_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _10570_arguments;
          _10570_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source383 = _10563_low;
          if (_source383.is_None) {
          } else {
            DAST._IExpression _10571___mcc_h10039 = _source383.dtor_value;
            DAST._IExpression _10572_l = _10571___mcc_h10039;
            {
              RAST._IExpr _10573_lExpr;
              DCOMP._IOwnership _10574___v158;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10575_recIdentsL;
              RAST._IExpr _out2174;
              DCOMP._IOwnership _out2175;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2176;
              (this).GenExpr(_10572_l, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2174, out _out2175, out _out2176);
              _10573_lExpr = _out2174;
              _10574___v158 = _out2175;
              _10575_recIdentsL = _out2176;
              _10570_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10570_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_10573_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10575_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source384 = _10562_high;
          if (_source384.is_None) {
          } else {
            DAST._IExpression _10576___mcc_h10040 = _source384.dtor_value;
            DAST._IExpression _10577_h = _10576___mcc_h10040;
            {
              RAST._IExpr _10578_hExpr;
              DCOMP._IOwnership _10579___v159;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10580_recIdentsH;
              RAST._IExpr _out2177;
              DCOMP._IOwnership _out2178;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2179;
              (this).GenExpr(_10577_h, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2177, out _out2178, out _out2179);
              _10578_hExpr = _out2177;
              _10579___v159 = _out2178;
              _10580_recIdentsH = _out2179;
              _10570_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10570_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_10578_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10580_recIdentsH);
            }
          }
          r = _10566_onExpr;
          if (_10564_isArray) {
            if (!(_10569_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _10569_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _10569_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _10569_methodName))).Apply(_10570_arguments);
          } else {
            if (!(_10569_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_10569_methodName)).Apply(_10570_arguments);
            }
          }
          RAST._IExpr _out2180;
          DCOMP._IOwnership _out2181;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2180, out _out2181);
          r = _out2180;
          resultingOwnership = _out2181;
          return ;
        }
      } else if (_source289.is_TupleSelect) {
        DAST._IExpression _10581___mcc_h282 = _source289.dtor_expr;
        BigInteger _10582___mcc_h283 = _source289.dtor_index;
        DAST._IType _10583___mcc_h284 = _source289.dtor_fieldType;
        DAST._IType _10584_fieldType = _10583___mcc_h284;
        BigInteger _10585_idx = _10582___mcc_h283;
        DAST._IExpression _10586_on = _10581___mcc_h282;
        {
          RAST._IExpr _10587_onExpr;
          DCOMP._IOwnership _10588_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10589_recIdents;
          RAST._IExpr _out2182;
          DCOMP._IOwnership _out2183;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2184;
          (this).GenExpr(_10586_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2182, out _out2183, out _out2184);
          _10587_onExpr = _out2182;
          _10588_onOwnership = _out2183;
          _10589_recIdents = _out2184;
          r = (_10587_onExpr).Sel(Std.Strings.__default.OfNat(_10585_idx));
          RAST._IExpr _out2185;
          DCOMP._IOwnership _out2186;
          DCOMP.COMP.FromOwnership(r, _10588_onOwnership, expectedOwnership, out _out2185, out _out2186);
          r = _out2185;
          resultingOwnership = _out2186;
          readIdents = _10589_recIdents;
          return ;
        }
      } else if (_source289.is_Call) {
        DAST._IExpression _10590___mcc_h285 = _source289.dtor_on;
        DAST._ICallName _10591___mcc_h286 = _source289.dtor_callName;
        Dafny.ISequence<DAST._IType> _10592___mcc_h287 = _source289.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _10593___mcc_h288 = _source289.dtor_args;
        Dafny.ISequence<DAST._IExpression> _10594_args = _10593___mcc_h288;
        Dafny.ISequence<DAST._IType> _10595_typeArgs = _10592___mcc_h287;
        DAST._ICallName _10596_name = _10591___mcc_h286;
        DAST._IExpression _10597_on = _10590___mcc_h285;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IExpr _10598_onExpr;
          DCOMP._IOwnership _10599___v160;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10600_recIdents;
          RAST._IExpr _out2187;
          DCOMP._IOwnership _out2188;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2189;
          (this).GenExpr(_10597_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2187, out _out2188, out _out2189);
          _10598_onExpr = _out2187;
          _10599___v160 = _out2188;
          _10600_recIdents = _out2189;
          Dafny.ISequence<RAST._IType> _10601_typeExprs;
          _10601_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_10595_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _hi39 = new BigInteger((_10595_typeArgs).Count);
            for (BigInteger _10602_typeI = BigInteger.Zero; _10602_typeI < _hi39; _10602_typeI++) {
              RAST._IType _10603_typeExpr;
              RAST._IType _out2190;
              _out2190 = (this).GenType((_10595_typeArgs).Select(_10602_typeI), false, false);
              _10603_typeExpr = _out2190;
              _10601_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_10601_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_10603_typeExpr));
            }
          }
          Dafny.ISequence<RAST._IExpr> _10604_argExprs;
          _10604_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi40 = new BigInteger((_10594_args).Count);
          for (BigInteger _10605_i = BigInteger.Zero; _10605_i < _hi40; _10605_i++) {
            DCOMP._IOwnership _10606_argOwnership;
            _10606_argOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
            if (((_10596_name).is_CallName) && ((_10605_i) < (new BigInteger((((_10596_name).dtor_signature)).Count)))) {
              RAST._IType _10607_tpe;
              RAST._IType _out2191;
              _out2191 = (this).GenType(((((_10596_name).dtor_signature)).Select(_10605_i)).dtor_typ, false, false);
              _10607_tpe = _out2191;
              if ((_10607_tpe).CanReadWithoutClone()) {
                _10606_argOwnership = DCOMP.Ownership.create_OwnershipOwned();
              }
            }
            RAST._IExpr _10608_argExpr;
            DCOMP._IOwnership _10609___v161;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10610_argIdents;
            RAST._IExpr _out2192;
            DCOMP._IOwnership _out2193;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2194;
            (this).GenExpr((_10594_args).Select(_10605_i), selfIdent, env, _10606_argOwnership, out _out2192, out _out2193, out _out2194);
            _10608_argExpr = _out2192;
            _10609___v161 = _out2193;
            _10610_argIdents = _out2194;
            _10604_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_10604_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_10608_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10610_argIdents);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10600_recIdents);
          Dafny.ISequence<Dafny.Rune> _10611_renderedName;
          _10611_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source385) => {
            if (_source385.is_CallName) {
              Dafny.ISequence<Dafny.Rune> _10612___mcc_h10041 = _source385.dtor_name;
              Std.Wrappers._IOption<DAST._IType> _10613___mcc_h10042 = _source385.dtor_onType;
              Dafny.ISequence<DAST._IFormal> _10614___mcc_h10043 = _source385.dtor_signature;
              Dafny.ISequence<Dafny.Rune> _10615_ident = _10612___mcc_h10041;
              return DCOMP.__default.escapeName(_10615_ident);
            } else if (_source385.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source385.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source385.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_10596_name);
          DAST._IExpression _source386 = _10597_on;
          if (_source386.is_Literal) {
            DAST._ILiteral _10616___mcc_h10044 = _source386.dtor_Literal_i_a0;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source387 = _10596_name;
                if (_source387.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10617___mcc_h10256 = _source387.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10618___mcc_h10257 = _source387.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10619___mcc_h10258 = _source387.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source388 = _10618___mcc_h10257;
                  if (_source388.is_None) {
                  } else {
                    DAST._IType _10620___mcc_h10262 = _source388.dtor_value;
                    DAST._IType _10621_tpe = _10620___mcc_h10262;
                    RAST._IType _10622_typ;
                    RAST._IType _out2195;
                    _out2195 = (this).GenType(_10621_tpe, false, false);
                    _10622_typ = _out2195;
                    if ((_10622_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source387.is_MapBuilderAdd) {
                } else if (_source387.is_MapBuilderBuild) {
                } else if (_source387.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _10623___mcc_h10046 = _source386.dtor_Ident_i_a0;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source389 = _10596_name;
                if (_source389.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10624___mcc_h10264 = _source389.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10625___mcc_h10265 = _source389.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10626___mcc_h10266 = _source389.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source390 = _10625___mcc_h10265;
                  if (_source390.is_None) {
                  } else {
                    DAST._IType _10627___mcc_h10270 = _source390.dtor_value;
                    DAST._IType _10628_tpe = _10627___mcc_h10270;
                    RAST._IType _10629_typ;
                    RAST._IType _out2196;
                    _out2196 = (this).GenType(_10628_tpe, false, false);
                    _10629_typ = _out2196;
                    if ((_10629_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source389.is_MapBuilderAdd) {
                } else if (_source389.is_MapBuilderBuild) {
                } else if (_source389.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10630___mcc_h10048 = _source386.dtor_Companion_i_a0;
            {
              _10598_onExpr = (_10598_onExpr).MSel(_10611_renderedName);
            }
          } else if (_source386.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _10631___mcc_h10050 = _source386.dtor_Tuple_i_a0;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source391 = _10596_name;
                if (_source391.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10632___mcc_h10272 = _source391.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10633___mcc_h10273 = _source391.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10634___mcc_h10274 = _source391.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source392 = _10633___mcc_h10273;
                  if (_source392.is_None) {
                  } else {
                    DAST._IType _10635___mcc_h10278 = _source392.dtor_value;
                    DAST._IType _10636_tpe = _10635___mcc_h10278;
                    RAST._IType _10637_typ;
                    RAST._IType _out2197;
                    _out2197 = (this).GenType(_10636_tpe, false, false);
                    _10637_typ = _out2197;
                    if ((_10637_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source391.is_MapBuilderAdd) {
                } else if (_source391.is_MapBuilderBuild) {
                } else if (_source391.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10638___mcc_h10052 = _source386.dtor_path;
            Dafny.ISequence<DAST._IType> _10639___mcc_h10053 = _source386.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _10640___mcc_h10054 = _source386.dtor_args;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source393 = _10596_name;
                if (_source393.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10641___mcc_h10280 = _source393.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10642___mcc_h10281 = _source393.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10643___mcc_h10282 = _source393.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source394 = _10642___mcc_h10281;
                  if (_source394.is_None) {
                  } else {
                    DAST._IType _10644___mcc_h10286 = _source394.dtor_value;
                    DAST._IType _10645_tpe = _10644___mcc_h10286;
                    RAST._IType _10646_typ;
                    RAST._IType _out2198;
                    _out2198 = (this).GenType(_10645_tpe, false, false);
                    _10646_typ = _out2198;
                    if ((_10646_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source393.is_MapBuilderAdd) {
                } else if (_source393.is_MapBuilderBuild) {
                } else if (_source393.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_NewUninitArray) {
            Dafny.ISequence<DAST._IExpression> _10647___mcc_h10058 = _source386.dtor_dims;
            DAST._IType _10648___mcc_h10059 = _source386.dtor_typ;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source395 = _10596_name;
                if (_source395.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10649___mcc_h10288 = _source395.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10650___mcc_h10289 = _source395.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10651___mcc_h10290 = _source395.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source396 = _10650___mcc_h10289;
                  if (_source396.is_None) {
                  } else {
                    DAST._IType _10652___mcc_h10294 = _source396.dtor_value;
                    DAST._IType _10653_tpe = _10652___mcc_h10294;
                    RAST._IType _10654_typ;
                    RAST._IType _out2199;
                    _out2199 = (this).GenType(_10653_tpe, false, false);
                    _10654_typ = _out2199;
                    if ((_10654_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source395.is_MapBuilderAdd) {
                } else if (_source395.is_MapBuilderBuild) {
                } else if (_source395.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_ArrayIndexToInt) {
            DAST._IExpression _10655___mcc_h10062 = _source386.dtor_value;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source397 = _10596_name;
                if (_source397.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10656___mcc_h10296 = _source397.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10657___mcc_h10297 = _source397.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10658___mcc_h10298 = _source397.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source398 = _10657___mcc_h10297;
                  if (_source398.is_None) {
                  } else {
                    DAST._IType _10659___mcc_h10302 = _source398.dtor_value;
                    DAST._IType _10660_tpe = _10659___mcc_h10302;
                    RAST._IType _10661_typ;
                    RAST._IType _out2200;
                    _out2200 = (this).GenType(_10660_tpe, false, false);
                    _10661_typ = _out2200;
                    if ((_10661_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source397.is_MapBuilderAdd) {
                } else if (_source397.is_MapBuilderBuild) {
                } else if (_source397.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_FinalizeNewArray) {
            DAST._IExpression _10662___mcc_h10064 = _source386.dtor_value;
            DAST._IType _10663___mcc_h10065 = _source386.dtor_typ;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source399 = _10596_name;
                if (_source399.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10664___mcc_h10304 = _source399.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10665___mcc_h10305 = _source399.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10666___mcc_h10306 = _source399.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source400 = _10665___mcc_h10305;
                  if (_source400.is_None) {
                  } else {
                    DAST._IType _10667___mcc_h10310 = _source400.dtor_value;
                    DAST._IType _10668_tpe = _10667___mcc_h10310;
                    RAST._IType _10669_typ;
                    RAST._IType _out2201;
                    _out2201 = (this).GenType(_10668_tpe, false, false);
                    _10669_typ = _out2201;
                    if ((_10669_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source399.is_MapBuilderAdd) {
                } else if (_source399.is_MapBuilderBuild) {
                } else if (_source399.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_DatatypeValue) {
            DAST._IDatatypeType _10670___mcc_h10068 = _source386.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _10671___mcc_h10069 = _source386.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _10672___mcc_h10070 = _source386.dtor_variant;
            bool _10673___mcc_h10071 = _source386.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _10674___mcc_h10072 = _source386.dtor_contents;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source401 = _10596_name;
                if (_source401.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10675___mcc_h10312 = _source401.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10676___mcc_h10313 = _source401.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10677___mcc_h10314 = _source401.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source402 = _10676___mcc_h10313;
                  if (_source402.is_None) {
                  } else {
                    DAST._IType _10678___mcc_h10318 = _source402.dtor_value;
                    DAST._IType _10679_tpe = _10678___mcc_h10318;
                    RAST._IType _10680_typ;
                    RAST._IType _out2202;
                    _out2202 = (this).GenType(_10679_tpe, false, false);
                    _10680_typ = _out2202;
                    if ((_10680_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source401.is_MapBuilderAdd) {
                } else if (_source401.is_MapBuilderBuild) {
                } else if (_source401.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Convert) {
            DAST._IExpression _10681___mcc_h10078 = _source386.dtor_value;
            DAST._IType _10682___mcc_h10079 = _source386.dtor_from;
            DAST._IType _10683___mcc_h10080 = _source386.dtor_typ;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source403 = _10596_name;
                if (_source403.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10684___mcc_h10320 = _source403.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10685___mcc_h10321 = _source403.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10686___mcc_h10322 = _source403.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source404 = _10685___mcc_h10321;
                  if (_source404.is_None) {
                  } else {
                    DAST._IType _10687___mcc_h10326 = _source404.dtor_value;
                    DAST._IType _10688_tpe = _10687___mcc_h10326;
                    RAST._IType _10689_typ;
                    RAST._IType _out2203;
                    _out2203 = (this).GenType(_10688_tpe, false, false);
                    _10689_typ = _out2203;
                    if ((_10689_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source403.is_MapBuilderAdd) {
                } else if (_source403.is_MapBuilderBuild) {
                } else if (_source403.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_SeqConstruct) {
            DAST._IExpression _10690___mcc_h10084 = _source386.dtor_length;
            DAST._IExpression _10691___mcc_h10085 = _source386.dtor_elem;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source405 = _10596_name;
                if (_source405.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10692___mcc_h10328 = _source405.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10693___mcc_h10329 = _source405.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10694___mcc_h10330 = _source405.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source406 = _10693___mcc_h10329;
                  if (_source406.is_None) {
                  } else {
                    DAST._IType _10695___mcc_h10334 = _source406.dtor_value;
                    DAST._IType _10696_tpe = _10695___mcc_h10334;
                    RAST._IType _10697_typ;
                    RAST._IType _out2204;
                    _out2204 = (this).GenType(_10696_tpe, false, false);
                    _10697_typ = _out2204;
                    if ((_10697_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source405.is_MapBuilderAdd) {
                } else if (_source405.is_MapBuilderBuild) {
                } else if (_source405.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _10698___mcc_h10088 = _source386.dtor_elements;
            DAST._IType _10699___mcc_h10089 = _source386.dtor_typ;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source407 = _10596_name;
                if (_source407.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10700___mcc_h10336 = _source407.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10701___mcc_h10337 = _source407.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10702___mcc_h10338 = _source407.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source408 = _10701___mcc_h10337;
                  if (_source408.is_None) {
                  } else {
                    DAST._IType _10703___mcc_h10342 = _source408.dtor_value;
                    DAST._IType _10704_tpe = _10703___mcc_h10342;
                    RAST._IType _10705_typ;
                    RAST._IType _out2205;
                    _out2205 = (this).GenType(_10704_tpe, false, false);
                    _10705_typ = _out2205;
                    if ((_10705_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source407.is_MapBuilderAdd) {
                } else if (_source407.is_MapBuilderBuild) {
                } else if (_source407.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _10706___mcc_h10092 = _source386.dtor_elements;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source409 = _10596_name;
                if (_source409.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10707___mcc_h10344 = _source409.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10708___mcc_h10345 = _source409.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10709___mcc_h10346 = _source409.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source410 = _10708___mcc_h10345;
                  if (_source410.is_None) {
                  } else {
                    DAST._IType _10710___mcc_h10350 = _source410.dtor_value;
                    DAST._IType _10711_tpe = _10710___mcc_h10350;
                    RAST._IType _10712_typ;
                    RAST._IType _out2206;
                    _out2206 = (this).GenType(_10711_tpe, false, false);
                    _10712_typ = _out2206;
                    if ((_10712_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source409.is_MapBuilderAdd) {
                } else if (_source409.is_MapBuilderBuild) {
                } else if (_source409.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _10713___mcc_h10094 = _source386.dtor_elements;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source411 = _10596_name;
                if (_source411.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10714___mcc_h10352 = _source411.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10715___mcc_h10353 = _source411.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10716___mcc_h10354 = _source411.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source412 = _10715___mcc_h10353;
                  if (_source412.is_None) {
                  } else {
                    DAST._IType _10717___mcc_h10358 = _source412.dtor_value;
                    DAST._IType _10718_tpe = _10717___mcc_h10358;
                    RAST._IType _10719_typ;
                    RAST._IType _out2207;
                    _out2207 = (this).GenType(_10718_tpe, false, false);
                    _10719_typ = _out2207;
                    if ((_10719_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source411.is_MapBuilderAdd) {
                } else if (_source411.is_MapBuilderBuild) {
                } else if (_source411.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _10720___mcc_h10096 = _source386.dtor_mapElems;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source413 = _10596_name;
                if (_source413.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10721___mcc_h10360 = _source413.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10722___mcc_h10361 = _source413.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10723___mcc_h10362 = _source413.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source414 = _10722___mcc_h10361;
                  if (_source414.is_None) {
                  } else {
                    DAST._IType _10724___mcc_h10366 = _source414.dtor_value;
                    DAST._IType _10725_tpe = _10724___mcc_h10366;
                    RAST._IType _10726_typ;
                    RAST._IType _out2208;
                    _out2208 = (this).GenType(_10725_tpe, false, false);
                    _10726_typ = _out2208;
                    if ((_10726_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source413.is_MapBuilderAdd) {
                } else if (_source413.is_MapBuilderBuild) {
                } else if (_source413.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_MapBuilder) {
            DAST._IType _10727___mcc_h10098 = _source386.dtor_keyType;
            DAST._IType _10728___mcc_h10099 = _source386.dtor_valueType;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source415 = _10596_name;
                if (_source415.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10729___mcc_h10368 = _source415.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10730___mcc_h10369 = _source415.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10731___mcc_h10370 = _source415.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source416 = _10730___mcc_h10369;
                  if (_source416.is_None) {
                  } else {
                    DAST._IType _10732___mcc_h10374 = _source416.dtor_value;
                    DAST._IType _10733_tpe = _10732___mcc_h10374;
                    RAST._IType _10734_typ;
                    RAST._IType _out2209;
                    _out2209 = (this).GenType(_10733_tpe, false, false);
                    _10734_typ = _out2209;
                    if ((_10734_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source415.is_MapBuilderAdd) {
                } else if (_source415.is_MapBuilderBuild) {
                } else if (_source415.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_SeqUpdate) {
            DAST._IExpression _10735___mcc_h10102 = _source386.dtor_expr;
            DAST._IExpression _10736___mcc_h10103 = _source386.dtor_indexExpr;
            DAST._IExpression _10737___mcc_h10104 = _source386.dtor_value;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source417 = _10596_name;
                if (_source417.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10738___mcc_h10376 = _source417.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10739___mcc_h10377 = _source417.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10740___mcc_h10378 = _source417.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source418 = _10739___mcc_h10377;
                  if (_source418.is_None) {
                  } else {
                    DAST._IType _10741___mcc_h10382 = _source418.dtor_value;
                    DAST._IType _10742_tpe = _10741___mcc_h10382;
                    RAST._IType _10743_typ;
                    RAST._IType _out2210;
                    _out2210 = (this).GenType(_10742_tpe, false, false);
                    _10743_typ = _out2210;
                    if ((_10743_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source417.is_MapBuilderAdd) {
                } else if (_source417.is_MapBuilderBuild) {
                } else if (_source417.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_MapUpdate) {
            DAST._IExpression _10744___mcc_h10108 = _source386.dtor_expr;
            DAST._IExpression _10745___mcc_h10109 = _source386.dtor_indexExpr;
            DAST._IExpression _10746___mcc_h10110 = _source386.dtor_value;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source419 = _10596_name;
                if (_source419.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10747___mcc_h10384 = _source419.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10748___mcc_h10385 = _source419.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10749___mcc_h10386 = _source419.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source420 = _10748___mcc_h10385;
                  if (_source420.is_None) {
                  } else {
                    DAST._IType _10750___mcc_h10390 = _source420.dtor_value;
                    DAST._IType _10751_tpe = _10750___mcc_h10390;
                    RAST._IType _10752_typ;
                    RAST._IType _out2211;
                    _out2211 = (this).GenType(_10751_tpe, false, false);
                    _10752_typ = _out2211;
                    if ((_10752_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source419.is_MapBuilderAdd) {
                } else if (_source419.is_MapBuilderBuild) {
                } else if (_source419.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_SetBuilder) {
            DAST._IType _10753___mcc_h10114 = _source386.dtor_elemType;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source421 = _10596_name;
                if (_source421.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10754___mcc_h10392 = _source421.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10755___mcc_h10393 = _source421.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10756___mcc_h10394 = _source421.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source422 = _10755___mcc_h10393;
                  if (_source422.is_None) {
                  } else {
                    DAST._IType _10757___mcc_h10398 = _source422.dtor_value;
                    DAST._IType _10758_tpe = _10757___mcc_h10398;
                    RAST._IType _10759_typ;
                    RAST._IType _out2212;
                    _out2212 = (this).GenType(_10758_tpe, false, false);
                    _10759_typ = _out2212;
                    if ((_10759_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source421.is_MapBuilderAdd) {
                } else if (_source421.is_MapBuilderBuild) {
                } else if (_source421.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_ToMultiset) {
            DAST._IExpression _10760___mcc_h10116 = _source386.dtor_ToMultiset_i_a0;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source423 = _10596_name;
                if (_source423.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10761___mcc_h10400 = _source423.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10762___mcc_h10401 = _source423.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10763___mcc_h10402 = _source423.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source424 = _10762___mcc_h10401;
                  if (_source424.is_None) {
                  } else {
                    DAST._IType _10764___mcc_h10406 = _source424.dtor_value;
                    DAST._IType _10765_tpe = _10764___mcc_h10406;
                    RAST._IType _10766_typ;
                    RAST._IType _out2213;
                    _out2213 = (this).GenType(_10765_tpe, false, false);
                    _10766_typ = _out2213;
                    if ((_10766_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source423.is_MapBuilderAdd) {
                } else if (_source423.is_MapBuilderBuild) {
                } else if (_source423.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_This) {
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source425 = _10596_name;
                if (_source425.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10767___mcc_h10408 = _source425.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10768___mcc_h10409 = _source425.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10769___mcc_h10410 = _source425.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source426 = _10768___mcc_h10409;
                  if (_source426.is_None) {
                  } else {
                    DAST._IType _10770___mcc_h10414 = _source426.dtor_value;
                    DAST._IType _10771_tpe = _10770___mcc_h10414;
                    RAST._IType _10772_typ;
                    RAST._IType _out2214;
                    _out2214 = (this).GenType(_10771_tpe, false, false);
                    _10772_typ = _out2214;
                    if ((_10772_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source425.is_MapBuilderAdd) {
                } else if (_source425.is_MapBuilderBuild) {
                } else if (_source425.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Ite) {
            DAST._IExpression _10773___mcc_h10118 = _source386.dtor_cond;
            DAST._IExpression _10774___mcc_h10119 = _source386.dtor_thn;
            DAST._IExpression _10775___mcc_h10120 = _source386.dtor_els;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source427 = _10596_name;
                if (_source427.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10776___mcc_h10416 = _source427.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10777___mcc_h10417 = _source427.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10778___mcc_h10418 = _source427.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source428 = _10777___mcc_h10417;
                  if (_source428.is_None) {
                  } else {
                    DAST._IType _10779___mcc_h10422 = _source428.dtor_value;
                    DAST._IType _10780_tpe = _10779___mcc_h10422;
                    RAST._IType _10781_typ;
                    RAST._IType _out2215;
                    _out2215 = (this).GenType(_10780_tpe, false, false);
                    _10781_typ = _out2215;
                    if ((_10781_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source427.is_MapBuilderAdd) {
                } else if (_source427.is_MapBuilderBuild) {
                } else if (_source427.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_UnOp) {
            DAST._IUnaryOp _10782___mcc_h10124 = _source386.dtor_unOp;
            DAST._IExpression _10783___mcc_h10125 = _source386.dtor_expr;
            DAST.Format._IUnaryOpFormat _10784___mcc_h10126 = _source386.dtor_format1;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source429 = _10596_name;
                if (_source429.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10785___mcc_h10424 = _source429.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10786___mcc_h10425 = _source429.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10787___mcc_h10426 = _source429.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source430 = _10786___mcc_h10425;
                  if (_source430.is_None) {
                  } else {
                    DAST._IType _10788___mcc_h10430 = _source430.dtor_value;
                    DAST._IType _10789_tpe = _10788___mcc_h10430;
                    RAST._IType _10790_typ;
                    RAST._IType _out2216;
                    _out2216 = (this).GenType(_10789_tpe, false, false);
                    _10790_typ = _out2216;
                    if ((_10790_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source429.is_MapBuilderAdd) {
                } else if (_source429.is_MapBuilderBuild) {
                } else if (_source429.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_BinOp) {
            DAST._IBinOp _10791___mcc_h10130 = _source386.dtor_op;
            DAST._IExpression _10792___mcc_h10131 = _source386.dtor_left;
            DAST._IExpression _10793___mcc_h10132 = _source386.dtor_right;
            DAST.Format._IBinaryOpFormat _10794___mcc_h10133 = _source386.dtor_format2;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source431 = _10596_name;
                if (_source431.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10795___mcc_h10432 = _source431.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10796___mcc_h10433 = _source431.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10797___mcc_h10434 = _source431.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source432 = _10796___mcc_h10433;
                  if (_source432.is_None) {
                  } else {
                    DAST._IType _10798___mcc_h10438 = _source432.dtor_value;
                    DAST._IType _10799_tpe = _10798___mcc_h10438;
                    RAST._IType _10800_typ;
                    RAST._IType _out2217;
                    _out2217 = (this).GenType(_10799_tpe, false, false);
                    _10800_typ = _out2217;
                    if ((_10800_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source431.is_MapBuilderAdd) {
                } else if (_source431.is_MapBuilderBuild) {
                } else if (_source431.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_ArrayLen) {
            DAST._IExpression _10801___mcc_h10138 = _source386.dtor_expr;
            DAST._IType _10802___mcc_h10139 = _source386.dtor_exprType;
            BigInteger _10803___mcc_h10140 = _source386.dtor_dim;
            bool _10804___mcc_h10141 = _source386.dtor_native;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source433 = _10596_name;
                if (_source433.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10805___mcc_h10440 = _source433.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10806___mcc_h10441 = _source433.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10807___mcc_h10442 = _source433.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source434 = _10806___mcc_h10441;
                  if (_source434.is_None) {
                  } else {
                    DAST._IType _10808___mcc_h10446 = _source434.dtor_value;
                    DAST._IType _10809_tpe = _10808___mcc_h10446;
                    RAST._IType _10810_typ;
                    RAST._IType _out2218;
                    _out2218 = (this).GenType(_10809_tpe, false, false);
                    _10810_typ = _out2218;
                    if ((_10810_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source433.is_MapBuilderAdd) {
                } else if (_source433.is_MapBuilderBuild) {
                } else if (_source433.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_MapKeys) {
            DAST._IExpression _10811___mcc_h10146 = _source386.dtor_expr;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source435 = _10596_name;
                if (_source435.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10812___mcc_h10448 = _source435.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10813___mcc_h10449 = _source435.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10814___mcc_h10450 = _source435.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source436 = _10813___mcc_h10449;
                  if (_source436.is_None) {
                  } else {
                    DAST._IType _10815___mcc_h10454 = _source436.dtor_value;
                    DAST._IType _10816_tpe = _10815___mcc_h10454;
                    RAST._IType _10817_typ;
                    RAST._IType _out2219;
                    _out2219 = (this).GenType(_10816_tpe, false, false);
                    _10817_typ = _out2219;
                    if ((_10817_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source435.is_MapBuilderAdd) {
                } else if (_source435.is_MapBuilderBuild) {
                } else if (_source435.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_MapValues) {
            DAST._IExpression _10818___mcc_h10148 = _source386.dtor_expr;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source437 = _10596_name;
                if (_source437.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10819___mcc_h10456 = _source437.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10820___mcc_h10457 = _source437.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10821___mcc_h10458 = _source437.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source438 = _10820___mcc_h10457;
                  if (_source438.is_None) {
                  } else {
                    DAST._IType _10822___mcc_h10462 = _source438.dtor_value;
                    DAST._IType _10823_tpe = _10822___mcc_h10462;
                    RAST._IType _10824_typ;
                    RAST._IType _out2220;
                    _out2220 = (this).GenType(_10823_tpe, false, false);
                    _10824_typ = _out2220;
                    if ((_10824_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source437.is_MapBuilderAdd) {
                } else if (_source437.is_MapBuilderBuild) {
                } else if (_source437.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Select) {
            DAST._IExpression _10825___mcc_h10150 = _source386.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _10826___mcc_h10151 = _source386.dtor_field;
            bool _10827___mcc_h10152 = _source386.dtor_isConstant;
            bool _10828___mcc_h10153 = _source386.dtor_onDatatype;
            DAST._IType _10829___mcc_h10154 = _source386.dtor_fieldType;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source439 = _10596_name;
                if (_source439.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10830___mcc_h10464 = _source439.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10831___mcc_h10465 = _source439.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10832___mcc_h10466 = _source439.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source440 = _10831___mcc_h10465;
                  if (_source440.is_None) {
                  } else {
                    DAST._IType _10833___mcc_h10470 = _source440.dtor_value;
                    DAST._IType _10834_tpe = _10833___mcc_h10470;
                    RAST._IType _10835_typ;
                    RAST._IType _out2221;
                    _out2221 = (this).GenType(_10834_tpe, false, false);
                    _10835_typ = _out2221;
                    if ((_10835_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source439.is_MapBuilderAdd) {
                } else if (_source439.is_MapBuilderBuild) {
                } else if (_source439.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_SelectFn) {
            DAST._IExpression _10836___mcc_h10160 = _source386.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _10837___mcc_h10161 = _source386.dtor_field;
            bool _10838___mcc_h10162 = _source386.dtor_onDatatype;
            bool _10839___mcc_h10163 = _source386.dtor_isStatic;
            BigInteger _10840___mcc_h10164 = _source386.dtor_arity;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source441 = _10596_name;
                if (_source441.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10841___mcc_h10472 = _source441.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10842___mcc_h10473 = _source441.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10843___mcc_h10474 = _source441.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source442 = _10842___mcc_h10473;
                  if (_source442.is_None) {
                  } else {
                    DAST._IType _10844___mcc_h10478 = _source442.dtor_value;
                    DAST._IType _10845_tpe = _10844___mcc_h10478;
                    RAST._IType _10846_typ;
                    RAST._IType _out2222;
                    _out2222 = (this).GenType(_10845_tpe, false, false);
                    _10846_typ = _out2222;
                    if ((_10846_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source441.is_MapBuilderAdd) {
                } else if (_source441.is_MapBuilderBuild) {
                } else if (_source441.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Index) {
            DAST._IExpression _10847___mcc_h10170 = _source386.dtor_expr;
            DAST._ICollKind _10848___mcc_h10171 = _source386.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _10849___mcc_h10172 = _source386.dtor_indices;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source443 = _10596_name;
                if (_source443.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10850___mcc_h10480 = _source443.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10851___mcc_h10481 = _source443.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10852___mcc_h10482 = _source443.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source444 = _10851___mcc_h10481;
                  if (_source444.is_None) {
                  } else {
                    DAST._IType _10853___mcc_h10486 = _source444.dtor_value;
                    DAST._IType _10854_tpe = _10853___mcc_h10486;
                    RAST._IType _10855_typ;
                    RAST._IType _out2223;
                    _out2223 = (this).GenType(_10854_tpe, false, false);
                    _10855_typ = _out2223;
                    if ((_10855_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source443.is_MapBuilderAdd) {
                } else if (_source443.is_MapBuilderBuild) {
                } else if (_source443.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_IndexRange) {
            DAST._IExpression _10856___mcc_h10176 = _source386.dtor_expr;
            bool _10857___mcc_h10177 = _source386.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _10858___mcc_h10178 = _source386.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _10859___mcc_h10179 = _source386.dtor_high;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source445 = _10596_name;
                if (_source445.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10860___mcc_h10488 = _source445.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10861___mcc_h10489 = _source445.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10862___mcc_h10490 = _source445.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source446 = _10861___mcc_h10489;
                  if (_source446.is_None) {
                  } else {
                    DAST._IType _10863___mcc_h10494 = _source446.dtor_value;
                    DAST._IType _10864_tpe = _10863___mcc_h10494;
                    RAST._IType _10865_typ;
                    RAST._IType _out2224;
                    _out2224 = (this).GenType(_10864_tpe, false, false);
                    _10865_typ = _out2224;
                    if ((_10865_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source445.is_MapBuilderAdd) {
                } else if (_source445.is_MapBuilderBuild) {
                } else if (_source445.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_TupleSelect) {
            DAST._IExpression _10866___mcc_h10184 = _source386.dtor_expr;
            BigInteger _10867___mcc_h10185 = _source386.dtor_index;
            DAST._IType _10868___mcc_h10186 = _source386.dtor_fieldType;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source447 = _10596_name;
                if (_source447.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10869___mcc_h10496 = _source447.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10870___mcc_h10497 = _source447.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10871___mcc_h10498 = _source447.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source448 = _10870___mcc_h10497;
                  if (_source448.is_None) {
                  } else {
                    DAST._IType _10872___mcc_h10502 = _source448.dtor_value;
                    DAST._IType _10873_tpe = _10872___mcc_h10502;
                    RAST._IType _10874_typ;
                    RAST._IType _out2225;
                    _out2225 = (this).GenType(_10873_tpe, false, false);
                    _10874_typ = _out2225;
                    if ((_10874_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source447.is_MapBuilderAdd) {
                } else if (_source447.is_MapBuilderBuild) {
                } else if (_source447.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Call) {
            DAST._IExpression _10875___mcc_h10190 = _source386.dtor_on;
            DAST._ICallName _10876___mcc_h10191 = _source386.dtor_callName;
            Dafny.ISequence<DAST._IType> _10877___mcc_h10192 = _source386.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _10878___mcc_h10193 = _source386.dtor_args;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source449 = _10596_name;
                if (_source449.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10879___mcc_h10504 = _source449.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10880___mcc_h10505 = _source449.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10881___mcc_h10506 = _source449.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source450 = _10880___mcc_h10505;
                  if (_source450.is_None) {
                  } else {
                    DAST._IType _10882___mcc_h10510 = _source450.dtor_value;
                    DAST._IType _10883_tpe = _10882___mcc_h10510;
                    RAST._IType _10884_typ;
                    RAST._IType _out2226;
                    _out2226 = (this).GenType(_10883_tpe, false, false);
                    _10884_typ = _out2226;
                    if ((_10884_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source449.is_MapBuilderAdd) {
                } else if (_source449.is_MapBuilderBuild) {
                } else if (_source449.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _10885___mcc_h10198 = _source386.dtor_params;
            DAST._IType _10886___mcc_h10199 = _source386.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _10887___mcc_h10200 = _source386.dtor_body;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source451 = _10596_name;
                if (_source451.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10888___mcc_h10512 = _source451.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10889___mcc_h10513 = _source451.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10890___mcc_h10514 = _source451.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source452 = _10889___mcc_h10513;
                  if (_source452.is_None) {
                  } else {
                    DAST._IType _10891___mcc_h10518 = _source452.dtor_value;
                    DAST._IType _10892_tpe = _10891___mcc_h10518;
                    RAST._IType _10893_typ;
                    RAST._IType _out2227;
                    _out2227 = (this).GenType(_10892_tpe, false, false);
                    _10893_typ = _out2227;
                    if ((_10893_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source451.is_MapBuilderAdd) {
                } else if (_source451.is_MapBuilderBuild) {
                } else if (_source451.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _10894___mcc_h10204 = _source386.dtor_values;
            DAST._IType _10895___mcc_h10205 = _source386.dtor_retType;
            DAST._IExpression _10896___mcc_h10206 = _source386.dtor_expr;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source453 = _10596_name;
                if (_source453.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10897___mcc_h10520 = _source453.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10898___mcc_h10521 = _source453.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10899___mcc_h10522 = _source453.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source454 = _10898___mcc_h10521;
                  if (_source454.is_None) {
                  } else {
                    DAST._IType _10900___mcc_h10526 = _source454.dtor_value;
                    DAST._IType _10901_tpe = _10900___mcc_h10526;
                    RAST._IType _10902_typ;
                    RAST._IType _out2228;
                    _out2228 = (this).GenType(_10901_tpe, false, false);
                    _10902_typ = _out2228;
                    if ((_10902_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source453.is_MapBuilderAdd) {
                } else if (_source453.is_MapBuilderBuild) {
                } else if (_source453.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _10903___mcc_h10210 = _source386.dtor_name;
            DAST._IType _10904___mcc_h10211 = _source386.dtor_typ;
            DAST._IExpression _10905___mcc_h10212 = _source386.dtor_value;
            DAST._IExpression _10906___mcc_h10213 = _source386.dtor_iifeBody;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source455 = _10596_name;
                if (_source455.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10907___mcc_h10528 = _source455.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10908___mcc_h10529 = _source455.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10909___mcc_h10530 = _source455.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source456 = _10908___mcc_h10529;
                  if (_source456.is_None) {
                  } else {
                    DAST._IType _10910___mcc_h10534 = _source456.dtor_value;
                    DAST._IType _10911_tpe = _10910___mcc_h10534;
                    RAST._IType _10912_typ;
                    RAST._IType _out2229;
                    _out2229 = (this).GenType(_10911_tpe, false, false);
                    _10912_typ = _out2229;
                    if ((_10912_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source455.is_MapBuilderAdd) {
                } else if (_source455.is_MapBuilderBuild) {
                } else if (_source455.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_Apply) {
            DAST._IExpression _10913___mcc_h10218 = _source386.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _10914___mcc_h10219 = _source386.dtor_args;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source457 = _10596_name;
                if (_source457.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10915___mcc_h10536 = _source457.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10916___mcc_h10537 = _source457.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10917___mcc_h10538 = _source457.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source458 = _10916___mcc_h10537;
                  if (_source458.is_None) {
                  } else {
                    DAST._IType _10918___mcc_h10542 = _source458.dtor_value;
                    DAST._IType _10919_tpe = _10918___mcc_h10542;
                    RAST._IType _10920_typ;
                    RAST._IType _out2230;
                    _out2230 = (this).GenType(_10919_tpe, false, false);
                    _10920_typ = _out2230;
                    if ((_10920_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source457.is_MapBuilderAdd) {
                } else if (_source457.is_MapBuilderBuild) {
                } else if (_source457.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_TypeTest) {
            DAST._IExpression _10921___mcc_h10222 = _source386.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10922___mcc_h10223 = _source386.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _10923___mcc_h10224 = _source386.dtor_variant;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source459 = _10596_name;
                if (_source459.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10924___mcc_h10544 = _source459.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10925___mcc_h10545 = _source459.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10926___mcc_h10546 = _source459.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source460 = _10925___mcc_h10545;
                  if (_source460.is_None) {
                  } else {
                    DAST._IType _10927___mcc_h10550 = _source460.dtor_value;
                    DAST._IType _10928_tpe = _10927___mcc_h10550;
                    RAST._IType _10929_typ;
                    RAST._IType _out2231;
                    _out2231 = (this).GenType(_10928_tpe, false, false);
                    _10929_typ = _out2231;
                    if ((_10929_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source459.is_MapBuilderAdd) {
                } else if (_source459.is_MapBuilderBuild) {
                } else if (_source459.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_InitializationValue) {
            DAST._IType _10930___mcc_h10228 = _source386.dtor_typ;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source461 = _10596_name;
                if (_source461.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10931___mcc_h10552 = _source461.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10932___mcc_h10553 = _source461.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10933___mcc_h10554 = _source461.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source462 = _10932___mcc_h10553;
                  if (_source462.is_None) {
                  } else {
                    DAST._IType _10934___mcc_h10558 = _source462.dtor_value;
                    DAST._IType _10935_tpe = _10934___mcc_h10558;
                    RAST._IType _10936_typ;
                    RAST._IType _out2232;
                    _out2232 = (this).GenType(_10935_tpe, false, false);
                    _10936_typ = _out2232;
                    if ((_10936_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source461.is_MapBuilderAdd) {
                } else if (_source461.is_MapBuilderBuild) {
                } else if (_source461.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_BoolBoundedPool) {
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source463 = _10596_name;
                if (_source463.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10937___mcc_h10560 = _source463.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10938___mcc_h10561 = _source463.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10939___mcc_h10562 = _source463.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source464 = _10938___mcc_h10561;
                  if (_source464.is_None) {
                  } else {
                    DAST._IType _10940___mcc_h10566 = _source464.dtor_value;
                    DAST._IType _10941_tpe = _10940___mcc_h10566;
                    RAST._IType _10942_typ;
                    RAST._IType _out2233;
                    _out2233 = (this).GenType(_10941_tpe, false, false);
                    _10942_typ = _out2233;
                    if ((_10942_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source463.is_MapBuilderAdd) {
                } else if (_source463.is_MapBuilderBuild) {
                } else if (_source463.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_SetBoundedPool) {
            DAST._IExpression _10943___mcc_h10230 = _source386.dtor_of;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source465 = _10596_name;
                if (_source465.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10944___mcc_h10568 = _source465.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10945___mcc_h10569 = _source465.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10946___mcc_h10570 = _source465.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source466 = _10945___mcc_h10569;
                  if (_source466.is_None) {
                  } else {
                    DAST._IType _10947___mcc_h10574 = _source466.dtor_value;
                    DAST._IType _10948_tpe = _10947___mcc_h10574;
                    RAST._IType _10949_typ;
                    RAST._IType _out2234;
                    _out2234 = (this).GenType(_10948_tpe, false, false);
                    _10949_typ = _out2234;
                    if ((_10949_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source465.is_MapBuilderAdd) {
                } else if (_source465.is_MapBuilderBuild) {
                } else if (_source465.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_MapBoundedPool) {
            DAST._IExpression _10950___mcc_h10232 = _source386.dtor_of;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source467 = _10596_name;
                if (_source467.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10951___mcc_h10576 = _source467.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10952___mcc_h10577 = _source467.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10953___mcc_h10578 = _source467.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source468 = _10952___mcc_h10577;
                  if (_source468.is_None) {
                  } else {
                    DAST._IType _10954___mcc_h10582 = _source468.dtor_value;
                    DAST._IType _10955_tpe = _10954___mcc_h10582;
                    RAST._IType _10956_typ;
                    RAST._IType _out2235;
                    _out2235 = (this).GenType(_10955_tpe, false, false);
                    _10956_typ = _out2235;
                    if ((_10956_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source467.is_MapBuilderAdd) {
                } else if (_source467.is_MapBuilderBuild) {
                } else if (_source467.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_SeqBoundedPool) {
            DAST._IExpression _10957___mcc_h10234 = _source386.dtor_of;
            bool _10958___mcc_h10235 = _source386.dtor_includeDuplicates;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source469 = _10596_name;
                if (_source469.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10959___mcc_h10584 = _source469.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10960___mcc_h10585 = _source469.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10961___mcc_h10586 = _source469.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source470 = _10960___mcc_h10585;
                  if (_source470.is_None) {
                  } else {
                    DAST._IType _10962___mcc_h10590 = _source470.dtor_value;
                    DAST._IType _10963_tpe = _10962___mcc_h10590;
                    RAST._IType _10964_typ;
                    RAST._IType _out2236;
                    _out2236 = (this).GenType(_10963_tpe, false, false);
                    _10964_typ = _out2236;
                    if ((_10964_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source469.is_MapBuilderAdd) {
                } else if (_source469.is_MapBuilderBuild) {
                } else if (_source469.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_IntRange) {
            DAST._IExpression _10965___mcc_h10238 = _source386.dtor_lo;
            DAST._IExpression _10966___mcc_h10239 = _source386.dtor_hi;
            bool _10967___mcc_h10240 = _source386.dtor_up;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source471 = _10596_name;
                if (_source471.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10968___mcc_h10592 = _source471.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10969___mcc_h10593 = _source471.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10970___mcc_h10594 = _source471.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source472 = _10969___mcc_h10593;
                  if (_source472.is_None) {
                  } else {
                    DAST._IType _10971___mcc_h10598 = _source472.dtor_value;
                    DAST._IType _10972_tpe = _10971___mcc_h10598;
                    RAST._IType _10973_typ;
                    RAST._IType _out2237;
                    _out2237 = (this).GenType(_10972_tpe, false, false);
                    _10973_typ = _out2237;
                    if ((_10973_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source471.is_MapBuilderAdd) {
                } else if (_source471.is_MapBuilderBuild) {
                } else if (_source471.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else if (_source386.is_UnboundedIntRange) {
            DAST._IExpression _10974___mcc_h10244 = _source386.dtor_start;
            bool _10975___mcc_h10245 = _source386.dtor_up;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source473 = _10596_name;
                if (_source473.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10976___mcc_h10600 = _source473.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10977___mcc_h10601 = _source473.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10978___mcc_h10602 = _source473.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source474 = _10977___mcc_h10601;
                  if (_source474.is_None) {
                  } else {
                    DAST._IType _10979___mcc_h10606 = _source474.dtor_value;
                    DAST._IType _10980_tpe = _10979___mcc_h10606;
                    RAST._IType _10981_typ;
                    RAST._IType _out2238;
                    _out2238 = (this).GenType(_10980_tpe, false, false);
                    _10981_typ = _out2238;
                    if ((_10981_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source473.is_MapBuilderAdd) {
                } else if (_source473.is_MapBuilderBuild) {
                } else if (_source473.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          } else {
            DAST._IType _10982___mcc_h10248 = _source386.dtor_elemType;
            DAST._IExpression _10983___mcc_h10249 = _source386.dtor_collection;
            bool _10984___mcc_h10250 = _source386.dtor_is__forall;
            DAST._IExpression _10985___mcc_h10251 = _source386.dtor_lambda;
            {
              if (!object.Equals(_10598_onExpr, RAST.__default.self)) {
                DAST._ICallName _source475 = _10596_name;
                if (_source475.is_CallName) {
                  Dafny.ISequence<Dafny.Rune> _10986___mcc_h10608 = _source475.dtor_name;
                  Std.Wrappers._IOption<DAST._IType> _10987___mcc_h10609 = _source475.dtor_onType;
                  Dafny.ISequence<DAST._IFormal> _10988___mcc_h10610 = _source475.dtor_signature;
                  Std.Wrappers._IOption<DAST._IType> _source476 = _10987___mcc_h10609;
                  if (_source476.is_None) {
                  } else {
                    DAST._IType _10989___mcc_h10614 = _source476.dtor_value;
                    DAST._IType _10990_tpe = _10989___mcc_h10614;
                    RAST._IType _10991_typ;
                    RAST._IType _out2239;
                    _out2239 = (this).GenType(_10990_tpe, false, false);
                    _10991_typ = _out2239;
                    if ((_10991_typ).IsObjectOrPointer()) {
                      _10598_onExpr = ((this).read__macro).Apply1(_10598_onExpr);
                    }
                  }
                } else if (_source475.is_MapBuilderAdd) {
                } else if (_source475.is_MapBuilderBuild) {
                } else if (_source475.is_SetBuilderAdd) {
                } else {
                }
              }
              _10598_onExpr = (_10598_onExpr).Sel(_10611_renderedName);
            }
          }
          r = _10598_onExpr;
          if ((new BigInteger((_10601_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_10601_typeExprs);
          }
          r = (r).Apply(_10604_argExprs);
          RAST._IExpr _out2240;
          DCOMP._IOwnership _out2241;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2240, out _out2241);
          r = _out2240;
          resultingOwnership = _out2241;
          return ;
        }
      } else if (_source289.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _10992___mcc_h289 = _source289.dtor_params;
        DAST._IType _10993___mcc_h290 = _source289.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _10994___mcc_h291 = _source289.dtor_body;
        Dafny.ISequence<DAST._IStatement> _10995_body = _10994___mcc_h291;
        DAST._IType _10996_retType = _10993___mcc_h290;
        Dafny.ISequence<DAST._IFormal> _10997_paramsDafny = _10992___mcc_h289;
        {
          Dafny.ISequence<RAST._IFormal> _10998_params;
          Dafny.ISequence<RAST._IFormal> _out2242;
          _out2242 = (this).GenParams(_10997_paramsDafny);
          _10998_params = _out2242;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10999_paramNames;
          _10999_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _11000_paramTypesMap;
          _11000_paramTypesMap = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements();
          BigInteger _hi41 = new BigInteger((_10998_params).Count);
          for (BigInteger _11001_i = BigInteger.Zero; _11001_i < _hi41; _11001_i++) {
            Dafny.ISequence<Dafny.Rune> _11002_name;
            _11002_name = ((_10998_params).Select(_11001_i)).dtor_name;
            _10999_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_10999_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_11002_name));
            _11000_paramTypesMap = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_11000_paramTypesMap, _11002_name, ((_10998_params).Select(_11001_i)).dtor_tpe);
          }
          DCOMP._IEnvironment _11003_env;
          _11003_env = DCOMP.Environment.create(_10999_paramNames, _11000_paramTypesMap);
          RAST._IExpr _11004_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11005_recIdents;
          DCOMP._IEnvironment _11006___v169;
          RAST._IExpr _out2243;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2244;
          DCOMP._IEnvironment _out2245;
          (this).GenStmts(_10995_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _11003_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out2243, out _out2244, out _out2245);
          _11004_recursiveGen = _out2243;
          _11005_recIdents = _out2244;
          _11006___v169 = _out2245;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          _11005_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11005_recIdents, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISet<Dafny.ISequence<Dafny.Rune>>>>((_11007_paramNames) => ((System.Func<Dafny.ISet<Dafny.ISequence<Dafny.Rune>>>)(() => {
            var _coll6 = new System.Collections.Generic.List<Dafny.ISequence<Dafny.Rune>>();
            foreach (Dafny.ISequence<Dafny.Rune> _compr_6 in (_11007_paramNames).CloneAsArray()) {
              Dafny.ISequence<Dafny.Rune> _11008_name = (Dafny.ISequence<Dafny.Rune>)_compr_6;
              if ((_11007_paramNames).Contains(_11008_name)) {
                _coll6.Add(_11008_name);
              }
            }
            return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromCollection(_coll6);
          }))())(_10999_paramNames));
          RAST._IExpr _11009_allReadCloned;
          _11009_allReadCloned = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          while (!(_11005_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _11010_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_11005_recIdents).Elements) {
              _11010_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_11005_recIdents).Contains(_11010_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 4143)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_11010_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _11009_allReadCloned = (_11009_allReadCloned).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(((RAST.__default.self).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()))));
              }
            } else if (!((_10999_paramNames).Contains(_11010_next))) {
              _11009_allReadCloned = (_11009_allReadCloned).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), _11010_next, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(((RAST.Expr.create_Identifier(_11010_next)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()))));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11010_next));
            }
            _11005_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11005_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11010_next));
          }
          RAST._IType _11011_retTypeGen;
          RAST._IType _out2246;
          _out2246 = (this).GenType(_10996_retType, false, true);
          _11011_retTypeGen = _out2246;
          r = RAST.Expr.create_Block((_11009_allReadCloned).Then(RAST.__default.RcNew(RAST.Expr.create_Lambda(_10998_params, Std.Wrappers.Option<RAST._IType>.create_Some(_11011_retTypeGen), RAST.Expr.create_Block(_11004_recursiveGen)))));
          RAST._IExpr _out2247;
          DCOMP._IOwnership _out2248;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2247, out _out2248);
          r = _out2247;
          resultingOwnership = _out2248;
          return ;
        }
      } else if (_source289.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11012___mcc_h292 = _source289.dtor_values;
        DAST._IType _11013___mcc_h293 = _source289.dtor_retType;
        DAST._IExpression _11014___mcc_h294 = _source289.dtor_expr;
        DAST._IExpression _11015_expr = _11014___mcc_h294;
        DAST._IType _11016_retType = _11013___mcc_h293;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11017_values = _11012___mcc_h292;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11018_paramNames;
          _11018_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IFormal> _11019_paramFormals;
          Dafny.ISequence<RAST._IFormal> _out2249;
          _out2249 = (this).GenParams(Std.Collections.Seq.__default.Map<_System._ITuple2<DAST._IFormal, DAST._IExpression>, DAST._IFormal>(((System.Func<_System._ITuple2<DAST._IFormal, DAST._IExpression>, DAST._IFormal>)((_11020_value) => {
            return (_11020_value).dtor__0;
          })), _11017_values));
          _11019_paramFormals = _out2249;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _11021_paramTypes;
          _11021_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11022_paramNamesSet;
          _11022_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _hi42 = new BigInteger((_11017_values).Count);
          for (BigInteger _11023_i = BigInteger.Zero; _11023_i < _hi42; _11023_i++) {
            Dafny.ISequence<Dafny.Rune> _11024_name;
            _11024_name = (((_11017_values).Select(_11023_i)).dtor__0).dtor_name;
            Dafny.ISequence<Dafny.Rune> _11025_rName;
            _11025_rName = DCOMP.__default.escapeName(_11024_name);
            _11018_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_11018_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_11025_rName));
            _11021_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_11021_paramTypes, _11025_rName, ((_11019_paramFormals).Select(_11023_i)).dtor_tpe);
            _11022_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11022_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11025_rName));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          BigInteger _hi43 = new BigInteger((_11017_values).Count);
          for (BigInteger _11026_i = BigInteger.Zero; _11026_i < _hi43; _11026_i++) {
            RAST._IType _11027_typeGen;
            RAST._IType _out2250;
            _out2250 = (this).GenType((((_11017_values).Select(_11026_i)).dtor__0).dtor_typ, false, true);
            _11027_typeGen = _out2250;
            RAST._IExpr _11028_valueGen;
            DCOMP._IOwnership _11029___v170;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11030_recIdents;
            RAST._IExpr _out2251;
            DCOMP._IOwnership _out2252;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2253;
            (this).GenExpr(((_11017_values).Select(_11026_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2251, out _out2252, out _out2253);
            _11028_valueGen = _out2251;
            _11029___v170 = _out2252;
            _11030_recIdents = _out2253;
            r = (r).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), DCOMP.__default.escapeName((((_11017_values).Select(_11026_i)).dtor__0).dtor_name), Std.Wrappers.Option<RAST._IType>.create_Some(_11027_typeGen), Std.Wrappers.Option<RAST._IExpr>.create_Some(_11028_valueGen)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11030_recIdents);
          }
          DCOMP._IEnvironment _11031_newEnv;
          _11031_newEnv = DCOMP.Environment.create(_11018_paramNames, _11021_paramTypes);
          RAST._IExpr _11032_recGen;
          DCOMP._IOwnership _11033_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11034_recIdents;
          RAST._IExpr _out2254;
          DCOMP._IOwnership _out2255;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2256;
          (this).GenExpr(_11015_expr, selfIdent, _11031_newEnv, expectedOwnership, out _out2254, out _out2255, out _out2256);
          _11032_recGen = _out2254;
          _11033_recOwned = _out2255;
          _11034_recIdents = _out2256;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11034_recIdents, _11022_paramNamesSet);
          r = RAST.Expr.create_Block((r).Then(_11032_recGen));
          RAST._IExpr _out2257;
          DCOMP._IOwnership _out2258;
          DCOMP.COMP.FromOwnership(r, _11033_recOwned, expectedOwnership, out _out2257, out _out2258);
          r = _out2257;
          resultingOwnership = _out2258;
          return ;
        }
      } else if (_source289.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _11035___mcc_h295 = _source289.dtor_name;
        DAST._IType _11036___mcc_h296 = _source289.dtor_typ;
        DAST._IExpression _11037___mcc_h297 = _source289.dtor_value;
        DAST._IExpression _11038___mcc_h298 = _source289.dtor_iifeBody;
        DAST._IExpression _11039_iifeBody = _11038___mcc_h298;
        DAST._IExpression _11040_value = _11037___mcc_h297;
        DAST._IType _11041_tpe = _11036___mcc_h296;
        Dafny.ISequence<Dafny.Rune> _11042_name = _11035___mcc_h295;
        {
          RAST._IExpr _11043_valueGen;
          DCOMP._IOwnership _11044___v171;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11045_recIdents;
          RAST._IExpr _out2259;
          DCOMP._IOwnership _out2260;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2261;
          (this).GenExpr(_11040_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2259, out _out2260, out _out2261);
          _11043_valueGen = _out2259;
          _11044___v171 = _out2260;
          _11045_recIdents = _out2261;
          readIdents = _11045_recIdents;
          RAST._IType _11046_valueTypeGen;
          RAST._IType _out2262;
          _out2262 = (this).GenType(_11041_tpe, false, true);
          _11046_valueTypeGen = _out2262;
          RAST._IExpr _11047_bodyGen;
          DCOMP._IOwnership _11048___v172;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11049_bodyIdents;
          RAST._IExpr _out2263;
          DCOMP._IOwnership _out2264;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2265;
          (this).GenExpr(_11039_iifeBody, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2263, out _out2264, out _out2265);
          _11047_bodyGen = _out2263;
          _11048___v172 = _out2264;
          _11049_bodyIdents = _out2265;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11049_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(DCOMP.__default.escapeName((_11042_name)))));
          r = RAST.Expr.create_Block((RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), DCOMP.__default.escapeName((_11042_name)), Std.Wrappers.Option<RAST._IType>.create_Some(_11046_valueTypeGen), Std.Wrappers.Option<RAST._IExpr>.create_Some(_11043_valueGen))).Then(_11047_bodyGen));
          RAST._IExpr _out2266;
          DCOMP._IOwnership _out2267;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2266, out _out2267);
          r = _out2266;
          resultingOwnership = _out2267;
          return ;
        }
      } else if (_source289.is_Apply) {
        DAST._IExpression _11050___mcc_h299 = _source289.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _11051___mcc_h300 = _source289.dtor_args;
        Dafny.ISequence<DAST._IExpression> _11052_args = _11051___mcc_h300;
        DAST._IExpression _11053_func = _11050___mcc_h299;
        {
          RAST._IExpr _11054_funcExpr;
          DCOMP._IOwnership _11055___v173;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11056_recIdents;
          RAST._IExpr _out2268;
          DCOMP._IOwnership _out2269;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2270;
          (this).GenExpr(_11053_func, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2268, out _out2269, out _out2270);
          _11054_funcExpr = _out2268;
          _11055___v173 = _out2269;
          _11056_recIdents = _out2270;
          readIdents = _11056_recIdents;
          Dafny.ISequence<RAST._IExpr> _11057_rArgs;
          _11057_rArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi44 = new BigInteger((_11052_args).Count);
          for (BigInteger _11058_i = BigInteger.Zero; _11058_i < _hi44; _11058_i++) {
            RAST._IExpr _11059_argExpr;
            DCOMP._IOwnership _11060_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11061_argIdents;
            RAST._IExpr _out2271;
            DCOMP._IOwnership _out2272;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2273;
            (this).GenExpr((_11052_args).Select(_11058_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2271, out _out2272, out _out2273);
            _11059_argExpr = _out2271;
            _11060_argOwned = _out2272;
            _11061_argIdents = _out2273;
            _11057_rArgs = Dafny.Sequence<RAST._IExpr>.Concat(_11057_rArgs, Dafny.Sequence<RAST._IExpr>.FromElements(_11059_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11061_argIdents);
          }
          r = (_11054_funcExpr).Apply(_11057_rArgs);
          RAST._IExpr _out2274;
          DCOMP._IOwnership _out2275;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2274, out _out2275);
          r = _out2274;
          resultingOwnership = _out2275;
          return ;
        }
      } else if (_source289.is_TypeTest) {
        DAST._IExpression _11062___mcc_h301 = _source289.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11063___mcc_h302 = _source289.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _11064___mcc_h303 = _source289.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _11065_variant = _11064___mcc_h303;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11066_dType = _11063___mcc_h302;
        DAST._IExpression _11067_on = _11062___mcc_h301;
        {
          RAST._IExpr _11068_exprGen;
          DCOMP._IOwnership _11069___v174;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11070_recIdents;
          RAST._IExpr _out2276;
          DCOMP._IOwnership _out2277;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2278;
          (this).GenExpr(_11067_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2276, out _out2277, out _out2278);
          _11068_exprGen = _out2276;
          _11069___v174 = _out2277;
          _11070_recIdents = _out2278;
          RAST._IType _11071_dTypePath;
          RAST._IType _out2279;
          _out2279 = DCOMP.COMP.GenPath(_11066_dType);
          _11071_dTypePath = _out2279;
          r = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(((_11068_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(((_11071_dTypePath).MSel(DCOMP.__default.escapeName(_11065_variant)))._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. }")))));
          RAST._IExpr _out2280;
          DCOMP._IOwnership _out2281;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2280, out _out2281);
          r = _out2280;
          resultingOwnership = _out2281;
          readIdents = _11070_recIdents;
          return ;
        }
      } else if (_source289.is_InitializationValue) {
        DAST._IType _11072___mcc_h304 = _source289.dtor_typ;
        DAST._IType _11073_typ = _11072___mcc_h304;
        {
          RAST._IType _11074_typExpr;
          RAST._IType _out2282;
          _out2282 = (this).GenType(_11073_typ, false, false);
          _11074_typExpr = _out2282;
          if ((_11074_typExpr).IsObjectOrPointer()) {
            r = (_11074_typExpr).ToNullExpr();
          } else {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_11074_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          }
          RAST._IExpr _out2283;
          DCOMP._IOwnership _out2284;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2283, out _out2284);
          r = _out2283;
          resultingOwnership = _out2284;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source289.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out2285;
          DCOMP._IOwnership _out2286;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2285, out _out2286);
          r = _out2285;
          resultingOwnership = _out2286;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source289.is_SetBoundedPool) {
        DAST._IExpression _11075___mcc_h305 = _source289.dtor_of;
        DAST._IExpression _11076_of = _11075___mcc_h305;
        {
          RAST._IExpr _11077_exprGen;
          DCOMP._IOwnership _11078___v175;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11079_recIdents;
          RAST._IExpr _out2287;
          DCOMP._IOwnership _out2288;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2289;
          (this).GenExpr(_11076_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2287, out _out2288, out _out2289);
          _11077_exprGen = _out2287;
          _11078___v175 = _out2288;
          _11079_recIdents = _out2289;
          r = ((_11077_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("iter"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2290;
          DCOMP._IOwnership _out2291;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2290, out _out2291);
          r = _out2290;
          resultingOwnership = _out2291;
          readIdents = _11079_recIdents;
          return ;
        }
      } else if (_source289.is_MapBoundedPool) {
        DAST._IExpression _11080___mcc_h306 = _source289.dtor_of;
        DAST._IExpression _11081_of = _11080___mcc_h306;
        {
          RAST._IExpr _11082_exprGen;
          DCOMP._IOwnership _11083___v177;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11084_recIdents;
          RAST._IExpr _out2292;
          DCOMP._IOwnership _out2293;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2294;
          (this).GenExpr(_11081_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2292, out _out2293, out _out2294);
          _11082_exprGen = _out2292;
          _11083___v177 = _out2293;
          _11084_recIdents = _out2294;
          r = ((((_11082_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("iter"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _11084_recIdents;
          RAST._IExpr _out2295;
          DCOMP._IOwnership _out2296;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2295, out _out2296);
          r = _out2295;
          resultingOwnership = _out2296;
        }
      } else if (_source289.is_SeqBoundedPool) {
        DAST._IExpression _11085___mcc_h307 = _source289.dtor_of;
        bool _11086___mcc_h308 = _source289.dtor_includeDuplicates;
        bool _11087_includeDuplicates = _11086___mcc_h308;
        DAST._IExpression _11088_of = _11085___mcc_h307;
        {
          RAST._IExpr _11089_exprGen;
          DCOMP._IOwnership _11090___v176;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11091_recIdents;
          RAST._IExpr _out2297;
          DCOMP._IOwnership _out2298;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2299;
          (this).GenExpr(_11088_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2297, out _out2298, out _out2299);
          _11089_exprGen = _out2297;
          _11090___v176 = _out2298;
          _11091_recIdents = _out2299;
          r = ((_11089_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("iter"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          if (!(_11087_includeDuplicates)) {
            r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("itertools"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Itertools"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unique"))).Apply1(r);
          }
          RAST._IExpr _out2300;
          DCOMP._IOwnership _out2301;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2300, out _out2301);
          r = _out2300;
          resultingOwnership = _out2301;
          readIdents = _11091_recIdents;
          return ;
        }
      } else if (_source289.is_IntRange) {
        DAST._IExpression _11092___mcc_h309 = _source289.dtor_lo;
        DAST._IExpression _11093___mcc_h310 = _source289.dtor_hi;
        bool _11094___mcc_h311 = _source289.dtor_up;
        bool _11095_up = _11094___mcc_h311;
        DAST._IExpression _11096_hi = _11093___mcc_h310;
        DAST._IExpression _11097_lo = _11092___mcc_h309;
        {
          RAST._IExpr _11098_lo;
          DCOMP._IOwnership _11099___v178;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11100_recIdentsLo;
          RAST._IExpr _out2302;
          DCOMP._IOwnership _out2303;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2304;
          (this).GenExpr(_11097_lo, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2302, out _out2303, out _out2304);
          _11098_lo = _out2302;
          _11099___v178 = _out2303;
          _11100_recIdentsLo = _out2304;
          RAST._IExpr _11101_hi;
          DCOMP._IOwnership _11102___v179;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11103_recIdentsHi;
          RAST._IExpr _out2305;
          DCOMP._IOwnership _out2306;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2307;
          (this).GenExpr(_11096_hi, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2305, out _out2306, out _out2307);
          _11101_hi = _out2305;
          _11102___v179 = _out2306;
          _11103_recIdentsHi = _out2307;
          if (_11095_up) {
            r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("integer_range"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_11098_lo, _11101_hi));
          } else {
            r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("integer_range_down"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_11101_hi, _11098_lo));
          }
          RAST._IExpr _out2308;
          DCOMP._IOwnership _out2309;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2308, out _out2309);
          r = _out2308;
          resultingOwnership = _out2309;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11100_recIdentsLo, _11103_recIdentsHi);
          return ;
        }
      } else if (_source289.is_UnboundedIntRange) {
        DAST._IExpression _11104___mcc_h312 = _source289.dtor_start;
        bool _11105___mcc_h313 = _source289.dtor_up;
        bool _11106_up = _11105___mcc_h313;
        DAST._IExpression _11107_start = _11104___mcc_h312;
        {
          RAST._IExpr _11108_start;
          DCOMP._IOwnership _11109___v180;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11110_recIdentStart;
          RAST._IExpr _out2310;
          DCOMP._IOwnership _out2311;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2312;
          (this).GenExpr(_11107_start, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2310, out _out2311, out _out2312);
          _11108_start = _out2310;
          _11109___v180 = _out2311;
          _11110_recIdentStart = _out2312;
          if (_11106_up) {
            r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("integer_range_unbounded"))).Apply1(_11108_start);
          } else {
            r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("integer_range_down_unbounded"))).Apply1(_11108_start);
          }
          RAST._IExpr _out2313;
          DCOMP._IOwnership _out2314;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2313, out _out2314);
          r = _out2313;
          resultingOwnership = _out2314;
          readIdents = _11110_recIdentStart;
          return ;
        }
      } else {
        DAST._IType _11111___mcc_h314 = _source289.dtor_elemType;
        DAST._IExpression _11112___mcc_h315 = _source289.dtor_collection;
        bool _11113___mcc_h316 = _source289.dtor_is__forall;
        DAST._IExpression _11114___mcc_h317 = _source289.dtor_lambda;
        DAST._IExpression _11115_lambda = _11114___mcc_h317;
        bool _11116_is__forall = _11113___mcc_h316;
        DAST._IExpression _11117_collection = _11112___mcc_h315;
        DAST._IType _11118_elemType = _11111___mcc_h314;
        {
          RAST._IType _11119_tpe;
          RAST._IType _out2315;
          _out2315 = (this).GenType(_11118_elemType, false, false);
          _11119_tpe = _out2315;
          RAST._IExpr _11120_collectionGen;
          DCOMP._IOwnership _11121___v181;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11122_recIdents;
          RAST._IExpr _out2316;
          DCOMP._IOwnership _out2317;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2318;
          (this).GenExpr(_11117_collection, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2316, out _out2317, out _out2318);
          _11120_collectionGen = _out2316;
          _11121___v181 = _out2317;
          _11122_recIdents = _out2318;
          if ((_11115_lambda).is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _11123_formals;
            _11123_formals = (_11115_lambda).dtor_params;
            Dafny.ISequence<DAST._IFormal> _11124_newFormals;
            _11124_newFormals = Dafny.Sequence<DAST._IFormal>.FromElements();
            BigInteger _hi45 = new BigInteger((_11123_formals).Count);
            for (BigInteger _11125_i = BigInteger.Zero; _11125_i < _hi45; _11125_i++) {
              var _pat_let_tv13 = _11123_formals;
              _11124_newFormals = Dafny.Sequence<DAST._IFormal>.Concat(_11124_newFormals, Dafny.Sequence<DAST._IFormal>.FromElements(Dafny.Helpers.Let<DAST._IFormal, DAST._IFormal>((_11123_formals).Select(_11125_i), _pat_let12_0 => Dafny.Helpers.Let<DAST._IFormal, DAST._IFormal>(_pat_let12_0, _11126_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IAttribute>, DAST._IFormal>(((_pat_let_tv13).Select(_11125_i)).dtor_attributes, _pat_let13_0 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IAttribute>, DAST._IFormal>(_pat_let13_0, _11127_dt__update_hattributes_h0 => DAST.Formal.create((_11126_dt__update__tmp_h0).dtor_name, (_11126_dt__update__tmp_h0).dtor_typ, _11127_dt__update_hattributes_h0)))))));
            }
            var _pat_let_tv14 = _11124_newFormals;
            DAST._IExpression _11128_newLambda;
            _11128_newLambda = Dafny.Helpers.Let<DAST._IExpression, DAST._IExpression>(_11115_lambda, _pat_let14_0 => Dafny.Helpers.Let<DAST._IExpression, DAST._IExpression>(_pat_let14_0, _11129_dt__update__tmp_h1 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IFormal>, DAST._IExpression>(_pat_let_tv14, _pat_let15_0 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IFormal>, DAST._IExpression>(_pat_let15_0, _11130_dt__update_hparams_h0 => DAST.Expression.create_Lambda(_11130_dt__update_hparams_h0, (_11129_dt__update__tmp_h1).dtor_retType, (_11129_dt__update__tmp_h1).dtor_body)))));
            RAST._IExpr _11131_lambdaGen;
            DCOMP._IOwnership _11132___v182;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11133_recLambdaIdents;
            RAST._IExpr _out2319;
            DCOMP._IOwnership _out2320;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2321;
            (this).GenExpr(_11128_newLambda, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2319, out _out2320, out _out2321);
            _11131_lambdaGen = _out2319;
            _11132___v182 = _out2320;
            _11133_recLambdaIdents = _out2321;
            Dafny.ISequence<Dafny.Rune> _11134_fn;
            _11134_fn = ((_11116_is__forall) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("all")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("any")));
            r = ((_11120_collectionGen).Sel(_11134_fn)).Apply1(((_11131_lambdaGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11122_recIdents, _11133_recLambdaIdents);
          } else {
            (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Quantifier without an inline lambda"));
            r = RAST.Expr.create_RawExpr((this.error).dtor_value);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
          RAST._IExpr _out2322;
          DCOMP._IOwnership _out2323;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2322, out _out2323);
          r = _out2322;
          resultingOwnership = _out2323;
        }
      }
    }
    public Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      BigInteger _11135_i;
      _11135_i = BigInteger.Zero;
      while ((_11135_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _11136_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _11137_m;
        RAST._IMod _out2324;
        _out2324 = (this).GenModule((p).Select(_11135_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _11137_m = _out2324;
        _11136_generated = (_11137_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_11135_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _11136_generated);
        _11135_i = (_11135_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _11138_i;
      _11138_i = BigInteger.Zero;
      while ((_11138_i) < (new BigInteger((fullName).Count))) {
        if ((_11138_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeName((fullName).Select(_11138_i)));
        _11138_i = (_11138_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public bool _i_UnicodeChars {get; set;}
    public bool UnicodeChars { get {
      return this._i_UnicodeChars;
    } }
    public Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if ((this).UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public RAST._IType DafnyCharUnderlying { get {
      if ((this).UnicodeChars) {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
      } else {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"));
      }
    } }
    public Dafny.ISequence<Dafny.Rune> string__of { get {
      if ((this).UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_utf16_of");
      }
    } }
    public DCOMP._IObjectType _i_ObjectType {get; set;}
    public DCOMP._IObjectType ObjectType { get {
      return this._i_ObjectType;
    } }
    public Dafny.ISequence<Dafny.Rune> allocate { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("allocate");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("allocate_rcmut");
      }
    } }
    public Dafny.ISequence<Dafny.Rune> allocate__fn { get {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), (this).allocate);
    } }
    public Dafny.ISequence<Dafny.Rune> update__field__uninit__macro { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_field_uninit!");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_field_uninit_rcmut!");
      }
    } }
    public RAST._IExpr thisInConstructor { get {
      if (((this).ObjectType).is_RawPointers) {
        return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
      } else {
        return ((RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
      }
    } }
    public Dafny.ISequence<Dafny.Rune> array__construct { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("construct");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("construct_rcmut");
      }
    } }
    public RAST._IExpr modify__macro { get {
      return (RAST.__default.dafny__runtime).MSel(((((this).ObjectType).is_RawPointers) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("modify!")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("md!"))));
    } }
    public RAST._IExpr read__macro { get {
      return (RAST.__default.dafny__runtime).MSel(((((this).ObjectType).is_RawPointers) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("read!")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rd!"))));
    } }
    public Dafny.ISequence<Dafny.Rune> placebos__usize { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("placebos_usize");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("placebos_usize_rcmut");
      }
    } }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP