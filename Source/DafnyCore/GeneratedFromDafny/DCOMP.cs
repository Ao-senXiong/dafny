// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;

namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2351___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2351___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _2351___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2351___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _2351___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2351___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2352___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2352___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _2352___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2352___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _2352___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2352___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i))) && (!(DCOMP.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeName(Dafny.ISequence<Dafny.Rune> n) {
      return DCOMP.__default.escapeIdent((n));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if (((i).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) || ((i).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self")))) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _2353_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _2353_r);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> AddAssignedPrefix(Dafny.ISequence<Dafny.Rune> rustName) {
      if (((new BigInteger((rustName).Count)) >= (new BigInteger(2))) && (((rustName).Subsequence(BigInteger.Zero, new BigInteger(2))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#")))) {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.ASSIGNED__PREFIX, (rustName).Drop(new BigInteger(2)));
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.ASSIGNED__PREFIX, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_")), rustName);
      }
    }
    public static Std.Wrappers._IOption<DAST._IResolvedType> TraitTypeContainingMethodAux(Dafny.ISequence<DAST._IType> rs, Dafny.ISequence<Dafny.Rune> dafnyName)
    {
      var _pat_let_tv12 = dafnyName;
      if ((new BigInteger((rs).Count)).Sign == 0) {
        return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
      } else {
        Std.Wrappers._IOption<DAST._IResolvedType> _2354_res = ((System.Func<DAST._IType, Std.Wrappers._IOption<DAST._IResolvedType>>)((_source80) => {
          if (_source80.is_UserDefined) {
            DAST._IResolvedType _2355___mcc_h0 = _source80.dtor_resolved;
            DAST._IResolvedType _2356_resolvedType = _2355___mcc_h0;
            return DCOMP.__default.TraitTypeContainingMethod(_2356_resolvedType, _pat_let_tv12);
          } else if (_source80.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2357___mcc_h2 = _source80.dtor_Tuple_i_a0;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_Array) {
            DAST._IType _2358___mcc_h4 = _source80.dtor_element;
            BigInteger _2359___mcc_h5 = _source80.dtor_dims;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_Seq) {
            DAST._IType _2360___mcc_h8 = _source80.dtor_element;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_Set) {
            DAST._IType _2361___mcc_h10 = _source80.dtor_element;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_Multiset) {
            DAST._IType _2362___mcc_h12 = _source80.dtor_element;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_Map) {
            DAST._IType _2363___mcc_h14 = _source80.dtor_key;
            DAST._IType _2364___mcc_h15 = _source80.dtor_value;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_SetBuilder) {
            DAST._IType _2365___mcc_h18 = _source80.dtor_element;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_MapBuilder) {
            DAST._IType _2366___mcc_h20 = _source80.dtor_key;
            DAST._IType _2367___mcc_h21 = _source80.dtor_value;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2368___mcc_h24 = _source80.dtor_args;
            DAST._IType _2369___mcc_h25 = _source80.dtor_result;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_Primitive) {
            DAST._IPrimitive _2370___mcc_h28 = _source80.dtor_Primitive_i_a0;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2371___mcc_h30 = _source80.dtor_Passthrough_i_a0;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else if (_source80.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _2372___mcc_h32 = _source80.dtor_TypeArg_i_a0;
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else {
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          }
        }))((rs).Select(BigInteger.Zero));
        Std.Wrappers._IOption<DAST._IResolvedType> _source81 = _2354_res;
        if (_source81.is_None) {
          return DCOMP.__default.TraitTypeContainingMethodAux((rs).Drop(BigInteger.One), dafnyName);
        } else {
          DAST._IResolvedType _2373___mcc_h34 = _source81.dtor_value;
          return _2354_res;
        }
      }
    }
    public static Std.Wrappers._IOption<DAST._IResolvedType> TraitTypeContainingMethod(DAST._IResolvedType r, Dafny.ISequence<Dafny.Rune> dafnyName)
    {
      DAST._IResolvedType _let_tmp_rhs52 = r;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2374_path = _let_tmp_rhs52.dtor_path;
      Dafny.ISequence<DAST._IType> _2375_typeArgs = _let_tmp_rhs52.dtor_typeArgs;
      DAST._IResolvedTypeBase _2376_kind = _let_tmp_rhs52.dtor_kind;
      Dafny.ISequence<DAST._IAttribute> _2377_attributes = _let_tmp_rhs52.dtor_attributes;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2378_properMethods = _let_tmp_rhs52.dtor_properMethods;
      Dafny.ISequence<DAST._IType> _2379_extendedTypes = _let_tmp_rhs52.dtor_extendedTypes;
      if ((_2378_properMethods).Contains(dafnyName)) {
        return Std.Wrappers.Option<DAST._IResolvedType>.create_Some(r);
      } else {
        return DCOMP.__default.TraitTypeContainingMethodAux(_2379_extendedTypes, dafnyName);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static Dafny.ISequence<Dafny.Rune> ASSIGNED__PREFIX { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_set");
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
    public static DAST._IAttribute AttributeOwned { get {
      return DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("owned"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipOwnedBox { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipOwnedBox() {
      return new Ownership_OwnershipOwnedBox();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipOwnedBox { get { return this is Ownership_OwnershipOwnedBox; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipOwnedBox();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipOwnedBox : Ownership {
    public Ownership_OwnershipOwnedBox() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwnedBox();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwnedBox;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwnedBox";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> dtor_types { get; }
    _IEnvironment DowncastClone();
    bool CanReadWithoutClone(Dafny.ISequence<Dafny.Rune> name);
    bool HasCloneSemantics(Dafny.ISequence<Dafny.Rune> name);
    Std.Wrappers._IOption<RAST._IType> GetType(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMP._IEnvironment AddAssigned(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe);
    DCOMP._IEnvironment merge(DCOMP._IEnvironment other);
    DCOMP._IEnvironment RemoveAssigned(Dafny.ISequence<Dafny.Rune> name);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _i_names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _i_types;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> types) {
      this._i_names = names;
      this._i_types = types;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_i_names, _i_types);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Environment;
      return oth != null && object.Equals(this._i_names, oth._i_names) && object.Equals(this._i_types, oth._i_types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._i_names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._i_types);
      s += ")";
      return s;
    }
    private static readonly DCOMP._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Empty);
    public static DCOMP._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMP._IEnvironment>(DCOMP.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMP._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> types) {
      return new Environment(names, types);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> types) {
      return create(names, types);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._i_names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> dtor_types {
      get {
        return this._i_types;
      }
    }
    public static DCOMP._IEnvironment Empty() {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements());
    }
    public bool CanReadWithoutClone(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_types).Contains(name)) && ((Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((this).dtor_types,name)).CanReadWithoutClone());
    }
    public bool HasCloneSemantics(Dafny.ISequence<Dafny.Rune> name) {
      return !((this).CanReadWithoutClone(name));
    }
    public Std.Wrappers._IOption<RAST._IType> GetType(Dafny.ISequence<Dafny.Rune> name) {
      if (((this).dtor_types).Contains(name)) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((this).dtor_types,name));
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_types).Contains(name)) && ((Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((this).dtor_types,name)).is_Borrowed);
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_types).Contains(name)) && ((Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((this).dtor_types,name)).is_BorrowedMut);
    }
    public DCOMP._IEnvironment AddAssigned(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe)
    {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update((this).dtor_types, name, tpe));
    }
    public DCOMP._IEnvironment merge(DCOMP._IEnvironment other) {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, (other).dtor_names), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Merge((this).dtor_types, (other).dtor_types));
    }
    public DCOMP._IEnvironment RemoveAssigned(Dafny.ISequence<Dafny.Rune> name) {
      BigInteger _2380_indexInEnv = Std.Collections.Seq.__default.IndexOf<Dafny.ISequence<Dafny.Rune>>((this).dtor_names, name);
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(((this).dtor_names).Subsequence(BigInteger.Zero, _2380_indexInEnv), ((this).dtor_names).Drop((_2380_indexInEnv) + (BigInteger.One))), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Subtract((this).dtor_types, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(name)));
    }
  }

  public interface _IObjectType {
    bool is_RawPointers { get; }
    bool is_RcMut { get; }
    _IObjectType DowncastClone();
  }
  public abstract class ObjectType : _IObjectType {
    public ObjectType() {
    }
    private static readonly DCOMP._IObjectType theDefault = create_RawPointers();
    public static DCOMP._IObjectType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IObjectType> _TYPE = new Dafny.TypeDescriptor<DCOMP._IObjectType>(DCOMP.ObjectType.Default());
    public static Dafny.TypeDescriptor<DCOMP._IObjectType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IObjectType create_RawPointers() {
      return new ObjectType_RawPointers();
    }
    public static _IObjectType create_RcMut() {
      return new ObjectType_RcMut();
    }
    public bool is_RawPointers { get { return this is ObjectType_RawPointers; } }
    public bool is_RcMut { get { return this is ObjectType_RcMut; } }
    public static System.Collections.Generic.IEnumerable<_IObjectType> AllSingletonConstructors {
      get {
        yield return ObjectType.create_RawPointers();
        yield return ObjectType.create_RcMut();
      }
    }
    public abstract _IObjectType DowncastClone();
  }
  public class ObjectType_RawPointers : ObjectType {
    public ObjectType_RawPointers() : base() {
    }
    public override _IObjectType DowncastClone() {
      if (this is _IObjectType dt) { return dt; }
      return new ObjectType_RawPointers();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.ObjectType_RawPointers;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.ObjectType.RawPointers";
      return s;
    }
  }
  public class ObjectType_RcMut : ObjectType {
    public ObjectType_RcMut() : base() {
    }
    public override _IObjectType DowncastClone() {
      if (this is _IObjectType dt) { return dt; }
      return new ObjectType_RcMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.ObjectType_RcMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.ObjectType.RcMut";
      return s;
    }
  }

  public interface _IGenTypeContext {
    bool is_GenTypeContext { get; }
    bool dtor_inBinding { get; }
    bool dtor_inFn { get; }
    bool dtor_forTraitParents { get; }
    _IGenTypeContext DowncastClone();
  }
  public class GenTypeContext : _IGenTypeContext {
    public readonly bool _i_inBinding;
    public readonly bool _i_inFn;
    public readonly bool _i_forTraitParents;
    public GenTypeContext(bool inBinding, bool inFn, bool forTraitParents) {
      this._i_inBinding = inBinding;
      this._i_inFn = inFn;
      this._i_forTraitParents = forTraitParents;
    }
    public _IGenTypeContext DowncastClone() {
      if (this is _IGenTypeContext dt) { return dt; }
      return new GenTypeContext(_i_inBinding, _i_inFn, _i_forTraitParents);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.GenTypeContext;
      return oth != null && this._i_inBinding == oth._i_inBinding && this._i_inFn == oth._i_inFn && this._i_forTraitParents == oth._i_forTraitParents;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_inBinding));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_inFn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_forTraitParents));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.GenTypeContext.GenTypeContext";
      s += "(";
      s += Dafny.Helpers.ToString(this._i_inBinding);
      s += ", ";
      s += Dafny.Helpers.ToString(this._i_inFn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._i_forTraitParents);
      s += ")";
      return s;
    }
    private static readonly DCOMP._IGenTypeContext theDefault = create(false, false, false);
    public static DCOMP._IGenTypeContext Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IGenTypeContext> _TYPE = new Dafny.TypeDescriptor<DCOMP._IGenTypeContext>(DCOMP.GenTypeContext.Default());
    public static Dafny.TypeDescriptor<DCOMP._IGenTypeContext> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IGenTypeContext create(bool inBinding, bool inFn, bool forTraitParents) {
      return new GenTypeContext(inBinding, inFn, forTraitParents);
    }
    public static _IGenTypeContext create_GenTypeContext(bool inBinding, bool inFn, bool forTraitParents) {
      return create(inBinding, inFn, forTraitParents);
    }
    public bool is_GenTypeContext { get { return true; } }
    public bool dtor_inBinding {
      get {
        return this._i_inBinding;
      }
    }
    public bool dtor_inFn {
      get {
        return this._i_inFn;
      }
    }
    public bool dtor_forTraitParents {
      get {
        return this._i_forTraitParents;
      }
    }
    public static DCOMP._IGenTypeContext InBinding() {
      return DCOMP.GenTypeContext.create(true, false, false);
    }
    public static DCOMP._IGenTypeContext InFn() {
      return DCOMP.GenTypeContext.create(false, true, false);
    }
    public static DCOMP._IGenTypeContext ForTraitParents() {
      return DCOMP.GenTypeContext.create(false, false, true);
    }
    public static DCOMP._IGenTypeContext @default() {
      return DCOMP.GenTypeContext.create(false, false, false);
    }
  }

  public interface _ISelfInfo {
    bool is_NoSelf { get; }
    bool is_ThisTyped { get; }
    Dafny.ISequence<Dafny.Rune> dtor_rSelfName { get; }
    DAST._IType dtor_dafnyType { get; }
    _ISelfInfo DowncastClone();
    bool IsSelf();
  }
  public abstract class SelfInfo : _ISelfInfo {
    public SelfInfo() {
    }
    private static readonly DCOMP._ISelfInfo theDefault = create_NoSelf();
    public static DCOMP._ISelfInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._ISelfInfo> _TYPE = new Dafny.TypeDescriptor<DCOMP._ISelfInfo>(DCOMP.SelfInfo.Default());
    public static Dafny.TypeDescriptor<DCOMP._ISelfInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ISelfInfo create_NoSelf() {
      return new SelfInfo_NoSelf();
    }
    public static _ISelfInfo create_ThisTyped(Dafny.ISequence<Dafny.Rune> rSelfName, DAST._IType dafnyType) {
      return new SelfInfo_ThisTyped(rSelfName, dafnyType);
    }
    public bool is_NoSelf { get { return this is SelfInfo_NoSelf; } }
    public bool is_ThisTyped { get { return this is SelfInfo_ThisTyped; } }
    public Dafny.ISequence<Dafny.Rune> dtor_rSelfName {
      get {
        var d = this;
        return ((SelfInfo_ThisTyped)d)._i_rSelfName;
      }
    }
    public DAST._IType dtor_dafnyType {
      get {
        var d = this;
        return ((SelfInfo_ThisTyped)d)._i_dafnyType;
      }
    }
    public abstract _ISelfInfo DowncastClone();
    public bool IsSelf() {
      return ((this).is_ThisTyped) && (((this).dtor_rSelfName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")));
    }
  }
  public class SelfInfo_NoSelf : SelfInfo {
    public SelfInfo_NoSelf() : base() {
    }
    public override _ISelfInfo DowncastClone() {
      if (this is _ISelfInfo dt) { return dt; }
      return new SelfInfo_NoSelf();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.SelfInfo_NoSelf;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.SelfInfo.NoSelf";
      return s;
    }
  }
  public class SelfInfo_ThisTyped : SelfInfo {
    public readonly Dafny.ISequence<Dafny.Rune> _i_rSelfName;
    public readonly DAST._IType _i_dafnyType;
    public SelfInfo_ThisTyped(Dafny.ISequence<Dafny.Rune> rSelfName, DAST._IType dafnyType) : base() {
      this._i_rSelfName = rSelfName;
      this._i_dafnyType = dafnyType;
    }
    public override _ISelfInfo DowncastClone() {
      if (this is _ISelfInfo dt) { return dt; }
      return new SelfInfo_ThisTyped(_i_rSelfName, _i_dafnyType);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.SelfInfo_ThisTyped;
      return oth != null && object.Equals(this._i_rSelfName, oth._i_rSelfName) && object.Equals(this._i_dafnyType, oth._i_dafnyType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_rSelfName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i_dafnyType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.SelfInfo.ThisTyped";
      s += "(";
      s += this._i_rSelfName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._i_dafnyType);
      s += ")";
      return s;
    }
  }

  public partial class COMP {
    public COMP() {
      this.error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.Default();
      this._i_UnicodeChars = false;
      this._i_ObjectType = DCOMP.ObjectType.Default();
    }
    public RAST._IType Object(RAST._IType underlying) {
      if (((this).ObjectType).is_RawPointers) {
        return RAST.Type.create_PointerMut(underlying);
      } else {
        return RAST.__default.ObjectType(underlying);
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> error {get; set;}
    public void __ctor(bool unicodeChars, DCOMP._IObjectType objectType)
    {
      (this)._i_UnicodeChars = unicodeChars;
      (this)._i_ObjectType = objectType;
      (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
    }
    public RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<Dafny.Rune> _2381_modName;
      _2381_modName = DCOMP.__default.escapeName((mod).dtor_name);
      if (((mod).dtor_body).is_None) {
        s = RAST.Mod.create_ExternMod(_2381_modName);
      } else {
        Dafny.ISequence<RAST._IModDecl> _2382_body;
        Dafny.ISequence<RAST._IModDecl> _out15;
        _out15 = (this).GenModuleBody(((mod).dtor_body).dtor_value, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
        _2382_body = _out15;
        s = RAST.Mod.create_Mod(_2381_modName, _2382_body);
      }
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _hi5 = new BigInteger((body).Count);
      for (BigInteger _2383_i = BigInteger.Zero; _2383_i < _hi5; _2383_i++) {
        Dafny.ISequence<RAST._IModDecl> _2384_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source82 = (body).Select(_2383_i);
        if (_source82.is_Module) {
          DAST._IModule _2385___mcc_h0 = _source82.dtor_Module_i_a0;
          DAST._IModule _2386_m = _2385___mcc_h0;
          RAST._IMod _2387_mm;
          RAST._IMod _out16;
          _out16 = (this).GenModule(_2386_m, containingPath);
          _2387_mm = _out16;
          _2384_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_2387_mm));
        } else if (_source82.is_Class) {
          DAST._IClass _2388___mcc_h1 = _source82.dtor_Class_i_a0;
          DAST._IClass _2389_c = _2388___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = (this).GenClass(_2389_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_2389_c).dtor_name)));
          _2384_generated = _out17;
        } else if (_source82.is_Trait) {
          DAST._ITrait _2390___mcc_h2 = _source82.dtor_Trait_i_a0;
          DAST._ITrait _2391_t = _2390___mcc_h2;
          Dafny.ISequence<RAST._IModDecl> _out18;
          _out18 = (this).GenTrait(_2391_t, containingPath);
          _2384_generated = _out18;
        } else if (_source82.is_Newtype) {
          DAST._INewtype _2392___mcc_h3 = _source82.dtor_Newtype_i_a0;
          DAST._INewtype _2393_n = _2392___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = (this).GenNewtype(_2393_n);
          _2384_generated = _out19;
        } else if (_source82.is_SynonymType) {
          DAST._ISynonymType _2394___mcc_h4 = _source82.dtor_SynonymType_i_a0;
          DAST._ISynonymType _2395_s = _2394___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = (this).GenSynonymType(_2395_s);
          _2384_generated = _out20;
        } else {
          DAST._IDatatype _2396___mcc_h5 = _source82.dtor_Datatype_i_a0;
          DAST._IDatatype _2397_d = _2396___mcc_h5;
          Dafny.ISequence<RAST._IModDecl> _out21;
          _out21 = (this).GenDatatype(_2397_d);
          _2384_generated = _out21;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _2384_generated);
      }
      return s;
    }
    public void GenTypeParam(DAST._ITypeArgDecl tp, out DAST._IType typeArg, out RAST._ITypeParamDecl typeParam)
    {
      typeArg = DAST.Type.Default();
      typeParam = RAST.TypeParamDecl.Default();
      typeArg = DAST.Type.create_TypeArg((tp).dtor_name);
      Dafny.ISequence<RAST._IType> _2398_genTpConstraint;
      _2398_genTpConstraint = ((((tp).dtor_bounds).Contains(DAST.TypeArgBound.create_SupportsEquality())) ? (Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DafnyTypeEq)) : (Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DafnyType)));
      if (((tp).dtor_bounds).Contains(DAST.TypeArgBound.create_SupportsDefault())) {
        _2398_genTpConstraint = Dafny.Sequence<RAST._IType>.Concat(_2398_genTpConstraint, Dafny.Sequence<RAST._IType>.FromElements(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Default"))));
      }
      typeParam = RAST.TypeParamDecl.create(DCOMP.__default.escapeName(((tp).dtor_name)), _2398_genTpConstraint);
    }
    public void GenTypeParameters(Dafny.ISequence<DAST._ITypeArgDecl> @params, out Dafny.ISequence<DAST._IType> typeParamsSeq, out Dafny.ISequence<RAST._IType> typeParams, out Dafny.ISequence<RAST._ITypeParamDecl> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSeq = Dafny.Sequence<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._IType>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParamDecl>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSeq = Dafny.Sequence<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParamDecl>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((@params).Count)).Sign == 1) {
        BigInteger _hi6 = new BigInteger((@params).Count);
        for (BigInteger _2399_tpI = BigInteger.Zero; _2399_tpI < _hi6; _2399_tpI++) {
          DAST._ITypeArgDecl _2400_tp;
          _2400_tp = (@params).Select(_2399_tpI);
          DAST._IType _2401_typeArg;
          RAST._ITypeParamDecl _2402_typeParam;
          DAST._IType _out22;
          RAST._ITypeParamDecl _out23;
          (this).GenTypeParam(_2400_tp, out _out22, out _out23);
          _2401_typeArg = _out22;
          _2402_typeParam = _out23;
          RAST._IType _2403_rType;
          RAST._IType _out24;
          _out24 = (this).GenType(_2401_typeArg, DCOMP.GenTypeContext.@default());
          _2403_rType = _out24;
          typeParamsSeq = Dafny.Sequence<DAST._IType>.Concat(typeParamsSeq, Dafny.Sequence<DAST._IType>.FromElements(_2401_typeArg));
          typeParams = Dafny.Sequence<RAST._IType>.Concat(typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2403_rType));
          constrainedTypeParams = Dafny.Sequence<RAST._ITypeParamDecl>.Concat(constrainedTypeParams, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(_2402_typeParam));
        }
      }
    }
    public bool IsSameResolvedType(DAST._IResolvedType r1, DAST._IResolvedType r2)
    {
      return ((((r1).dtor_path).Equals((r2).dtor_path)) && (((r1).dtor_typeArgs).Equals((r2).dtor_typeArgs))) && (object.Equals((r1).dtor_kind, (r2).dtor_kind));
    }
    public Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISequence<DAST._IType> _2404_typeParamsSeq;
      Dafny.ISequence<RAST._IType> _2405_rTypeParams;
      Dafny.ISequence<RAST._ITypeParamDecl> _2406_rTypeParamsDecls;
      Dafny.ISequence<Dafny.Rune> _2407_whereConstraints;
      Dafny.ISequence<DAST._IType> _out25;
      Dafny.ISequence<RAST._IType> _out26;
      Dafny.ISequence<RAST._ITypeParamDecl> _out27;
      Dafny.ISequence<Dafny.Rune> _out28;
      (this).GenTypeParameters((c).dtor_typeParams, out _out25, out _out26, out _out27, out _out28);
      _2404_typeParamsSeq = _out25;
      _2405_rTypeParams = _out26;
      _2406_rTypeParamsDecls = _out27;
      _2407_whereConstraints = _out28;
      Dafny.ISequence<Dafny.Rune> _2408_constrainedTypeParams;
      _2408_constrainedTypeParams = RAST.TypeParamDecl.ToStringMultiple(_2406_rTypeParamsDecls, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IField> _2409_fields;
      _2409_fields = Dafny.Sequence<RAST._IField>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _2410_fieldInits;
      _2410_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _hi7 = new BigInteger(((c).dtor_fields).Count);
      for (BigInteger _2411_fieldI = BigInteger.Zero; _2411_fieldI < _hi7; _2411_fieldI++) {
        DAST._IField _2412_field;
        _2412_field = ((c).dtor_fields).Select(_2411_fieldI);
        RAST._IType _2413_fieldType;
        RAST._IType _out29;
        _out29 = (this).GenType(((_2412_field).dtor_formal).dtor_typ, DCOMP.GenTypeContext.@default());
        _2413_fieldType = _out29;
        Dafny.ISequence<Dafny.Rune> _2414_fieldRustName;
        _2414_fieldRustName = DCOMP.__default.escapeName(((_2412_field).dtor_formal).dtor_name);
        _2409_fields = Dafny.Sequence<RAST._IField>.Concat(_2409_fields, Dafny.Sequence<RAST._IField>.FromElements(RAST.Field.create(RAST.Visibility.create_PUB(), RAST.Formal.create(_2414_fieldRustName, _2413_fieldType))));
        Std.Wrappers._IOption<DAST._IExpression> _source83 = (_2412_field).dtor_defaultValue;
        if (_source83.is_None) {
          {
            RAST._IExpr _2415_default;
            _2415_default = RAST.__default.std__Default__default;
            if ((_2413_fieldType).IsObjectOrPointer()) {
              _2415_default = (_2413_fieldType).ToNullExpr();
            }
            _2410_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2410_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(_2414_fieldRustName, _2415_default)));
          }
        } else {
          DAST._IExpression _2416___mcc_h0 = _source83.dtor_value;
          DAST._IExpression _2417_e = _2416___mcc_h0;
          {
            RAST._IExpr _2418_expr;
            DCOMP._IOwnership _2419___v43;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2420___v44;
            RAST._IExpr _out30;
            DCOMP._IOwnership _out31;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out32;
            (this).GenExpr(_2417_e, DCOMP.SelfInfo.create_NoSelf(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out30, out _out31, out _out32);
            _2418_expr = _out30;
            _2419___v43 = _out31;
            _2420___v44 = _out32;
            _2410_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2410_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(_2414_fieldRustName, _2418_expr)));
          }
        }
      }
      BigInteger _hi8 = new BigInteger(((c).dtor_typeParams).Count);
      for (BigInteger _2421_typeParamI = BigInteger.Zero; _2421_typeParamI < _hi8; _2421_typeParamI++) {
        DAST._IType _2422_typeArg;
        RAST._ITypeParamDecl _2423_typeParam;
        DAST._IType _out33;
        RAST._ITypeParamDecl _out34;
        (this).GenTypeParam(((c).dtor_typeParams).Select(_2421_typeParamI), out _out33, out _out34);
        _2422_typeArg = _out33;
        _2423_typeParam = _out34;
        RAST._IType _2424_rTypeArg;
        RAST._IType _out35;
        _out35 = (this).GenType(_2422_typeArg, DCOMP.GenTypeContext.@default());
        _2424_rTypeArg = _out35;
        _2409_fields = Dafny.Sequence<RAST._IField>.Concat(_2409_fields, Dafny.Sequence<RAST._IField>.FromElements(RAST.Field.create(RAST.Visibility.create_PRIV(), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2421_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2424_rTypeArg))))));
        _2410_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2410_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2421_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
      }
      Dafny.ISequence<Dafny.Rune> _2425_datatypeName;
      _2425_datatypeName = DCOMP.__default.escapeName((c).dtor_name);
      RAST._IStruct _2426_struct;
      _2426_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _2425_datatypeName, _2406_rTypeParamsDecls, RAST.Fields.create_NamedFields(_2409_fields));
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_2426_struct));
      Dafny.ISequence<RAST._IImplMember> _2427_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2428_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out36;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out37;
      (this).GenClassImplBody((c).dtor_body, false, DAST.Type.create_UserDefined(DAST.ResolvedType.create(path, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedTypeBase.create_Class(), (c).dtor_attributes, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements())), _2404_typeParamsSeq, out _out36, out _out37);
      _2427_implBodyRaw = _out36;
      _2428_traitBodies = _out37;
      Dafny.ISequence<RAST._IImplMember> _2429_implBody;
      _2429_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create((this).allocate__fn, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some((this).Object(RAST.Type.create_SelfOwned())), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some((((RAST.__default.dafny__runtime).MSel((this).allocate)).ApplyType1(RAST.Type.create_SelfOwned())).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()))))), _2427_implBodyRaw);
      RAST._IImpl _2430_i;
      _2430_i = RAST.Impl.create_Impl(_2406_rTypeParamsDecls, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2425_datatypeName), _2405_rTypeParams), _2407_whereConstraints, _2429_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2430_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _2431_i;
        _2431_i = BigInteger.Zero;
        while ((_2431_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _2432_superClass;
          _2432_superClass = ((c).dtor_superClasses).Select(_2431_i);
          DAST._IType _source84 = _2432_superClass;
          if (_source84.is_UserDefined) {
            DAST._IResolvedType _2433___mcc_h1 = _source84.dtor_resolved;
            DAST._IResolvedType _source85 = _2433___mcc_h1;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2434___mcc_h3 = _source85.dtor_path;
            Dafny.ISequence<DAST._IType> _2435___mcc_h4 = _source85.dtor_typeArgs;
            DAST._IResolvedTypeBase _2436___mcc_h5 = _source85.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _2437___mcc_h6 = _source85.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2438___mcc_h7 = _source85.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _2439___mcc_h8 = _source85.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source86 = _2436___mcc_h5;
            if (_source86.is_Class) {
            } else if (_source86.is_Datatype) {
            } else if (_source86.is_Trait) {
              Dafny.ISequence<DAST._IType> _2440_typeArgs = _2435___mcc_h4;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2441_traitPath = _2434___mcc_h3;
              {
                RAST._IType _2442_pathStr;
                RAST._IType _out38;
                _out38 = DCOMP.COMP.GenPath(_2441_traitPath);
                _2442_pathStr = _out38;
                Dafny.ISequence<RAST._IType> _2443_typeArgs;
                Dafny.ISequence<RAST._IType> _out39;
                _out39 = (this).GenTypeArgs(_2440_typeArgs, DCOMP.GenTypeContext.@default());
                _2443_typeArgs = _out39;
                Dafny.ISequence<RAST._IImplMember> _2444_body;
                _2444_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_2428_traitBodies).Contains(_2441_traitPath)) {
                  _2444_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_2428_traitBodies,_2441_traitPath);
                }
                RAST._IType _2445_genSelfPath;
                RAST._IType _out40;
                _out40 = DCOMP.COMP.GenPath(path);
                _2445_genSelfPath = _out40;
                RAST._IModDecl _2446_x;
                _2446_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2406_rTypeParamsDecls, RAST.Type.create_TypeApp(_2442_pathStr, _2443_typeArgs), RAST.Type.create_TypeApp(_2445_genSelfPath, _2405_rTypeParams), _2407_whereConstraints, _2444_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_2446_x));
              }
            } else {
              DAST._IType _2447___mcc_h15 = _source86.dtor_baseType;
              DAST._INewtypeRange _2448___mcc_h16 = _source86.dtor_range;
              bool _2449___mcc_h17 = _source86.dtor_erase;
            }
          } else if (_source84.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2450___mcc_h21 = _source84.dtor_Tuple_i_a0;
          } else if (_source84.is_Array) {
            DAST._IType _2451___mcc_h23 = _source84.dtor_element;
            BigInteger _2452___mcc_h24 = _source84.dtor_dims;
          } else if (_source84.is_Seq) {
            DAST._IType _2453___mcc_h27 = _source84.dtor_element;
          } else if (_source84.is_Set) {
            DAST._IType _2454___mcc_h29 = _source84.dtor_element;
          } else if (_source84.is_Multiset) {
            DAST._IType _2455___mcc_h31 = _source84.dtor_element;
          } else if (_source84.is_Map) {
            DAST._IType _2456___mcc_h33 = _source84.dtor_key;
            DAST._IType _2457___mcc_h34 = _source84.dtor_value;
          } else if (_source84.is_SetBuilder) {
            DAST._IType _2458___mcc_h37 = _source84.dtor_element;
          } else if (_source84.is_MapBuilder) {
            DAST._IType _2459___mcc_h39 = _source84.dtor_key;
            DAST._IType _2460___mcc_h40 = _source84.dtor_value;
          } else if (_source84.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2461___mcc_h43 = _source84.dtor_args;
            DAST._IType _2462___mcc_h44 = _source84.dtor_result;
          } else if (_source84.is_Primitive) {
            DAST._IPrimitive _2463___mcc_h47 = _source84.dtor_Primitive_i_a0;
          } else if (_source84.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2464___mcc_h49 = _source84.dtor_Passthrough_i_a0;
          } else if (_source84.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _2465___mcc_h51 = _source84.dtor_TypeArg_i_a0;
          } else {
          }
          _2431_i = (_2431_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISequence<DAST._IType> _2466_typeParamsSeq;
      _2466_typeParamsSeq = Dafny.Sequence<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._ITypeParamDecl> _2467_typeParamDecls;
      _2467_typeParamDecls = Dafny.Sequence<RAST._ITypeParamDecl>.FromElements();
      Dafny.ISequence<RAST._IType> _2468_typeParams;
      _2468_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _hi9 = new BigInteger(((t).dtor_typeParams).Count);
        for (BigInteger _2469_tpI = BigInteger.Zero; _2469_tpI < _hi9; _2469_tpI++) {
          DAST._ITypeArgDecl _2470_tp;
          _2470_tp = ((t).dtor_typeParams).Select(_2469_tpI);
          DAST._IType _2471_typeArg;
          RAST._ITypeParamDecl _2472_typeParamDecl;
          DAST._IType _out41;
          RAST._ITypeParamDecl _out42;
          (this).GenTypeParam(_2470_tp, out _out41, out _out42);
          _2471_typeArg = _out41;
          _2472_typeParamDecl = _out42;
          _2466_typeParamsSeq = Dafny.Sequence<DAST._IType>.Concat(_2466_typeParamsSeq, Dafny.Sequence<DAST._IType>.FromElements(_2471_typeArg));
          _2467_typeParamDecls = Dafny.Sequence<RAST._ITypeParamDecl>.Concat(_2467_typeParamDecls, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(_2472_typeParamDecl));
          RAST._IType _2473_typeParam;
          RAST._IType _out43;
          _out43 = (this).GenType(_2471_typeArg, DCOMP.GenTypeContext.@default());
          _2473_typeParam = _out43;
          _2468_typeParams = Dafny.Sequence<RAST._IType>.Concat(_2468_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2473_typeParam));
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2474_fullPath;
      _2474_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _2475_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2476___v49;
      Dafny.ISequence<RAST._IImplMember> _out44;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out45;
      (this).GenClassImplBody((t).dtor_body, true, DAST.Type.create_UserDefined(DAST.ResolvedType.create(_2474_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedTypeBase.create_Trait(), (t).dtor_attributes, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements())), _2466_typeParamsSeq, out _out44, out _out45);
      _2475_implBody = _out44;
      _2476___v49 = _out45;
      Dafny.ISequence<RAST._IType> _2477_parents;
      _2477_parents = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _hi10 = new BigInteger(((t).dtor_parents).Count);
      for (BigInteger _2478_i = BigInteger.Zero; _2478_i < _hi10; _2478_i++) {
        RAST._IType _2479_tpe;
        RAST._IType _out46;
        _out46 = (this).GenType(((t).dtor_parents).Select(_2478_i), DCOMP.GenTypeContext.ForTraitParents());
        _2479_tpe = _out46;
        _2477_parents = Dafny.Sequence<RAST._IType>.Concat(_2477_parents, Dafny.Sequence<RAST._IType>.FromElements(_2479_tpe));
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_TraitDecl(RAST.Trait.create(_2467_typeParamDecls, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeName((t).dtor_name)), _2468_typeParams), _2477_parents, _2475_implBody)));
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISequence<DAST._IType> _2480_typeParamsSeq;
      Dafny.ISequence<RAST._IType> _2481_rTypeParams;
      Dafny.ISequence<RAST._ITypeParamDecl> _2482_rTypeParamsDecls;
      Dafny.ISequence<Dafny.Rune> _2483_whereConstraints;
      Dafny.ISequence<DAST._IType> _out47;
      Dafny.ISequence<RAST._IType> _out48;
      Dafny.ISequence<RAST._ITypeParamDecl> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      (this).GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _2480_typeParamsSeq = _out47;
      _2481_rTypeParams = _out48;
      _2482_rTypeParamsDecls = _out49;
      _2483_whereConstraints = _out50;
      Dafny.ISequence<Dafny.Rune> _2484_constrainedTypeParams;
      _2484_constrainedTypeParams = RAST.TypeParamDecl.ToStringMultiple(_2482_rTypeParamsDecls, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _2485_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source87 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source87.is_None) {
        RAST._IType _out51;
        _out51 = (this).GenType((c).dtor_base, DCOMP.GenTypeContext.@default());
        _2485_underlyingType = _out51;
      } else {
        RAST._IType _2486___mcc_h0 = _source87.dtor_value;
        RAST._IType _2487_v = _2486___mcc_h0;
        _2485_underlyingType = _2487_v;
      }
      DAST._IType _2488_resultingType;
      _2488_resultingType = DAST.Type.create_UserDefined(DAST.ResolvedType.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedTypeBase.create_Newtype((c).dtor_base, (c).dtor_range, false), (c).dtor_attributes, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements()));
      Dafny.ISequence<Dafny.Rune> _2489_newtypeName;
      _2489_newtypeName = DCOMP.__default.escapeName((c).dtor_name);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), _2489_newtypeName, _2482_rTypeParamsDecls, RAST.Fields.create_NamelessFields(Dafny.Sequence<RAST._INamelessField>.FromElements(RAST.NamelessField.create(RAST.Visibility.create_PUB(), _2485_underlyingType))))));
      RAST._IExpr _2490_fnBody;
      _2490_fnBody = RAST.Expr.create_Identifier(_2489_newtypeName);
      Std.Wrappers._IOption<DAST._IExpression> _source88 = (c).dtor_witnessExpr;
      if (_source88.is_None) {
        {
          _2490_fnBody = (_2490_fnBody).Apply1(RAST.__default.std__Default__default);
        }
      } else {
        DAST._IExpression _2491___mcc_h1 = _source88.dtor_value;
        DAST._IExpression _2492_e = _2491___mcc_h1;
        {
          DAST._IExpression _2493_e;
          _2493_e = ((object.Equals((c).dtor_base, _2488_resultingType)) ? (_2492_e) : (DAST.Expression.create_Convert(_2492_e, (c).dtor_base, _2488_resultingType)));
          RAST._IExpr _2494_eStr;
          DCOMP._IOwnership _2495___v50;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2496___v51;
          RAST._IExpr _out52;
          DCOMP._IOwnership _out53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out54;
          (this).GenExpr(_2493_e, DCOMP.SelfInfo.create_NoSelf(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out52, out _out53, out _out54);
          _2494_eStr = _out52;
          _2495___v50 = _out53;
          _2496___v51 = _out54;
          _2490_fnBody = (_2490_fnBody).Apply1(_2494_eStr);
        }
      }
      RAST._IImplMember _2497_body;
      _2497_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2490_fnBody)));
      Std.Wrappers._IOption<DAST._INewtypeConstraint> _source89 = (c).dtor_constraint;
      if (_source89.is_None) {
      } else {
        DAST._INewtypeConstraint _2498___mcc_h2 = _source89.dtor_value;
        DAST._INewtypeConstraint _source90 = _2498___mcc_h2;
        DAST._IFormal _2499___mcc_h3 = _source90.dtor_variable;
        Dafny.ISequence<DAST._IStatement> _2500___mcc_h4 = _source90.dtor_constraintStmts;
        Dafny.ISequence<DAST._IStatement> _2501_constraintStmts = _2500___mcc_h4;
        DAST._IFormal _2502_formal = _2499___mcc_h3;
        RAST._IExpr _2503_rStmts;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2504___v52;
        DCOMP._IEnvironment _2505_newEnv;
        RAST._IExpr _out55;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out56;
        DCOMP._IEnvironment _out57;
        (this).GenStmts(_2501_constraintStmts, DCOMP.SelfInfo.create_NoSelf(), DCOMP.Environment.Empty(), false, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out55, out _out56, out _out57);
        _2503_rStmts = _out55;
        _2504___v52 = _out56;
        _2505_newEnv = _out57;
        Dafny.ISequence<RAST._IFormal> _2506_rFormals;
        Dafny.ISequence<RAST._IFormal> _out58;
        _out58 = (this).GenParams(Dafny.Sequence<DAST._IFormal>.FromElements(_2502_formal));
        _2506_rFormals = _out58;
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2482_rTypeParamsDecls, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2489_newtypeName), _2481_rTypeParams), _2483_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("is"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), _2506_rFormals, Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Bool()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2503_rStmts))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2482_rTypeParamsDecls, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2489_newtypeName), _2481_rTypeParams), _2483_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_2497_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2482_rTypeParamsDecls, RAST.__default.DafnyPrint, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2489_newtypeName), _2481_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.Type.create_Bool())), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2482_rTypeParamsDecls, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2489_newtypeName), _2481_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_2485_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some((RAST.__default.SelfBorrowed).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenSynonymType(DAST._ISynonymType c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISequence<DAST._IType> _2507_typeParamsSeq;
      Dafny.ISequence<RAST._IType> _2508_rTypeParams;
      Dafny.ISequence<RAST._ITypeParamDecl> _2509_rTypeParamsDecls;
      Dafny.ISequence<Dafny.Rune> _2510_whereConstraints;
      Dafny.ISequence<DAST._IType> _out59;
      Dafny.ISequence<RAST._IType> _out60;
      Dafny.ISequence<RAST._ITypeParamDecl> _out61;
      Dafny.ISequence<Dafny.Rune> _out62;
      (this).GenTypeParameters((c).dtor_typeParams, out _out59, out _out60, out _out61, out _out62);
      _2507_typeParamsSeq = _out59;
      _2508_rTypeParams = _out60;
      _2509_rTypeParamsDecls = _out61;
      _2510_whereConstraints = _out62;
      Dafny.ISequence<Dafny.Rune> _2511_constrainedTypeParams;
      _2511_constrainedTypeParams = RAST.TypeParamDecl.ToStringMultiple(_2509_rTypeParamsDecls, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _2512_synonymTypeName;
      _2512_synonymTypeName = DCOMP.__default.escapeName((c).dtor_name);
      RAST._IType _2513_resultingType;
      RAST._IType _out63;
      _out63 = (this).GenType((c).dtor_base, DCOMP.GenTypeContext.@default());
      _2513_resultingType = _out63;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_TypeDecl(RAST.TypeSynonym.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _2512_synonymTypeName, _2509_rTypeParamsDecls, _2513_resultingType)));
      Std.Wrappers._IOption<DAST._IExpression> _source91 = (c).dtor_witnessExpr;
      if (_source91.is_None) {
      } else {
        DAST._IExpression _2514___mcc_h0 = _source91.dtor_value;
        DAST._IExpression _2515_e = _2514___mcc_h0;
        {
          RAST._IExpr _2516_rStmts;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2517___v53;
          DCOMP._IEnvironment _2518_newEnv;
          RAST._IExpr _out64;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out65;
          DCOMP._IEnvironment _out66;
          (this).GenStmts((c).dtor_witnessStmts, DCOMP.SelfInfo.create_NoSelf(), DCOMP.Environment.Empty(), false, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out64, out _out65, out _out66);
          _2516_rStmts = _out64;
          _2517___v53 = _out65;
          _2518_newEnv = _out66;
          RAST._IExpr _2519_rExpr;
          DCOMP._IOwnership _2520___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2521___v55;
          RAST._IExpr _out67;
          DCOMP._IOwnership _out68;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out69;
          (this).GenExpr(_2515_e, DCOMP.SelfInfo.create_NoSelf(), _2518_newEnv, DCOMP.Ownership.create_OwnershipOwned(), out _out67, out _out68, out _out69);
          _2519_rExpr = _out67;
          _2520___v54 = _out68;
          _2521___v55 = _out69;
          Dafny.ISequence<Dafny.Rune> _2522_constantName;
          _2522_constantName = DCOMP.__default.escapeName(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_init_"), ((c).dtor_name)));
          s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_TopFnDecl(RAST.TopFnDecl.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), RAST.Visibility.create_PUB(), RAST.Fn.create(_2522_constantName, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_2513_resultingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some((_2516_rStmts).Then(_2519_rExpr)))))));
        }
      }
      return s;
    }
    public Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISequence<DAST._IType> _2523_typeParamsSeq;
      Dafny.ISequence<RAST._IType> _2524_rTypeParams;
      Dafny.ISequence<RAST._ITypeParamDecl> _2525_rTypeParamsDecls;
      Dafny.ISequence<Dafny.Rune> _2526_whereConstraints;
      Dafny.ISequence<DAST._IType> _out70;
      Dafny.ISequence<RAST._IType> _out71;
      Dafny.ISequence<RAST._ITypeParamDecl> _out72;
      Dafny.ISequence<Dafny.Rune> _out73;
      (this).GenTypeParameters((c).dtor_typeParams, out _out70, out _out71, out _out72, out _out73);
      _2523_typeParamsSeq = _out70;
      _2524_rTypeParams = _out71;
      _2525_rTypeParamsDecls = _out72;
      _2526_whereConstraints = _out73;
      Dafny.ISequence<Dafny.Rune> _2527_datatypeName;
      _2527_datatypeName = DCOMP.__default.escapeName((c).dtor_name);
      Dafny.ISequence<RAST._IEnumCase> _2528_ctors;
      _2528_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _hi11 = new BigInteger(((c).dtor_ctors).Count);
      for (BigInteger _2529_i = BigInteger.Zero; _2529_i < _hi11; _2529_i++) {
        DAST._IDatatypeCtor _2530_ctor;
        _2530_ctor = ((c).dtor_ctors).Select(_2529_i);
        Dafny.ISequence<RAST._IField> _2531_ctorArgs;
        _2531_ctorArgs = Dafny.Sequence<RAST._IField>.FromElements();
        BigInteger _hi12 = new BigInteger(((_2530_ctor).dtor_args).Count);
        for (BigInteger _2532_j = BigInteger.Zero; _2532_j < _hi12; _2532_j++) {
          DAST._IFormal _2533_formal;
          _2533_formal = ((_2530_ctor).dtor_args).Select(_2532_j);
          RAST._IType _2534_formalType;
          RAST._IType _out74;
          _out74 = (this).GenType((_2533_formal).dtor_typ, DCOMP.GenTypeContext.@default());
          _2534_formalType = _out74;
          if ((c).dtor_isCo) {
            _2531_ctorArgs = Dafny.Sequence<RAST._IField>.Concat(_2531_ctorArgs, Dafny.Sequence<RAST._IField>.FromElements(RAST.Field.create(RAST.Visibility.create_PRIV(), RAST.Formal.create(DCOMP.__default.escapeName((_2533_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_2534_formalType))))));
          } else {
            _2531_ctorArgs = Dafny.Sequence<RAST._IField>.Concat(_2531_ctorArgs, Dafny.Sequence<RAST._IField>.FromElements(RAST.Field.create(RAST.Visibility.create_PRIV(), RAST.Formal.create(DCOMP.__default.escapeName((_2533_formal).dtor_name), _2534_formalType))));
          }
        }
        _2528_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2528_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeName((_2530_ctor).dtor_name), RAST.Fields.create_NamedFields(_2531_ctorArgs))));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2535_selfPath;
      _2535_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _2536_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2537_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out75;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out76;
      (this).GenClassImplBody((c).dtor_body, false, DAST.Type.create_UserDefined(DAST.ResolvedType.create(_2535_selfPath, _2523_typeParamsSeq, DAST.ResolvedTypeBase.create_Datatype(), (c).dtor_attributes, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements())), _2523_typeParamsSeq, out _out75, out _out76);
      _2536_implBodyRaw = _out75;
      _2537_traitBodies = _out76;
      Dafny.ISequence<RAST._IImplMember> _2538_implBody;
      _2538_implBody = _2536_implBodyRaw;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2539_emittedFields;
      _2539_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _hi13 = new BigInteger(((c).dtor_ctors).Count);
      for (BigInteger _2540_i = BigInteger.Zero; _2540_i < _hi13; _2540_i++) {
        DAST._IDatatypeCtor _2541_ctor;
        _2541_ctor = ((c).dtor_ctors).Select(_2540_i);
        BigInteger _hi14 = new BigInteger(((_2541_ctor).dtor_args).Count);
        for (BigInteger _2542_j = BigInteger.Zero; _2542_j < _hi14; _2542_j++) {
          DAST._IFormal _2543_formal;
          _2543_formal = ((_2541_ctor).dtor_args).Select(_2542_j);
          if (!((_2539_emittedFields).Contains((_2543_formal).dtor_name))) {
            _2539_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2539_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2543_formal).dtor_name));
            RAST._IType _2544_formalType;
            RAST._IType _out77;
            _out77 = (this).GenType((_2543_formal).dtor_typ, DCOMP.GenTypeContext.@default());
            _2544_formalType = _out77;
            Dafny.ISequence<RAST._IMatchCase> _2545_cases;
            _2545_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _hi15 = new BigInteger(((c).dtor_ctors).Count);
            for (BigInteger _2546_k = BigInteger.Zero; _2546_k < _hi15; _2546_k++) {
              DAST._IDatatypeCtor _2547_ctor2;
              _2547_ctor2 = ((c).dtor_ctors).Select(_2546_k);
              Dafny.ISequence<Dafny.Rune> _2548_pattern;
              _2548_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2527_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeName((_2547_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _2549_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              bool _2550_hasMatchingField;
              _2550_hasMatchingField = false;
              BigInteger _hi16 = new BigInteger(((_2547_ctor2).dtor_args).Count);
              for (BigInteger _2551_l = BigInteger.Zero; _2551_l < _hi16; _2551_l++) {
                DAST._IFormal _2552_formal2;
                _2552_formal2 = ((_2547_ctor2).dtor_args).Select(_2551_l);
                if (object.Equals((_2543_formal).dtor_name, (_2552_formal2).dtor_name)) {
                  _2550_hasMatchingField = true;
                }
                _2548_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2548_pattern, DCOMP.__default.escapeName((_2552_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2548_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_2548_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_2550_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _2549_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeName((_2543_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _2549_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeName((_2543_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _2549_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _2553_ctorMatch;
              _2553_ctorMatch = RAST.MatchCase.create(_2548_pattern, RAST.Expr.create_RawExpr(_2549_rhs));
              _2545_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2545_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_2553_ctorMatch));
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _2545_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2545_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2527_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _2554_methodBody;
            _2554_methodBody = RAST.Expr.create_Match(RAST.__default.self, _2545_cases);
            _2538_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_2538_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeName((_2543_formal).dtor_name), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_2544_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2554_methodBody)))));
          }
        }
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        Dafny.ISequence<RAST._IType> _2555_types;
        _2555_types = Dafny.Sequence<RAST._IType>.FromElements();
        BigInteger _hi17 = new BigInteger(((c).dtor_typeParams).Count);
        for (BigInteger _2556_typeI = BigInteger.Zero; _2556_typeI < _hi17; _2556_typeI++) {
          DAST._IType _2557_typeArg;
          RAST._ITypeParamDecl _2558_rTypeParamDecl;
          DAST._IType _out78;
          RAST._ITypeParamDecl _out79;
          (this).GenTypeParam(((c).dtor_typeParams).Select(_2556_typeI), out _out78, out _out79);
          _2557_typeArg = _out78;
          _2558_rTypeParamDecl = _out79;
          RAST._IType _2559_rTypeArg;
          RAST._IType _out80;
          _out80 = (this).GenType(_2557_typeArg, DCOMP.GenTypeContext.@default());
          _2559_rTypeArg = _out80;
          _2555_types = Dafny.Sequence<RAST._IType>.Concat(_2555_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2559_rTypeArg))));
        }
        _2528_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2528_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Fields.create_NamelessFields(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessField>(((System.Func<RAST._IType, RAST._INamelessField>)((_2560_tpe) => {
  return RAST.NamelessField.create(RAST.Visibility.create_PRIV(), _2560_tpe);
})), _2555_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _2561_enumBody;
      _2561_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq, Clone)]")), _2527_datatypeName, _2525_rTypeParamsDecls, _2528_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2525_rTypeParamsDecls, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2527_datatypeName), _2524_rTypeParams), _2526_whereConstraints, _2538_implBody)));
      Dafny.ISequence<RAST._IMatchCase> _2562_printImplBodyCases;
      _2562_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      Dafny.ISequence<RAST._IMatchCase> _2563_hashImplBodyCases;
      _2563_hashImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      BigInteger _hi18 = new BigInteger(((c).dtor_ctors).Count);
      for (BigInteger _2564_i = BigInteger.Zero; _2564_i < _hi18; _2564_i++) {
        DAST._IDatatypeCtor _2565_ctor;
        _2565_ctor = ((c).dtor_ctors).Select(_2564_i);
        Dafny.ISequence<Dafny.Rune> _2566_ctorMatch;
        _2566_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeName((_2565_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _2567_modulePrefix;
        _2567_modulePrefix = ((((((c).dtor_enclosingModule))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeName(((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _2568_printRhs;
        _2568_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _2567_modulePrefix), DCOMP.__default.escapeName((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeName((_2565_ctor).dtor_name)), (((_2565_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        RAST._IExpr _2569_hashRhs;
        _2569_hashRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        BigInteger _hi19 = new BigInteger(((_2565_ctor).dtor_args).Count);
        for (BigInteger _2570_j = BigInteger.Zero; _2570_j < _hi19; _2570_j++) {
          DAST._IFormal _2571_formal;
          _2571_formal = ((_2565_ctor).dtor_args).Select(_2570_j);
          Dafny.ISequence<Dafny.Rune> _2572_formalName;
          _2572_formalName = DCOMP.__default.escapeName((_2571_formal).dtor_name);
          _2566_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2566_ctorMatch, _2572_formalName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _2569_hashRhs = (_2569_hashRhs).Then(((RAST.Expr.create_Identifier(_2572_formalName)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("hash"))).Apply1(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_state"))));
          if ((_2570_j).Sign == 1) {
            _2568_printRhs = (_2568_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _2568_printRhs = (_2568_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeName((_2571_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
        }
        _2566_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_2566_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_2565_ctor).dtor_hasAnyArgs) {
          _2568_printRhs = (_2568_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _2568_printRhs = (_2568_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _2562_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2562_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2527_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2566_ctorMatch), RAST.Expr.create_Block(_2568_printRhs))));
        _2563_hashImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2563_hashImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2527_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2566_ctorMatch), RAST.Expr.create_Block(_2569_hashRhs))));
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _2562_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2562_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2527_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
        _2563_hashImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2563_hashImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2527_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      Dafny.ISequence<RAST._ITypeParamDecl> _2573_defaultConstrainedTypeParams;
      _2573_defaultConstrainedTypeParams = RAST.TypeParamDecl.AddConstraintsMultiple(_2525_rTypeParamsDecls, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
      Dafny.ISequence<RAST._ITypeParamDecl> _2574_rTypeParamsDeclsWithEq;
      _2574_rTypeParamsDeclsWithEq = RAST.TypeParamDecl.AddConstraintsMultiple(_2525_rTypeParamsDecls, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.Eq));
      Dafny.ISequence<RAST._ITypeParamDecl> _2575_rTypeParamsDeclsWithHash;
      _2575_rTypeParamsDeclsWithHash = RAST.TypeParamDecl.AddConstraintsMultiple(_2525_rTypeParamsDecls, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.Hash));
      RAST._IExpr _2576_printImplBody;
      _2576_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _2562_printImplBodyCases);
      RAST._IExpr _2577_hashImplBody;
      _2577_hashImplBody = RAST.Expr.create_Match(RAST.__default.self, _2563_hashImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _2578_printImpl;
      _2578_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2525_rTypeParamsDecls, ((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Debug")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2527_datatypeName), _2524_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), RAST.Type.create_BorrowedMut(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Formatter"))))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyPrint"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.self, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")), RAST.Expr.create_LiteralBool(true))))))))), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2525_rTypeParamsDecls, RAST.__default.DafnyPrint, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2527_datatypeName), _2524_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_BorrowedMut(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Formatter")))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.Type.create_Bool())), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2576_printImplBody)))))), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2574_rTypeParamsDeclsWithEq, RAST.__default.Eq, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2527_datatypeName), _2524_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements())), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2575_rTypeParamsDeclsWithHash, RAST.__default.Hash, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2527_datatypeName), _2524_rTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("hash"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(RAST.TypeParamDecl.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_H"), Dafny.Sequence<RAST._IType>.FromElements(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("hash"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Hasher"))))), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_state"), RAST.Type.create_BorrowedMut(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_H"))))), Std.Wrappers.Option<RAST._IType>.create_None(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2577_hashImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _2579_defaultImpl;
      _2579_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      Dafny.ISequence<RAST._IModDecl> _2580_asRefImpl;
      _2580_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        RAST._IExpr _2581_structName;
        _2581_structName = (RAST.Expr.create_Identifier(_2527_datatypeName)).MSel(DCOMP.__default.escapeName((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _2582_structAssignments;
        _2582_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        BigInteger _hi20 = new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count);
        for (BigInteger _2583_i = BigInteger.Zero; _2583_i < _hi20; _2583_i++) {
          DAST._IFormal _2584_formal;
          _2584_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_2583_i);
          _2582_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2582_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeName((_2584_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
        }
        Dafny.ISequence<RAST._ITypeParamDecl> _2585_defaultConstrainedTypeParams;
        _2585_defaultConstrainedTypeParams = RAST.TypeParamDecl.AddConstraintsMultiple(_2525_rTypeParamsDecls, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        RAST._IType _2586_fullType;
        _2586_fullType = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2527_datatypeName), _2524_rTypeParams);
        _2579_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2585_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, _2586_fullType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_2586_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_2581_structName, _2582_structAssignments))))))));
        _2580_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2525_rTypeParamsDecls, (((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("convert"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AsRef"))).Apply1(_2586_fullType), RAST.Type.create_Borrowed(_2586_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"), Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.self)))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_2561_enumBody, _2578_printImpl), _2579_defaultImpl), _2580_asRefImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = ((((((p).Select(BigInteger.Zero)))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (((((((p).Select(BigInteger.Zero)))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"))) ? (RAST.__default.dafny__runtime__type) : (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))))));
        BigInteger _hi21 = new BigInteger((p).Count);
        for (BigInteger _2587_i = BigInteger.Zero; _2587_i < _hi21; _2587_i++) {
          r = (r).MSel(DCOMP.__default.escapeName(((p).Select(_2587_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = ((((((p).Select(BigInteger.Zero)))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (((((((p).Select(BigInteger.Zero)))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"))) ? (RAST.__default.dafny__runtime) : (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))))));
        BigInteger _hi22 = new BigInteger((p).Count);
        for (BigInteger _2588_i = BigInteger.Zero; _2588_i < _hi22; _2588_i++) {
          r = (r).MSel(DCOMP.__default.escapeName(((p).Select(_2588_i))));
        }
      }
      return r;
    }
    public Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, DCOMP._IGenTypeContext genTypeContext)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _hi23 = new BigInteger((args).Count);
      for (BigInteger _2589_i = BigInteger.Zero; _2589_i < _hi23; _2589_i++) {
        RAST._IType _2590_genTp;
        RAST._IType _out81;
        _out81 = (this).GenType((args).Select(_2589_i), genTypeContext);
        _2590_genTp = _out81;
        s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_2590_genTp));
      }
      return s;
    }
    public bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public RAST._IType GenType(DAST._IType c, DCOMP._IGenTypeContext genTypeContext)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source92 = c;
      if (_source92.is_UserDefined) {
        DAST._IResolvedType _2591___mcc_h0 = _source92.dtor_resolved;
        DAST._IResolvedType _2592_resolved = _2591___mcc_h0;
        {
          RAST._IType _2593_t;
          RAST._IType _out82;
          _out82 = DCOMP.COMP.GenPath((_2592_resolved).dtor_path);
          _2593_t = _out82;
          Dafny.ISequence<RAST._IType> _2594_typeArgs;
          Dafny.ISequence<RAST._IType> _out83;
          _out83 = (this).GenTypeArgs((_2592_resolved).dtor_typeArgs, Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let10_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let10_0, _2595_dt__update__tmp_h0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let11_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let11_0, _2596_dt__update_hforTraitParents_h0 => DCOMP.GenTypeContext.create((_2595_dt__update__tmp_h0).dtor_inBinding, (_2595_dt__update__tmp_h0).dtor_inFn, _2596_dt__update_hforTraitParents_h0))))));
          _2594_typeArgs = _out83;
          s = RAST.Type.create_TypeApp(_2593_t, _2594_typeArgs);
          DAST._IResolvedTypeBase _source93 = (_2592_resolved).dtor_kind;
          if (_source93.is_Class) {
            {
              s = (this).Object(s);
            }
          } else if (_source93.is_Datatype) {
            {
              if ((this).IsRcWrapped((_2592_resolved).dtor_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source93.is_Trait) {
            {
              if (((_2592_resolved).dtor_path).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = ((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("any"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Any"));
              }
              if (!((genTypeContext).dtor_forTraitParents)) {
                s = (this).Object(RAST.Type.create_DynType(s));
              }
            }
          } else {
            DAST._IType _2597___mcc_h18 = _source93.dtor_baseType;
            DAST._INewtypeRange _2598___mcc_h19 = _source93.dtor_range;
            bool _2599___mcc_h20 = _source93.dtor_erase;
            bool _2600_erased = _2599___mcc_h20;
            DAST._INewtypeRange _2601_range = _2598___mcc_h19;
            DAST._IType _2602_t = _2597___mcc_h18;
            {
              if (_2600_erased) {
                Std.Wrappers._IOption<RAST._IType> _source94 = DCOMP.COMP.NewtypeToRustType(_2602_t, _2601_range);
                if (_source94.is_None) {
                } else {
                  RAST._IType _2603___mcc_h21 = _source94.dtor_value;
                  RAST._IType _2604_v = _2603___mcc_h21;
                  s = _2604_v;
                }
              }
            }
          }
        }
      } else if (_source92.is_Tuple) {
        Dafny.ISequence<DAST._IType> _2605___mcc_h1 = _source92.dtor_Tuple_i_a0;
        Dafny.ISequence<DAST._IType> _2606_types = _2605___mcc_h1;
        {
          Dafny.ISequence<RAST._IType> _2607_args;
          _2607_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2608_i;
          _2608_i = BigInteger.Zero;
          while ((_2608_i) < (new BigInteger((_2606_types).Count))) {
            RAST._IType _2609_generated;
            RAST._IType _out84;
            _out84 = (this).GenType((_2606_types).Select(_2608_i), Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let12_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let12_0, _2610_dt__update__tmp_h1 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let13_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let13_0, _2611_dt__update_hforTraitParents_h1 => DCOMP.GenTypeContext.create((_2610_dt__update__tmp_h1).dtor_inBinding, (_2610_dt__update__tmp_h1).dtor_inFn, _2611_dt__update_hforTraitParents_h1))))));
            _2609_generated = _out84;
            _2607_args = Dafny.Sequence<RAST._IType>.Concat(_2607_args, Dafny.Sequence<RAST._IType>.FromElements(_2609_generated));
            _2608_i = (_2608_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_2607_args);
        }
      } else if (_source92.is_Array) {
        DAST._IType _2612___mcc_h2 = _source92.dtor_element;
        BigInteger _2613___mcc_h3 = _source92.dtor_dims;
        BigInteger _2614_dims = _2613___mcc_h3;
        DAST._IType _2615_element = _2612___mcc_h2;
        {
          if ((_2614_dims) > (new BigInteger(16))) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<i>Array of dimensions greater than 16</i>"));
          } else {
            RAST._IType _2616_elem;
            RAST._IType _out85;
            _out85 = (this).GenType(_2615_element, Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let14_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let14_0, _2617_dt__update__tmp_h2 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let15_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let15_0, _2618_dt__update_hforTraitParents_h2 => DCOMP.GenTypeContext.create((_2617_dt__update__tmp_h2).dtor_inBinding, (_2617_dt__update__tmp_h2).dtor_inFn, _2618_dt__update_hforTraitParents_h2))))));
            _2616_elem = _out85;
            if ((_2614_dims) == (BigInteger.One)) {
              s = RAST.Type.create_Array(_2616_elem, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
              s = (this).Object(s);
            } else {
              Dafny.ISequence<Dafny.Rune> _2619_n;
              _2619_n = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Array"), Std.Strings.__default.OfNat(_2614_dims));
              s = ((RAST.__default.dafny__runtime__type).MSel(_2619_n)).Apply(Dafny.Sequence<RAST._IType>.FromElements(_2616_elem));
              s = (this).Object(s);
            }
          }
        }
      } else if (_source92.is_Seq) {
        DAST._IType _2620___mcc_h4 = _source92.dtor_element;
        DAST._IType _2621_element = _2620___mcc_h4;
        {
          RAST._IType _2622_elem;
          RAST._IType _out86;
          _out86 = (this).GenType(_2621_element, Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let16_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let16_0, _2623_dt__update__tmp_h3 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let17_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let17_0, _2624_dt__update_hforTraitParents_h3 => DCOMP.GenTypeContext.create((_2623_dt__update__tmp_h3).dtor_inBinding, (_2623_dt__update__tmp_h3).dtor_inFn, _2624_dt__update_hforTraitParents_h3))))));
          _2622_elem = _out86;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_2622_elem));
        }
      } else if (_source92.is_Set) {
        DAST._IType _2625___mcc_h5 = _source92.dtor_element;
        DAST._IType _2626_element = _2625___mcc_h5;
        {
          RAST._IType _2627_elem;
          RAST._IType _out87;
          _out87 = (this).GenType(_2626_element, Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let18_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let18_0, _2628_dt__update__tmp_h4 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let19_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let19_0, _2629_dt__update_hforTraitParents_h4 => DCOMP.GenTypeContext.create((_2628_dt__update__tmp_h4).dtor_inBinding, (_2628_dt__update__tmp_h4).dtor_inFn, _2629_dt__update_hforTraitParents_h4))))));
          _2627_elem = _out87;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_2627_elem));
        }
      } else if (_source92.is_Multiset) {
        DAST._IType _2630___mcc_h6 = _source92.dtor_element;
        DAST._IType _2631_element = _2630___mcc_h6;
        {
          RAST._IType _2632_elem;
          RAST._IType _out88;
          _out88 = (this).GenType(_2631_element, Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let20_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let20_0, _2633_dt__update__tmp_h5 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let21_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let21_0, _2634_dt__update_hforTraitParents_h5 => DCOMP.GenTypeContext.create((_2633_dt__update__tmp_h5).dtor_inBinding, (_2633_dt__update__tmp_h5).dtor_inFn, _2634_dt__update_hforTraitParents_h5))))));
          _2632_elem = _out88;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_2632_elem));
        }
      } else if (_source92.is_Map) {
        DAST._IType _2635___mcc_h7 = _source92.dtor_key;
        DAST._IType _2636___mcc_h8 = _source92.dtor_value;
        DAST._IType _2637_value = _2636___mcc_h8;
        DAST._IType _2638_key = _2635___mcc_h7;
        {
          RAST._IType _2639_keyType;
          RAST._IType _out89;
          _out89 = (this).GenType(_2638_key, Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let22_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let22_0, _2640_dt__update__tmp_h6 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let23_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let23_0, _2641_dt__update_hforTraitParents_h6 => DCOMP.GenTypeContext.create((_2640_dt__update__tmp_h6).dtor_inBinding, (_2640_dt__update__tmp_h6).dtor_inFn, _2641_dt__update_hforTraitParents_h6))))));
          _2639_keyType = _out89;
          RAST._IType _2642_valueType;
          RAST._IType _out90;
          _out90 = (this).GenType(_2637_value, genTypeContext);
          _2642_valueType = _out90;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_2639_keyType, _2642_valueType));
        }
      } else if (_source92.is_SetBuilder) {
        DAST._IType _2643___mcc_h9 = _source92.dtor_element;
        DAST._IType _2644_elem = _2643___mcc_h9;
        {
          RAST._IType _2645_elemType;
          RAST._IType _out91;
          _out91 = (this).GenType(_2644_elem, Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let24_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let24_0, _2646_dt__update__tmp_h8 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let25_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let25_0, _2647_dt__update_hforTraitParents_h8 => DCOMP.GenTypeContext.create((_2646_dt__update__tmp_h8).dtor_inBinding, (_2646_dt__update__tmp_h8).dtor_inFn, _2647_dt__update_hforTraitParents_h8))))));
          _2645_elemType = _out91;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2645_elemType));
        }
      } else if (_source92.is_MapBuilder) {
        DAST._IType _2648___mcc_h10 = _source92.dtor_key;
        DAST._IType _2649___mcc_h11 = _source92.dtor_value;
        DAST._IType _2650_value = _2649___mcc_h11;
        DAST._IType _2651_key = _2648___mcc_h10;
        {
          RAST._IType _2652_keyType;
          RAST._IType _out92;
          _out92 = (this).GenType(_2651_key, Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let26_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let26_0, _2653_dt__update__tmp_h7 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let27_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let27_0, _2654_dt__update_hforTraitParents_h7 => DCOMP.GenTypeContext.create((_2653_dt__update__tmp_h7).dtor_inBinding, (_2653_dt__update__tmp_h7).dtor_inFn, _2654_dt__update_hforTraitParents_h7))))));
          _2652_keyType = _out92;
          RAST._IType _2655_valueType;
          RAST._IType _out93;
          _out93 = (this).GenType(_2650_value, genTypeContext);
          _2655_valueType = _out93;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2652_keyType, _2655_valueType));
        }
      } else if (_source92.is_Arrow) {
        Dafny.ISequence<DAST._IType> _2656___mcc_h12 = _source92.dtor_args;
        DAST._IType _2657___mcc_h13 = _source92.dtor_result;
        DAST._IType _2658_result = _2657___mcc_h13;
        Dafny.ISequence<DAST._IType> _2659_args = _2656___mcc_h12;
        {
          Dafny.ISequence<RAST._IType> _2660_argTypes;
          _2660_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2661_i;
          _2661_i = BigInteger.Zero;
          while ((_2661_i) < (new BigInteger((_2659_args).Count))) {
            RAST._IType _2662_generated;
            RAST._IType _out94;
            _out94 = (this).GenType((_2659_args).Select(_2661_i), Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(genTypeContext, _pat_let28_0 => Dafny.Helpers.Let<DCOMP._IGenTypeContext, DCOMP._IGenTypeContext>(_pat_let28_0, _2663_dt__update__tmp_h9 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(false, _pat_let29_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let29_0, _2664_dt__update_hforTraitParents_h9 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(true, _pat_let30_0 => Dafny.Helpers.Let<bool, DCOMP._IGenTypeContext>(_pat_let30_0, _2665_dt__update_hinFn_h0 => DCOMP.GenTypeContext.create((_2663_dt__update__tmp_h9).dtor_inBinding, _2665_dt__update_hinFn_h0, _2664_dt__update_hforTraitParents_h9))))))));
            _2662_generated = _out94;
            _2660_argTypes = Dafny.Sequence<RAST._IType>.Concat(_2660_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_2662_generated)));
            _2661_i = (_2661_i) + (BigInteger.One);
          }
          RAST._IType _2666_resultType;
          RAST._IType _out95;
          _out95 = (this).GenType(_2658_result, DCOMP.GenTypeContext.create(((genTypeContext).dtor_inFn) || ((genTypeContext).dtor_inBinding), false, false));
          _2666_resultType = _out95;
          s = RAST.__default.Rc(RAST.Type.create_DynType(RAST.Type.create_FnType(_2660_argTypes, _2666_resultType)));
        }
      } else if (_source92.is_Primitive) {
        DAST._IPrimitive _2667___mcc_h14 = _source92.dtor_Primitive_i_a0;
        DAST._IPrimitive _2668_p = _2667___mcc_h14;
        {
          DAST._IPrimitive _source95 = _2668_p;
          if (_source95.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source95.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source95.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel((this).DafnyChar)));
          } else if (_source95.is_Bool) {
            s = RAST.Type.create_Bool();
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel((this).DafnyChar);
          }
        }
      } else if (_source92.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _2669___mcc_h15 = _source92.dtor_Passthrough_i_a0;
        Dafny.ISequence<Dafny.Rune> _2670_v = _2669___mcc_h15;
        s = RAST.__default.RawType(_2670_v);
      } else if (_source92.is_TypeArg) {
        Dafny.ISequence<Dafny.Rune> _2671___mcc_h16 = _source92.dtor_TypeArg_i_a0;
        Dafny.ISequence<Dafny.Rune> _source96 = _2671___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _2672___mcc_h17 = _source96;
        Dafny.ISequence<Dafny.Rune> _2673_name = _2672___mcc_h17;
        s = RAST.Type.create_TIdentifier(DCOMP.__default.escapeName(_2673_name));
      } else {
        {
          s = ((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("any"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Any"));
          if (!((genTypeContext).dtor_forTraitParents)) {
            s = (this).Object(RAST.Type.create_DynType(s));
          }
        }
      }
      return s;
    }
    public bool EnclosingIsTrait(DAST._IType tpe) {
      return ((tpe).is_UserDefined) && ((((tpe).dtor_resolved).dtor_kind).is_Trait);
    }
    public void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISequence<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _hi24 = new BigInteger((body).Count);
      for (BigInteger _2674_i = BigInteger.Zero; _2674_i < _hi24; _2674_i++) {
        DAST._IMethod _source97 = (body).Select(_2674_i);
        DAST._IMethod _2675___mcc_h0 = _source97;
        DAST._IMethod _2676_m = _2675___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source98 = (_2676_m).dtor_overridingPath;
          if (_source98.is_None) {
            {
              RAST._IImplMember _2677_generated;
              RAST._IImplMember _out96;
              _out96 = (this).GenMethod(_2676_m, forTrait, enclosingType, enclosingTypeParams);
              _2677_generated = _out96;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_2677_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2678___mcc_h1 = _source98.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2679_p = _2678___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _2680_existing;
              _2680_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_2679_p)) {
                _2680_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_2679_p);
              }
              if (((new BigInteger(((_2676_m).dtor_typeParams).Count)).Sign == 1) && ((this).EnclosingIsTrait(enclosingType))) {
                (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Error: Rust does not support method with generic type parameters in traits"));
              }
              RAST._IImplMember _2681_genMethod;
              RAST._IImplMember _out97;
              _out97 = (this).GenMethod(_2676_m, true, enclosingType, enclosingTypeParams);
              _2681_genMethod = _out97;
              _2680_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_2680_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_2681_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_2679_p, _2680_existing)));
            }
          }
        }
      }
    }
    public Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _hi25 = new BigInteger((@params).Count);
      for (BigInteger _2682_i = BigInteger.Zero; _2682_i < _hi25; _2682_i++) {
        DAST._IFormal _2683_param;
        _2683_param = (@params).Select(_2682_i);
        RAST._IType _2684_paramType;
        RAST._IType _out98;
        _out98 = (this).GenType((_2683_param).dtor_typ, DCOMP.GenTypeContext.@default());
        _2684_paramType = _out98;
        if ((!((_2684_paramType).CanReadWithoutClone())) && (!((_2683_param).dtor_attributes).Contains(DCOMP.__default.AttributeOwned))) {
          _2684_paramType = RAST.Type.create_Borrowed(_2684_paramType);
        }
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeName((_2683_param).dtor_name), _2684_paramType)));
      }
      return s;
    }
    public RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISequence<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _2685_params;
      Dafny.ISequence<RAST._IFormal> _out99;
      _out99 = (this).GenParams((m).dtor_params);
      _2685_params = _out99;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2686_paramNames;
      _2686_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _2687_paramTypes;
      _2687_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements();
      BigInteger _hi26 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _2688_paramI = BigInteger.Zero; _2688_paramI < _hi26; _2688_paramI++) {
        DAST._IFormal _2689_dafny__formal;
        _2689_dafny__formal = ((m).dtor_params).Select(_2688_paramI);
        RAST._IFormal _2690_formal;
        _2690_formal = (_2685_params).Select(_2688_paramI);
        Dafny.ISequence<Dafny.Rune> _2691_name;
        _2691_name = (_2690_formal).dtor_name;
        _2686_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2686_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2691_name));
        _2687_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_2687_paramTypes, _2691_name, (_2690_formal).dtor_tpe);
      }
      Dafny.ISequence<Dafny.Rune> _2692_fnName;
      _2692_fnName = DCOMP.__default.escapeName((m).dtor_name);
      DCOMP._ISelfInfo _2693_selfIdent;
      _2693_selfIdent = DCOMP.SelfInfo.create_NoSelf();
      if (!((m).dtor_isStatic)) {
        Dafny.ISequence<Dafny.Rune> _2694_selfId;
        _2694_selfId = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
        if ((_2692_fnName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_ctor"))) {
          _2694_selfId = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this");
        }
        var _pat_let_tv13 = enclosingTypeParams;
        var _pat_let_tv14 = enclosingType;
        var _pat_let_tv15 = enclosingType;
        var _pat_let_tv16 = enclosingType;
        var _pat_let_tv17 = enclosingType;
        var _pat_let_tv18 = enclosingType;
        var _pat_let_tv19 = enclosingType;
        var _pat_let_tv20 = enclosingType;
        var _pat_let_tv21 = enclosingType;
        var _pat_let_tv22 = enclosingType;
        var _pat_let_tv23 = enclosingType;
        var _pat_let_tv24 = enclosingType;
        var _pat_let_tv25 = enclosingType;
        var _pat_let_tv26 = enclosingType;
        DAST._IType _2695_instanceType;
        _2695_instanceType = ((System.Func<DAST._IType, DAST._IType>)((_source99) => {
          if (_source99.is_UserDefined) {
            DAST._IResolvedType _2696___mcc_h0 = _source99.dtor_resolved;
            DAST._IResolvedType _2697_r = _2696___mcc_h0;
            return DAST.Type.create_UserDefined(Dafny.Helpers.Let<DAST._IResolvedType, DAST._IResolvedType>(_2697_r, _pat_let31_0 => Dafny.Helpers.Let<DAST._IResolvedType, DAST._IResolvedType>(_pat_let31_0, _2698_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IType>, DAST._IResolvedType>(_pat_let_tv13, _pat_let32_0 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IType>, DAST._IResolvedType>(_pat_let32_0, _2699_dt__update_htypeArgs_h0 => DAST.ResolvedType.create((_2698_dt__update__tmp_h0).dtor_path, _2699_dt__update_htypeArgs_h0, (_2698_dt__update__tmp_h0).dtor_kind, (_2698_dt__update__tmp_h0).dtor_attributes, (_2698_dt__update__tmp_h0).dtor_properMethods, (_2698_dt__update__tmp_h0).dtor_extendedTypes))))));
          } else if (_source99.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2700___mcc_h2 = _source99.dtor_Tuple_i_a0;
            return _pat_let_tv14;
          } else if (_source99.is_Array) {
            DAST._IType _2701___mcc_h4 = _source99.dtor_element;
            BigInteger _2702___mcc_h5 = _source99.dtor_dims;
            return _pat_let_tv15;
          } else if (_source99.is_Seq) {
            DAST._IType _2703___mcc_h8 = _source99.dtor_element;
            return _pat_let_tv16;
          } else if (_source99.is_Set) {
            DAST._IType _2704___mcc_h10 = _source99.dtor_element;
            return _pat_let_tv17;
          } else if (_source99.is_Multiset) {
            DAST._IType _2705___mcc_h12 = _source99.dtor_element;
            return _pat_let_tv18;
          } else if (_source99.is_Map) {
            DAST._IType _2706___mcc_h14 = _source99.dtor_key;
            DAST._IType _2707___mcc_h15 = _source99.dtor_value;
            return _pat_let_tv19;
          } else if (_source99.is_SetBuilder) {
            DAST._IType _2708___mcc_h18 = _source99.dtor_element;
            return _pat_let_tv20;
          } else if (_source99.is_MapBuilder) {
            DAST._IType _2709___mcc_h20 = _source99.dtor_key;
            DAST._IType _2710___mcc_h21 = _source99.dtor_value;
            return _pat_let_tv21;
          } else if (_source99.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2711___mcc_h24 = _source99.dtor_args;
            DAST._IType _2712___mcc_h25 = _source99.dtor_result;
            return _pat_let_tv22;
          } else if (_source99.is_Primitive) {
            DAST._IPrimitive _2713___mcc_h28 = _source99.dtor_Primitive_i_a0;
            return _pat_let_tv23;
          } else if (_source99.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2714___mcc_h30 = _source99.dtor_Passthrough_i_a0;
            return _pat_let_tv24;
          } else if (_source99.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _2715___mcc_h32 = _source99.dtor_TypeArg_i_a0;
            return _pat_let_tv25;
          } else {
            return _pat_let_tv26;
          }
        }))(enclosingType);
        if (forTrait) {
          RAST._IFormal _2716_selfFormal;
          _2716_selfFormal = (((m).dtor_wasFunction) ? (RAST.Formal.selfBorrowed) : (RAST.Formal.selfBorrowedMut));
          _2685_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(_2716_selfFormal), _2685_params);
        } else {
          RAST._IType _2717_tpe;
          RAST._IType _out100;
          _out100 = (this).GenType(_2695_instanceType, DCOMP.GenTypeContext.@default());
          _2717_tpe = _out100;
          if ((_2694_selfId).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
            _2717_tpe = RAST.Type.create_Borrowed(_2717_tpe);
          } else if ((_2694_selfId).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
            if ((_2717_tpe).IsObjectOrPointer()) {
              if ((m).dtor_wasFunction) {
                _2717_tpe = RAST.__default.SelfBorrowed;
              } else {
                _2717_tpe = RAST.__default.SelfBorrowedMut;
              }
            } else {
              _2717_tpe = RAST.Type.create_Borrowed(RAST.__default.Rc(RAST.Type.create_SelfOwned()));
            }
          }
          _2685_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(_2694_selfId, _2717_tpe)), _2685_params);
        }
        _2693_selfIdent = DCOMP.SelfInfo.create_ThisTyped(_2694_selfId, _2695_instanceType);
      }
      Dafny.ISequence<RAST._IType> _2718_retTypeArgs;
      _2718_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2719_typeI;
      _2719_typeI = BigInteger.Zero;
      while ((_2719_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _2720_typeExpr;
        RAST._IType _out101;
        _out101 = (this).GenType(((m).dtor_outTypes).Select(_2719_typeI), DCOMP.GenTypeContext.@default());
        _2720_typeExpr = _out101;
        _2718_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_2718_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_2720_typeExpr));
        _2719_typeI = (_2719_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _2721_visibility;
      _2721_visibility = ((forTrait) ? (RAST.Visibility.create_PRIV()) : (RAST.Visibility.create_PUB()));
      Dafny.ISequence<DAST._ITypeArgDecl> _2722_typeParamsFiltered;
      _2722_typeParamsFiltered = Dafny.Sequence<DAST._ITypeArgDecl>.FromElements();
      BigInteger _hi27 = new BigInteger(((m).dtor_typeParams).Count);
      for (BigInteger _2723_typeParamI = BigInteger.Zero; _2723_typeParamI < _hi27; _2723_typeParamI++) {
        DAST._ITypeArgDecl _2724_typeParam;
        _2724_typeParam = ((m).dtor_typeParams).Select(_2723_typeParamI);
        if (!((enclosingTypeParams).Contains(DAST.Type.create_TypeArg((_2724_typeParam).dtor_name)))) {
          _2722_typeParamsFiltered = Dafny.Sequence<DAST._ITypeArgDecl>.Concat(_2722_typeParamsFiltered, Dafny.Sequence<DAST._ITypeArgDecl>.FromElements(_2724_typeParam));
        }
      }
      Dafny.ISequence<RAST._ITypeParamDecl> _2725_typeParams;
      _2725_typeParams = Dafny.Sequence<RAST._ITypeParamDecl>.FromElements();
      if ((new BigInteger((_2722_typeParamsFiltered).Count)).Sign == 1) {
        BigInteger _hi28 = new BigInteger((_2722_typeParamsFiltered).Count);
        for (BigInteger _2726_i = BigInteger.Zero; _2726_i < _hi28; _2726_i++) {
          DAST._IType _2727_typeArg;
          RAST._ITypeParamDecl _2728_rTypeParamDecl;
          DAST._IType _out102;
          RAST._ITypeParamDecl _out103;
          (this).GenTypeParam((_2722_typeParamsFiltered).Select(_2726_i), out _out102, out _out103);
          _2727_typeArg = _out102;
          _2728_rTypeParamDecl = _out103;
          _2725_typeParams = Dafny.Sequence<RAST._ITypeParamDecl>.Concat(_2725_typeParams, Dafny.Sequence<RAST._ITypeParamDecl>.FromElements(_2728_rTypeParamDecl));
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _2729_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      DCOMP._IEnvironment _2730_env = DCOMP.Environment.Default();
      RAST._IExpr _2731_preBody;
      _2731_preBody = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2732_preAssignNames;
      _2732_preAssignNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _2733_preAssignTypes;
      _2733_preAssignTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements();
      if ((m).dtor_hasBody) {
        RAST._IExpr _2734_earlyReturn;
        _2734_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source100 = (m).dtor_outVars;
        if (_source100.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2735___mcc_h34 = _source100.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2736_outVars = _2735___mcc_h34;
          {
            if ((m).dtor_outVarsAreUninitFieldsToAssign) {
              _2734_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(Dafny.Sequence<RAST._IExpr>.FromElements())));
              BigInteger _hi29 = new BigInteger((_2736_outVars).Count);
              for (BigInteger _2737_outI = BigInteger.Zero; _2737_outI < _hi29; _2737_outI++) {
                Dafny.ISequence<Dafny.Rune> _2738_outVar;
                _2738_outVar = (_2736_outVars).Select(_2737_outI);
                Dafny.ISequence<Dafny.Rune> _2739_outName;
                _2739_outName = DCOMP.__default.escapeName((_2738_outVar));
                Dafny.ISequence<Dafny.Rune> _2740_tracker__name;
                _2740_tracker__name = DCOMP.__default.AddAssignedPrefix(_2739_outName);
                _2732_preAssignNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2732_preAssignNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2740_tracker__name));
                _2733_preAssignTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_2733_preAssignTypes, _2740_tracker__name, RAST.Type.create_Bool());
                _2731_preBody = (_2731_preBody).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), _2740_tracker__name, Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Bool()), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_LiteralBool(false))));
              }
            } else {
              Dafny.ISequence<RAST._IExpr> _2741_tupleArgs;
              _2741_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
              BigInteger _hi30 = new BigInteger((_2736_outVars).Count);
              for (BigInteger _2742_outI = BigInteger.Zero; _2742_outI < _hi30; _2742_outI++) {
                Dafny.ISequence<Dafny.Rune> _2743_outVar;
                _2743_outVar = (_2736_outVars).Select(_2742_outI);
                RAST._IType _2744_outType;
                RAST._IType _out104;
                _out104 = (this).GenType(((m).dtor_outTypes).Select(_2742_outI), DCOMP.GenTypeContext.@default());
                _2744_outType = _out104;
                Dafny.ISequence<Dafny.Rune> _2745_outName;
                _2745_outName = DCOMP.__default.escapeName((_2743_outVar));
                _2686_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2686_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2745_outName));
                RAST._IType _2746_outMaybeType;
                _2746_outMaybeType = (((_2744_outType).CanReadWithoutClone()) ? (_2744_outType) : (RAST.__default.MaybePlaceboType(_2744_outType)));
                _2687_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_2687_paramTypes, _2745_outName, _2746_outMaybeType);
                RAST._IExpr _2747_outVarReturn;
                DCOMP._IOwnership _2748___v57;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2749___v58;
                RAST._IExpr _out105;
                DCOMP._IOwnership _out106;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
                (this).GenExpr(DAST.Expression.create_Ident((_2743_outVar)), DCOMP.SelfInfo.create_NoSelf(), DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2745_outName), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, RAST._IType>(_2745_outName, _2746_outMaybeType))), DCOMP.Ownership.create_OwnershipOwned(), out _out105, out _out106, out _out107);
                _2747_outVarReturn = _out105;
                _2748___v57 = _out106;
                _2749___v58 = _out107;
                _2741_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_2741_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(_2747_outVarReturn));
              }
              if ((new BigInteger((_2741_tupleArgs).Count)) == (BigInteger.One)) {
                _2734_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some((_2741_tupleArgs).Select(BigInteger.Zero)));
              } else {
                _2734_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_2741_tupleArgs)));
              }
            }
          }
        }
        _2730_env = DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2732_preAssignNames, _2686_paramNames), Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Merge(_2733_preAssignTypes, _2687_paramTypes));
        RAST._IExpr _2750_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2751___v59;
        DCOMP._IEnvironment _2752___v60;
        RAST._IExpr _out108;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
        DCOMP._IEnvironment _out110;
        (this).GenStmts((m).dtor_body, _2693_selfIdent, _2730_env, true, _2734_earlyReturn, out _out108, out _out109, out _out110);
        _2750_body = _out108;
        _2751___v59 = _out109;
        _2752___v60 = _out110;
        _2729_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some((_2731_preBody).Then(_2750_body));
      } else {
        _2730_env = DCOMP.Environment.create(_2686_paramNames, _2687_paramTypes);
        _2729_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_2721_visibility, RAST.Fn.create(_2692_fnName, _2725_typeParams, _2685_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_2718_retTypeArgs).Count)) == (BigInteger.One)) ? ((_2718_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_2718_retTypeArgs)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2729_fBody));
      return s;
    }
    public void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents, out DCOMP._IEnvironment newEnv)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      newEnv = DCOMP.Environment.Default();
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2753_declarations;
      _2753_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2754_i;
      _2754_i = BigInteger.Zero;
      newEnv = env;
      Dafny.ISequence<DAST._IStatement> _2755_stmts;
      _2755_stmts = stmts;
      while ((_2754_i) < (new BigInteger((_2755_stmts).Count))) {
        DAST._IStatement _2756_stmt;
        _2756_stmt = (_2755_stmts).Select(_2754_i);
        DAST._IStatement _source101 = _2756_stmt;
        if (_source101.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2757___mcc_h0 = _source101.dtor_name;
          DAST._IType _2758___mcc_h1 = _source101.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2759___mcc_h2 = _source101.dtor_maybeValue;
          Std.Wrappers._IOption<DAST._IExpression> _source102 = _2759___mcc_h2;
          if (_source102.is_None) {
            DAST._IType _2760_optType = _2758___mcc_h1;
            Dafny.ISequence<Dafny.Rune> _2761_name = _2757___mcc_h0;
            if (((_2754_i) + (BigInteger.One)) < (new BigInteger((_2755_stmts).Count))) {
              DAST._IStatement _source103 = (_2755_stmts).Select((_2754_i) + (BigInteger.One));
              if (_source103.is_DeclareVar) {
                Dafny.ISequence<Dafny.Rune> _2762___mcc_h54 = _source103.dtor_name;
                DAST._IType _2763___mcc_h55 = _source103.dtor_typ;
                Std.Wrappers._IOption<DAST._IExpression> _2764___mcc_h56 = _source103.dtor_maybeValue;
              } else if (_source103.is_Assign) {
                DAST._IAssignLhs _2765___mcc_h60 = _source103.dtor_lhs;
                DAST._IExpression _2766___mcc_h61 = _source103.dtor_value;
                DAST._IAssignLhs _source104 = _2765___mcc_h60;
                if (_source104.is_Ident) {
                  Dafny.ISequence<Dafny.Rune> _2767___mcc_h64 = _source104.dtor_ident;
                  Dafny.ISequence<Dafny.Rune> _source105 = _2767___mcc_h64;
                  Dafny.ISequence<Dafny.Rune> _2768___mcc_h66 = _source105;
                  DAST._IExpression _2769_rhs = _2766___mcc_h61;
                  Dafny.ISequence<Dafny.Rune> _2770_name2 = _2768___mcc_h66;
                  if (object.Equals(_2770_name2, _2761_name)) {
                    _2755_stmts = Dafny.Sequence<DAST._IStatement>.Concat(Dafny.Sequence<DAST._IStatement>.Concat((_2755_stmts).Subsequence(BigInteger.Zero, _2754_i), Dafny.Sequence<DAST._IStatement>.FromElements(DAST.Statement.create_DeclareVar(_2761_name, _2760_optType, Std.Wrappers.Option<DAST._IExpression>.create_Some(_2769_rhs)))), (_2755_stmts).Drop((_2754_i) + (new BigInteger(2))));
                    _2756_stmt = (_2755_stmts).Select(_2754_i);
                  }
                } else if (_source104.is_Select) {
                  DAST._IExpression _2771___mcc_h68 = _source104.dtor_expr;
                  Dafny.ISequence<Dafny.Rune> _2772___mcc_h69 = _source104.dtor_field;
                } else {
                  DAST._IExpression _2773___mcc_h72 = _source104.dtor_expr;
                  Dafny.ISequence<DAST._IExpression> _2774___mcc_h73 = _source104.dtor_indices;
                }
              } else if (_source103.is_If) {
                DAST._IExpression _2775___mcc_h76 = _source103.dtor_cond;
                Dafny.ISequence<DAST._IStatement> _2776___mcc_h77 = _source103.dtor_thn;
                Dafny.ISequence<DAST._IStatement> _2777___mcc_h78 = _source103.dtor_els;
              } else if (_source103.is_Labeled) {
                Dafny.ISequence<Dafny.Rune> _2778___mcc_h82 = _source103.dtor_lbl;
                Dafny.ISequence<DAST._IStatement> _2779___mcc_h83 = _source103.dtor_body;
              } else if (_source103.is_While) {
                DAST._IExpression _2780___mcc_h86 = _source103.dtor_cond;
                Dafny.ISequence<DAST._IStatement> _2781___mcc_h87 = _source103.dtor_body;
              } else if (_source103.is_Foreach) {
                Dafny.ISequence<Dafny.Rune> _2782___mcc_h90 = _source103.dtor_boundName;
                DAST._IType _2783___mcc_h91 = _source103.dtor_boundType;
                DAST._IExpression _2784___mcc_h92 = _source103.dtor_over;
                Dafny.ISequence<DAST._IStatement> _2785___mcc_h93 = _source103.dtor_body;
              } else if (_source103.is_Call) {
                DAST._IExpression _2786___mcc_h98 = _source103.dtor_on;
                DAST._ICallName _2787___mcc_h99 = _source103.dtor_callName;
                Dafny.ISequence<DAST._IType> _2788___mcc_h100 = _source103.dtor_typeArgs;
                Dafny.ISequence<DAST._IExpression> _2789___mcc_h101 = _source103.dtor_args;
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2790___mcc_h102 = _source103.dtor_outs;
              } else if (_source103.is_Return) {
                DAST._IExpression _2791___mcc_h108 = _source103.dtor_expr;
              } else if (_source103.is_EarlyReturn) {
              } else if (_source103.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2792___mcc_h110 = _source103.dtor_toLabel;
              } else if (_source103.is_TailRecursive) {
                Dafny.ISequence<DAST._IStatement> _2793___mcc_h112 = _source103.dtor_body;
              } else if (_source103.is_JumpTailCallStart) {
              } else if (_source103.is_Halt) {
              } else if (_source103.is_Print) {
                DAST._IExpression _2794___mcc_h114 = _source103.dtor_Print_i_a0;
              } else {
                Dafny.ISequence<DAST._IFormal> _2795___mcc_h116 = _source103.dtor_fields;
              }
            }
          } else {
            DAST._IExpression _2796___mcc_h6 = _source102.dtor_value;
          }
        } else if (_source101.is_Assign) {
          DAST._IAssignLhs _2797___mcc_h8 = _source101.dtor_lhs;
          DAST._IExpression _2798___mcc_h9 = _source101.dtor_value;
        } else if (_source101.is_If) {
          DAST._IExpression _2799___mcc_h12 = _source101.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2800___mcc_h13 = _source101.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2801___mcc_h14 = _source101.dtor_els;
        } else if (_source101.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2802___mcc_h18 = _source101.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2803___mcc_h19 = _source101.dtor_body;
        } else if (_source101.is_While) {
          DAST._IExpression _2804___mcc_h22 = _source101.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2805___mcc_h23 = _source101.dtor_body;
        } else if (_source101.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2806___mcc_h26 = _source101.dtor_boundName;
          DAST._IType _2807___mcc_h27 = _source101.dtor_boundType;
          DAST._IExpression _2808___mcc_h28 = _source101.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2809___mcc_h29 = _source101.dtor_body;
        } else if (_source101.is_Call) {
          DAST._IExpression _2810___mcc_h34 = _source101.dtor_on;
          DAST._ICallName _2811___mcc_h35 = _source101.dtor_callName;
          Dafny.ISequence<DAST._IType> _2812___mcc_h36 = _source101.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2813___mcc_h37 = _source101.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2814___mcc_h38 = _source101.dtor_outs;
        } else if (_source101.is_Return) {
          DAST._IExpression _2815___mcc_h44 = _source101.dtor_expr;
        } else if (_source101.is_EarlyReturn) {
        } else if (_source101.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2816___mcc_h46 = _source101.dtor_toLabel;
        } else if (_source101.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2817___mcc_h48 = _source101.dtor_body;
        } else if (_source101.is_JumpTailCallStart) {
        } else if (_source101.is_Halt) {
        } else if (_source101.is_Print) {
          DAST._IExpression _2818___mcc_h50 = _source101.dtor_Print_i_a0;
        } else {
          Dafny.ISequence<DAST._IFormal> _2819___mcc_h52 = _source101.dtor_fields;
        }
        RAST._IExpr _2820_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2821_recIdents;
        DCOMP._IEnvironment _2822_newEnv2;
        RAST._IExpr _out111;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
        DCOMP._IEnvironment _out113;
        (this).GenStmt(_2756_stmt, selfIdent, newEnv, (isLast) && ((_2754_i) == ((new BigInteger((_2755_stmts).Count)) - (BigInteger.One))), earlyReturn, out _out111, out _out112, out _out113);
        _2820_stmtExpr = _out111;
        _2821_recIdents = _out112;
        _2822_newEnv2 = _out113;
        newEnv = _2822_newEnv2;
        DAST._IStatement _source106 = _2756_stmt;
        if (_source106.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2823___mcc_h118 = _source106.dtor_name;
          DAST._IType _2824___mcc_h119 = _source106.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2825___mcc_h120 = _source106.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2826_name = _2823___mcc_h118;
          {
            _2753_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2753_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(DCOMP.__default.escapeName(_2826_name)));
          }
        } else if (_source106.is_Assign) {
          DAST._IAssignLhs _2827___mcc_h124 = _source106.dtor_lhs;
          DAST._IExpression _2828___mcc_h125 = _source106.dtor_value;
        } else if (_source106.is_If) {
          DAST._IExpression _2829___mcc_h128 = _source106.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2830___mcc_h129 = _source106.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2831___mcc_h130 = _source106.dtor_els;
        } else if (_source106.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2832___mcc_h134 = _source106.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2833___mcc_h135 = _source106.dtor_body;
        } else if (_source106.is_While) {
          DAST._IExpression _2834___mcc_h138 = _source106.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2835___mcc_h139 = _source106.dtor_body;
        } else if (_source106.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2836___mcc_h142 = _source106.dtor_boundName;
          DAST._IType _2837___mcc_h143 = _source106.dtor_boundType;
          DAST._IExpression _2838___mcc_h144 = _source106.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2839___mcc_h145 = _source106.dtor_body;
        } else if (_source106.is_Call) {
          DAST._IExpression _2840___mcc_h150 = _source106.dtor_on;
          DAST._ICallName _2841___mcc_h151 = _source106.dtor_callName;
          Dafny.ISequence<DAST._IType> _2842___mcc_h152 = _source106.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2843___mcc_h153 = _source106.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2844___mcc_h154 = _source106.dtor_outs;
        } else if (_source106.is_Return) {
          DAST._IExpression _2845___mcc_h160 = _source106.dtor_expr;
        } else if (_source106.is_EarlyReturn) {
        } else if (_source106.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2846___mcc_h162 = _source106.dtor_toLabel;
        } else if (_source106.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2847___mcc_h164 = _source106.dtor_body;
        } else if (_source106.is_JumpTailCallStart) {
        } else if (_source106.is_Halt) {
        } else if (_source106.is_Print) {
          DAST._IExpression _2848___mcc_h166 = _source106.dtor_Print_i_a0;
        } else {
          Dafny.ISequence<DAST._IFormal> _2849___mcc_h168 = _source106.dtor_fields;
        }
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2821_recIdents, _2753_declarations));
        generated = (generated).Then(_2820_stmtExpr);
        _2754_i = (_2754_i) + (BigInteger.One);
        if ((_2820_stmtExpr).is_Return) {
          goto after_0;
        }
      continue_0: ;
      }
    after_0: ;
    }
    public void GenAssignLhs(DAST._IAssignLhs lhs, RAST._IExpr rhs, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, out RAST._IExpr generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents, out DCOMP._IEnvironment newEnv)
    {
      generated = RAST.Expr.Default();
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      newEnv = DCOMP.Environment.Default();
      newEnv = env;
      DAST._IAssignLhs _source107 = lhs;
      if (_source107.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2850___mcc_h0 = _source107.dtor_ident;
        Dafny.ISequence<Dafny.Rune> _source108 = _2850___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2851___mcc_h1 = _source108;
        Dafny.ISequence<Dafny.Rune> _2852_id = _2851___mcc_h1;
        {
          Dafny.ISequence<Dafny.Rune> _2853_idRust;
          _2853_idRust = DCOMP.__default.escapeName(_2852_id);
          if (((env).IsBorrowed(_2853_idRust)) || ((env).IsBorrowedMut(_2853_idRust))) {
            generated = RAST.__default.AssignVar(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), _2853_idRust), rhs);
          } else {
            generated = RAST.__default.AssignVar(_2853_idRust, rhs);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2853_idRust);
          needsIIFE = false;
        }
      } else if (_source107.is_Select) {
        DAST._IExpression _2854___mcc_h2 = _source107.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2855___mcc_h3 = _source107.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2856_field = _2855___mcc_h3;
        DAST._IExpression _2857_on = _2854___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _2858_fieldName;
          _2858_fieldName = DCOMP.__default.escapeName(_2856_field);
          RAST._IExpr _2859_onExpr;
          DCOMP._IOwnership _2860_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2861_recIdents;
          RAST._IExpr _out114;
          DCOMP._IOwnership _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          (this).GenExpr(_2857_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out114, out _out115, out _out116);
          _2859_onExpr = _out114;
          _2860_onOwned = _out115;
          _2861_recIdents = _out116;
          RAST._IExpr _source109 = _2859_onExpr;
          if (_source109.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _2862___mcc_h6 = _source109.dtor_content;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_ExprFromType) {
            RAST._IType _2863___mcc_h8 = _source109.dtor_tpe;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _2864___mcc_h10 = _source109.dtor_name;
            if (object.Equals(_2864___mcc_h10, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
              Dafny.ISequence<Dafny.Rune> _2865_isAssignedVar;
              _2865_isAssignedVar = DCOMP.__default.AddAssignedPrefix(_2858_fieldName);
              if (((newEnv).dtor_names).Contains(_2865_isAssignedVar)) {
                generated = ((RAST.__default.dafny__runtime).MSel((this).update__field__uninit__macro)).Apply(Dafny.Sequence<RAST._IExpr>.FromElements((this).thisInConstructor, RAST.Expr.create_Identifier(_2858_fieldName), RAST.Expr.create_Identifier(_2865_isAssignedVar), rhs));
                newEnv = (newEnv).RemoveAssigned(_2865_isAssignedVar);
              } else {
                (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unespected field to assign whose isAssignedVar is not in the environment: "), _2865_isAssignedVar));
                generated = RAST.__default.AssignMember(RAST.Expr.create_RawExpr((this.error).dtor_value), _2858_fieldName, rhs);
              }
            } else {
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            }
          } else if (_source109.is_Match) {
            RAST._IExpr _2866___mcc_h12 = _source109.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _2867___mcc_h13 = _source109.dtor_cases;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_StmtExpr) {
            RAST._IExpr _2868___mcc_h16 = _source109.dtor_stmt;
            RAST._IExpr _2869___mcc_h17 = _source109.dtor_rhs;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Block) {
            RAST._IExpr _2870___mcc_h20 = _source109.dtor_underlying;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_StructBuild) {
            RAST._IExpr _2871___mcc_h22 = _source109.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _2872___mcc_h23 = _source109.dtor_assignments;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _2873___mcc_h26 = _source109.dtor_arguments;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _2874___mcc_h28 = _source109.dtor_op1;
            RAST._IExpr _2875___mcc_h29 = _source109.dtor_underlying;
            DAST.Format._IUnaryOpFormat _2876___mcc_h30 = _source109.dtor_format;
            if (object.Equals(_2874___mcc_h28, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
              RAST._IExpr _source110 = _2875___mcc_h29;
              if (_source110.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _2877___mcc_h34 = _source110.dtor_content;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_ExprFromType) {
                RAST._IType _2878___mcc_h36 = _source110.dtor_tpe;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _2879___mcc_h38 = _source110.dtor_name;
                if (object.Equals(_2879___mcc_h38, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                  Dafny.ISequence<Dafny.Rune> _2880_isAssignedVar;
                  _2880_isAssignedVar = DCOMP.__default.AddAssignedPrefix(_2858_fieldName);
                  if (((newEnv).dtor_names).Contains(_2880_isAssignedVar)) {
                    generated = ((RAST.__default.dafny__runtime).MSel((this).update__field__uninit__macro)).Apply(Dafny.Sequence<RAST._IExpr>.FromElements((this).thisInConstructor, RAST.Expr.create_Identifier(_2858_fieldName), RAST.Expr.create_Identifier(_2880_isAssignedVar), rhs));
                    newEnv = (newEnv).RemoveAssigned(_2880_isAssignedVar);
                  } else {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unespected field to assign whose isAssignedVar is not in the environment: "), _2880_isAssignedVar));
                    generated = RAST.__default.AssignMember(RAST.Expr.create_RawExpr((this.error).dtor_value), _2858_fieldName, rhs);
                  }
                } else {
                  if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                    _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                  }
                  generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
                }
              } else if (_source110.is_Match) {
                RAST._IExpr _2881___mcc_h40 = _source110.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _2882___mcc_h41 = _source110.dtor_cases;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_StmtExpr) {
                RAST._IExpr _2883___mcc_h44 = _source110.dtor_stmt;
                RAST._IExpr _2884___mcc_h45 = _source110.dtor_rhs;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Block) {
                RAST._IExpr _2885___mcc_h48 = _source110.dtor_underlying;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_StructBuild) {
                RAST._IExpr _2886___mcc_h50 = _source110.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _2887___mcc_h51 = _source110.dtor_assignments;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _2888___mcc_h54 = _source110.dtor_arguments;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _2889___mcc_h56 = _source110.dtor_op1;
                RAST._IExpr _2890___mcc_h57 = _source110.dtor_underlying;
                DAST.Format._IUnaryOpFormat _2891___mcc_h58 = _source110.dtor_format;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _2892___mcc_h62 = _source110.dtor_op2;
                RAST._IExpr _2893___mcc_h63 = _source110.dtor_left;
                RAST._IExpr _2894___mcc_h64 = _source110.dtor_right;
                DAST.Format._IBinaryOpFormat _2895___mcc_h65 = _source110.dtor_format2;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_TypeAscription) {
                RAST._IExpr _2896___mcc_h70 = _source110.dtor_left;
                RAST._IType _2897___mcc_h71 = _source110.dtor_tpe;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _2898___mcc_h74 = _source110.dtor_value;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_LiteralBool) {
                bool _2899___mcc_h76 = _source110.dtor_bvalue;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _2900___mcc_h78 = _source110.dtor_value;
                bool _2901___mcc_h79 = _source110.dtor_binary;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_DeclareVar) {
                RAST._IDeclareType _2902___mcc_h82 = _source110.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _2903___mcc_h83 = _source110.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _2904___mcc_h84 = _source110.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _2905___mcc_h85 = _source110.dtor_optRhs;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Assign) {
                Std.Wrappers._IOption<RAST._IAssignLhs> _2906___mcc_h90 = _source110.dtor_names;
                RAST._IExpr _2907___mcc_h91 = _source110.dtor_rhs;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_IfExpr) {
                RAST._IExpr _2908___mcc_h94 = _source110.dtor_cond;
                RAST._IExpr _2909___mcc_h95 = _source110.dtor_thn;
                RAST._IExpr _2910___mcc_h96 = _source110.dtor_els;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _2911___mcc_h100 = _source110.dtor_optCond;
                RAST._IExpr _2912___mcc_h101 = _source110.dtor_underlying;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_For) {
                Dafny.ISequence<Dafny.Rune> _2913___mcc_h104 = _source110.dtor_name;
                RAST._IExpr _2914___mcc_h105 = _source110.dtor_range;
                RAST._IExpr _2915___mcc_h106 = _source110.dtor_body;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _2916___mcc_h110 = _source110.dtor_lbl;
                RAST._IExpr _2917___mcc_h111 = _source110.dtor_underlying;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2918___mcc_h114 = _source110.dtor_optLbl;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2919___mcc_h116 = _source110.dtor_optLbl;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _2920___mcc_h118 = _source110.dtor_optExpr;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_CallType) {
                RAST._IExpr _2921___mcc_h120 = _source110.dtor_obj;
                Dafny.ISequence<RAST._IType> _2922___mcc_h121 = _source110.dtor_typeParameters;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Call) {
                RAST._IExpr _2923___mcc_h124 = _source110.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _2924___mcc_h125 = _source110.dtor_arguments;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_Select) {
                RAST._IExpr _2925___mcc_h128 = _source110.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _2926___mcc_h129 = _source110.dtor_name;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source110.is_MemberSelect) {
                RAST._IExpr _2927___mcc_h132 = _source110.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _2928___mcc_h133 = _source110.dtor_name;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else {
                Dafny.ISequence<RAST._IFormal> _2929___mcc_h136 = _source110.dtor_params;
                Std.Wrappers._IOption<RAST._IType> _2930___mcc_h137 = _source110.dtor_retType;
                RAST._IExpr _2931___mcc_h138 = _source110.dtor_body;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              }
            } else {
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            }
          } else if (_source109.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _2932___mcc_h142 = _source109.dtor_op2;
            RAST._IExpr _2933___mcc_h143 = _source109.dtor_left;
            RAST._IExpr _2934___mcc_h144 = _source109.dtor_right;
            DAST.Format._IBinaryOpFormat _2935___mcc_h145 = _source109.dtor_format2;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_TypeAscription) {
            RAST._IExpr _2936___mcc_h150 = _source109.dtor_left;
            RAST._IType _2937___mcc_h151 = _source109.dtor_tpe;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _2938___mcc_h154 = _source109.dtor_value;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_LiteralBool) {
            bool _2939___mcc_h156 = _source109.dtor_bvalue;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _2940___mcc_h158 = _source109.dtor_value;
            bool _2941___mcc_h159 = _source109.dtor_binary;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_DeclareVar) {
            RAST._IDeclareType _2942___mcc_h162 = _source109.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _2943___mcc_h163 = _source109.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _2944___mcc_h164 = _source109.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _2945___mcc_h165 = _source109.dtor_optRhs;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Assign) {
            Std.Wrappers._IOption<RAST._IAssignLhs> _2946___mcc_h170 = _source109.dtor_names;
            RAST._IExpr _2947___mcc_h171 = _source109.dtor_rhs;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_IfExpr) {
            RAST._IExpr _2948___mcc_h174 = _source109.dtor_cond;
            RAST._IExpr _2949___mcc_h175 = _source109.dtor_thn;
            RAST._IExpr _2950___mcc_h176 = _source109.dtor_els;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _2951___mcc_h180 = _source109.dtor_optCond;
            RAST._IExpr _2952___mcc_h181 = _source109.dtor_underlying;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_For) {
            Dafny.ISequence<Dafny.Rune> _2953___mcc_h184 = _source109.dtor_name;
            RAST._IExpr _2954___mcc_h185 = _source109.dtor_range;
            RAST._IExpr _2955___mcc_h186 = _source109.dtor_body;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _2956___mcc_h190 = _source109.dtor_lbl;
            RAST._IExpr _2957___mcc_h191 = _source109.dtor_underlying;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2958___mcc_h194 = _source109.dtor_optLbl;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2959___mcc_h196 = _source109.dtor_optLbl;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _2960___mcc_h198 = _source109.dtor_optExpr;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_CallType) {
            RAST._IExpr _2961___mcc_h200 = _source109.dtor_obj;
            Dafny.ISequence<RAST._IType> _2962___mcc_h201 = _source109.dtor_typeParameters;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_Call) {
            RAST._IExpr _2963___mcc_h204 = _source109.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _2964___mcc_h205 = _source109.dtor_arguments;
            RAST._IExpr _source111 = _2963___mcc_h204;
            if (_source111.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _2965___mcc_h208 = _source111.dtor_content;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_ExprFromType) {
              RAST._IType _2966___mcc_h210 = _source111.dtor_tpe;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _2967___mcc_h212 = _source111.dtor_name;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Match) {
              RAST._IExpr _2968___mcc_h214 = _source111.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _2969___mcc_h215 = _source111.dtor_cases;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_StmtExpr) {
              RAST._IExpr _2970___mcc_h218 = _source111.dtor_stmt;
              RAST._IExpr _2971___mcc_h219 = _source111.dtor_rhs;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Block) {
              RAST._IExpr _2972___mcc_h222 = _source111.dtor_underlying;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_StructBuild) {
              RAST._IExpr _2973___mcc_h224 = _source111.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _2974___mcc_h225 = _source111.dtor_assignments;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _2975___mcc_h228 = _source111.dtor_arguments;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _2976___mcc_h230 = _source111.dtor_op1;
              RAST._IExpr _2977___mcc_h231 = _source111.dtor_underlying;
              DAST.Format._IUnaryOpFormat _2978___mcc_h232 = _source111.dtor_format;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _2979___mcc_h236 = _source111.dtor_op2;
              RAST._IExpr _2980___mcc_h237 = _source111.dtor_left;
              RAST._IExpr _2981___mcc_h238 = _source111.dtor_right;
              DAST.Format._IBinaryOpFormat _2982___mcc_h239 = _source111.dtor_format2;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_TypeAscription) {
              RAST._IExpr _2983___mcc_h244 = _source111.dtor_left;
              RAST._IType _2984___mcc_h245 = _source111.dtor_tpe;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _2985___mcc_h248 = _source111.dtor_value;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_LiteralBool) {
              bool _2986___mcc_h250 = _source111.dtor_bvalue;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _2987___mcc_h252 = _source111.dtor_value;
              bool _2988___mcc_h253 = _source111.dtor_binary;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_DeclareVar) {
              RAST._IDeclareType _2989___mcc_h256 = _source111.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _2990___mcc_h257 = _source111.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _2991___mcc_h258 = _source111.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _2992___mcc_h259 = _source111.dtor_optRhs;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Assign) {
              Std.Wrappers._IOption<RAST._IAssignLhs> _2993___mcc_h264 = _source111.dtor_names;
              RAST._IExpr _2994___mcc_h265 = _source111.dtor_rhs;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_IfExpr) {
              RAST._IExpr _2995___mcc_h268 = _source111.dtor_cond;
              RAST._IExpr _2996___mcc_h269 = _source111.dtor_thn;
              RAST._IExpr _2997___mcc_h270 = _source111.dtor_els;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _2998___mcc_h274 = _source111.dtor_optCond;
              RAST._IExpr _2999___mcc_h275 = _source111.dtor_underlying;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_For) {
              Dafny.ISequence<Dafny.Rune> _3000___mcc_h278 = _source111.dtor_name;
              RAST._IExpr _3001___mcc_h279 = _source111.dtor_range;
              RAST._IExpr _3002___mcc_h280 = _source111.dtor_body;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _3003___mcc_h284 = _source111.dtor_lbl;
              RAST._IExpr _3004___mcc_h285 = _source111.dtor_underlying;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3005___mcc_h288 = _source111.dtor_optLbl;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3006___mcc_h290 = _source111.dtor_optLbl;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _3007___mcc_h292 = _source111.dtor_optExpr;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_CallType) {
              RAST._IExpr _3008___mcc_h294 = _source111.dtor_obj;
              Dafny.ISequence<RAST._IType> _3009___mcc_h295 = _source111.dtor_typeParameters;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Call) {
              RAST._IExpr _3010___mcc_h298 = _source111.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _3011___mcc_h299 = _source111.dtor_arguments;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else if (_source111.is_Select) {
              RAST._IExpr _3012___mcc_h302 = _source111.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _3013___mcc_h303 = _source111.dtor_name;
              RAST._IExpr _source112 = _3012___mcc_h302;
              if (_source112.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _3014___mcc_h306 = _source112.dtor_content;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_ExprFromType) {
                RAST._IType _3015___mcc_h308 = _source112.dtor_tpe;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _3016___mcc_h310 = _source112.dtor_name;
                if (object.Equals(_3016___mcc_h310, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                  if (object.Equals(_3013___mcc_h303, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))) {
                    Dafny.ISequence<Dafny.Rune> _3017_isAssignedVar;
                    _3017_isAssignedVar = DCOMP.__default.AddAssignedPrefix(_2858_fieldName);
                    if (((newEnv).dtor_names).Contains(_3017_isAssignedVar)) {
                      generated = ((RAST.__default.dafny__runtime).MSel((this).update__field__uninit__macro)).Apply(Dafny.Sequence<RAST._IExpr>.FromElements((this).thisInConstructor, RAST.Expr.create_Identifier(_2858_fieldName), RAST.Expr.create_Identifier(_3017_isAssignedVar), rhs));
                      newEnv = (newEnv).RemoveAssigned(_3017_isAssignedVar);
                    } else {
                      (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unespected field to assign whose isAssignedVar is not in the environment: "), _3017_isAssignedVar));
                      generated = RAST.__default.AssignMember(RAST.Expr.create_RawExpr((this.error).dtor_value), _2858_fieldName, rhs);
                    }
                  } else {
                    if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                      _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                    }
                    generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
                  }
                } else {
                  if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                    _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                  }
                  generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
                }
              } else if (_source112.is_Match) {
                RAST._IExpr _3018___mcc_h312 = _source112.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _3019___mcc_h313 = _source112.dtor_cases;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_StmtExpr) {
                RAST._IExpr _3020___mcc_h316 = _source112.dtor_stmt;
                RAST._IExpr _3021___mcc_h317 = _source112.dtor_rhs;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Block) {
                RAST._IExpr _3022___mcc_h320 = _source112.dtor_underlying;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_StructBuild) {
                RAST._IExpr _3023___mcc_h322 = _source112.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _3024___mcc_h323 = _source112.dtor_assignments;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _3025___mcc_h326 = _source112.dtor_arguments;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _3026___mcc_h328 = _source112.dtor_op1;
                RAST._IExpr _3027___mcc_h329 = _source112.dtor_underlying;
                DAST.Format._IUnaryOpFormat _3028___mcc_h330 = _source112.dtor_format;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _3029___mcc_h334 = _source112.dtor_op2;
                RAST._IExpr _3030___mcc_h335 = _source112.dtor_left;
                RAST._IExpr _3031___mcc_h336 = _source112.dtor_right;
                DAST.Format._IBinaryOpFormat _3032___mcc_h337 = _source112.dtor_format2;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_TypeAscription) {
                RAST._IExpr _3033___mcc_h342 = _source112.dtor_left;
                RAST._IType _3034___mcc_h343 = _source112.dtor_tpe;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _3035___mcc_h346 = _source112.dtor_value;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_LiteralBool) {
                bool _3036___mcc_h348 = _source112.dtor_bvalue;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _3037___mcc_h350 = _source112.dtor_value;
                bool _3038___mcc_h351 = _source112.dtor_binary;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_DeclareVar) {
                RAST._IDeclareType _3039___mcc_h354 = _source112.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _3040___mcc_h355 = _source112.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _3041___mcc_h356 = _source112.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _3042___mcc_h357 = _source112.dtor_optRhs;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Assign) {
                Std.Wrappers._IOption<RAST._IAssignLhs> _3043___mcc_h362 = _source112.dtor_names;
                RAST._IExpr _3044___mcc_h363 = _source112.dtor_rhs;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_IfExpr) {
                RAST._IExpr _3045___mcc_h366 = _source112.dtor_cond;
                RAST._IExpr _3046___mcc_h367 = _source112.dtor_thn;
                RAST._IExpr _3047___mcc_h368 = _source112.dtor_els;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _3048___mcc_h372 = _source112.dtor_optCond;
                RAST._IExpr _3049___mcc_h373 = _source112.dtor_underlying;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_For) {
                Dafny.ISequence<Dafny.Rune> _3050___mcc_h376 = _source112.dtor_name;
                RAST._IExpr _3051___mcc_h377 = _source112.dtor_range;
                RAST._IExpr _3052___mcc_h378 = _source112.dtor_body;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _3053___mcc_h382 = _source112.dtor_lbl;
                RAST._IExpr _3054___mcc_h383 = _source112.dtor_underlying;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3055___mcc_h386 = _source112.dtor_optLbl;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3056___mcc_h388 = _source112.dtor_optLbl;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _3057___mcc_h390 = _source112.dtor_optExpr;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_CallType) {
                RAST._IExpr _3058___mcc_h392 = _source112.dtor_obj;
                Dafny.ISequence<RAST._IType> _3059___mcc_h393 = _source112.dtor_typeParameters;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Call) {
                RAST._IExpr _3060___mcc_h396 = _source112.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _3061___mcc_h397 = _source112.dtor_arguments;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_Select) {
                RAST._IExpr _3062___mcc_h400 = _source112.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _3063___mcc_h401 = _source112.dtor_name;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else if (_source112.is_MemberSelect) {
                RAST._IExpr _3064___mcc_h404 = _source112.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _3065___mcc_h405 = _source112.dtor_name;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              } else {
                Dafny.ISequence<RAST._IFormal> _3066___mcc_h408 = _source112.dtor_params;
                Std.Wrappers._IOption<RAST._IType> _3067___mcc_h409 = _source112.dtor_retType;
                RAST._IExpr _3068___mcc_h410 = _source112.dtor_body;
                if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                  _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
                }
                generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
              }
            } else if (_source111.is_MemberSelect) {
              RAST._IExpr _3069___mcc_h414 = _source111.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _3070___mcc_h415 = _source111.dtor_name;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            } else {
              Dafny.ISequence<RAST._IFormal> _3071___mcc_h418 = _source111.dtor_params;
              Std.Wrappers._IOption<RAST._IType> _3072___mcc_h419 = _source111.dtor_retType;
              RAST._IExpr _3073___mcc_h420 = _source111.dtor_body;
              if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
                _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
              }
              generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
            }
          } else if (_source109.is_Select) {
            RAST._IExpr _3074___mcc_h424 = _source109.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _3075___mcc_h425 = _source109.dtor_name;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else if (_source109.is_MemberSelect) {
            RAST._IExpr _3076___mcc_h428 = _source109.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _3077___mcc_h429 = _source109.dtor_name;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          } else {
            Dafny.ISequence<RAST._IFormal> _3078___mcc_h432 = _source109.dtor_params;
            Std.Wrappers._IOption<RAST._IType> _3079___mcc_h433 = _source109.dtor_retType;
            RAST._IExpr _3080___mcc_h434 = _source109.dtor_body;
            if (!object.Equals(_2859_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))) {
              _2859_onExpr = ((this).modify__macro).Apply1(_2859_onExpr);
            }
            generated = RAST.__default.AssignMember(_2859_onExpr, _2858_fieldName, rhs);
          }
          readIdents = _2861_recIdents;
          needsIIFE = false;
        }
      } else {
        DAST._IExpression _3081___mcc_h4 = _source107.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3082___mcc_h5 = _source107.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3083_indices = _3082___mcc_h5;
        DAST._IExpression _3084_on = _3081___mcc_h4;
        {
          RAST._IExpr _3085_onExpr;
          DCOMP._IOwnership _3086_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3087_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          (this).GenExpr(_3084_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out117, out _out118, out _out119);
          _3085_onExpr = _out117;
          _3086_onOwned = _out118;
          _3087_recIdents = _out119;
          readIdents = _3087_recIdents;
          _3085_onExpr = ((this).modify__macro).Apply1(_3085_onExpr);
          RAST._IExpr _3088_r;
          _3088_r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          Dafny.ISequence<RAST._IExpr> _3089_indicesExpr;
          _3089_indicesExpr = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi31 = new BigInteger((_3083_indices).Count);
          for (BigInteger _3090_i = BigInteger.Zero; _3090_i < _hi31; _3090_i++) {
            RAST._IExpr _3091_idx;
            DCOMP._IOwnership _3092___v69;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3093_recIdentsIdx;
            RAST._IExpr _out120;
            DCOMP._IOwnership _out121;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
            (this).GenExpr((_3083_indices).Select(_3090_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out120, out _out121, out _out122);
            _3091_idx = _out120;
            _3092___v69 = _out121;
            _3093_recIdentsIdx = _out122;
            Dafny.ISequence<Dafny.Rune> _3094_varName;
            _3094_varName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__idx"), Std.Strings.__default.OfNat(_3090_i));
            _3089_indicesExpr = Dafny.Sequence<RAST._IExpr>.Concat(_3089_indicesExpr, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(_3094_varName)));
            _3088_r = (_3088_r).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), _3094_varName, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), (_3091_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"))))));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3093_recIdentsIdx);
          }
          if ((new BigInteger((_3083_indices).Count)) > (BigInteger.One)) {
            _3085_onExpr = (_3085_onExpr).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("data"));
          }
          RAST._IExpr _3095_rhs;
          _3095_rhs = rhs;
          var _pat_let_tv27 = env;
          if (((_3085_onExpr).IsLhsIdentifier()) && (Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, bool>((_3085_onExpr).LhsIdentifierName(), _pat_let33_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, bool>(_pat_let33_0, _3096_name => (true) && (Dafny.Helpers.Let<Std.Wrappers._IOption<RAST._IType>, bool>((_pat_let_tv27).GetType(_3096_name), _pat_let34_0 => Dafny.Helpers.Let<Std.Wrappers._IOption<RAST._IType>, bool>(_pat_let34_0, _3097_tpe => ((_3097_tpe).is_Some) && (((_3097_tpe).dtor_value).IsUninitArray())))))))) {
            _3095_rhs = RAST.__default.MaybeUninitNew(_3095_rhs);
          }
          generated = (_3088_r).Then(RAST.Expr.create_Assign(Std.Wrappers.Option<RAST._IAssignLhs>.create_Some(RAST.AssignLhs.create_Index(_3085_onExpr, _3089_indicesExpr)), _3095_rhs));
          needsIIFE = true;
        }
      }
    }
    public void GenStmt(DAST._IStatement stmt, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents, out DCOMP._IEnvironment newEnv)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      newEnv = DCOMP.Environment.Default();
      DAST._IStatement _source113 = stmt;
      if (_source113.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _3098___mcc_h0 = _source113.dtor_name;
        DAST._IType _3099___mcc_h1 = _source113.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _3100___mcc_h2 = _source113.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source114 = _3100___mcc_h2;
        if (_source114.is_None) {
          DAST._IType _3101_typ = _3099___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _3102_name = _3098___mcc_h0;
          {
            DAST._IStatement _3103_newStmt;
            _3103_newStmt = DAST.Statement.create_DeclareVar(_3102_name, _3101_typ, Std.Wrappers.Option<DAST._IExpression>.create_Some(DAST.Expression.create_InitializationValue(_3101_typ)));
            RAST._IExpr _out123;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out124;
            DCOMP._IEnvironment _out125;
            (this).GenStmt(_3103_newStmt, selfIdent, env, isLast, earlyReturn, out _out123, out _out124, out _out125);
            generated = _out123;
            readIdents = _out124;
            newEnv = _out125;
          }
        } else {
          DAST._IExpression _3104___mcc_h3 = _source114.dtor_value;
          DAST._IExpression _3105_expression = _3104___mcc_h3;
          DAST._IType _3106_typ = _3099___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _3107_name = _3098___mcc_h0;
          {
            RAST._IType _3108_tpe;
            RAST._IType _out126;
            _out126 = (this).GenType(_3106_typ, DCOMP.GenTypeContext.InBinding());
            _3108_tpe = _out126;
            Dafny.ISequence<Dafny.Rune> _3109_varName;
            _3109_varName = DCOMP.__default.escapeName(_3107_name);
            bool _3110_hasCopySemantics;
            _3110_hasCopySemantics = (_3108_tpe).CanReadWithoutClone();
            if (((_3105_expression).is_InitializationValue) && (!(_3110_hasCopySemantics))) {
              generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), _3109_varName, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MaybePlacebo"))).ApplyType1(_3108_tpe)).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              newEnv = (env).AddAssigned(_3109_varName, RAST.__default.MaybePlaceboType(_3108_tpe));
            } else {
              RAST._IExpr _3111_expr = RAST.Expr.Default();
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3112_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
              if (((_3105_expression).is_InitializationValue) && ((_3108_tpe).IsObjectOrPointer())) {
                _3111_expr = (_3108_tpe).ToNullExpr();
                _3112_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              } else {
                DCOMP._IOwnership _3113_exprOwnership = DCOMP.Ownership.Default();
                RAST._IExpr _out127;
                DCOMP._IOwnership _out128;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
                (this).GenExpr(_3105_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out127, out _out128, out _out129);
                _3111_expr = _out127;
                _3113_exprOwnership = _out128;
                _3112_recIdents = _out129;
              }
              readIdents = _3112_recIdents;
              _3108_tpe = (((_3105_expression).is_NewUninitArray) ? ((_3108_tpe).TypeAtInitialization()) : (_3108_tpe));
              generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeName(_3107_name), Std.Wrappers.Option<RAST._IType>.create_Some(_3108_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_3111_expr));
              newEnv = (env).AddAssigned(DCOMP.__default.escapeName(_3107_name), _3108_tpe);
            }
          }
        }
      } else if (_source113.is_Assign) {
        DAST._IAssignLhs _3114___mcc_h4 = _source113.dtor_lhs;
        DAST._IExpression _3115___mcc_h5 = _source113.dtor_value;
        DAST._IExpression _3116_expression = _3115___mcc_h5;
        DAST._IAssignLhs _3117_lhs = _3114___mcc_h4;
        {
          RAST._IExpr _3118_exprGen;
          DCOMP._IOwnership _3119___v72;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3120_exprIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          (this).GenExpr(_3116_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _3118_exprGen = _out130;
          _3119___v72 = _out131;
          _3120_exprIdents = _out132;
          if ((_3117_lhs).is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3121_rustId;
            _3121_rustId = DCOMP.__default.escapeName(((_3117_lhs).dtor_ident));
            Std.Wrappers._IOption<RAST._IType> _3122_tpe;
            _3122_tpe = (env).GetType(_3121_rustId);
            if (((_3122_tpe).is_Some) && ((((_3122_tpe).dtor_value).ExtractMaybePlacebo()).is_Some)) {
              _3118_exprGen = RAST.__default.MaybePlacebo(_3118_exprGen);
            }
          }
          RAST._IExpr _3123_lhsGen;
          bool _3124_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3125_recIdents;
          DCOMP._IEnvironment _3126_resEnv;
          RAST._IExpr _out133;
          bool _out134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out135;
          DCOMP._IEnvironment _out136;
          (this).GenAssignLhs(_3117_lhs, _3118_exprGen, selfIdent, env, out _out133, out _out134, out _out135, out _out136);
          _3123_lhsGen = _out133;
          _3124_needsIIFE = _out134;
          _3125_recIdents = _out135;
          _3126_resEnv = _out136;
          generated = _3123_lhsGen;
          newEnv = _3126_resEnv;
          if (_3124_needsIIFE) {
            generated = RAST.Expr.create_Block(generated);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3125_recIdents, _3120_exprIdents);
        }
      } else if (_source113.is_If) {
        DAST._IExpression _3127___mcc_h6 = _source113.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _3128___mcc_h7 = _source113.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _3129___mcc_h8 = _source113.dtor_els;
        Dafny.ISequence<DAST._IStatement> _3130_elsDafny = _3129___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _3131_thnDafny = _3128___mcc_h7;
        DAST._IExpression _3132_cond = _3127___mcc_h6;
        {
          RAST._IExpr _3133_cond;
          DCOMP._IOwnership _3134___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3135_recIdents;
          RAST._IExpr _out137;
          DCOMP._IOwnership _out138;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out139;
          (this).GenExpr(_3132_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out137, out _out138, out _out139);
          _3133_cond = _out137;
          _3134___v73 = _out138;
          _3135_recIdents = _out139;
          Dafny.ISequence<Dafny.Rune> _3136_condString;
          _3136_condString = (_3133_cond)._ToString(DCOMP.__default.IND);
          readIdents = _3135_recIdents;
          RAST._IExpr _3137_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3138_thnIdents;
          DCOMP._IEnvironment _3139_thnEnv;
          RAST._IExpr _out140;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out141;
          DCOMP._IEnvironment _out142;
          (this).GenStmts(_3131_thnDafny, selfIdent, env, isLast, earlyReturn, out _out140, out _out141, out _out142);
          _3137_thn = _out140;
          _3138_thnIdents = _out141;
          _3139_thnEnv = _out142;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3138_thnIdents);
          RAST._IExpr _3140_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3141_elsIdents;
          DCOMP._IEnvironment _3142_elsEnv;
          RAST._IExpr _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP._IEnvironment _out145;
          (this).GenStmts(_3130_elsDafny, selfIdent, env, isLast, earlyReturn, out _out143, out _out144, out _out145);
          _3140_els = _out143;
          _3141_elsIdents = _out144;
          _3142_elsEnv = _out145;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3141_elsIdents);
          newEnv = env;
          generated = RAST.Expr.create_IfExpr(_3133_cond, _3137_thn, _3140_els);
        }
      } else if (_source113.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _3143___mcc_h9 = _source113.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _3144___mcc_h10 = _source113.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3145_body = _3144___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _3146_lbl = _3143___mcc_h9;
        {
          RAST._IExpr _3147_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3148_bodyIdents;
          DCOMP._IEnvironment _3149_env2;
          RAST._IExpr _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP._IEnvironment _out148;
          (this).GenStmts(_3145_body, selfIdent, env, isLast, earlyReturn, out _out146, out _out147, out _out148);
          _3147_body = _out146;
          _3148_bodyIdents = _out147;
          _3149_env2 = _out148;
          readIdents = _3148_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _3146_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_3147_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
          newEnv = env;
        }
      } else if (_source113.is_While) {
        DAST._IExpression _3150___mcc_h11 = _source113.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _3151___mcc_h12 = _source113.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3152_body = _3151___mcc_h12;
        DAST._IExpression _3153_cond = _3150___mcc_h11;
        {
          RAST._IExpr _3154_cond;
          DCOMP._IOwnership _3155___v74;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3156_recIdents;
          RAST._IExpr _out149;
          DCOMP._IOwnership _out150;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out151;
          (this).GenExpr(_3153_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out149, out _out150, out _out151);
          _3154_cond = _out149;
          _3155___v74 = _out150;
          _3156_recIdents = _out151;
          readIdents = _3156_recIdents;
          RAST._IExpr _3157_bodyExpr;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3158_bodyIdents;
          DCOMP._IEnvironment _3159_bodyEnv;
          RAST._IExpr _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP._IEnvironment _out154;
          (this).GenStmts(_3152_body, selfIdent, env, false, earlyReturn, out _out152, out _out153, out _out154);
          _3157_bodyExpr = _out152;
          _3158_bodyIdents = _out153;
          _3159_bodyEnv = _out154;
          newEnv = env;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3158_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_3154_cond), _3157_bodyExpr);
        }
      } else if (_source113.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _3160___mcc_h13 = _source113.dtor_boundName;
        DAST._IType _3161___mcc_h14 = _source113.dtor_boundType;
        DAST._IExpression _3162___mcc_h15 = _source113.dtor_over;
        Dafny.ISequence<DAST._IStatement> _3163___mcc_h16 = _source113.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3164_body = _3163___mcc_h16;
        DAST._IExpression _3165_overExpr = _3162___mcc_h15;
        DAST._IType _3166_boundType = _3161___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _3167_boundName = _3160___mcc_h13;
        {
          RAST._IExpr _3168_over;
          DCOMP._IOwnership _3169___v75;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3170_recIdents;
          RAST._IExpr _out155;
          DCOMP._IOwnership _out156;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out157;
          (this).GenExpr(_3165_overExpr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out155, out _out156, out _out157);
          _3168_over = _out155;
          _3169___v75 = _out156;
          _3170_recIdents = _out157;
          if (((_3165_overExpr).is_MapBoundedPool) || ((_3165_overExpr).is_SetBoundedPool)) {
            _3168_over = ((_3168_over).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cloned"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          RAST._IType _3171_boundTpe;
          RAST._IType _out158;
          _out158 = (this).GenType(_3166_boundType, DCOMP.GenTypeContext.@default());
          _3171_boundTpe = _out158;
          readIdents = _3170_recIdents;
          Dafny.ISequence<Dafny.Rune> _3172_boundRName;
          _3172_boundRName = DCOMP.__default.escapeName(_3167_boundName);
          RAST._IExpr _3173_bodyExpr;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3174_bodyIdents;
          DCOMP._IEnvironment _3175_bodyEnv;
          RAST._IExpr _out159;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out160;
          DCOMP._IEnvironment _out161;
          (this).GenStmts(_3164_body, selfIdent, (env).AddAssigned(_3172_boundRName, _3171_boundTpe), false, earlyReturn, out _out159, out _out160, out _out161);
          _3173_bodyExpr = _out159;
          _3174_bodyIdents = _out160;
          _3175_bodyEnv = _out161;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3174_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3172_boundRName));
          newEnv = env;
          generated = RAST.Expr.create_For(_3172_boundRName, _3168_over, _3173_bodyExpr);
        }
      } else if (_source113.is_Call) {
        DAST._IExpression _3176___mcc_h17 = _source113.dtor_on;
        DAST._ICallName _3177___mcc_h18 = _source113.dtor_callName;
        Dafny.ISequence<DAST._IType> _3178___mcc_h19 = _source113.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3179___mcc_h20 = _source113.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _3180___mcc_h21 = _source113.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _3181_maybeOutVars = _3180___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _3182_args = _3179___mcc_h20;
        Dafny.ISequence<DAST._IType> _3183_typeArgs = _3178___mcc_h19;
        DAST._ICallName _3184_name = _3177___mcc_h18;
        DAST._IExpression _3185_on = _3176___mcc_h17;
        {
          Dafny.ISequence<RAST._IExpr> _3186_argExprs;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3187_recIdents;
          Dafny.ISequence<RAST._IType> _3188_typeExprs;
          Std.Wrappers._IOption<DAST._IResolvedType> _3189_fullNameQualifier;
          Dafny.ISequence<RAST._IExpr> _out162;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out163;
          Dafny.ISequence<RAST._IType> _out164;
          Std.Wrappers._IOption<DAST._IResolvedType> _out165;
          (this).GenArgs(selfIdent, _3184_name, _3183_typeArgs, _3182_args, env, out _out162, out _out163, out _out164, out _out165);
          _3186_argExprs = _out162;
          _3187_recIdents = _out163;
          _3188_typeExprs = _out164;
          _3189_fullNameQualifier = _out165;
          readIdents = _3187_recIdents;
          Std.Wrappers._IOption<DAST._IResolvedType> _source115 = _3189_fullNameQualifier;
          if (_source115.is_None) {
            RAST._IExpr _3190_onExpr;
            DCOMP._IOwnership _3191___v84;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3192_enclosingIdents;
            RAST._IExpr _out166;
            DCOMP._IOwnership _out167;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out168;
            (this).GenExpr(_3185_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out166, out _out167, out _out168);
            _3190_onExpr = _out166;
            _3191___v84 = _out167;
            _3192_enclosingIdents = _out168;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3192_enclosingIdents);
            Dafny.ISequence<Dafny.Rune> _3193_renderedName;
            _3193_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source116) => {
              if (_source116.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _3194___mcc_h41 = _source116.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _3195___mcc_h42 = _source116.dtor_onType;
                Std.Wrappers._IOption<DAST._IFormal> _3196___mcc_h43 = _source116.dtor_receiverArgs;
                Dafny.ISequence<DAST._IFormal> _3197___mcc_h44 = _source116.dtor_signature;
                Dafny.ISequence<Dafny.Rune> _3198_name = _3194___mcc_h41;
                return DCOMP.__default.escapeName(_3198_name);
              } else if (_source116.is_MapBuilderAdd) {
                return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
              } else if (_source116.is_MapBuilderBuild) {
                return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
              } else if (_source116.is_SetBuilderAdd) {
                return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
              } else {
                return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
              }
            }))(_3184_name);
            DAST._IExpression _source117 = _3185_on;
            if (_source117.is_Literal) {
              DAST._ILiteral _3199___mcc_h45 = _source117.dtor_Literal_i_a0;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source118 = _3184_name;
                  if (_source118.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3200___mcc_h259 = _source118.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3201___mcc_h260 = _source118.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3202___mcc_h261 = _source118.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3203___mcc_h262 = _source118.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source119 = _3201___mcc_h260;
                    if (_source119.is_None) {
                    } else {
                      DAST._IType _3204___mcc_h267 = _source119.dtor_value;
                      DAST._IType _3205_tpe = _3204___mcc_h267;
                      RAST._IType _3206_typ;
                      RAST._IType _out169;
                      _out169 = (this).GenType(_3205_tpe, DCOMP.GenTypeContext.@default());
                      _3206_typ = _out169;
                      if (((_3206_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source118.is_MapBuilderAdd) {
                  } else if (_source118.is_MapBuilderBuild) {
                  } else if (_source118.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Ident) {
              Dafny.ISequence<Dafny.Rune> _3207___mcc_h47 = _source117.dtor_Ident_i_a0;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source120 = _3184_name;
                  if (_source120.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3208___mcc_h269 = _source120.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3209___mcc_h270 = _source120.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3210___mcc_h271 = _source120.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3211___mcc_h272 = _source120.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source121 = _3209___mcc_h270;
                    if (_source121.is_None) {
                    } else {
                      DAST._IType _3212___mcc_h277 = _source121.dtor_value;
                      DAST._IType _3213_tpe = _3212___mcc_h277;
                      RAST._IType _3214_typ;
                      RAST._IType _out170;
                      _out170 = (this).GenType(_3213_tpe, DCOMP.GenTypeContext.@default());
                      _3214_typ = _out170;
                      if (((_3214_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source120.is_MapBuilderAdd) {
                  } else if (_source120.is_MapBuilderBuild) {
                  } else if (_source120.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Companion) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3215___mcc_h49 = _source117.dtor_Companion_i_a0;
              Dafny.ISequence<DAST._IType> _3216___mcc_h50 = _source117.dtor_typeArgs;
              {
                _3190_onExpr = (_3190_onExpr).MSel(_3193_renderedName);
              }
            } else if (_source117.is_Tuple) {
              Dafny.ISequence<DAST._IExpression> _3217___mcc_h53 = _source117.dtor_Tuple_i_a0;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source122 = _3184_name;
                  if (_source122.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3218___mcc_h279 = _source122.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3219___mcc_h280 = _source122.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3220___mcc_h281 = _source122.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3221___mcc_h282 = _source122.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source123 = _3219___mcc_h280;
                    if (_source123.is_None) {
                    } else {
                      DAST._IType _3222___mcc_h287 = _source123.dtor_value;
                      DAST._IType _3223_tpe = _3222___mcc_h287;
                      RAST._IType _3224_typ;
                      RAST._IType _out171;
                      _out171 = (this).GenType(_3223_tpe, DCOMP.GenTypeContext.@default());
                      _3224_typ = _out171;
                      if (((_3224_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source122.is_MapBuilderAdd) {
                  } else if (_source122.is_MapBuilderBuild) {
                  } else if (_source122.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_New) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3225___mcc_h55 = _source117.dtor_path;
              Dafny.ISequence<DAST._IType> _3226___mcc_h56 = _source117.dtor_typeArgs;
              Dafny.ISequence<DAST._IExpression> _3227___mcc_h57 = _source117.dtor_args;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source124 = _3184_name;
                  if (_source124.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3228___mcc_h289 = _source124.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3229___mcc_h290 = _source124.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3230___mcc_h291 = _source124.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3231___mcc_h292 = _source124.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source125 = _3229___mcc_h290;
                    if (_source125.is_None) {
                    } else {
                      DAST._IType _3232___mcc_h297 = _source125.dtor_value;
                      DAST._IType _3233_tpe = _3232___mcc_h297;
                      RAST._IType _3234_typ;
                      RAST._IType _out172;
                      _out172 = (this).GenType(_3233_tpe, DCOMP.GenTypeContext.@default());
                      _3234_typ = _out172;
                      if (((_3234_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source124.is_MapBuilderAdd) {
                  } else if (_source124.is_MapBuilderBuild) {
                  } else if (_source124.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_NewUninitArray) {
              Dafny.ISequence<DAST._IExpression> _3235___mcc_h61 = _source117.dtor_dims;
              DAST._IType _3236___mcc_h62 = _source117.dtor_typ;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source126 = _3184_name;
                  if (_source126.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3237___mcc_h299 = _source126.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3238___mcc_h300 = _source126.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3239___mcc_h301 = _source126.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3240___mcc_h302 = _source126.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source127 = _3238___mcc_h300;
                    if (_source127.is_None) {
                    } else {
                      DAST._IType _3241___mcc_h307 = _source127.dtor_value;
                      DAST._IType _3242_tpe = _3241___mcc_h307;
                      RAST._IType _3243_typ;
                      RAST._IType _out173;
                      _out173 = (this).GenType(_3242_tpe, DCOMP.GenTypeContext.@default());
                      _3243_typ = _out173;
                      if (((_3243_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source126.is_MapBuilderAdd) {
                  } else if (_source126.is_MapBuilderBuild) {
                  } else if (_source126.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_ArrayIndexToInt) {
              DAST._IExpression _3244___mcc_h65 = _source117.dtor_value;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source128 = _3184_name;
                  if (_source128.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3245___mcc_h309 = _source128.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3246___mcc_h310 = _source128.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3247___mcc_h311 = _source128.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3248___mcc_h312 = _source128.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source129 = _3246___mcc_h310;
                    if (_source129.is_None) {
                    } else {
                      DAST._IType _3249___mcc_h317 = _source129.dtor_value;
                      DAST._IType _3250_tpe = _3249___mcc_h317;
                      RAST._IType _3251_typ;
                      RAST._IType _out174;
                      _out174 = (this).GenType(_3250_tpe, DCOMP.GenTypeContext.@default());
                      _3251_typ = _out174;
                      if (((_3251_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source128.is_MapBuilderAdd) {
                  } else if (_source128.is_MapBuilderBuild) {
                  } else if (_source128.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_FinalizeNewArray) {
              DAST._IExpression _3252___mcc_h67 = _source117.dtor_value;
              DAST._IType _3253___mcc_h68 = _source117.dtor_typ;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source130 = _3184_name;
                  if (_source130.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3254___mcc_h319 = _source130.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3255___mcc_h320 = _source130.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3256___mcc_h321 = _source130.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3257___mcc_h322 = _source130.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source131 = _3255___mcc_h320;
                    if (_source131.is_None) {
                    } else {
                      DAST._IType _3258___mcc_h327 = _source131.dtor_value;
                      DAST._IType _3259_tpe = _3258___mcc_h327;
                      RAST._IType _3260_typ;
                      RAST._IType _out175;
                      _out175 = (this).GenType(_3259_tpe, DCOMP.GenTypeContext.@default());
                      _3260_typ = _out175;
                      if (((_3260_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source130.is_MapBuilderAdd) {
                  } else if (_source130.is_MapBuilderBuild) {
                  } else if (_source130.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_DatatypeValue) {
              DAST._IResolvedType _3261___mcc_h71 = _source117.dtor_datatypeType;
              Dafny.ISequence<DAST._IType> _3262___mcc_h72 = _source117.dtor_typeArgs;
              Dafny.ISequence<Dafny.Rune> _3263___mcc_h73 = _source117.dtor_variant;
              bool _3264___mcc_h74 = _source117.dtor_isCo;
              Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3265___mcc_h75 = _source117.dtor_contents;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source132 = _3184_name;
                  if (_source132.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3266___mcc_h329 = _source132.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3267___mcc_h330 = _source132.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3268___mcc_h331 = _source132.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3269___mcc_h332 = _source132.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source133 = _3267___mcc_h330;
                    if (_source133.is_None) {
                    } else {
                      DAST._IType _3270___mcc_h337 = _source133.dtor_value;
                      DAST._IType _3271_tpe = _3270___mcc_h337;
                      RAST._IType _3272_typ;
                      RAST._IType _out176;
                      _out176 = (this).GenType(_3271_tpe, DCOMP.GenTypeContext.@default());
                      _3272_typ = _out176;
                      if (((_3272_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source132.is_MapBuilderAdd) {
                  } else if (_source132.is_MapBuilderBuild) {
                  } else if (_source132.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Convert) {
              DAST._IExpression _3273___mcc_h81 = _source117.dtor_value;
              DAST._IType _3274___mcc_h82 = _source117.dtor_from;
              DAST._IType _3275___mcc_h83 = _source117.dtor_typ;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source134 = _3184_name;
                  if (_source134.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3276___mcc_h339 = _source134.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3277___mcc_h340 = _source134.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3278___mcc_h341 = _source134.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3279___mcc_h342 = _source134.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source135 = _3277___mcc_h340;
                    if (_source135.is_None) {
                    } else {
                      DAST._IType _3280___mcc_h347 = _source135.dtor_value;
                      DAST._IType _3281_tpe = _3280___mcc_h347;
                      RAST._IType _3282_typ;
                      RAST._IType _out177;
                      _out177 = (this).GenType(_3281_tpe, DCOMP.GenTypeContext.@default());
                      _3282_typ = _out177;
                      if (((_3282_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source134.is_MapBuilderAdd) {
                  } else if (_source134.is_MapBuilderBuild) {
                  } else if (_source134.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_SeqConstruct) {
              DAST._IExpression _3283___mcc_h87 = _source117.dtor_length;
              DAST._IExpression _3284___mcc_h88 = _source117.dtor_elem;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source136 = _3184_name;
                  if (_source136.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3285___mcc_h349 = _source136.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3286___mcc_h350 = _source136.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3287___mcc_h351 = _source136.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3288___mcc_h352 = _source136.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source137 = _3286___mcc_h350;
                    if (_source137.is_None) {
                    } else {
                      DAST._IType _3289___mcc_h357 = _source137.dtor_value;
                      DAST._IType _3290_tpe = _3289___mcc_h357;
                      RAST._IType _3291_typ;
                      RAST._IType _out178;
                      _out178 = (this).GenType(_3290_tpe, DCOMP.GenTypeContext.@default());
                      _3291_typ = _out178;
                      if (((_3291_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source136.is_MapBuilderAdd) {
                  } else if (_source136.is_MapBuilderBuild) {
                  } else if (_source136.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_SeqValue) {
              Dafny.ISequence<DAST._IExpression> _3292___mcc_h91 = _source117.dtor_elements;
              DAST._IType _3293___mcc_h92 = _source117.dtor_typ;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source138 = _3184_name;
                  if (_source138.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3294___mcc_h359 = _source138.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3295___mcc_h360 = _source138.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3296___mcc_h361 = _source138.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3297___mcc_h362 = _source138.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source139 = _3295___mcc_h360;
                    if (_source139.is_None) {
                    } else {
                      DAST._IType _3298___mcc_h367 = _source139.dtor_value;
                      DAST._IType _3299_tpe = _3298___mcc_h367;
                      RAST._IType _3300_typ;
                      RAST._IType _out179;
                      _out179 = (this).GenType(_3299_tpe, DCOMP.GenTypeContext.@default());
                      _3300_typ = _out179;
                      if (((_3300_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source138.is_MapBuilderAdd) {
                  } else if (_source138.is_MapBuilderBuild) {
                  } else if (_source138.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_SetValue) {
              Dafny.ISequence<DAST._IExpression> _3301___mcc_h95 = _source117.dtor_elements;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source140 = _3184_name;
                  if (_source140.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3302___mcc_h369 = _source140.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3303___mcc_h370 = _source140.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3304___mcc_h371 = _source140.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3305___mcc_h372 = _source140.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source141 = _3303___mcc_h370;
                    if (_source141.is_None) {
                    } else {
                      DAST._IType _3306___mcc_h377 = _source141.dtor_value;
                      DAST._IType _3307_tpe = _3306___mcc_h377;
                      RAST._IType _3308_typ;
                      RAST._IType _out180;
                      _out180 = (this).GenType(_3307_tpe, DCOMP.GenTypeContext.@default());
                      _3308_typ = _out180;
                      if (((_3308_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source140.is_MapBuilderAdd) {
                  } else if (_source140.is_MapBuilderBuild) {
                  } else if (_source140.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_MultisetValue) {
              Dafny.ISequence<DAST._IExpression> _3309___mcc_h97 = _source117.dtor_elements;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source142 = _3184_name;
                  if (_source142.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3310___mcc_h379 = _source142.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3311___mcc_h380 = _source142.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3312___mcc_h381 = _source142.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3313___mcc_h382 = _source142.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source143 = _3311___mcc_h380;
                    if (_source143.is_None) {
                    } else {
                      DAST._IType _3314___mcc_h387 = _source143.dtor_value;
                      DAST._IType _3315_tpe = _3314___mcc_h387;
                      RAST._IType _3316_typ;
                      RAST._IType _out181;
                      _out181 = (this).GenType(_3315_tpe, DCOMP.GenTypeContext.@default());
                      _3316_typ = _out181;
                      if (((_3316_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source142.is_MapBuilderAdd) {
                  } else if (_source142.is_MapBuilderBuild) {
                  } else if (_source142.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_MapValue) {
              Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3317___mcc_h99 = _source117.dtor_mapElems;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source144 = _3184_name;
                  if (_source144.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3318___mcc_h389 = _source144.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3319___mcc_h390 = _source144.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3320___mcc_h391 = _source144.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3321___mcc_h392 = _source144.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source145 = _3319___mcc_h390;
                    if (_source145.is_None) {
                    } else {
                      DAST._IType _3322___mcc_h397 = _source145.dtor_value;
                      DAST._IType _3323_tpe = _3322___mcc_h397;
                      RAST._IType _3324_typ;
                      RAST._IType _out182;
                      _out182 = (this).GenType(_3323_tpe, DCOMP.GenTypeContext.@default());
                      _3324_typ = _out182;
                      if (((_3324_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source144.is_MapBuilderAdd) {
                  } else if (_source144.is_MapBuilderBuild) {
                  } else if (_source144.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_MapBuilder) {
              DAST._IType _3325___mcc_h101 = _source117.dtor_keyType;
              DAST._IType _3326___mcc_h102 = _source117.dtor_valueType;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source146 = _3184_name;
                  if (_source146.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3327___mcc_h399 = _source146.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3328___mcc_h400 = _source146.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3329___mcc_h401 = _source146.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3330___mcc_h402 = _source146.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source147 = _3328___mcc_h400;
                    if (_source147.is_None) {
                    } else {
                      DAST._IType _3331___mcc_h407 = _source147.dtor_value;
                      DAST._IType _3332_tpe = _3331___mcc_h407;
                      RAST._IType _3333_typ;
                      RAST._IType _out183;
                      _out183 = (this).GenType(_3332_tpe, DCOMP.GenTypeContext.@default());
                      _3333_typ = _out183;
                      if (((_3333_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source146.is_MapBuilderAdd) {
                  } else if (_source146.is_MapBuilderBuild) {
                  } else if (_source146.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_SeqUpdate) {
              DAST._IExpression _3334___mcc_h105 = _source117.dtor_expr;
              DAST._IExpression _3335___mcc_h106 = _source117.dtor_indexExpr;
              DAST._IExpression _3336___mcc_h107 = _source117.dtor_value;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source148 = _3184_name;
                  if (_source148.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3337___mcc_h409 = _source148.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3338___mcc_h410 = _source148.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3339___mcc_h411 = _source148.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3340___mcc_h412 = _source148.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source149 = _3338___mcc_h410;
                    if (_source149.is_None) {
                    } else {
                      DAST._IType _3341___mcc_h417 = _source149.dtor_value;
                      DAST._IType _3342_tpe = _3341___mcc_h417;
                      RAST._IType _3343_typ;
                      RAST._IType _out184;
                      _out184 = (this).GenType(_3342_tpe, DCOMP.GenTypeContext.@default());
                      _3343_typ = _out184;
                      if (((_3343_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source148.is_MapBuilderAdd) {
                  } else if (_source148.is_MapBuilderBuild) {
                  } else if (_source148.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_MapUpdate) {
              DAST._IExpression _3344___mcc_h111 = _source117.dtor_expr;
              DAST._IExpression _3345___mcc_h112 = _source117.dtor_indexExpr;
              DAST._IExpression _3346___mcc_h113 = _source117.dtor_value;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source150 = _3184_name;
                  if (_source150.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3347___mcc_h419 = _source150.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3348___mcc_h420 = _source150.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3349___mcc_h421 = _source150.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3350___mcc_h422 = _source150.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source151 = _3348___mcc_h420;
                    if (_source151.is_None) {
                    } else {
                      DAST._IType _3351___mcc_h427 = _source151.dtor_value;
                      DAST._IType _3352_tpe = _3351___mcc_h427;
                      RAST._IType _3353_typ;
                      RAST._IType _out185;
                      _out185 = (this).GenType(_3352_tpe, DCOMP.GenTypeContext.@default());
                      _3353_typ = _out185;
                      if (((_3353_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source150.is_MapBuilderAdd) {
                  } else if (_source150.is_MapBuilderBuild) {
                  } else if (_source150.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_SetBuilder) {
              DAST._IType _3354___mcc_h117 = _source117.dtor_elemType;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source152 = _3184_name;
                  if (_source152.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3355___mcc_h429 = _source152.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3356___mcc_h430 = _source152.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3357___mcc_h431 = _source152.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3358___mcc_h432 = _source152.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source153 = _3356___mcc_h430;
                    if (_source153.is_None) {
                    } else {
                      DAST._IType _3359___mcc_h437 = _source153.dtor_value;
                      DAST._IType _3360_tpe = _3359___mcc_h437;
                      RAST._IType _3361_typ;
                      RAST._IType _out186;
                      _out186 = (this).GenType(_3360_tpe, DCOMP.GenTypeContext.@default());
                      _3361_typ = _out186;
                      if (((_3361_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source152.is_MapBuilderAdd) {
                  } else if (_source152.is_MapBuilderBuild) {
                  } else if (_source152.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_ToMultiset) {
              DAST._IExpression _3362___mcc_h119 = _source117.dtor_ToMultiset_i_a0;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source154 = _3184_name;
                  if (_source154.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3363___mcc_h439 = _source154.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3364___mcc_h440 = _source154.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3365___mcc_h441 = _source154.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3366___mcc_h442 = _source154.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source155 = _3364___mcc_h440;
                    if (_source155.is_None) {
                    } else {
                      DAST._IType _3367___mcc_h447 = _source155.dtor_value;
                      DAST._IType _3368_tpe = _3367___mcc_h447;
                      RAST._IType _3369_typ;
                      RAST._IType _out187;
                      _out187 = (this).GenType(_3368_tpe, DCOMP.GenTypeContext.@default());
                      _3369_typ = _out187;
                      if (((_3369_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source154.is_MapBuilderAdd) {
                  } else if (_source154.is_MapBuilderBuild) {
                  } else if (_source154.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_This) {
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source156 = _3184_name;
                  if (_source156.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3370___mcc_h449 = _source156.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3371___mcc_h450 = _source156.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3372___mcc_h451 = _source156.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3373___mcc_h452 = _source156.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source157 = _3371___mcc_h450;
                    if (_source157.is_None) {
                    } else {
                      DAST._IType _3374___mcc_h457 = _source157.dtor_value;
                      DAST._IType _3375_tpe = _3374___mcc_h457;
                      RAST._IType _3376_typ;
                      RAST._IType _out188;
                      _out188 = (this).GenType(_3375_tpe, DCOMP.GenTypeContext.@default());
                      _3376_typ = _out188;
                      if (((_3376_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source156.is_MapBuilderAdd) {
                  } else if (_source156.is_MapBuilderBuild) {
                  } else if (_source156.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Ite) {
              DAST._IExpression _3377___mcc_h121 = _source117.dtor_cond;
              DAST._IExpression _3378___mcc_h122 = _source117.dtor_thn;
              DAST._IExpression _3379___mcc_h123 = _source117.dtor_els;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source158 = _3184_name;
                  if (_source158.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3380___mcc_h459 = _source158.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3381___mcc_h460 = _source158.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3382___mcc_h461 = _source158.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3383___mcc_h462 = _source158.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source159 = _3381___mcc_h460;
                    if (_source159.is_None) {
                    } else {
                      DAST._IType _3384___mcc_h467 = _source159.dtor_value;
                      DAST._IType _3385_tpe = _3384___mcc_h467;
                      RAST._IType _3386_typ;
                      RAST._IType _out189;
                      _out189 = (this).GenType(_3385_tpe, DCOMP.GenTypeContext.@default());
                      _3386_typ = _out189;
                      if (((_3386_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source158.is_MapBuilderAdd) {
                  } else if (_source158.is_MapBuilderBuild) {
                  } else if (_source158.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_UnOp) {
              DAST._IUnaryOp _3387___mcc_h127 = _source117.dtor_unOp;
              DAST._IExpression _3388___mcc_h128 = _source117.dtor_expr;
              DAST.Format._IUnaryOpFormat _3389___mcc_h129 = _source117.dtor_format1;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source160 = _3184_name;
                  if (_source160.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3390___mcc_h469 = _source160.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3391___mcc_h470 = _source160.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3392___mcc_h471 = _source160.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3393___mcc_h472 = _source160.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source161 = _3391___mcc_h470;
                    if (_source161.is_None) {
                    } else {
                      DAST._IType _3394___mcc_h477 = _source161.dtor_value;
                      DAST._IType _3395_tpe = _3394___mcc_h477;
                      RAST._IType _3396_typ;
                      RAST._IType _out190;
                      _out190 = (this).GenType(_3395_tpe, DCOMP.GenTypeContext.@default());
                      _3396_typ = _out190;
                      if (((_3396_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source160.is_MapBuilderAdd) {
                  } else if (_source160.is_MapBuilderBuild) {
                  } else if (_source160.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_BinOp) {
              DAST._IBinOp _3397___mcc_h133 = _source117.dtor_op;
              DAST._IExpression _3398___mcc_h134 = _source117.dtor_left;
              DAST._IExpression _3399___mcc_h135 = _source117.dtor_right;
              DAST.Format._IBinaryOpFormat _3400___mcc_h136 = _source117.dtor_format2;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source162 = _3184_name;
                  if (_source162.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3401___mcc_h479 = _source162.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3402___mcc_h480 = _source162.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3403___mcc_h481 = _source162.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3404___mcc_h482 = _source162.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source163 = _3402___mcc_h480;
                    if (_source163.is_None) {
                    } else {
                      DAST._IType _3405___mcc_h487 = _source163.dtor_value;
                      DAST._IType _3406_tpe = _3405___mcc_h487;
                      RAST._IType _3407_typ;
                      RAST._IType _out191;
                      _out191 = (this).GenType(_3406_tpe, DCOMP.GenTypeContext.@default());
                      _3407_typ = _out191;
                      if (((_3407_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source162.is_MapBuilderAdd) {
                  } else if (_source162.is_MapBuilderBuild) {
                  } else if (_source162.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_ArrayLen) {
              DAST._IExpression _3408___mcc_h141 = _source117.dtor_expr;
              DAST._IType _3409___mcc_h142 = _source117.dtor_exprType;
              BigInteger _3410___mcc_h143 = _source117.dtor_dim;
              bool _3411___mcc_h144 = _source117.dtor_native;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source164 = _3184_name;
                  if (_source164.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3412___mcc_h489 = _source164.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3413___mcc_h490 = _source164.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3414___mcc_h491 = _source164.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3415___mcc_h492 = _source164.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source165 = _3413___mcc_h490;
                    if (_source165.is_None) {
                    } else {
                      DAST._IType _3416___mcc_h497 = _source165.dtor_value;
                      DAST._IType _3417_tpe = _3416___mcc_h497;
                      RAST._IType _3418_typ;
                      RAST._IType _out192;
                      _out192 = (this).GenType(_3417_tpe, DCOMP.GenTypeContext.@default());
                      _3418_typ = _out192;
                      if (((_3418_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source164.is_MapBuilderAdd) {
                  } else if (_source164.is_MapBuilderBuild) {
                  } else if (_source164.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_MapKeys) {
              DAST._IExpression _3419___mcc_h149 = _source117.dtor_expr;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source166 = _3184_name;
                  if (_source166.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3420___mcc_h499 = _source166.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3421___mcc_h500 = _source166.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3422___mcc_h501 = _source166.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3423___mcc_h502 = _source166.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source167 = _3421___mcc_h500;
                    if (_source167.is_None) {
                    } else {
                      DAST._IType _3424___mcc_h507 = _source167.dtor_value;
                      DAST._IType _3425_tpe = _3424___mcc_h507;
                      RAST._IType _3426_typ;
                      RAST._IType _out193;
                      _out193 = (this).GenType(_3425_tpe, DCOMP.GenTypeContext.@default());
                      _3426_typ = _out193;
                      if (((_3426_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source166.is_MapBuilderAdd) {
                  } else if (_source166.is_MapBuilderBuild) {
                  } else if (_source166.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_MapValues) {
              DAST._IExpression _3427___mcc_h151 = _source117.dtor_expr;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source168 = _3184_name;
                  if (_source168.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3428___mcc_h509 = _source168.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3429___mcc_h510 = _source168.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3430___mcc_h511 = _source168.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3431___mcc_h512 = _source168.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source169 = _3429___mcc_h510;
                    if (_source169.is_None) {
                    } else {
                      DAST._IType _3432___mcc_h517 = _source169.dtor_value;
                      DAST._IType _3433_tpe = _3432___mcc_h517;
                      RAST._IType _3434_typ;
                      RAST._IType _out194;
                      _out194 = (this).GenType(_3433_tpe, DCOMP.GenTypeContext.@default());
                      _3434_typ = _out194;
                      if (((_3434_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source168.is_MapBuilderAdd) {
                  } else if (_source168.is_MapBuilderBuild) {
                  } else if (_source168.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Select) {
              DAST._IExpression _3435___mcc_h153 = _source117.dtor_expr;
              Dafny.ISequence<Dafny.Rune> _3436___mcc_h154 = _source117.dtor_field;
              bool _3437___mcc_h155 = _source117.dtor_isConstant;
              bool _3438___mcc_h156 = _source117.dtor_onDatatype;
              DAST._IType _3439___mcc_h157 = _source117.dtor_fieldType;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source170 = _3184_name;
                  if (_source170.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3440___mcc_h519 = _source170.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3441___mcc_h520 = _source170.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3442___mcc_h521 = _source170.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3443___mcc_h522 = _source170.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source171 = _3441___mcc_h520;
                    if (_source171.is_None) {
                    } else {
                      DAST._IType _3444___mcc_h527 = _source171.dtor_value;
                      DAST._IType _3445_tpe = _3444___mcc_h527;
                      RAST._IType _3446_typ;
                      RAST._IType _out195;
                      _out195 = (this).GenType(_3445_tpe, DCOMP.GenTypeContext.@default());
                      _3446_typ = _out195;
                      if (((_3446_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source170.is_MapBuilderAdd) {
                  } else if (_source170.is_MapBuilderBuild) {
                  } else if (_source170.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_SelectFn) {
              DAST._IExpression _3447___mcc_h163 = _source117.dtor_expr;
              Dafny.ISequence<Dafny.Rune> _3448___mcc_h164 = _source117.dtor_field;
              bool _3449___mcc_h165 = _source117.dtor_onDatatype;
              bool _3450___mcc_h166 = _source117.dtor_isStatic;
              BigInteger _3451___mcc_h167 = _source117.dtor_arity;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source172 = _3184_name;
                  if (_source172.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3452___mcc_h529 = _source172.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3453___mcc_h530 = _source172.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3454___mcc_h531 = _source172.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3455___mcc_h532 = _source172.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source173 = _3453___mcc_h530;
                    if (_source173.is_None) {
                    } else {
                      DAST._IType _3456___mcc_h537 = _source173.dtor_value;
                      DAST._IType _3457_tpe = _3456___mcc_h537;
                      RAST._IType _3458_typ;
                      RAST._IType _out196;
                      _out196 = (this).GenType(_3457_tpe, DCOMP.GenTypeContext.@default());
                      _3458_typ = _out196;
                      if (((_3458_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source172.is_MapBuilderAdd) {
                  } else if (_source172.is_MapBuilderBuild) {
                  } else if (_source172.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Index) {
              DAST._IExpression _3459___mcc_h173 = _source117.dtor_expr;
              DAST._ICollKind _3460___mcc_h174 = _source117.dtor_collKind;
              Dafny.ISequence<DAST._IExpression> _3461___mcc_h175 = _source117.dtor_indices;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source174 = _3184_name;
                  if (_source174.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3462___mcc_h539 = _source174.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3463___mcc_h540 = _source174.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3464___mcc_h541 = _source174.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3465___mcc_h542 = _source174.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source175 = _3463___mcc_h540;
                    if (_source175.is_None) {
                    } else {
                      DAST._IType _3466___mcc_h547 = _source175.dtor_value;
                      DAST._IType _3467_tpe = _3466___mcc_h547;
                      RAST._IType _3468_typ;
                      RAST._IType _out197;
                      _out197 = (this).GenType(_3467_tpe, DCOMP.GenTypeContext.@default());
                      _3468_typ = _out197;
                      if (((_3468_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source174.is_MapBuilderAdd) {
                  } else if (_source174.is_MapBuilderBuild) {
                  } else if (_source174.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_IndexRange) {
              DAST._IExpression _3469___mcc_h179 = _source117.dtor_expr;
              bool _3470___mcc_h180 = _source117.dtor_isArray;
              Std.Wrappers._IOption<DAST._IExpression> _3471___mcc_h181 = _source117.dtor_low;
              Std.Wrappers._IOption<DAST._IExpression> _3472___mcc_h182 = _source117.dtor_high;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source176 = _3184_name;
                  if (_source176.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3473___mcc_h549 = _source176.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3474___mcc_h550 = _source176.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3475___mcc_h551 = _source176.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3476___mcc_h552 = _source176.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source177 = _3474___mcc_h550;
                    if (_source177.is_None) {
                    } else {
                      DAST._IType _3477___mcc_h557 = _source177.dtor_value;
                      DAST._IType _3478_tpe = _3477___mcc_h557;
                      RAST._IType _3479_typ;
                      RAST._IType _out198;
                      _out198 = (this).GenType(_3478_tpe, DCOMP.GenTypeContext.@default());
                      _3479_typ = _out198;
                      if (((_3479_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source176.is_MapBuilderAdd) {
                  } else if (_source176.is_MapBuilderBuild) {
                  } else if (_source176.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_TupleSelect) {
              DAST._IExpression _3480___mcc_h187 = _source117.dtor_expr;
              BigInteger _3481___mcc_h188 = _source117.dtor_index;
              DAST._IType _3482___mcc_h189 = _source117.dtor_fieldType;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source178 = _3184_name;
                  if (_source178.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3483___mcc_h559 = _source178.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3484___mcc_h560 = _source178.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3485___mcc_h561 = _source178.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3486___mcc_h562 = _source178.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source179 = _3484___mcc_h560;
                    if (_source179.is_None) {
                    } else {
                      DAST._IType _3487___mcc_h567 = _source179.dtor_value;
                      DAST._IType _3488_tpe = _3487___mcc_h567;
                      RAST._IType _3489_typ;
                      RAST._IType _out199;
                      _out199 = (this).GenType(_3488_tpe, DCOMP.GenTypeContext.@default());
                      _3489_typ = _out199;
                      if (((_3489_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source178.is_MapBuilderAdd) {
                  } else if (_source178.is_MapBuilderBuild) {
                  } else if (_source178.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Call) {
              DAST._IExpression _3490___mcc_h193 = _source117.dtor_on;
              DAST._ICallName _3491___mcc_h194 = _source117.dtor_callName;
              Dafny.ISequence<DAST._IType> _3492___mcc_h195 = _source117.dtor_typeArgs;
              Dafny.ISequence<DAST._IExpression> _3493___mcc_h196 = _source117.dtor_args;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source180 = _3184_name;
                  if (_source180.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3494___mcc_h569 = _source180.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3495___mcc_h570 = _source180.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3496___mcc_h571 = _source180.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3497___mcc_h572 = _source180.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source181 = _3495___mcc_h570;
                    if (_source181.is_None) {
                    } else {
                      DAST._IType _3498___mcc_h577 = _source181.dtor_value;
                      DAST._IType _3499_tpe = _3498___mcc_h577;
                      RAST._IType _3500_typ;
                      RAST._IType _out200;
                      _out200 = (this).GenType(_3499_tpe, DCOMP.GenTypeContext.@default());
                      _3500_typ = _out200;
                      if (((_3500_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source180.is_MapBuilderAdd) {
                  } else if (_source180.is_MapBuilderBuild) {
                  } else if (_source180.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Lambda) {
              Dafny.ISequence<DAST._IFormal> _3501___mcc_h201 = _source117.dtor_params;
              DAST._IType _3502___mcc_h202 = _source117.dtor_retType;
              Dafny.ISequence<DAST._IStatement> _3503___mcc_h203 = _source117.dtor_body;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source182 = _3184_name;
                  if (_source182.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3504___mcc_h579 = _source182.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3505___mcc_h580 = _source182.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3506___mcc_h581 = _source182.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3507___mcc_h582 = _source182.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source183 = _3505___mcc_h580;
                    if (_source183.is_None) {
                    } else {
                      DAST._IType _3508___mcc_h587 = _source183.dtor_value;
                      DAST._IType _3509_tpe = _3508___mcc_h587;
                      RAST._IType _3510_typ;
                      RAST._IType _out201;
                      _out201 = (this).GenType(_3509_tpe, DCOMP.GenTypeContext.@default());
                      _3510_typ = _out201;
                      if (((_3510_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source182.is_MapBuilderAdd) {
                  } else if (_source182.is_MapBuilderBuild) {
                  } else if (_source182.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_BetaRedex) {
              Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3511___mcc_h207 = _source117.dtor_values;
              DAST._IType _3512___mcc_h208 = _source117.dtor_retType;
              DAST._IExpression _3513___mcc_h209 = _source117.dtor_expr;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source184 = _3184_name;
                  if (_source184.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3514___mcc_h589 = _source184.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3515___mcc_h590 = _source184.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3516___mcc_h591 = _source184.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3517___mcc_h592 = _source184.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source185 = _3515___mcc_h590;
                    if (_source185.is_None) {
                    } else {
                      DAST._IType _3518___mcc_h597 = _source185.dtor_value;
                      DAST._IType _3519_tpe = _3518___mcc_h597;
                      RAST._IType _3520_typ;
                      RAST._IType _out202;
                      _out202 = (this).GenType(_3519_tpe, DCOMP.GenTypeContext.@default());
                      _3520_typ = _out202;
                      if (((_3520_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source184.is_MapBuilderAdd) {
                  } else if (_source184.is_MapBuilderBuild) {
                  } else if (_source184.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_IIFE) {
              Dafny.ISequence<Dafny.Rune> _3521___mcc_h213 = _source117.dtor_name;
              DAST._IType _3522___mcc_h214 = _source117.dtor_typ;
              DAST._IExpression _3523___mcc_h215 = _source117.dtor_value;
              DAST._IExpression _3524___mcc_h216 = _source117.dtor_iifeBody;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source186 = _3184_name;
                  if (_source186.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3525___mcc_h599 = _source186.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3526___mcc_h600 = _source186.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3527___mcc_h601 = _source186.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3528___mcc_h602 = _source186.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source187 = _3526___mcc_h600;
                    if (_source187.is_None) {
                    } else {
                      DAST._IType _3529___mcc_h607 = _source187.dtor_value;
                      DAST._IType _3530_tpe = _3529___mcc_h607;
                      RAST._IType _3531_typ;
                      RAST._IType _out203;
                      _out203 = (this).GenType(_3530_tpe, DCOMP.GenTypeContext.@default());
                      _3531_typ = _out203;
                      if (((_3531_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source186.is_MapBuilderAdd) {
                  } else if (_source186.is_MapBuilderBuild) {
                  } else if (_source186.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_Apply) {
              DAST._IExpression _3532___mcc_h221 = _source117.dtor_expr;
              Dafny.ISequence<DAST._IExpression> _3533___mcc_h222 = _source117.dtor_args;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source188 = _3184_name;
                  if (_source188.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3534___mcc_h609 = _source188.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3535___mcc_h610 = _source188.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3536___mcc_h611 = _source188.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3537___mcc_h612 = _source188.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source189 = _3535___mcc_h610;
                    if (_source189.is_None) {
                    } else {
                      DAST._IType _3538___mcc_h617 = _source189.dtor_value;
                      DAST._IType _3539_tpe = _3538___mcc_h617;
                      RAST._IType _3540_typ;
                      RAST._IType _out204;
                      _out204 = (this).GenType(_3539_tpe, DCOMP.GenTypeContext.@default());
                      _3540_typ = _out204;
                      if (((_3540_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source188.is_MapBuilderAdd) {
                  } else if (_source188.is_MapBuilderBuild) {
                  } else if (_source188.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_TypeTest) {
              DAST._IExpression _3541___mcc_h225 = _source117.dtor_on;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3542___mcc_h226 = _source117.dtor_dType;
              Dafny.ISequence<Dafny.Rune> _3543___mcc_h227 = _source117.dtor_variant;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source190 = _3184_name;
                  if (_source190.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3544___mcc_h619 = _source190.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3545___mcc_h620 = _source190.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3546___mcc_h621 = _source190.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3547___mcc_h622 = _source190.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source191 = _3545___mcc_h620;
                    if (_source191.is_None) {
                    } else {
                      DAST._IType _3548___mcc_h627 = _source191.dtor_value;
                      DAST._IType _3549_tpe = _3548___mcc_h627;
                      RAST._IType _3550_typ;
                      RAST._IType _out205;
                      _out205 = (this).GenType(_3549_tpe, DCOMP.GenTypeContext.@default());
                      _3550_typ = _out205;
                      if (((_3550_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source190.is_MapBuilderAdd) {
                  } else if (_source190.is_MapBuilderBuild) {
                  } else if (_source190.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_InitializationValue) {
              DAST._IType _3551___mcc_h231 = _source117.dtor_typ;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source192 = _3184_name;
                  if (_source192.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3552___mcc_h629 = _source192.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3553___mcc_h630 = _source192.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3554___mcc_h631 = _source192.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3555___mcc_h632 = _source192.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source193 = _3553___mcc_h630;
                    if (_source193.is_None) {
                    } else {
                      DAST._IType _3556___mcc_h637 = _source193.dtor_value;
                      DAST._IType _3557_tpe = _3556___mcc_h637;
                      RAST._IType _3558_typ;
                      RAST._IType _out206;
                      _out206 = (this).GenType(_3557_tpe, DCOMP.GenTypeContext.@default());
                      _3558_typ = _out206;
                      if (((_3558_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source192.is_MapBuilderAdd) {
                  } else if (_source192.is_MapBuilderBuild) {
                  } else if (_source192.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_BoolBoundedPool) {
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source194 = _3184_name;
                  if (_source194.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3559___mcc_h639 = _source194.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3560___mcc_h640 = _source194.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3561___mcc_h641 = _source194.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3562___mcc_h642 = _source194.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source195 = _3560___mcc_h640;
                    if (_source195.is_None) {
                    } else {
                      DAST._IType _3563___mcc_h647 = _source195.dtor_value;
                      DAST._IType _3564_tpe = _3563___mcc_h647;
                      RAST._IType _3565_typ;
                      RAST._IType _out207;
                      _out207 = (this).GenType(_3564_tpe, DCOMP.GenTypeContext.@default());
                      _3565_typ = _out207;
                      if (((_3565_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source194.is_MapBuilderAdd) {
                  } else if (_source194.is_MapBuilderBuild) {
                  } else if (_source194.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_SetBoundedPool) {
              DAST._IExpression _3566___mcc_h233 = _source117.dtor_of;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source196 = _3184_name;
                  if (_source196.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3567___mcc_h649 = _source196.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3568___mcc_h650 = _source196.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3569___mcc_h651 = _source196.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3570___mcc_h652 = _source196.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source197 = _3568___mcc_h650;
                    if (_source197.is_None) {
                    } else {
                      DAST._IType _3571___mcc_h657 = _source197.dtor_value;
                      DAST._IType _3572_tpe = _3571___mcc_h657;
                      RAST._IType _3573_typ;
                      RAST._IType _out208;
                      _out208 = (this).GenType(_3572_tpe, DCOMP.GenTypeContext.@default());
                      _3573_typ = _out208;
                      if (((_3573_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source196.is_MapBuilderAdd) {
                  } else if (_source196.is_MapBuilderBuild) {
                  } else if (_source196.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_MapBoundedPool) {
              DAST._IExpression _3574___mcc_h235 = _source117.dtor_of;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source198 = _3184_name;
                  if (_source198.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3575___mcc_h659 = _source198.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3576___mcc_h660 = _source198.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3577___mcc_h661 = _source198.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3578___mcc_h662 = _source198.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source199 = _3576___mcc_h660;
                    if (_source199.is_None) {
                    } else {
                      DAST._IType _3579___mcc_h667 = _source199.dtor_value;
                      DAST._IType _3580_tpe = _3579___mcc_h667;
                      RAST._IType _3581_typ;
                      RAST._IType _out209;
                      _out209 = (this).GenType(_3580_tpe, DCOMP.GenTypeContext.@default());
                      _3581_typ = _out209;
                      if (((_3581_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source198.is_MapBuilderAdd) {
                  } else if (_source198.is_MapBuilderBuild) {
                  } else if (_source198.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_SeqBoundedPool) {
              DAST._IExpression _3582___mcc_h237 = _source117.dtor_of;
              bool _3583___mcc_h238 = _source117.dtor_includeDuplicates;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source200 = _3184_name;
                  if (_source200.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3584___mcc_h669 = _source200.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3585___mcc_h670 = _source200.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3586___mcc_h671 = _source200.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3587___mcc_h672 = _source200.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source201 = _3585___mcc_h670;
                    if (_source201.is_None) {
                    } else {
                      DAST._IType _3588___mcc_h677 = _source201.dtor_value;
                      DAST._IType _3589_tpe = _3588___mcc_h677;
                      RAST._IType _3590_typ;
                      RAST._IType _out210;
                      _out210 = (this).GenType(_3589_tpe, DCOMP.GenTypeContext.@default());
                      _3590_typ = _out210;
                      if (((_3590_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source200.is_MapBuilderAdd) {
                  } else if (_source200.is_MapBuilderBuild) {
                  } else if (_source200.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_IntRange) {
              DAST._IExpression _3591___mcc_h241 = _source117.dtor_lo;
              DAST._IExpression _3592___mcc_h242 = _source117.dtor_hi;
              bool _3593___mcc_h243 = _source117.dtor_up;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source202 = _3184_name;
                  if (_source202.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3594___mcc_h679 = _source202.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3595___mcc_h680 = _source202.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3596___mcc_h681 = _source202.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3597___mcc_h682 = _source202.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source203 = _3595___mcc_h680;
                    if (_source203.is_None) {
                    } else {
                      DAST._IType _3598___mcc_h687 = _source203.dtor_value;
                      DAST._IType _3599_tpe = _3598___mcc_h687;
                      RAST._IType _3600_typ;
                      RAST._IType _out211;
                      _out211 = (this).GenType(_3599_tpe, DCOMP.GenTypeContext.@default());
                      _3600_typ = _out211;
                      if (((_3600_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source202.is_MapBuilderAdd) {
                  } else if (_source202.is_MapBuilderBuild) {
                  } else if (_source202.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else if (_source117.is_UnboundedIntRange) {
              DAST._IExpression _3601___mcc_h247 = _source117.dtor_start;
              bool _3602___mcc_h248 = _source117.dtor_up;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source204 = _3184_name;
                  if (_source204.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3603___mcc_h689 = _source204.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3604___mcc_h690 = _source204.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3605___mcc_h691 = _source204.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3606___mcc_h692 = _source204.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source205 = _3604___mcc_h690;
                    if (_source205.is_None) {
                    } else {
                      DAST._IType _3607___mcc_h697 = _source205.dtor_value;
                      DAST._IType _3608_tpe = _3607___mcc_h697;
                      RAST._IType _3609_typ;
                      RAST._IType _out212;
                      _out212 = (this).GenType(_3608_tpe, DCOMP.GenTypeContext.@default());
                      _3609_typ = _out212;
                      if (((_3609_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source204.is_MapBuilderAdd) {
                  } else if (_source204.is_MapBuilderBuild) {
                  } else if (_source204.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            } else {
              DAST._IType _3610___mcc_h251 = _source117.dtor_elemType;
              DAST._IExpression _3611___mcc_h252 = _source117.dtor_collection;
              bool _3612___mcc_h253 = _source117.dtor_is__forall;
              DAST._IExpression _3613___mcc_h254 = _source117.dtor_lambda;
              {
                if (!object.Equals(_3190_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source206 = _3184_name;
                  if (_source206.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _3614___mcc_h699 = _source206.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _3615___mcc_h700 = _source206.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _3616___mcc_h701 = _source206.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _3617___mcc_h702 = _source206.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source207 = _3615___mcc_h700;
                    if (_source207.is_None) {
                    } else {
                      DAST._IType _3618___mcc_h707 = _source207.dtor_value;
                      DAST._IType _3619_tpe = _3618___mcc_h707;
                      RAST._IType _3620_typ;
                      RAST._IType _out213;
                      _out213 = (this).GenType(_3619_tpe, DCOMP.GenTypeContext.@default());
                      _3620_typ = _out213;
                      if (((_3620_typ).IsObjectOrPointer()) && (!object.Equals(_3190_onExpr, RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))))) {
                        _3190_onExpr = ((this).modify__macro).Apply1(_3190_onExpr);
                      }
                    }
                  } else if (_source206.is_MapBuilderAdd) {
                  } else if (_source206.is_MapBuilderBuild) {
                  } else if (_source206.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _3190_onExpr = (_3190_onExpr).Sel(_3193_renderedName);
              }
            }
            generated = ((_3190_onExpr).ApplyType(_3188_typeExprs)).Apply(_3186_argExprs);
          } else {
            DAST._IResolvedType _3621___mcc_h27 = _source115.dtor_value;
            DAST._IResolvedType _source208 = _3621___mcc_h27;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3622___mcc_h29 = _source208.dtor_path;
            Dafny.ISequence<DAST._IType> _3623___mcc_h30 = _source208.dtor_typeArgs;
            DAST._IResolvedTypeBase _3624___mcc_h31 = _source208.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _3625___mcc_h32 = _source208.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3626___mcc_h33 = _source208.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _3627___mcc_h34 = _source208.dtor_extendedTypes;
            DAST._IResolvedTypeBase _3628_base = _3624___mcc_h31;
            Dafny.ISequence<DAST._IType> _3629_onTypeArgs = _3623___mcc_h30;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3630_path = _3622___mcc_h29;
            RAST._IExpr _3631_fullPath;
            RAST._IExpr _out214;
            _out214 = DCOMP.COMP.GenPathExpr(_3630_path);
            _3631_fullPath = _out214;
            Dafny.ISequence<RAST._IType> _3632_onTypeExprs;
            Dafny.ISequence<RAST._IType> _out215;
            _out215 = (this).GenTypeArgs(_3629_onTypeArgs, DCOMP.GenTypeContext.@default());
            _3632_onTypeExprs = _out215;
            RAST._IExpr _3633_onExpr = RAST.Expr.Default();
            DCOMP._IOwnership _3634_recOwnership = DCOMP.Ownership.Default();
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3635_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
            if (((_3628_base).is_Trait) || ((_3628_base).is_Class)) {
              RAST._IExpr _out216;
              DCOMP._IOwnership _out217;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out218;
              (this).GenExpr(_3185_on, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out216, out _out217, out _out218);
              _3633_onExpr = _out216;
              _3634_recOwnership = _out217;
              _3635_recIdents = _out218;
              _3633_onExpr = ((this).modify__macro).Apply1(_3633_onExpr);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3635_recIdents);
            } else {
              RAST._IExpr _out219;
              DCOMP._IOwnership _out220;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out221;
              (this).GenExpr(_3185_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowedMut(), out _out219, out _out220, out _out221);
              _3633_onExpr = _out219;
              _3634_recOwnership = _out220;
              _3635_recIdents = _out221;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3635_recIdents);
            }
            generated = ((((_3631_fullPath).ApplyType(_3632_onTypeExprs)).MSel(DCOMP.__default.escapeName((_3184_name).dtor_name))).ApplyType(_3188_typeExprs)).Apply(Dafny.Sequence<RAST._IExpr>.Concat(Dafny.Sequence<RAST._IExpr>.FromElements(_3633_onExpr), _3186_argExprs));
          }
          if (((_3181_maybeOutVars).is_Some) && ((new BigInteger(((_3181_maybeOutVars).dtor_value).Count)) == (BigInteger.One))) {
            Dafny.ISequence<Dafny.Rune> _3636_outVar;
            _3636_outVar = DCOMP.__default.escapeName((((_3181_maybeOutVars).dtor_value).Select(BigInteger.Zero)));
            if (!((env).CanReadWithoutClone(_3636_outVar))) {
              generated = RAST.__default.MaybePlacebo(generated);
            }
            generated = RAST.__default.AssignVar(_3636_outVar, generated);
          } else if (((_3181_maybeOutVars).is_None) || ((new BigInteger(((_3181_maybeOutVars).dtor_value).Count)).Sign == 0)) {
          } else {
            Dafny.ISequence<Dafny.Rune> _3637_tmpVar;
            _3637_tmpVar = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_x");
            RAST._IExpr _3638_tmpId;
            _3638_tmpId = RAST.Expr.create_Identifier(_3637_tmpVar);
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), _3637_tmpVar, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(generated));
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3639_outVars;
            _3639_outVars = (_3181_maybeOutVars).dtor_value;
            BigInteger _hi32 = new BigInteger((_3639_outVars).Count);
            for (BigInteger _3640_outI = BigInteger.Zero; _3640_outI < _hi32; _3640_outI++) {
              Dafny.ISequence<Dafny.Rune> _3641_outVar;
              _3641_outVar = DCOMP.__default.escapeName(((_3639_outVars).Select(_3640_outI)));
              RAST._IExpr _3642_rhs;
              _3642_rhs = (_3638_tmpId).Sel(Std.Strings.__default.OfNat(_3640_outI));
              if (!((env).CanReadWithoutClone(_3641_outVar))) {
                _3642_rhs = RAST.__default.MaybePlacebo(_3642_rhs);
              }
              generated = (generated).Then(RAST.__default.AssignVar(_3641_outVar, _3642_rhs));
            }
          }
          newEnv = env;
        }
      } else if (_source113.is_Return) {
        DAST._IExpression _3643___mcc_h22 = _source113.dtor_expr;
        DAST._IExpression _3644_exprDafny = _3643___mcc_h22;
        {
          RAST._IExpr _3645_expr;
          DCOMP._IOwnership _3646___v95;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3647_recIdents;
          RAST._IExpr _out222;
          DCOMP._IOwnership _out223;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out224;
          (this).GenExpr(_3644_exprDafny, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out222, out _out223, out _out224);
          _3645_expr = _out222;
          _3646___v95 = _out223;
          _3647_recIdents = _out224;
          readIdents = _3647_recIdents;
          if (isLast) {
            generated = _3645_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_3645_expr));
          }
          newEnv = env;
        }
      } else if (_source113.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
        }
      } else if (_source113.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3648___mcc_h23 = _source113.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3649_toLabel = _3648___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source209 = _3649_toLabel;
          if (_source209.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3650___mcc_h709 = _source209.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3651_lbl = _3650___mcc_h709;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _3651_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
        }
      } else if (_source113.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _3652___mcc_h24 = _source113.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3653_body = _3652___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, DCOMP.SelfInfo.create_NoSelf())) {
            RAST._IExpr _3654_selfClone;
            DCOMP._IOwnership _3655___v76;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3656___v77;
            RAST._IExpr _out225;
            DCOMP._IOwnership _out226;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out227;
            (this).GenIdent((selfIdent).dtor_rSelfName, selfIdent, DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out225, out _out226, out _out227);
            _3654_selfClone = _out225;
            _3655___v76 = _out226;
            _3656___v77 = _out227;
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_3654_selfClone)));
          }
          newEnv = env;
          BigInteger _hi33 = new BigInteger(((env).dtor_names).Count);
          for (BigInteger _3657_paramI = BigInteger.Zero; _3657_paramI < _hi33; _3657_paramI++) {
            Dafny.ISequence<Dafny.Rune> _3658_param;
            _3658_param = ((env).dtor_names).Select(_3657_paramI);
            RAST._IExpr _3659_paramInit;
            DCOMP._IOwnership _3660___v78;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3661___v79;
            RAST._IExpr _out228;
            DCOMP._IOwnership _out229;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
            (this).GenIdent(_3658_param, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out228, out _out229, out _out230);
            _3659_paramInit = _out228;
            _3660___v78 = _out229;
            _3661___v79 = _out230;
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), _3658_param, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_3659_paramInit)));
            if (((env).dtor_types).Contains(_3658_param)) {
              RAST._IType _3662_declaredType;
              _3662_declaredType = (Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Select((env).dtor_types,_3658_param)).ToOwned();
              newEnv = (newEnv).AddAssigned(_3658_param, _3662_declaredType);
            }
          }
          RAST._IExpr _3663_bodyExpr;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3664_bodyIdents;
          DCOMP._IEnvironment _3665_bodyEnv;
          RAST._IExpr _out231;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out232;
          DCOMP._IEnvironment _out233;
          (this).GenStmts(_3653_body, ((!object.Equals(selfIdent, DCOMP.SelfInfo.create_NoSelf())) ? (DCOMP.SelfInfo.create_ThisTyped(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), (selfIdent).dtor_dafnyType)) : (DCOMP.SelfInfo.create_NoSelf())), newEnv, false, earlyReturn, out _out231, out _out232, out _out233);
          _3663_bodyExpr = _out231;
          _3664_bodyIdents = _out232;
          _3665_bodyEnv = _out233;
          readIdents = _3664_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _3663_bodyExpr)));
        }
      } else if (_source113.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
        }
      } else if (_source113.is_Halt) {
        {
          generated = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!"))).Apply1(RAST.Expr.create_LiteralString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Halt"), false));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
        }
      } else if (_source113.is_Print) {
        DAST._IExpression _3666___mcc_h25 = _source113.dtor_Print_i_a0;
        DAST._IExpression _3667_e = _3666___mcc_h25;
        {
          RAST._IExpr _3668_printedExpr;
          DCOMP._IOwnership _3669_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3670_recIdents;
          RAST._IExpr _out234;
          DCOMP._IOwnership _out235;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out236;
          (this).GenExpr(_3667_e, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out234, out _out235, out _out236);
          _3668_printedExpr = _out234;
          _3669_recOwnership = _out235;
          _3670_recIdents = _out236;
          generated = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_LiteralString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{}"), false), ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyPrintWrapper"))).Apply1(_3668_printedExpr)));
          readIdents = _3670_recIdents;
          newEnv = env;
        }
      } else {
        Dafny.ISequence<DAST._IFormal> _3671___mcc_h26 = _source113.dtor_fields;
        Dafny.ISequence<DAST._IFormal> _3672_fields = _3671___mcc_h26;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          newEnv = env;
          BigInteger _hi34 = new BigInteger((_3672_fields).Count);
          for (BigInteger _3673_i = BigInteger.Zero; _3673_i < _hi34; _3673_i++) {
            DAST._IFormal _3674_field;
            _3674_field = (_3672_fields).Select(_3673_i);
            Dafny.ISequence<Dafny.Rune> _3675_fieldName;
            _3675_fieldName = DCOMP.__default.escapeName((_3674_field).dtor_name);
            RAST._IType _3676_fieldTyp;
            RAST._IType _out237;
            _out237 = (this).GenType((_3674_field).dtor_typ, DCOMP.GenTypeContext.@default());
            _3676_fieldTyp = _out237;
            Dafny.ISequence<Dafny.Rune> _3677_isAssignedVar;
            _3677_isAssignedVar = DCOMP.__default.AddAssignedPrefix(_3675_fieldName);
            if (((newEnv).dtor_names).Contains(_3677_isAssignedVar)) {
              RAST._IExpr _3678_rhs;
              DCOMP._IOwnership _3679___v70;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3680___v71;
              RAST._IExpr _out238;
              DCOMP._IOwnership _out239;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out240;
              (this).GenExpr(DAST.Expression.create_InitializationValue((_3674_field).dtor_typ), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out238, out _out239, out _out240);
              _3678_rhs = _out238;
              _3679___v70 = _out239;
              _3680___v71 = _out240;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3677_isAssignedVar));
              generated = (generated).Then(((RAST.__default.dafny__runtime).MSel((this).update__field__if__uninit__macro)).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")), RAST.Expr.create_Identifier(_3675_fieldName), RAST.Expr.create_Identifier(_3677_isAssignedVar), _3678_rhs)));
              newEnv = (newEnv).RemoveAssigned(_3677_isAssignedVar);
            }
          }
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source210 = range;
      if (_source210.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source210.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source210.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source210.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source210.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source210.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source210.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source210.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source210.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source210.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source210.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public void FromOwned(RAST._IExpr r, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
        @out = RAST.__default.BoxNew(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwnedBox();
      } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        @out = ((this).modify__macro).Apply1(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((r)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/*TODO: Conversion from Borrowed or BorrowedMut to BorrowedMut*/"))));
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public void FromOwnership(RAST._IExpr r, DCOMP._IOwnership ownership, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(ownership, expectedOwnership)) {
        @out = r;
        resultingOwnership = expectedOwnership;
        return ;
      }
      if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out241;
        DCOMP._IOwnership _out242;
        (this).FromOwned(r, expectedOwnership, out _out241, out _out242);
        @out = _out241;
        resultingOwnership = _out242;
        return ;
      } else if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
        RAST._IExpr _out243;
        DCOMP._IOwnership _out244;
        (this).FromOwned(RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), r, DAST.Format.UnaryOpFormat.create_NoFormat()), expectedOwnership, out _out243, out _out244);
        @out = _out243;
        resultingOwnership = _out244;
      } else if ((object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          @out = (r).Clone();
        } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwnedBox();
          @out = RAST.__default.BoxNew((r).Clone());
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static bool OwnershipGuarantee(DCOMP._IOwnership expectedOwnership, DCOMP._IOwnership resultingOwnership)
    {
      return (!(!object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) || (object.Equals(resultingOwnership, expectedOwnership))) && (!object.Equals(resultingOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()));
    }
    public void GenExprLiteral(DAST._IExpression e, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source211 = e;
      DAST._ILiteral _3681___mcc_h0 = _source211.dtor_Literal_i_a0;
      DAST._ILiteral _source212 = _3681___mcc_h0;
      if (_source212.is_BoolLiteral) {
        bool _3682___mcc_h1 = _source212.dtor_BoolLiteral_i_a0;
        bool _3683_b = _3682___mcc_h1;
        {
          RAST._IExpr _out245;
          DCOMP._IOwnership _out246;
          (this).FromOwned(RAST.Expr.create_LiteralBool(_3683_b), expectedOwnership, out _out245, out _out246);
          r = _out245;
          resultingOwnership = _out246;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source212.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _3684___mcc_h2 = _source212.dtor_IntLiteral_i_a0;
        DAST._IType _3685___mcc_h3 = _source212.dtor_IntLiteral_i_a1;
        DAST._IType _3686_t = _3685___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _3687_i = _3684___mcc_h2;
        {
          DAST._IType _source213 = _3686_t;
          if (_source213.is_UserDefined) {
            DAST._IResolvedType _3688___mcc_h116 = _source213.dtor_resolved;
            DAST._IType _3689_o = _3686_t;
            {
              RAST._IType _3690_genType;
              RAST._IType _out247;
              _out247 = (this).GenType(_3689_o, DCOMP.GenTypeContext.@default());
              _3690_genType = _out247;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3690_genType);
            }
          } else if (_source213.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3691___mcc_h118 = _source213.dtor_Tuple_i_a0;
            DAST._IType _3692_o = _3686_t;
            {
              RAST._IType _3693_genType;
              RAST._IType _out248;
              _out248 = (this).GenType(_3692_o, DCOMP.GenTypeContext.@default());
              _3693_genType = _out248;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3693_genType);
            }
          } else if (_source213.is_Array) {
            DAST._IType _3694___mcc_h120 = _source213.dtor_element;
            BigInteger _3695___mcc_h121 = _source213.dtor_dims;
            DAST._IType _3696_o = _3686_t;
            {
              RAST._IType _3697_genType;
              RAST._IType _out249;
              _out249 = (this).GenType(_3696_o, DCOMP.GenTypeContext.@default());
              _3697_genType = _out249;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3697_genType);
            }
          } else if (_source213.is_Seq) {
            DAST._IType _3698___mcc_h124 = _source213.dtor_element;
            DAST._IType _3699_o = _3686_t;
            {
              RAST._IType _3700_genType;
              RAST._IType _out250;
              _out250 = (this).GenType(_3699_o, DCOMP.GenTypeContext.@default());
              _3700_genType = _out250;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3700_genType);
            }
          } else if (_source213.is_Set) {
            DAST._IType _3701___mcc_h126 = _source213.dtor_element;
            DAST._IType _3702_o = _3686_t;
            {
              RAST._IType _3703_genType;
              RAST._IType _out251;
              _out251 = (this).GenType(_3702_o, DCOMP.GenTypeContext.@default());
              _3703_genType = _out251;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3703_genType);
            }
          } else if (_source213.is_Multiset) {
            DAST._IType _3704___mcc_h128 = _source213.dtor_element;
            DAST._IType _3705_o = _3686_t;
            {
              RAST._IType _3706_genType;
              RAST._IType _out252;
              _out252 = (this).GenType(_3705_o, DCOMP.GenTypeContext.@default());
              _3706_genType = _out252;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3706_genType);
            }
          } else if (_source213.is_Map) {
            DAST._IType _3707___mcc_h130 = _source213.dtor_key;
            DAST._IType _3708___mcc_h131 = _source213.dtor_value;
            DAST._IType _3709_o = _3686_t;
            {
              RAST._IType _3710_genType;
              RAST._IType _out253;
              _out253 = (this).GenType(_3709_o, DCOMP.GenTypeContext.@default());
              _3710_genType = _out253;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3710_genType);
            }
          } else if (_source213.is_SetBuilder) {
            DAST._IType _3711___mcc_h134 = _source213.dtor_element;
            DAST._IType _3712_o = _3686_t;
            {
              RAST._IType _3713_genType;
              RAST._IType _out254;
              _out254 = (this).GenType(_3712_o, DCOMP.GenTypeContext.@default());
              _3713_genType = _out254;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3713_genType);
            }
          } else if (_source213.is_MapBuilder) {
            DAST._IType _3714___mcc_h136 = _source213.dtor_key;
            DAST._IType _3715___mcc_h137 = _source213.dtor_value;
            DAST._IType _3716_o = _3686_t;
            {
              RAST._IType _3717_genType;
              RAST._IType _out255;
              _out255 = (this).GenType(_3716_o, DCOMP.GenTypeContext.@default());
              _3717_genType = _out255;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3717_genType);
            }
          } else if (_source213.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3718___mcc_h140 = _source213.dtor_args;
            DAST._IType _3719___mcc_h141 = _source213.dtor_result;
            DAST._IType _3720_o = _3686_t;
            {
              RAST._IType _3721_genType;
              RAST._IType _out256;
              _out256 = (this).GenType(_3720_o, DCOMP.GenTypeContext.@default());
              _3721_genType = _out256;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3721_genType);
            }
          } else if (_source213.is_Primitive) {
            DAST._IPrimitive _3722___mcc_h144 = _source213.dtor_Primitive_i_a0;
            DAST._IPrimitive _source214 = _3722___mcc_h144;
            if (_source214.is_Int) {
              {
                if ((new BigInteger((_3687_i).Count)) <= (new BigInteger(4))) {
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(RAST.Expr.create_LiteralInt(_3687_i));
                } else {
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(RAST.Expr.create_LiteralString(_3687_i, true));
                }
              }
            } else if (_source214.is_Real) {
              DAST._IType _3723_o = _3686_t;
              {
                RAST._IType _3724_genType;
                RAST._IType _out257;
                _out257 = (this).GenType(_3723_o, DCOMP.GenTypeContext.@default());
                _3724_genType = _out257;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3724_genType);
              }
            } else if (_source214.is_String) {
              DAST._IType _3725_o = _3686_t;
              {
                RAST._IType _3726_genType;
                RAST._IType _out258;
                _out258 = (this).GenType(_3725_o, DCOMP.GenTypeContext.@default());
                _3726_genType = _out258;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3726_genType);
              }
            } else if (_source214.is_Bool) {
              DAST._IType _3727_o = _3686_t;
              {
                RAST._IType _3728_genType;
                RAST._IType _out259;
                _out259 = (this).GenType(_3727_o, DCOMP.GenTypeContext.@default());
                _3728_genType = _out259;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3728_genType);
              }
            } else {
              DAST._IType _3729_o = _3686_t;
              {
                RAST._IType _3730_genType;
                RAST._IType _out260;
                _out260 = (this).GenType(_3729_o, DCOMP.GenTypeContext.@default());
                _3730_genType = _out260;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3730_genType);
              }
            }
          } else if (_source213.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3731___mcc_h146 = _source213.dtor_Passthrough_i_a0;
            DAST._IType _3732_o = _3686_t;
            {
              RAST._IType _3733_genType;
              RAST._IType _out261;
              _out261 = (this).GenType(_3732_o, DCOMP.GenTypeContext.@default());
              _3733_genType = _out261;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3733_genType);
            }
          } else if (_source213.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _3734___mcc_h148 = _source213.dtor_TypeArg_i_a0;
            DAST._IType _3735_o = _3686_t;
            {
              RAST._IType _3736_genType;
              RAST._IType _out262;
              _out262 = (this).GenType(_3735_o, DCOMP.GenTypeContext.@default());
              _3736_genType = _out262;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3736_genType);
            }
          } else {
            DAST._IType _3737_o = _3686_t;
            {
              RAST._IType _3738_genType;
              RAST._IType _out263;
              _out263 = (this).GenType(_3737_o, DCOMP.GenTypeContext.@default());
              _3738_genType = _out263;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3687_i), _3738_genType);
            }
          }
          RAST._IExpr _out264;
          DCOMP._IOwnership _out265;
          (this).FromOwned(r, expectedOwnership, out _out264, out _out265);
          r = _out264;
          resultingOwnership = _out265;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source212.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _3739___mcc_h4 = _source212.dtor_DecLiteral_i_a0;
        Dafny.ISequence<Dafny.Rune> _3740___mcc_h5 = _source212.dtor_DecLiteral_i_a1;
        DAST._IType _3741___mcc_h6 = _source212.dtor_DecLiteral_i_a2;
        DAST._IType _3742_t = _3741___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _3743_d = _3740___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _3744_n = _3739___mcc_h4;
        {
          DAST._IType _source215 = _3742_t;
          if (_source215.is_UserDefined) {
            DAST._IResolvedType _3745___mcc_h150 = _source215.dtor_resolved;
            DAST._IType _3746_o = _3742_t;
            {
              RAST._IType _3747_genType;
              RAST._IType _out266;
              _out266 = (this).GenType(_3746_o, DCOMP.GenTypeContext.@default());
              _3747_genType = _out266;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3747_genType);
            }
          } else if (_source215.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3748___mcc_h152 = _source215.dtor_Tuple_i_a0;
            DAST._IType _3749_o = _3742_t;
            {
              RAST._IType _3750_genType;
              RAST._IType _out267;
              _out267 = (this).GenType(_3749_o, DCOMP.GenTypeContext.@default());
              _3750_genType = _out267;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3750_genType);
            }
          } else if (_source215.is_Array) {
            DAST._IType _3751___mcc_h154 = _source215.dtor_element;
            BigInteger _3752___mcc_h155 = _source215.dtor_dims;
            DAST._IType _3753_o = _3742_t;
            {
              RAST._IType _3754_genType;
              RAST._IType _out268;
              _out268 = (this).GenType(_3753_o, DCOMP.GenTypeContext.@default());
              _3754_genType = _out268;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3754_genType);
            }
          } else if (_source215.is_Seq) {
            DAST._IType _3755___mcc_h158 = _source215.dtor_element;
            DAST._IType _3756_o = _3742_t;
            {
              RAST._IType _3757_genType;
              RAST._IType _out269;
              _out269 = (this).GenType(_3756_o, DCOMP.GenTypeContext.@default());
              _3757_genType = _out269;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3757_genType);
            }
          } else if (_source215.is_Set) {
            DAST._IType _3758___mcc_h160 = _source215.dtor_element;
            DAST._IType _3759_o = _3742_t;
            {
              RAST._IType _3760_genType;
              RAST._IType _out270;
              _out270 = (this).GenType(_3759_o, DCOMP.GenTypeContext.@default());
              _3760_genType = _out270;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3760_genType);
            }
          } else if (_source215.is_Multiset) {
            DAST._IType _3761___mcc_h162 = _source215.dtor_element;
            DAST._IType _3762_o = _3742_t;
            {
              RAST._IType _3763_genType;
              RAST._IType _out271;
              _out271 = (this).GenType(_3762_o, DCOMP.GenTypeContext.@default());
              _3763_genType = _out271;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3763_genType);
            }
          } else if (_source215.is_Map) {
            DAST._IType _3764___mcc_h164 = _source215.dtor_key;
            DAST._IType _3765___mcc_h165 = _source215.dtor_value;
            DAST._IType _3766_o = _3742_t;
            {
              RAST._IType _3767_genType;
              RAST._IType _out272;
              _out272 = (this).GenType(_3766_o, DCOMP.GenTypeContext.@default());
              _3767_genType = _out272;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3767_genType);
            }
          } else if (_source215.is_SetBuilder) {
            DAST._IType _3768___mcc_h168 = _source215.dtor_element;
            DAST._IType _3769_o = _3742_t;
            {
              RAST._IType _3770_genType;
              RAST._IType _out273;
              _out273 = (this).GenType(_3769_o, DCOMP.GenTypeContext.@default());
              _3770_genType = _out273;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3770_genType);
            }
          } else if (_source215.is_MapBuilder) {
            DAST._IType _3771___mcc_h170 = _source215.dtor_key;
            DAST._IType _3772___mcc_h171 = _source215.dtor_value;
            DAST._IType _3773_o = _3742_t;
            {
              RAST._IType _3774_genType;
              RAST._IType _out274;
              _out274 = (this).GenType(_3773_o, DCOMP.GenTypeContext.@default());
              _3774_genType = _out274;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3774_genType);
            }
          } else if (_source215.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3775___mcc_h174 = _source215.dtor_args;
            DAST._IType _3776___mcc_h175 = _source215.dtor_result;
            DAST._IType _3777_o = _3742_t;
            {
              RAST._IType _3778_genType;
              RAST._IType _out275;
              _out275 = (this).GenType(_3777_o, DCOMP.GenTypeContext.@default());
              _3778_genType = _out275;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3778_genType);
            }
          } else if (_source215.is_Primitive) {
            DAST._IPrimitive _3779___mcc_h178 = _source215.dtor_Primitive_i_a0;
            DAST._IPrimitive _source216 = _3779___mcc_h178;
            if (_source216.is_Int) {
              DAST._IType _3780_o = _3742_t;
              {
                RAST._IType _3781_genType;
                RAST._IType _out276;
                _out276 = (this).GenType(_3780_o, DCOMP.GenTypeContext.@default());
                _3781_genType = _out276;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3781_genType);
              }
            } else if (_source216.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source216.is_String) {
              DAST._IType _3782_o = _3742_t;
              {
                RAST._IType _3783_genType;
                RAST._IType _out277;
                _out277 = (this).GenType(_3782_o, DCOMP.GenTypeContext.@default());
                _3783_genType = _out277;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3783_genType);
              }
            } else if (_source216.is_Bool) {
              DAST._IType _3784_o = _3742_t;
              {
                RAST._IType _3785_genType;
                RAST._IType _out278;
                _out278 = (this).GenType(_3784_o, DCOMP.GenTypeContext.@default());
                _3785_genType = _out278;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3785_genType);
              }
            } else {
              DAST._IType _3786_o = _3742_t;
              {
                RAST._IType _3787_genType;
                RAST._IType _out279;
                _out279 = (this).GenType(_3786_o, DCOMP.GenTypeContext.@default());
                _3787_genType = _out279;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3787_genType);
              }
            }
          } else if (_source215.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3788___mcc_h180 = _source215.dtor_Passthrough_i_a0;
            DAST._IType _3789_o = _3742_t;
            {
              RAST._IType _3790_genType;
              RAST._IType _out280;
              _out280 = (this).GenType(_3789_o, DCOMP.GenTypeContext.@default());
              _3790_genType = _out280;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3790_genType);
            }
          } else if (_source215.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _3791___mcc_h182 = _source215.dtor_TypeArg_i_a0;
            DAST._IType _3792_o = _3742_t;
            {
              RAST._IType _3793_genType;
              RAST._IType _out281;
              _out281 = (this).GenType(_3792_o, DCOMP.GenTypeContext.@default());
              _3793_genType = _out281;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3793_genType);
            }
          } else {
            DAST._IType _3794_o = _3742_t;
            {
              RAST._IType _3795_genType;
              RAST._IType _out282;
              _out282 = (this).GenType(_3794_o, DCOMP.GenTypeContext.@default());
              _3795_genType = _out282;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3743_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3795_genType);
            }
          }
          RAST._IExpr _out283;
          DCOMP._IOwnership _out284;
          (this).FromOwned(r, expectedOwnership, out _out283, out _out284);
          r = _out283;
          resultingOwnership = _out284;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source212.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _3796___mcc_h7 = _source212.dtor_StringLiteral_i_a0;
        Dafny.ISequence<Dafny.Rune> _3797_l = _3796___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel((this).string__of)).Apply1(RAST.Expr.create_LiteralString(_3797_l, false));
          RAST._IExpr _out285;
          DCOMP._IOwnership _out286;
          (this).FromOwned(r, expectedOwnership, out _out285, out _out286);
          r = _out285;
          resultingOwnership = _out286;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source212.is_CharLiteral) {
        Dafny.Rune _3798___mcc_h8 = _source212.dtor_CharLiteral_i_a0;
        Dafny.Rune _3799_c = _3798___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_3799_c).Value)));
          if (!((this).UnicodeChars)) {
            r = RAST.Expr.create_TypeAscription(r, RAST.Type.create_U16());
          } else {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u32"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          r = ((RAST.__default.dafny__runtime).MSel((this).DafnyChar)).Apply1(r);
          RAST._IExpr _out287;
          DCOMP._IOwnership _out288;
          (this).FromOwned(r, expectedOwnership, out _out287, out _out288);
          r = _out287;
          resultingOwnership = _out288;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _3800___mcc_h9 = _source212.dtor_Null_i_a0;
        DAST._IType _3801_tpe = _3800___mcc_h9;
        {
          RAST._IType _3802_tpeGen;
          RAST._IType _out289;
          _out289 = (this).GenType(_3801_tpe, DCOMP.GenTypeContext.@default());
          _3802_tpeGen = _out289;
          if (((this).ObjectType).is_RawPointers) {
            r = ((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ptr"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null"));
          } else {
            r = RAST.Expr.create_TypeAscription(((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Object"))).Apply1(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None"))), _3802_tpeGen);
          }
          RAST._IExpr _out290;
          DCOMP._IOwnership _out291;
          (this).FromOwned(r, expectedOwnership, out _out290, out _out291);
          r = _out290;
          resultingOwnership = _out291;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public void GenExprBinary(DAST._IExpression e, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs53 = e;
      DAST._IBinOp _3803_op = _let_tmp_rhs53.dtor_op;
      DAST._IExpression _3804_lExpr = _let_tmp_rhs53.dtor_left;
      DAST._IExpression _3805_rExpr = _let_tmp_rhs53.dtor_right;
      DAST.Format._IBinaryOpFormat _3806_format = _let_tmp_rhs53.dtor_format2;
      bool _3807_becomesLeftCallsRight;
      _3807_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source217) => {
        if (_source217.is_Eq) {
          bool _3808___mcc_h0 = _source217.dtor_referential;
          return false;
        } else if (_source217.is_Div) {
          return false;
        } else if (_source217.is_EuclidianDiv) {
          return false;
        } else if (_source217.is_Mod) {
          return false;
        } else if (_source217.is_EuclidianMod) {
          return false;
        } else if (_source217.is_Lt) {
          return false;
        } else if (_source217.is_LtChar) {
          return false;
        } else if (_source217.is_Plus) {
          return false;
        } else if (_source217.is_Minus) {
          return false;
        } else if (_source217.is_Times) {
          return false;
        } else if (_source217.is_BitwiseAnd) {
          return false;
        } else if (_source217.is_BitwiseOr) {
          return false;
        } else if (_source217.is_BitwiseXor) {
          return false;
        } else if (_source217.is_BitwiseShiftRight) {
          return false;
        } else if (_source217.is_BitwiseShiftLeft) {
          return false;
        } else if (_source217.is_And) {
          return false;
        } else if (_source217.is_Or) {
          return false;
        } else if (_source217.is_In) {
          return false;
        } else if (_source217.is_SeqProperPrefix) {
          return false;
        } else if (_source217.is_SeqPrefix) {
          return false;
        } else if (_source217.is_SetMerge) {
          return true;
        } else if (_source217.is_SetSubtraction) {
          return true;
        } else if (_source217.is_SetIntersection) {
          return true;
        } else if (_source217.is_Subset) {
          return false;
        } else if (_source217.is_ProperSubset) {
          return false;
        } else if (_source217.is_SetDisjoint) {
          return true;
        } else if (_source217.is_MapMerge) {
          return true;
        } else if (_source217.is_MapSubtraction) {
          return true;
        } else if (_source217.is_MultisetMerge) {
          return true;
        } else if (_source217.is_MultisetSubtraction) {
          return true;
        } else if (_source217.is_MultisetIntersection) {
          return true;
        } else if (_source217.is_Submultiset) {
          return false;
        } else if (_source217.is_ProperSubmultiset) {
          return false;
        } else if (_source217.is_MultisetDisjoint) {
          return true;
        } else if (_source217.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _3809___mcc_h2 = _source217.dtor_Passthrough_i_a0;
          return false;
        }
      }))(_3803_op);
      bool _3810_becomesRightCallsLeft;
      _3810_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source218) => {
        if (_source218.is_Eq) {
          bool _3811___mcc_h4 = _source218.dtor_referential;
          return false;
        } else if (_source218.is_Div) {
          return false;
        } else if (_source218.is_EuclidianDiv) {
          return false;
        } else if (_source218.is_Mod) {
          return false;
        } else if (_source218.is_EuclidianMod) {
          return false;
        } else if (_source218.is_Lt) {
          return false;
        } else if (_source218.is_LtChar) {
          return false;
        } else if (_source218.is_Plus) {
          return false;
        } else if (_source218.is_Minus) {
          return false;
        } else if (_source218.is_Times) {
          return false;
        } else if (_source218.is_BitwiseAnd) {
          return false;
        } else if (_source218.is_BitwiseOr) {
          return false;
        } else if (_source218.is_BitwiseXor) {
          return false;
        } else if (_source218.is_BitwiseShiftRight) {
          return false;
        } else if (_source218.is_BitwiseShiftLeft) {
          return false;
        } else if (_source218.is_And) {
          return false;
        } else if (_source218.is_Or) {
          return false;
        } else if (_source218.is_In) {
          return true;
        } else if (_source218.is_SeqProperPrefix) {
          return false;
        } else if (_source218.is_SeqPrefix) {
          return false;
        } else if (_source218.is_SetMerge) {
          return false;
        } else if (_source218.is_SetSubtraction) {
          return false;
        } else if (_source218.is_SetIntersection) {
          return false;
        } else if (_source218.is_Subset) {
          return false;
        } else if (_source218.is_ProperSubset) {
          return false;
        } else if (_source218.is_SetDisjoint) {
          return false;
        } else if (_source218.is_MapMerge) {
          return false;
        } else if (_source218.is_MapSubtraction) {
          return false;
        } else if (_source218.is_MultisetMerge) {
          return false;
        } else if (_source218.is_MultisetSubtraction) {
          return false;
        } else if (_source218.is_MultisetIntersection) {
          return false;
        } else if (_source218.is_Submultiset) {
          return false;
        } else if (_source218.is_ProperSubmultiset) {
          return false;
        } else if (_source218.is_MultisetDisjoint) {
          return false;
        } else if (_source218.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _3812___mcc_h6 = _source218.dtor_Passthrough_i_a0;
          return false;
        }
      }))(_3803_op);
      bool _3813_becomesCallLeftRight;
      _3813_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source219) => {
        if (_source219.is_Eq) {
          bool _3814___mcc_h8 = _source219.dtor_referential;
          if ((_3814___mcc_h8) == (true)) {
            return false;
          } else {
            return false;
          }
        } else if (_source219.is_Div) {
          return false;
        } else if (_source219.is_EuclidianDiv) {
          return false;
        } else if (_source219.is_Mod) {
          return false;
        } else if (_source219.is_EuclidianMod) {
          return false;
        } else if (_source219.is_Lt) {
          return false;
        } else if (_source219.is_LtChar) {
          return false;
        } else if (_source219.is_Plus) {
          return false;
        } else if (_source219.is_Minus) {
          return false;
        } else if (_source219.is_Times) {
          return false;
        } else if (_source219.is_BitwiseAnd) {
          return false;
        } else if (_source219.is_BitwiseOr) {
          return false;
        } else if (_source219.is_BitwiseXor) {
          return false;
        } else if (_source219.is_BitwiseShiftRight) {
          return false;
        } else if (_source219.is_BitwiseShiftLeft) {
          return false;
        } else if (_source219.is_And) {
          return false;
        } else if (_source219.is_Or) {
          return false;
        } else if (_source219.is_In) {
          return false;
        } else if (_source219.is_SeqProperPrefix) {
          return false;
        } else if (_source219.is_SeqPrefix) {
          return false;
        } else if (_source219.is_SetMerge) {
          return true;
        } else if (_source219.is_SetSubtraction) {
          return true;
        } else if (_source219.is_SetIntersection) {
          return true;
        } else if (_source219.is_Subset) {
          return false;
        } else if (_source219.is_ProperSubset) {
          return false;
        } else if (_source219.is_SetDisjoint) {
          return true;
        } else if (_source219.is_MapMerge) {
          return true;
        } else if (_source219.is_MapSubtraction) {
          return true;
        } else if (_source219.is_MultisetMerge) {
          return true;
        } else if (_source219.is_MultisetSubtraction) {
          return true;
        } else if (_source219.is_MultisetIntersection) {
          return true;
        } else if (_source219.is_Submultiset) {
          return false;
        } else if (_source219.is_ProperSubmultiset) {
          return false;
        } else if (_source219.is_MultisetDisjoint) {
          return true;
        } else if (_source219.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _3815___mcc_h10 = _source219.dtor_Passthrough_i_a0;
          return false;
        }
      }))(_3803_op);
      DCOMP._IOwnership _3816_expectedLeftOwnership;
      _3816_expectedLeftOwnership = ((_3807_becomesLeftCallsRight) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : ((((_3810_becomesRightCallsLeft) || (_3813_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      DCOMP._IOwnership _3817_expectedRightOwnership;
      _3817_expectedRightOwnership = (((_3807_becomesLeftCallsRight) || (_3813_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (((_3810_becomesRightCallsLeft) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _3818_left;
      DCOMP._IOwnership _3819___v100;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3820_recIdentsL;
      RAST._IExpr _out292;
      DCOMP._IOwnership _out293;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out294;
      (this).GenExpr(_3804_lExpr, selfIdent, env, _3816_expectedLeftOwnership, out _out292, out _out293, out _out294);
      _3818_left = _out292;
      _3819___v100 = _out293;
      _3820_recIdentsL = _out294;
      RAST._IExpr _3821_right;
      DCOMP._IOwnership _3822___v101;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3823_recIdentsR;
      RAST._IExpr _out295;
      DCOMP._IOwnership _out296;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out297;
      (this).GenExpr(_3805_rExpr, selfIdent, env, _3817_expectedRightOwnership, out _out295, out _out296, out _out297);
      _3821_right = _out295;
      _3822___v101 = _out296;
      _3823_recIdentsR = _out297;
      DAST._IBinOp _source220 = _3803_op;
      if (_source220.is_Eq) {
        bool _3824___mcc_h12 = _source220.dtor_referential;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source221 = _3803_op;
            if (_source221.is_Eq) {
              bool _3825___mcc_h16 = _source221.dtor_referential;
              bool _3826_referential = _3825___mcc_h16;
              {
                if (_3826_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source221.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source221.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3827___mcc_h17 = _source221.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3828_op = _3827___mcc_h17;
              {
                r = RAST.Expr.create_BinaryOp(_3828_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_Div) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source222 = _3803_op;
            if (_source222.is_Eq) {
              bool _3829___mcc_h18 = _source222.dtor_referential;
              bool _3830_referential = _3829___mcc_h18;
              {
                if (_3830_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source222.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source222.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3831___mcc_h19 = _source222.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3832_op = _3831___mcc_h19;
              {
                r = RAST.Expr.create_BinaryOp(_3832_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_EuclidianDiv) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source223 = _3803_op;
            if (_source223.is_Eq) {
              bool _3833___mcc_h20 = _source223.dtor_referential;
              bool _3834_referential = _3833___mcc_h20;
              {
                if (_3834_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source223.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source223.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3835___mcc_h21 = _source223.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3836_op = _3835___mcc_h21;
              {
                r = RAST.Expr.create_BinaryOp(_3836_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_Mod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source224 = _3803_op;
            if (_source224.is_Eq) {
              bool _3837___mcc_h22 = _source224.dtor_referential;
              bool _3838_referential = _3837___mcc_h22;
              {
                if (_3838_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source224.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source224.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3839___mcc_h23 = _source224.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3840_op = _3839___mcc_h23;
              {
                r = RAST.Expr.create_BinaryOp(_3840_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_EuclidianMod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source225 = _3803_op;
            if (_source225.is_Eq) {
              bool _3841___mcc_h24 = _source225.dtor_referential;
              bool _3842_referential = _3841___mcc_h24;
              {
                if (_3842_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source225.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source225.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3843___mcc_h25 = _source225.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3844_op = _3843___mcc_h25;
              {
                r = RAST.Expr.create_BinaryOp(_3844_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_Lt) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source226 = _3803_op;
            if (_source226.is_Eq) {
              bool _3845___mcc_h26 = _source226.dtor_referential;
              bool _3846_referential = _3845___mcc_h26;
              {
                if (_3846_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source226.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source226.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3847___mcc_h27 = _source226.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3848_op = _3847___mcc_h27;
              {
                r = RAST.Expr.create_BinaryOp(_3848_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_LtChar) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source227 = _3803_op;
            if (_source227.is_Eq) {
              bool _3849___mcc_h28 = _source227.dtor_referential;
              bool _3850_referential = _3849___mcc_h28;
              {
                if (_3850_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source227.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source227.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3851___mcc_h29 = _source227.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3852_op = _3851___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_3852_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_Plus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source228 = _3803_op;
            if (_source228.is_Eq) {
              bool _3853___mcc_h30 = _source228.dtor_referential;
              bool _3854_referential = _3853___mcc_h30;
              {
                if (_3854_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source228.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source228.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3855___mcc_h31 = _source228.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3856_op = _3855___mcc_h31;
              {
                r = RAST.Expr.create_BinaryOp(_3856_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_Minus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source229 = _3803_op;
            if (_source229.is_Eq) {
              bool _3857___mcc_h32 = _source229.dtor_referential;
              bool _3858_referential = _3857___mcc_h32;
              {
                if (_3858_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source229.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source229.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3859___mcc_h33 = _source229.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3860_op = _3859___mcc_h33;
              {
                r = RAST.Expr.create_BinaryOp(_3860_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_Times) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source230 = _3803_op;
            if (_source230.is_Eq) {
              bool _3861___mcc_h34 = _source230.dtor_referential;
              bool _3862_referential = _3861___mcc_h34;
              {
                if (_3862_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source230.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source230.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3863___mcc_h35 = _source230.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3864_op = _3863___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_3864_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_BitwiseAnd) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source231 = _3803_op;
            if (_source231.is_Eq) {
              bool _3865___mcc_h36 = _source231.dtor_referential;
              bool _3866_referential = _3865___mcc_h36;
              {
                if (_3866_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source231.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source231.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3867___mcc_h37 = _source231.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3868_op = _3867___mcc_h37;
              {
                r = RAST.Expr.create_BinaryOp(_3868_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_BitwiseOr) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source232 = _3803_op;
            if (_source232.is_Eq) {
              bool _3869___mcc_h38 = _source232.dtor_referential;
              bool _3870_referential = _3869___mcc_h38;
              {
                if (_3870_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source232.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source232.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3871___mcc_h39 = _source232.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3872_op = _3871___mcc_h39;
              {
                r = RAST.Expr.create_BinaryOp(_3872_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_BitwiseXor) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source233 = _3803_op;
            if (_source233.is_Eq) {
              bool _3873___mcc_h40 = _source233.dtor_referential;
              bool _3874_referential = _3873___mcc_h40;
              {
                if (_3874_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source233.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source233.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3875___mcc_h41 = _source233.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3876_op = _3875___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_3876_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_BitwiseShiftRight) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source234 = _3803_op;
            if (_source234.is_Eq) {
              bool _3877___mcc_h42 = _source234.dtor_referential;
              bool _3878_referential = _3877___mcc_h42;
              {
                if (_3878_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source234.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source234.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3879___mcc_h43 = _source234.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3880_op = _3879___mcc_h43;
              {
                r = RAST.Expr.create_BinaryOp(_3880_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_BitwiseShiftLeft) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source235 = _3803_op;
            if (_source235.is_Eq) {
              bool _3881___mcc_h44 = _source235.dtor_referential;
              bool _3882_referential = _3881___mcc_h44;
              {
                if (_3882_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source235.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source235.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3883___mcc_h45 = _source235.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3884_op = _3883___mcc_h45;
              {
                r = RAST.Expr.create_BinaryOp(_3884_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_And) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source236 = _3803_op;
            if (_source236.is_Eq) {
              bool _3885___mcc_h46 = _source236.dtor_referential;
              bool _3886_referential = _3885___mcc_h46;
              {
                if (_3886_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source236.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source236.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3887___mcc_h47 = _source236.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3888_op = _3887___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_3888_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_Or) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source237 = _3803_op;
            if (_source237.is_Eq) {
              bool _3889___mcc_h48 = _source237.dtor_referential;
              bool _3890_referential = _3889___mcc_h48;
              {
                if (_3890_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source237.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source237.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3891___mcc_h49 = _source237.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3892_op = _3891___mcc_h49;
              {
                r = RAST.Expr.create_BinaryOp(_3892_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      } else if (_source220.is_In) {
        {
          r = ((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_3818_left);
        }
      } else if (_source220.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3818_left, _3821_right, _3806_format);
      } else if (_source220.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3818_left, _3821_right, _3806_format);
      } else if (_source220.is_SetMerge) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3821_right);
        }
      } else if (_source220.is_SetSubtraction) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3821_right);
        }
      } else if (_source220.is_SetIntersection) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3821_right);
        }
      } else if (_source220.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3818_left, _3821_right, _3806_format);
        }
      } else if (_source220.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3818_left, _3821_right, _3806_format);
        }
      } else if (_source220.is_SetDisjoint) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3821_right);
        }
      } else if (_source220.is_MapMerge) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3821_right);
        }
      } else if (_source220.is_MapSubtraction) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3821_right);
        }
      } else if (_source220.is_MultisetMerge) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3821_right);
        }
      } else if (_source220.is_MultisetSubtraction) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3821_right);
        }
      } else if (_source220.is_MultisetIntersection) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3821_right);
        }
      } else if (_source220.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3818_left, _3821_right, _3806_format);
        }
      } else if (_source220.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3818_left, _3821_right, _3806_format);
        }
      } else if (_source220.is_MultisetDisjoint) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3821_right);
        }
      } else if (_source220.is_Concat) {
        {
          r = ((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_3821_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _3893___mcc_h14 = _source220.dtor_Passthrough_i_a0;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3803_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3803_op), _3818_left, _3821_right, _3806_format);
          } else {
            DAST._IBinOp _source238 = _3803_op;
            if (_source238.is_Eq) {
              bool _3894___mcc_h50 = _source238.dtor_referential;
              bool _3895_referential = _3894___mcc_h50;
              {
                if (_3895_referential) {
                  if (((this).ObjectType).is_RawPointers) {
                    (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Cannot compare raw pointers yet - need to wrap them with a structure to ensure they are compared properly"));
                    r = RAST.Expr.create_RawExpr((this.error).dtor_value);
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                } else {
                  if (((_3805_rExpr).is_SeqValue) && ((new BigInteger(((_3805_rExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), ((((_3818_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else if (((_3804_lExpr).is_SeqValue) && ((new BigInteger(((_3804_lExpr).dtor_elements).Count)).Sign == 0)) {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), ((((_3821_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("to_array"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), DAST.Format.BinaryOpFormat.create_NoFormat());
                  } else {
                    r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3818_left, _3821_right, DAST.Format.BinaryOpFormat.create_NoFormat());
                  }
                }
              }
            } else if (_source238.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else if (_source238.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3818_left, _3821_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3896___mcc_h51 = _source238.dtor_Passthrough_i_a0;
              Dafny.ISequence<Dafny.Rune> _3897_op = _3896___mcc_h51;
              {
                r = RAST.Expr.create_BinaryOp(_3897_op, _3818_left, _3821_right, _3806_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out298;
      DCOMP._IOwnership _out299;
      (this).FromOwned(r, expectedOwnership, out _out298, out _out299);
      r = _out298;
      resultingOwnership = _out299;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3820_recIdentsL, _3823_recIdentsR);
      return ;
    }
    public void GenExprConvertToNewtype(DAST._IExpression e, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs54 = e;
      DAST._IExpression _3898_expr = _let_tmp_rhs54.dtor_value;
      DAST._IType _3899_fromTpe = _let_tmp_rhs54.dtor_from;
      DAST._IType _3900_toTpe = _let_tmp_rhs54.dtor_typ;
      DAST._IType _let_tmp_rhs55 = _3900_toTpe;
      DAST._IResolvedType _let_tmp_rhs56 = _let_tmp_rhs55.dtor_resolved;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3901_path = _let_tmp_rhs56.dtor_path;
      Dafny.ISequence<DAST._IType> _3902_typeArgs = _let_tmp_rhs56.dtor_typeArgs;
      DAST._IResolvedTypeBase _let_tmp_rhs57 = _let_tmp_rhs56.dtor_kind;
      DAST._IType _3903_b = _let_tmp_rhs57.dtor_baseType;
      DAST._INewtypeRange _3904_range = _let_tmp_rhs57.dtor_range;
      bool _3905_erase = _let_tmp_rhs57.dtor_erase;
      Dafny.ISequence<DAST._IAttribute> _3906___v103 = _let_tmp_rhs56.dtor_attributes;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3907___v104 = _let_tmp_rhs56.dtor_properMethods;
      Dafny.ISequence<DAST._IType> _3908___v105 = _let_tmp_rhs56.dtor_extendedTypes;
      Std.Wrappers._IOption<RAST._IType> _3909_nativeToType;
      _3909_nativeToType = DCOMP.COMP.NewtypeToRustType(_3903_b, _3904_range);
      if (object.Equals(_3899_fromTpe, _3903_b)) {
        RAST._IExpr _3910_recursiveGen;
        DCOMP._IOwnership _3911_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3912_recIdents;
        RAST._IExpr _out300;
        DCOMP._IOwnership _out301;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out302;
        (this).GenExpr(_3898_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out300, out _out301, out _out302);
        _3910_recursiveGen = _out300;
        _3911_recOwned = _out301;
        _3912_recIdents = _out302;
        readIdents = _3912_recIdents;
        Std.Wrappers._IOption<RAST._IType> _source239 = _3909_nativeToType;
        if (_source239.is_None) {
          if (_3905_erase) {
            r = _3910_recursiveGen;
          } else {
            RAST._IType _3913_rhsType;
            RAST._IType _out303;
            _out303 = (this).GenType(_3900_toTpe, DCOMP.GenTypeContext.InBinding());
            _3913_rhsType = _out303;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3913_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3910_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          }
          RAST._IExpr _out304;
          DCOMP._IOwnership _out305;
          (this).FromOwnership(r, _3911_recOwned, expectedOwnership, out _out304, out _out305);
          r = _out304;
          resultingOwnership = _out305;
        } else {
          RAST._IType _3914___mcc_h0 = _source239.dtor_value;
          RAST._IType _3915_v = _3914___mcc_h0;
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3910_recursiveGen, RAST.Expr.create_ExprFromType(_3915_v)));
          RAST._IExpr _out306;
          DCOMP._IOwnership _out307;
          (this).FromOwned(r, expectedOwnership, out _out306, out _out307);
          r = _out306;
          resultingOwnership = _out307;
        }
      } else {
        if ((_3909_nativeToType).is_Some) {
          DAST._IType _source240 = _3899_fromTpe;
          if (_source240.is_UserDefined) {
            DAST._IResolvedType _3916___mcc_h1 = _source240.dtor_resolved;
            DAST._IResolvedType _source241 = _3916___mcc_h1;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3917___mcc_h3 = _source241.dtor_path;
            Dafny.ISequence<DAST._IType> _3918___mcc_h4 = _source241.dtor_typeArgs;
            DAST._IResolvedTypeBase _3919___mcc_h5 = _source241.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _3920___mcc_h6 = _source241.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3921___mcc_h7 = _source241.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _3922___mcc_h8 = _source241.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source242 = _3919___mcc_h5;
            if (_source242.is_Class) {
            } else if (_source242.is_Datatype) {
            } else if (_source242.is_Trait) {
            } else {
              DAST._IType _3923___mcc_h15 = _source242.dtor_baseType;
              DAST._INewtypeRange _3924___mcc_h16 = _source242.dtor_range;
              bool _3925___mcc_h17 = _source242.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3926_attributes0 = _3920___mcc_h6;
              bool _3927_erase0 = _3925___mcc_h17;
              DAST._INewtypeRange _3928_range0 = _3924___mcc_h16;
              DAST._IType _3929_b0 = _3923___mcc_h15;
              {
                Std.Wrappers._IOption<RAST._IType> _3930_nativeFromType;
                _3930_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3929_b0, _3928_range0);
                if ((_3930_nativeFromType).is_Some) {
                  RAST._IExpr _3931_recursiveGen;
                  DCOMP._IOwnership _3932_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3933_recIdents;
                  RAST._IExpr _out308;
                  DCOMP._IOwnership _out309;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                  (this).GenExpr(_3898_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out308, out _out309, out _out310);
                  _3931_recursiveGen = _out308;
                  _3932_recOwned = _out309;
                  _3933_recIdents = _out310;
                  RAST._IExpr _out311;
                  DCOMP._IOwnership _out312;
                  (this).FromOwnership(RAST.Expr.create_TypeAscription(_3931_recursiveGen, (_3909_nativeToType).dtor_value), _3932_recOwned, expectedOwnership, out _out311, out _out312);
                  r = _out311;
                  resultingOwnership = _out312;
                  readIdents = _3933_recIdents;
                  return ;
                }
              }
            }
          } else if (_source240.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3934___mcc_h21 = _source240.dtor_Tuple_i_a0;
          } else if (_source240.is_Array) {
            DAST._IType _3935___mcc_h23 = _source240.dtor_element;
            BigInteger _3936___mcc_h24 = _source240.dtor_dims;
          } else if (_source240.is_Seq) {
            DAST._IType _3937___mcc_h27 = _source240.dtor_element;
          } else if (_source240.is_Set) {
            DAST._IType _3938___mcc_h29 = _source240.dtor_element;
          } else if (_source240.is_Multiset) {
            DAST._IType _3939___mcc_h31 = _source240.dtor_element;
          } else if (_source240.is_Map) {
            DAST._IType _3940___mcc_h33 = _source240.dtor_key;
            DAST._IType _3941___mcc_h34 = _source240.dtor_value;
          } else if (_source240.is_SetBuilder) {
            DAST._IType _3942___mcc_h37 = _source240.dtor_element;
          } else if (_source240.is_MapBuilder) {
            DAST._IType _3943___mcc_h39 = _source240.dtor_key;
            DAST._IType _3944___mcc_h40 = _source240.dtor_value;
          } else if (_source240.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3945___mcc_h43 = _source240.dtor_args;
            DAST._IType _3946___mcc_h44 = _source240.dtor_result;
          } else if (_source240.is_Primitive) {
            DAST._IPrimitive _3947___mcc_h47 = _source240.dtor_Primitive_i_a0;
          } else if (_source240.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3948___mcc_h49 = _source240.dtor_Passthrough_i_a0;
          } else if (_source240.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _3949___mcc_h51 = _source240.dtor_TypeArg_i_a0;
          } else {
          }
          if (object.Equals(_3899_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
            RAST._IExpr _3950_recursiveGen;
            DCOMP._IOwnership _3951_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3952_recIdents;
            RAST._IExpr _out313;
            DCOMP._IOwnership _out314;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
            (this).GenExpr(_3898_expr, selfIdent, env, expectedOwnership, out _out313, out _out314, out _out315);
            _3950_recursiveGen = _out313;
            _3951_recOwned = _out314;
            _3952_recIdents = _out315;
            RAST._IExpr _out316;
            DCOMP._IOwnership _out317;
            (this).FromOwnership(RAST.Expr.create_TypeAscription((_3950_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3909_nativeToType).dtor_value), _3951_recOwned, expectedOwnership, out _out316, out _out317);
            r = _out316;
            resultingOwnership = _out317;
            readIdents = _3952_recIdents;
            return ;
          }
        }
        RAST._IExpr _out318;
        DCOMP._IOwnership _out319;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
        (this).GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3898_expr, _3899_fromTpe, _3903_b), _3903_b, _3900_toTpe), selfIdent, env, expectedOwnership, out _out318, out _out319, out _out320);
        r = _out318;
        resultingOwnership = _out319;
        readIdents = _out320;
      }
    }
    public void GenExprConvertFromNewtype(DAST._IExpression e, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs58 = e;
      DAST._IExpression _3953_expr = _let_tmp_rhs58.dtor_value;
      DAST._IType _3954_fromTpe = _let_tmp_rhs58.dtor_from;
      DAST._IType _3955_toTpe = _let_tmp_rhs58.dtor_typ;
      DAST._IType _let_tmp_rhs59 = _3954_fromTpe;
      DAST._IResolvedType _let_tmp_rhs60 = _let_tmp_rhs59.dtor_resolved;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3956___v111 = _let_tmp_rhs60.dtor_path;
      Dafny.ISequence<DAST._IType> _3957___v112 = _let_tmp_rhs60.dtor_typeArgs;
      DAST._IResolvedTypeBase _let_tmp_rhs61 = _let_tmp_rhs60.dtor_kind;
      DAST._IType _3958_b = _let_tmp_rhs61.dtor_baseType;
      DAST._INewtypeRange _3959_range = _let_tmp_rhs61.dtor_range;
      bool _3960_erase = _let_tmp_rhs61.dtor_erase;
      Dafny.ISequence<DAST._IAttribute> _3961_attributes = _let_tmp_rhs60.dtor_attributes;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3962___v113 = _let_tmp_rhs60.dtor_properMethods;
      Dafny.ISequence<DAST._IType> _3963___v114 = _let_tmp_rhs60.dtor_extendedTypes;
      Std.Wrappers._IOption<RAST._IType> _3964_nativeFromType;
      _3964_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3958_b, _3959_range);
      if (object.Equals(_3958_b, _3955_toTpe)) {
        RAST._IExpr _3965_recursiveGen;
        DCOMP._IOwnership _3966_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3967_recIdents;
        RAST._IExpr _out321;
        DCOMP._IOwnership _out322;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
        (this).GenExpr(_3953_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out321, out _out322, out _out323);
        _3965_recursiveGen = _out321;
        _3966_recOwned = _out322;
        _3967_recIdents = _out323;
        readIdents = _3967_recIdents;
        Std.Wrappers._IOption<RAST._IType> _source243 = _3964_nativeFromType;
        if (_source243.is_None) {
          if (_3960_erase) {
            r = _3965_recursiveGen;
          } else {
            r = (_3965_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
          }
          RAST._IExpr _out324;
          DCOMP._IOwnership _out325;
          (this).FromOwnership(r, _3966_recOwned, expectedOwnership, out _out324, out _out325);
          r = _out324;
          resultingOwnership = _out325;
        } else {
          RAST._IType _3968___mcc_h0 = _source243.dtor_value;
          RAST._IType _3969_v = _3968___mcc_h0;
          RAST._IType _3970_toTpeRust;
          RAST._IType _out326;
          _out326 = (this).GenType(_3955_toTpe, DCOMP.GenTypeContext.@default());
          _3970_toTpeRust = _out326;
          r = (((RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3970_toTpeRust))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3965_recursiveGen));
          RAST._IExpr _out327;
          DCOMP._IOwnership _out328;
          (this).FromOwned(r, expectedOwnership, out _out327, out _out328);
          r = _out327;
          resultingOwnership = _out328;
        }
      } else {
        if ((_3964_nativeFromType).is_Some) {
          if (object.Equals(_3955_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
            RAST._IExpr _3971_recursiveGen;
            DCOMP._IOwnership _3972_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3973_recIdents;
            RAST._IExpr _out329;
            DCOMP._IOwnership _out330;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
            (this).GenExpr(_3953_expr, selfIdent, env, expectedOwnership, out _out329, out _out330, out _out331);
            _3971_recursiveGen = _out329;
            _3972_recOwned = _out330;
            _3973_recIdents = _out331;
            RAST._IExpr _out332;
            DCOMP._IOwnership _out333;
            (this).FromOwnership(((RAST.__default.dafny__runtime).MSel((this).DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3971_recursiveGen, (this).DafnyCharUnderlying)), _3972_recOwned, expectedOwnership, out _out332, out _out333);
            r = _out332;
            resultingOwnership = _out333;
            readIdents = _3973_recIdents;
            return ;
          }
        }
        RAST._IExpr _out334;
        DCOMP._IOwnership _out335;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
        (this).GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3953_expr, _3954_fromTpe, _3958_b), _3958_b, _3955_toTpe), selfIdent, env, expectedOwnership, out _out334, out _out335, out _out336);
        r = _out334;
        resultingOwnership = _out335;
        readIdents = _out336;
      }
    }
    public void GenExprConvertNotImplemented(DAST._IExpression e, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs62 = e;
      DAST._IExpression _3974_expr = _let_tmp_rhs62.dtor_value;
      DAST._IType _3975_fromTpe = _let_tmp_rhs62.dtor_from;
      DAST._IType _3976_toTpe = _let_tmp_rhs62.dtor_typ;
      RAST._IType _3977_fromTpeGen;
      RAST._IType _out337;
      _out337 = (this).GenType(_3975_fromTpe, DCOMP.GenTypeContext.InBinding());
      _3977_fromTpeGen = _out337;
      RAST._IType _3978_toTpeGen;
      RAST._IType _out338;
      _out338 = (this).GenType(_3976_toTpe, DCOMP.GenTypeContext.InBinding());
      _3978_toTpeGen = _out338;
      if (RAST.__default.IsUpcastConversion(_3977_fromTpeGen, _3978_toTpeGen)) {
        RAST._IExpr _3979_recursiveGen;
        DCOMP._IOwnership _3980_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3981_recIdents;
        RAST._IExpr _out339;
        DCOMP._IOwnership _out340;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
        (this).GenExpr(_3974_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out339, out _out340, out _out341);
        _3979_recursiveGen = _out339;
        _3980_recOwned = _out340;
        _3981_recIdents = _out341;
        readIdents = _3981_recIdents;
        r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("UpcastTo"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3978_toTpeGen))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("upcast_to"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3979_recursiveGen));
        RAST._IExpr _out342;
        DCOMP._IOwnership _out343;
        (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipOwned(), expectedOwnership, out _out342, out _out343);
        r = _out342;
        resultingOwnership = _out343;
      } else {
        RAST._IExpr _3982_recursiveGen;
        DCOMP._IOwnership _3983_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3984_recIdents;
        RAST._IExpr _out344;
        DCOMP._IOwnership _out345;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out346;
        (this).GenExpr(_3974_expr, selfIdent, env, expectedOwnership, out _out344, out _out345, out _out346);
        _3982_recursiveGen = _out344;
        _3983_recOwned = _out345;
        _3984_recIdents = _out346;
        readIdents = _3984_recIdents;
        Dafny.ISequence<Dafny.Rune> _3985_msg;
        _3985_msg = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion from "), (_3977_fromTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" to ")), (_3978_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</i> not yet implemented */"));
        (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_3985_msg);
        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3982_recursiveGen)._ToString(DCOMP.__default.IND), _3985_msg));
        RAST._IExpr _out347;
        DCOMP._IOwnership _out348;
        (this).FromOwnership(r, _3983_recOwned, expectedOwnership, out _out347, out _out348);
        r = _out347;
        resultingOwnership = _out348;
      }
    }
    public void GenExprConvert(DAST._IExpression e, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs63 = e;
      DAST._IExpression _3986_expr = _let_tmp_rhs63.dtor_value;
      DAST._IType _3987_fromTpe = _let_tmp_rhs63.dtor_from;
      DAST._IType _3988_toTpe = _let_tmp_rhs63.dtor_typ;
      if (object.Equals(_3987_fromTpe, _3988_toTpe)) {
        RAST._IExpr _3989_recursiveGen;
        DCOMP._IOwnership _3990_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3991_recIdents;
        RAST._IExpr _out349;
        DCOMP._IOwnership _out350;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
        (this).GenExpr(_3986_expr, selfIdent, env, expectedOwnership, out _out349, out _out350, out _out351);
        _3989_recursiveGen = _out349;
        _3990_recOwned = _out350;
        _3991_recIdents = _out351;
        r = _3989_recursiveGen;
        RAST._IExpr _out352;
        DCOMP._IOwnership _out353;
        (this).FromOwnership(r, _3990_recOwned, expectedOwnership, out _out352, out _out353);
        r = _out352;
        resultingOwnership = _out353;
        readIdents = _3991_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source244 = _System.Tuple2<DAST._IType, DAST._IType>.create(_3987_fromTpe, _3988_toTpe);
        DAST._IType _3992___mcc_h0 = _source244.dtor__0;
        DAST._IType _3993___mcc_h1 = _source244.dtor__1;
        DAST._IType _source245 = _3992___mcc_h0;
        if (_source245.is_UserDefined) {
          DAST._IResolvedType _3994___mcc_h4 = _source245.dtor_resolved;
          DAST._IResolvedType _source246 = _3994___mcc_h4;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3995___mcc_h7 = _source246.dtor_path;
          Dafny.ISequence<DAST._IType> _3996___mcc_h8 = _source246.dtor_typeArgs;
          DAST._IResolvedTypeBase _3997___mcc_h9 = _source246.dtor_kind;
          Dafny.ISequence<DAST._IAttribute> _3998___mcc_h10 = _source246.dtor_attributes;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3999___mcc_h11 = _source246.dtor_properMethods;
          Dafny.ISequence<DAST._IType> _4000___mcc_h12 = _source246.dtor_extendedTypes;
          DAST._IResolvedTypeBase _source247 = _3997___mcc_h9;
          if (_source247.is_Class) {
            DAST._IType _source248 = _3993___mcc_h1;
            if (_source248.is_UserDefined) {
              DAST._IResolvedType _4001___mcc_h25 = _source248.dtor_resolved;
              DAST._IResolvedType _source249 = _4001___mcc_h25;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4002___mcc_h27 = _source249.dtor_path;
              Dafny.ISequence<DAST._IType> _4003___mcc_h28 = _source249.dtor_typeArgs;
              DAST._IResolvedTypeBase _4004___mcc_h29 = _source249.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4005___mcc_h30 = _source249.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4006___mcc_h31 = _source249.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4007___mcc_h32 = _source249.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source250 = _4004___mcc_h29;
              if (_source250.is_Class) {
                {
                  RAST._IExpr _out354;
                  DCOMP._IOwnership _out355;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out354, out _out355, out _out356);
                  r = _out354;
                  resultingOwnership = _out355;
                  readIdents = _out356;
                }
              } else if (_source250.is_Datatype) {
                {
                  RAST._IExpr _out357;
                  DCOMP._IOwnership _out358;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out359;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out357, out _out358, out _out359);
                  r = _out357;
                  resultingOwnership = _out358;
                  readIdents = _out359;
                }
              } else if (_source250.is_Trait) {
                {
                  RAST._IExpr _out360;
                  DCOMP._IOwnership _out361;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out362;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out360, out _out361, out _out362);
                  r = _out360;
                  resultingOwnership = _out361;
                  readIdents = _out362;
                }
              } else {
                DAST._IType _4008___mcc_h39 = _source250.dtor_baseType;
                DAST._INewtypeRange _4009___mcc_h40 = _source250.dtor_range;
                bool _4010___mcc_h41 = _source250.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4011_attributes = _4005___mcc_h30;
                bool _4012_erase = _4010___mcc_h41;
                DAST._INewtypeRange _4013_range = _4009___mcc_h40;
                DAST._IType _4014_b = _4008___mcc_h39;
                {
                  RAST._IExpr _out363;
                  DCOMP._IOwnership _out364;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out365;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out363, out _out364, out _out365);
                  r = _out363;
                  resultingOwnership = _out364;
                  readIdents = _out365;
                }
              }
            } else if (_source248.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4015___mcc_h45 = _source248.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out366;
                DCOMP._IOwnership _out367;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out366, out _out367, out _out368);
                r = _out366;
                resultingOwnership = _out367;
                readIdents = _out368;
              }
            } else if (_source248.is_Array) {
              DAST._IType _4016___mcc_h47 = _source248.dtor_element;
              BigInteger _4017___mcc_h48 = _source248.dtor_dims;
              {
                RAST._IExpr _out369;
                DCOMP._IOwnership _out370;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out369, out _out370, out _out371);
                r = _out369;
                resultingOwnership = _out370;
                readIdents = _out371;
              }
            } else if (_source248.is_Seq) {
              DAST._IType _4018___mcc_h51 = _source248.dtor_element;
              {
                RAST._IExpr _out372;
                DCOMP._IOwnership _out373;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out374;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out372, out _out373, out _out374);
                r = _out372;
                resultingOwnership = _out373;
                readIdents = _out374;
              }
            } else if (_source248.is_Set) {
              DAST._IType _4019___mcc_h53 = _source248.dtor_element;
              {
                RAST._IExpr _out375;
                DCOMP._IOwnership _out376;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out377;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out375, out _out376, out _out377);
                r = _out375;
                resultingOwnership = _out376;
                readIdents = _out377;
              }
            } else if (_source248.is_Multiset) {
              DAST._IType _4020___mcc_h55 = _source248.dtor_element;
              {
                RAST._IExpr _out378;
                DCOMP._IOwnership _out379;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out378, out _out379, out _out380);
                r = _out378;
                resultingOwnership = _out379;
                readIdents = _out380;
              }
            } else if (_source248.is_Map) {
              DAST._IType _4021___mcc_h57 = _source248.dtor_key;
              DAST._IType _4022___mcc_h58 = _source248.dtor_value;
              {
                RAST._IExpr _out381;
                DCOMP._IOwnership _out382;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out383;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out381, out _out382, out _out383);
                r = _out381;
                resultingOwnership = _out382;
                readIdents = _out383;
              }
            } else if (_source248.is_SetBuilder) {
              DAST._IType _4023___mcc_h61 = _source248.dtor_element;
              {
                RAST._IExpr _out384;
                DCOMP._IOwnership _out385;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out386;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out384, out _out385, out _out386);
                r = _out384;
                resultingOwnership = _out385;
                readIdents = _out386;
              }
            } else if (_source248.is_MapBuilder) {
              DAST._IType _4024___mcc_h63 = _source248.dtor_key;
              DAST._IType _4025___mcc_h64 = _source248.dtor_value;
              {
                RAST._IExpr _out387;
                DCOMP._IOwnership _out388;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out387, out _out388, out _out389);
                r = _out387;
                resultingOwnership = _out388;
                readIdents = _out389;
              }
            } else if (_source248.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4026___mcc_h67 = _source248.dtor_args;
              DAST._IType _4027___mcc_h68 = _source248.dtor_result;
              {
                RAST._IExpr _out390;
                DCOMP._IOwnership _out391;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out390, out _out391, out _out392);
                r = _out390;
                resultingOwnership = _out391;
                readIdents = _out392;
              }
            } else if (_source248.is_Primitive) {
              DAST._IPrimitive _4028___mcc_h71 = _source248.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out393;
                DCOMP._IOwnership _out394;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out395;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out393, out _out394, out _out395);
                r = _out393;
                resultingOwnership = _out394;
                readIdents = _out395;
              }
            } else if (_source248.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4029___mcc_h73 = _source248.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out396;
                DCOMP._IOwnership _out397;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out398;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out396, out _out397, out _out398);
                r = _out396;
                resultingOwnership = _out397;
                readIdents = _out398;
              }
            } else if (_source248.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4030___mcc_h75 = _source248.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out399;
                DCOMP._IOwnership _out400;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out399, out _out400, out _out401);
                r = _out399;
                resultingOwnership = _out400;
                readIdents = _out401;
              }
            } else {
              {
                RAST._IExpr _out402;
                DCOMP._IOwnership _out403;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out402, out _out403, out _out404);
                r = _out402;
                resultingOwnership = _out403;
                readIdents = _out404;
              }
            }
          } else if (_source247.is_Datatype) {
            DAST._IType _source251 = _3993___mcc_h1;
            if (_source251.is_UserDefined) {
              DAST._IResolvedType _4031___mcc_h77 = _source251.dtor_resolved;
              DAST._IResolvedType _source252 = _4031___mcc_h77;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4032___mcc_h79 = _source252.dtor_path;
              Dafny.ISequence<DAST._IType> _4033___mcc_h80 = _source252.dtor_typeArgs;
              DAST._IResolvedTypeBase _4034___mcc_h81 = _source252.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4035___mcc_h82 = _source252.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4036___mcc_h83 = _source252.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4037___mcc_h84 = _source252.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source253 = _4034___mcc_h81;
              if (_source253.is_Class) {
                {
                  RAST._IExpr _out405;
                  DCOMP._IOwnership _out406;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out407;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out405, out _out406, out _out407);
                  r = _out405;
                  resultingOwnership = _out406;
                  readIdents = _out407;
                }
              } else if (_source253.is_Datatype) {
                {
                  RAST._IExpr _out408;
                  DCOMP._IOwnership _out409;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out410;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out408, out _out409, out _out410);
                  r = _out408;
                  resultingOwnership = _out409;
                  readIdents = _out410;
                }
              } else if (_source253.is_Trait) {
                {
                  RAST._IExpr _out411;
                  DCOMP._IOwnership _out412;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out411, out _out412, out _out413);
                  r = _out411;
                  resultingOwnership = _out412;
                  readIdents = _out413;
                }
              } else {
                DAST._IType _4038___mcc_h91 = _source253.dtor_baseType;
                DAST._INewtypeRange _4039___mcc_h92 = _source253.dtor_range;
                bool _4040___mcc_h93 = _source253.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4041_attributes = _4035___mcc_h82;
                bool _4042_erase = _4040___mcc_h93;
                DAST._INewtypeRange _4043_range = _4039___mcc_h92;
                DAST._IType _4044_b = _4038___mcc_h91;
                {
                  RAST._IExpr _out414;
                  DCOMP._IOwnership _out415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out414, out _out415, out _out416);
                  r = _out414;
                  resultingOwnership = _out415;
                  readIdents = _out416;
                }
              }
            } else if (_source251.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4045___mcc_h97 = _source251.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out417;
                DCOMP._IOwnership _out418;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out419;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out417, out _out418, out _out419);
                r = _out417;
                resultingOwnership = _out418;
                readIdents = _out419;
              }
            } else if (_source251.is_Array) {
              DAST._IType _4046___mcc_h99 = _source251.dtor_element;
              BigInteger _4047___mcc_h100 = _source251.dtor_dims;
              {
                RAST._IExpr _out420;
                DCOMP._IOwnership _out421;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out422;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out420, out _out421, out _out422);
                r = _out420;
                resultingOwnership = _out421;
                readIdents = _out422;
              }
            } else if (_source251.is_Seq) {
              DAST._IType _4048___mcc_h103 = _source251.dtor_element;
              {
                RAST._IExpr _out423;
                DCOMP._IOwnership _out424;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out423, out _out424, out _out425);
                r = _out423;
                resultingOwnership = _out424;
                readIdents = _out425;
              }
            } else if (_source251.is_Set) {
              DAST._IType _4049___mcc_h105 = _source251.dtor_element;
              {
                RAST._IExpr _out426;
                DCOMP._IOwnership _out427;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out426, out _out427, out _out428);
                r = _out426;
                resultingOwnership = _out427;
                readIdents = _out428;
              }
            } else if (_source251.is_Multiset) {
              DAST._IType _4050___mcc_h107 = _source251.dtor_element;
              {
                RAST._IExpr _out429;
                DCOMP._IOwnership _out430;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out431;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out429, out _out430, out _out431);
                r = _out429;
                resultingOwnership = _out430;
                readIdents = _out431;
              }
            } else if (_source251.is_Map) {
              DAST._IType _4051___mcc_h109 = _source251.dtor_key;
              DAST._IType _4052___mcc_h110 = _source251.dtor_value;
              {
                RAST._IExpr _out432;
                DCOMP._IOwnership _out433;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out434;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out432, out _out433, out _out434);
                r = _out432;
                resultingOwnership = _out433;
                readIdents = _out434;
              }
            } else if (_source251.is_SetBuilder) {
              DAST._IType _4053___mcc_h113 = _source251.dtor_element;
              {
                RAST._IExpr _out435;
                DCOMP._IOwnership _out436;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out435, out _out436, out _out437);
                r = _out435;
                resultingOwnership = _out436;
                readIdents = _out437;
              }
            } else if (_source251.is_MapBuilder) {
              DAST._IType _4054___mcc_h115 = _source251.dtor_key;
              DAST._IType _4055___mcc_h116 = _source251.dtor_value;
              {
                RAST._IExpr _out438;
                DCOMP._IOwnership _out439;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out438, out _out439, out _out440);
                r = _out438;
                resultingOwnership = _out439;
                readIdents = _out440;
              }
            } else if (_source251.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4056___mcc_h119 = _source251.dtor_args;
              DAST._IType _4057___mcc_h120 = _source251.dtor_result;
              {
                RAST._IExpr _out441;
                DCOMP._IOwnership _out442;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out443;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out441, out _out442, out _out443);
                r = _out441;
                resultingOwnership = _out442;
                readIdents = _out443;
              }
            } else if (_source251.is_Primitive) {
              DAST._IPrimitive _4058___mcc_h123 = _source251.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out444;
                DCOMP._IOwnership _out445;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out446;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out444, out _out445, out _out446);
                r = _out444;
                resultingOwnership = _out445;
                readIdents = _out446;
              }
            } else if (_source251.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4059___mcc_h125 = _source251.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out447;
                DCOMP._IOwnership _out448;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out447, out _out448, out _out449);
                r = _out447;
                resultingOwnership = _out448;
                readIdents = _out449;
              }
            } else if (_source251.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4060___mcc_h127 = _source251.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out450;
                DCOMP._IOwnership _out451;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out450, out _out451, out _out452);
                r = _out450;
                resultingOwnership = _out451;
                readIdents = _out452;
              }
            } else {
              {
                RAST._IExpr _out453;
                DCOMP._IOwnership _out454;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out455;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out453, out _out454, out _out455);
                r = _out453;
                resultingOwnership = _out454;
                readIdents = _out455;
              }
            }
          } else if (_source247.is_Trait) {
            DAST._IType _source254 = _3993___mcc_h1;
            if (_source254.is_UserDefined) {
              DAST._IResolvedType _4061___mcc_h129 = _source254.dtor_resolved;
              DAST._IResolvedType _source255 = _4061___mcc_h129;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4062___mcc_h131 = _source255.dtor_path;
              Dafny.ISequence<DAST._IType> _4063___mcc_h132 = _source255.dtor_typeArgs;
              DAST._IResolvedTypeBase _4064___mcc_h133 = _source255.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4065___mcc_h134 = _source255.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4066___mcc_h135 = _source255.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4067___mcc_h136 = _source255.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source256 = _4064___mcc_h133;
              if (_source256.is_Class) {
                {
                  RAST._IExpr _out456;
                  DCOMP._IOwnership _out457;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out458;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out456, out _out457, out _out458);
                  r = _out456;
                  resultingOwnership = _out457;
                  readIdents = _out458;
                }
              } else if (_source256.is_Datatype) {
                {
                  RAST._IExpr _out459;
                  DCOMP._IOwnership _out460;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out459, out _out460, out _out461);
                  r = _out459;
                  resultingOwnership = _out460;
                  readIdents = _out461;
                }
              } else if (_source256.is_Trait) {
                {
                  RAST._IExpr _out462;
                  DCOMP._IOwnership _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out462, out _out463, out _out464);
                  r = _out462;
                  resultingOwnership = _out463;
                  readIdents = _out464;
                }
              } else {
                DAST._IType _4068___mcc_h143 = _source256.dtor_baseType;
                DAST._INewtypeRange _4069___mcc_h144 = _source256.dtor_range;
                bool _4070___mcc_h145 = _source256.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4071_attributes = _4065___mcc_h134;
                bool _4072_erase = _4070___mcc_h145;
                DAST._INewtypeRange _4073_range = _4069___mcc_h144;
                DAST._IType _4074_b = _4068___mcc_h143;
                {
                  RAST._IExpr _out465;
                  DCOMP._IOwnership _out466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out467;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out465, out _out466, out _out467);
                  r = _out465;
                  resultingOwnership = _out466;
                  readIdents = _out467;
                }
              }
            } else if (_source254.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4075___mcc_h149 = _source254.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out468;
                DCOMP._IOwnership _out469;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out468, out _out469, out _out470);
                r = _out468;
                resultingOwnership = _out469;
                readIdents = _out470;
              }
            } else if (_source254.is_Array) {
              DAST._IType _4076___mcc_h151 = _source254.dtor_element;
              BigInteger _4077___mcc_h152 = _source254.dtor_dims;
              {
                RAST._IExpr _out471;
                DCOMP._IOwnership _out472;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out471, out _out472, out _out473);
                r = _out471;
                resultingOwnership = _out472;
                readIdents = _out473;
              }
            } else if (_source254.is_Seq) {
              DAST._IType _4078___mcc_h155 = _source254.dtor_element;
              {
                RAST._IExpr _out474;
                DCOMP._IOwnership _out475;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out474, out _out475, out _out476);
                r = _out474;
                resultingOwnership = _out475;
                readIdents = _out476;
              }
            } else if (_source254.is_Set) {
              DAST._IType _4079___mcc_h157 = _source254.dtor_element;
              {
                RAST._IExpr _out477;
                DCOMP._IOwnership _out478;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out479;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out477, out _out478, out _out479);
                r = _out477;
                resultingOwnership = _out478;
                readIdents = _out479;
              }
            } else if (_source254.is_Multiset) {
              DAST._IType _4080___mcc_h159 = _source254.dtor_element;
              {
                RAST._IExpr _out480;
                DCOMP._IOwnership _out481;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out482;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out480, out _out481, out _out482);
                r = _out480;
                resultingOwnership = _out481;
                readIdents = _out482;
              }
            } else if (_source254.is_Map) {
              DAST._IType _4081___mcc_h161 = _source254.dtor_key;
              DAST._IType _4082___mcc_h162 = _source254.dtor_value;
              {
                RAST._IExpr _out483;
                DCOMP._IOwnership _out484;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out483, out _out484, out _out485);
                r = _out483;
                resultingOwnership = _out484;
                readIdents = _out485;
              }
            } else if (_source254.is_SetBuilder) {
              DAST._IType _4083___mcc_h165 = _source254.dtor_element;
              {
                RAST._IExpr _out486;
                DCOMP._IOwnership _out487;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out486, out _out487, out _out488);
                r = _out486;
                resultingOwnership = _out487;
                readIdents = _out488;
              }
            } else if (_source254.is_MapBuilder) {
              DAST._IType _4084___mcc_h167 = _source254.dtor_key;
              DAST._IType _4085___mcc_h168 = _source254.dtor_value;
              {
                RAST._IExpr _out489;
                DCOMP._IOwnership _out490;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out491;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out489, out _out490, out _out491);
                r = _out489;
                resultingOwnership = _out490;
                readIdents = _out491;
              }
            } else if (_source254.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4086___mcc_h171 = _source254.dtor_args;
              DAST._IType _4087___mcc_h172 = _source254.dtor_result;
              {
                RAST._IExpr _out492;
                DCOMP._IOwnership _out493;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out492, out _out493, out _out494);
                r = _out492;
                resultingOwnership = _out493;
                readIdents = _out494;
              }
            } else if (_source254.is_Primitive) {
              DAST._IPrimitive _4088___mcc_h175 = _source254.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out495;
                DCOMP._IOwnership _out496;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out495, out _out496, out _out497);
                r = _out495;
                resultingOwnership = _out496;
                readIdents = _out497;
              }
            } else if (_source254.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4089___mcc_h177 = _source254.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out498;
                DCOMP._IOwnership _out499;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out498, out _out499, out _out500);
                r = _out498;
                resultingOwnership = _out499;
                readIdents = _out500;
              }
            } else if (_source254.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4090___mcc_h179 = _source254.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out501;
                DCOMP._IOwnership _out502;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out503;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out501, out _out502, out _out503);
                r = _out501;
                resultingOwnership = _out502;
                readIdents = _out503;
              }
            } else {
              {
                RAST._IExpr _out504;
                DCOMP._IOwnership _out505;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out506;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out504, out _out505, out _out506);
                r = _out504;
                resultingOwnership = _out505;
                readIdents = _out506;
              }
            }
          } else {
            DAST._IType _4091___mcc_h181 = _source247.dtor_baseType;
            DAST._INewtypeRange _4092___mcc_h182 = _source247.dtor_range;
            bool _4093___mcc_h183 = _source247.dtor_erase;
            DAST._IType _source257 = _3993___mcc_h1;
            if (_source257.is_UserDefined) {
              DAST._IResolvedType _4094___mcc_h190 = _source257.dtor_resolved;
              DAST._IResolvedType _source258 = _4094___mcc_h190;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4095___mcc_h193 = _source258.dtor_path;
              Dafny.ISequence<DAST._IType> _4096___mcc_h194 = _source258.dtor_typeArgs;
              DAST._IResolvedTypeBase _4097___mcc_h195 = _source258.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4098___mcc_h196 = _source258.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4099___mcc_h197 = _source258.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4100___mcc_h198 = _source258.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source259 = _4097___mcc_h195;
              if (_source259.is_Class) {
                Dafny.ISequence<DAST._IAttribute> _4101_attributes = _3998___mcc_h10;
                bool _4102_erase = _4093___mcc_h183;
                DAST._INewtypeRange _4103_range = _4092___mcc_h182;
                DAST._IType _4104_b = _4091___mcc_h181;
                {
                  RAST._IExpr _out507;
                  DCOMP._IOwnership _out508;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                  (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out507, out _out508, out _out509);
                  r = _out507;
                  resultingOwnership = _out508;
                  readIdents = _out509;
                }
              } else if (_source259.is_Datatype) {
                Dafny.ISequence<DAST._IAttribute> _4105_attributes = _3998___mcc_h10;
                bool _4106_erase = _4093___mcc_h183;
                DAST._INewtypeRange _4107_range = _4092___mcc_h182;
                DAST._IType _4108_b = _4091___mcc_h181;
                {
                  RAST._IExpr _out510;
                  DCOMP._IOwnership _out511;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out512;
                  (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out510, out _out511, out _out512);
                  r = _out510;
                  resultingOwnership = _out511;
                  readIdents = _out512;
                }
              } else if (_source259.is_Trait) {
                Dafny.ISequence<DAST._IAttribute> _4109_attributes = _3998___mcc_h10;
                bool _4110_erase = _4093___mcc_h183;
                DAST._INewtypeRange _4111_range = _4092___mcc_h182;
                DAST._IType _4112_b = _4091___mcc_h181;
                {
                  RAST._IExpr _out513;
                  DCOMP._IOwnership _out514;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out515;
                  (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out513, out _out514, out _out515);
                  r = _out513;
                  resultingOwnership = _out514;
                  readIdents = _out515;
                }
              } else {
                DAST._IType _4113___mcc_h211 = _source259.dtor_baseType;
                DAST._INewtypeRange _4114___mcc_h212 = _source259.dtor_range;
                bool _4115___mcc_h213 = _source259.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4116_attributes = _4098___mcc_h196;
                bool _4117_erase = _4115___mcc_h213;
                DAST._INewtypeRange _4118_range = _4114___mcc_h212;
                DAST._IType _4119_b = _4113___mcc_h211;
                {
                  RAST._IExpr _out516;
                  DCOMP._IOwnership _out517;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out518;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out516, out _out517, out _out518);
                  r = _out516;
                  resultingOwnership = _out517;
                  readIdents = _out518;
                }
              }
            } else if (_source257.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4120___mcc_h220 = _source257.dtor_Tuple_i_a0;
              Dafny.ISequence<DAST._IAttribute> _4121_attributes = _3998___mcc_h10;
              bool _4122_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4123_range = _4092___mcc_h182;
              DAST._IType _4124_b = _4091___mcc_h181;
              {
                RAST._IExpr _out519;
                DCOMP._IOwnership _out520;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out519, out _out520, out _out521);
                r = _out519;
                resultingOwnership = _out520;
                readIdents = _out521;
              }
            } else if (_source257.is_Array) {
              DAST._IType _4125___mcc_h223 = _source257.dtor_element;
              BigInteger _4126___mcc_h224 = _source257.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _4127_attributes = _3998___mcc_h10;
              bool _4128_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4129_range = _4092___mcc_h182;
              DAST._IType _4130_b = _4091___mcc_h181;
              {
                RAST._IExpr _out522;
                DCOMP._IOwnership _out523;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out524;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out522, out _out523, out _out524);
                r = _out522;
                resultingOwnership = _out523;
                readIdents = _out524;
              }
            } else if (_source257.is_Seq) {
              DAST._IType _4131___mcc_h229 = _source257.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _4132_attributes = _3998___mcc_h10;
              bool _4133_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4134_range = _4092___mcc_h182;
              DAST._IType _4135_b = _4091___mcc_h181;
              {
                RAST._IExpr _out525;
                DCOMP._IOwnership _out526;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out527;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out525, out _out526, out _out527);
                r = _out525;
                resultingOwnership = _out526;
                readIdents = _out527;
              }
            } else if (_source257.is_Set) {
              DAST._IType _4136___mcc_h232 = _source257.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _4137_attributes = _3998___mcc_h10;
              bool _4138_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4139_range = _4092___mcc_h182;
              DAST._IType _4140_b = _4091___mcc_h181;
              {
                RAST._IExpr _out528;
                DCOMP._IOwnership _out529;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out530;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out528, out _out529, out _out530);
                r = _out528;
                resultingOwnership = _out529;
                readIdents = _out530;
              }
            } else if (_source257.is_Multiset) {
              DAST._IType _4141___mcc_h235 = _source257.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _4142_attributes = _3998___mcc_h10;
              bool _4143_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4144_range = _4092___mcc_h182;
              DAST._IType _4145_b = _4091___mcc_h181;
              {
                RAST._IExpr _out531;
                DCOMP._IOwnership _out532;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out531, out _out532, out _out533);
                r = _out531;
                resultingOwnership = _out532;
                readIdents = _out533;
              }
            } else if (_source257.is_Map) {
              DAST._IType _4146___mcc_h238 = _source257.dtor_key;
              DAST._IType _4147___mcc_h239 = _source257.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _4148_attributes = _3998___mcc_h10;
              bool _4149_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4150_range = _4092___mcc_h182;
              DAST._IType _4151_b = _4091___mcc_h181;
              {
                RAST._IExpr _out534;
                DCOMP._IOwnership _out535;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out536;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out534, out _out535, out _out536);
                r = _out534;
                resultingOwnership = _out535;
                readIdents = _out536;
              }
            } else if (_source257.is_SetBuilder) {
              DAST._IType _4152___mcc_h244 = _source257.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _4153_attributes = _3998___mcc_h10;
              bool _4154_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4155_range = _4092___mcc_h182;
              DAST._IType _4156_b = _4091___mcc_h181;
              {
                RAST._IExpr _out537;
                DCOMP._IOwnership _out538;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out539;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out537, out _out538, out _out539);
                r = _out537;
                resultingOwnership = _out538;
                readIdents = _out539;
              }
            } else if (_source257.is_MapBuilder) {
              DAST._IType _4157___mcc_h247 = _source257.dtor_key;
              DAST._IType _4158___mcc_h248 = _source257.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _4159_attributes = _3998___mcc_h10;
              bool _4160_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4161_range = _4092___mcc_h182;
              DAST._IType _4162_b = _4091___mcc_h181;
              {
                RAST._IExpr _out540;
                DCOMP._IOwnership _out541;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out540, out _out541, out _out542);
                r = _out540;
                resultingOwnership = _out541;
                readIdents = _out542;
              }
            } else if (_source257.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4163___mcc_h253 = _source257.dtor_args;
              DAST._IType _4164___mcc_h254 = _source257.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _4165_attributes = _3998___mcc_h10;
              bool _4166_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4167_range = _4092___mcc_h182;
              DAST._IType _4168_b = _4091___mcc_h181;
              {
                RAST._IExpr _out543;
                DCOMP._IOwnership _out544;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out545;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out543, out _out544, out _out545);
                r = _out543;
                resultingOwnership = _out544;
                readIdents = _out545;
              }
            } else if (_source257.is_Primitive) {
              DAST._IPrimitive _4169___mcc_h259 = _source257.dtor_Primitive_i_a0;
              Dafny.ISequence<DAST._IAttribute> _4170_attributes = _3998___mcc_h10;
              bool _4171_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4172_range = _4092___mcc_h182;
              DAST._IType _4173_b = _4091___mcc_h181;
              {
                RAST._IExpr _out546;
                DCOMP._IOwnership _out547;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out548;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out546, out _out547, out _out548);
                r = _out546;
                resultingOwnership = _out547;
                readIdents = _out548;
              }
            } else if (_source257.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4174___mcc_h262 = _source257.dtor_Passthrough_i_a0;
              Dafny.ISequence<DAST._IAttribute> _4175_attributes = _3998___mcc_h10;
              bool _4176_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4177_range = _4092___mcc_h182;
              DAST._IType _4178_b = _4091___mcc_h181;
              {
                RAST._IExpr _out549;
                DCOMP._IOwnership _out550;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out551;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out549, out _out550, out _out551);
                r = _out549;
                resultingOwnership = _out550;
                readIdents = _out551;
              }
            } else if (_source257.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4179___mcc_h265 = _source257.dtor_TypeArg_i_a0;
              Dafny.ISequence<DAST._IAttribute> _4180_attributes = _3998___mcc_h10;
              bool _4181_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4182_range = _4092___mcc_h182;
              DAST._IType _4183_b = _4091___mcc_h181;
              {
                RAST._IExpr _out552;
                DCOMP._IOwnership _out553;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out552, out _out553, out _out554);
                r = _out552;
                resultingOwnership = _out553;
                readIdents = _out554;
              }
            } else {
              Dafny.ISequence<DAST._IAttribute> _4184_attributes = _3998___mcc_h10;
              bool _4185_erase = _4093___mcc_h183;
              DAST._INewtypeRange _4186_range = _4092___mcc_h182;
              DAST._IType _4187_b = _4091___mcc_h181;
              {
                RAST._IExpr _out555;
                DCOMP._IOwnership _out556;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out557;
                (this).GenExprConvertFromNewtype(e, selfIdent, env, expectedOwnership, out _out555, out _out556, out _out557);
                r = _out555;
                resultingOwnership = _out556;
                readIdents = _out557;
              }
            }
          }
        } else if (_source245.is_Tuple) {
          Dafny.ISequence<DAST._IType> _4188___mcc_h268 = _source245.dtor_Tuple_i_a0;
          DAST._IType _source260 = _3993___mcc_h1;
          if (_source260.is_UserDefined) {
            DAST._IResolvedType _4189___mcc_h271 = _source260.dtor_resolved;
            DAST._IResolvedType _source261 = _4189___mcc_h271;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4190___mcc_h273 = _source261.dtor_path;
            Dafny.ISequence<DAST._IType> _4191___mcc_h274 = _source261.dtor_typeArgs;
            DAST._IResolvedTypeBase _4192___mcc_h275 = _source261.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4193___mcc_h276 = _source261.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4194___mcc_h277 = _source261.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4195___mcc_h278 = _source261.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source262 = _4192___mcc_h275;
            if (_source262.is_Class) {
              {
                RAST._IExpr _out558;
                DCOMP._IOwnership _out559;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out560;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out558, out _out559, out _out560);
                r = _out558;
                resultingOwnership = _out559;
                readIdents = _out560;
              }
            } else if (_source262.is_Datatype) {
              {
                RAST._IExpr _out561;
                DCOMP._IOwnership _out562;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out563;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out561, out _out562, out _out563);
                r = _out561;
                resultingOwnership = _out562;
                readIdents = _out563;
              }
            } else if (_source262.is_Trait) {
              {
                RAST._IExpr _out564;
                DCOMP._IOwnership _out565;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out564, out _out565, out _out566);
                r = _out564;
                resultingOwnership = _out565;
                readIdents = _out566;
              }
            } else {
              DAST._IType _4196___mcc_h285 = _source262.dtor_baseType;
              DAST._INewtypeRange _4197___mcc_h286 = _source262.dtor_range;
              bool _4198___mcc_h287 = _source262.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4199_attributes = _4193___mcc_h276;
              bool _4200_erase = _4198___mcc_h287;
              DAST._INewtypeRange _4201_range = _4197___mcc_h286;
              DAST._IType _4202_b = _4196___mcc_h285;
              {
                RAST._IExpr _out567;
                DCOMP._IOwnership _out568;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out567, out _out568, out _out569);
                r = _out567;
                resultingOwnership = _out568;
                readIdents = _out569;
              }
            }
          } else if (_source260.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4203___mcc_h291 = _source260.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out570;
              DCOMP._IOwnership _out571;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out572;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out570, out _out571, out _out572);
              r = _out570;
              resultingOwnership = _out571;
              readIdents = _out572;
            }
          } else if (_source260.is_Array) {
            DAST._IType _4204___mcc_h293 = _source260.dtor_element;
            BigInteger _4205___mcc_h294 = _source260.dtor_dims;
            {
              RAST._IExpr _out573;
              DCOMP._IOwnership _out574;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out575;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out573, out _out574, out _out575);
              r = _out573;
              resultingOwnership = _out574;
              readIdents = _out575;
            }
          } else if (_source260.is_Seq) {
            DAST._IType _4206___mcc_h297 = _source260.dtor_element;
            {
              RAST._IExpr _out576;
              DCOMP._IOwnership _out577;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out576, out _out577, out _out578);
              r = _out576;
              resultingOwnership = _out577;
              readIdents = _out578;
            }
          } else if (_source260.is_Set) {
            DAST._IType _4207___mcc_h299 = _source260.dtor_element;
            {
              RAST._IExpr _out579;
              DCOMP._IOwnership _out580;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out581;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out579, out _out580, out _out581);
              r = _out579;
              resultingOwnership = _out580;
              readIdents = _out581;
            }
          } else if (_source260.is_Multiset) {
            DAST._IType _4208___mcc_h301 = _source260.dtor_element;
            {
              RAST._IExpr _out582;
              DCOMP._IOwnership _out583;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out584;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out582, out _out583, out _out584);
              r = _out582;
              resultingOwnership = _out583;
              readIdents = _out584;
            }
          } else if (_source260.is_Map) {
            DAST._IType _4209___mcc_h303 = _source260.dtor_key;
            DAST._IType _4210___mcc_h304 = _source260.dtor_value;
            {
              RAST._IExpr _out585;
              DCOMP._IOwnership _out586;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out587;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out585, out _out586, out _out587);
              r = _out585;
              resultingOwnership = _out586;
              readIdents = _out587;
            }
          } else if (_source260.is_SetBuilder) {
            DAST._IType _4211___mcc_h307 = _source260.dtor_element;
            {
              RAST._IExpr _out588;
              DCOMP._IOwnership _out589;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out588, out _out589, out _out590);
              r = _out588;
              resultingOwnership = _out589;
              readIdents = _out590;
            }
          } else if (_source260.is_MapBuilder) {
            DAST._IType _4212___mcc_h309 = _source260.dtor_key;
            DAST._IType _4213___mcc_h310 = _source260.dtor_value;
            {
              RAST._IExpr _out591;
              DCOMP._IOwnership _out592;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out593;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out591, out _out592, out _out593);
              r = _out591;
              resultingOwnership = _out592;
              readIdents = _out593;
            }
          } else if (_source260.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4214___mcc_h313 = _source260.dtor_args;
            DAST._IType _4215___mcc_h314 = _source260.dtor_result;
            {
              RAST._IExpr _out594;
              DCOMP._IOwnership _out595;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out596;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out594, out _out595, out _out596);
              r = _out594;
              resultingOwnership = _out595;
              readIdents = _out596;
            }
          } else if (_source260.is_Primitive) {
            DAST._IPrimitive _4216___mcc_h317 = _source260.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out597;
              DCOMP._IOwnership _out598;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out599;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out597, out _out598, out _out599);
              r = _out597;
              resultingOwnership = _out598;
              readIdents = _out599;
            }
          } else if (_source260.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4217___mcc_h319 = _source260.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out600;
              DCOMP._IOwnership _out601;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out600, out _out601, out _out602);
              r = _out600;
              resultingOwnership = _out601;
              readIdents = _out602;
            }
          } else if (_source260.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4218___mcc_h321 = _source260.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out603;
              DCOMP._IOwnership _out604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out603, out _out604, out _out605);
              r = _out603;
              resultingOwnership = _out604;
              readIdents = _out605;
            }
          } else {
            {
              RAST._IExpr _out606;
              DCOMP._IOwnership _out607;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out608;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out606, out _out607, out _out608);
              r = _out606;
              resultingOwnership = _out607;
              readIdents = _out608;
            }
          }
        } else if (_source245.is_Array) {
          DAST._IType _4219___mcc_h323 = _source245.dtor_element;
          BigInteger _4220___mcc_h324 = _source245.dtor_dims;
          DAST._IType _source263 = _3993___mcc_h1;
          if (_source263.is_UserDefined) {
            DAST._IResolvedType _4221___mcc_h329 = _source263.dtor_resolved;
            DAST._IResolvedType _source264 = _4221___mcc_h329;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4222___mcc_h331 = _source264.dtor_path;
            Dafny.ISequence<DAST._IType> _4223___mcc_h332 = _source264.dtor_typeArgs;
            DAST._IResolvedTypeBase _4224___mcc_h333 = _source264.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4225___mcc_h334 = _source264.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4226___mcc_h335 = _source264.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4227___mcc_h336 = _source264.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source265 = _4224___mcc_h333;
            if (_source265.is_Class) {
              {
                RAST._IExpr _out609;
                DCOMP._IOwnership _out610;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out609, out _out610, out _out611);
                r = _out609;
                resultingOwnership = _out610;
                readIdents = _out611;
              }
            } else if (_source265.is_Datatype) {
              {
                RAST._IExpr _out612;
                DCOMP._IOwnership _out613;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out612, out _out613, out _out614);
                r = _out612;
                resultingOwnership = _out613;
                readIdents = _out614;
              }
            } else if (_source265.is_Trait) {
              {
                RAST._IExpr _out615;
                DCOMP._IOwnership _out616;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out617;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out615, out _out616, out _out617);
                r = _out615;
                resultingOwnership = _out616;
                readIdents = _out617;
              }
            } else {
              DAST._IType _4228___mcc_h343 = _source265.dtor_baseType;
              DAST._INewtypeRange _4229___mcc_h344 = _source265.dtor_range;
              bool _4230___mcc_h345 = _source265.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4231_attributes = _4225___mcc_h334;
              bool _4232_erase = _4230___mcc_h345;
              DAST._INewtypeRange _4233_range = _4229___mcc_h344;
              DAST._IType _4234_b = _4228___mcc_h343;
              {
                RAST._IExpr _out618;
                DCOMP._IOwnership _out619;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out618, out _out619, out _out620);
                r = _out618;
                resultingOwnership = _out619;
                readIdents = _out620;
              }
            }
          } else if (_source263.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4235___mcc_h349 = _source263.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out621;
              DCOMP._IOwnership _out622;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out621, out _out622, out _out623);
              r = _out621;
              resultingOwnership = _out622;
              readIdents = _out623;
            }
          } else if (_source263.is_Array) {
            DAST._IType _4236___mcc_h351 = _source263.dtor_element;
            BigInteger _4237___mcc_h352 = _source263.dtor_dims;
            {
              RAST._IExpr _out624;
              DCOMP._IOwnership _out625;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out624, out _out625, out _out626);
              r = _out624;
              resultingOwnership = _out625;
              readIdents = _out626;
            }
          } else if (_source263.is_Seq) {
            DAST._IType _4238___mcc_h355 = _source263.dtor_element;
            {
              RAST._IExpr _out627;
              DCOMP._IOwnership _out628;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out629;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out627, out _out628, out _out629);
              r = _out627;
              resultingOwnership = _out628;
              readIdents = _out629;
            }
          } else if (_source263.is_Set) {
            DAST._IType _4239___mcc_h357 = _source263.dtor_element;
            {
              RAST._IExpr _out630;
              DCOMP._IOwnership _out631;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out632;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out630, out _out631, out _out632);
              r = _out630;
              resultingOwnership = _out631;
              readIdents = _out632;
            }
          } else if (_source263.is_Multiset) {
            DAST._IType _4240___mcc_h359 = _source263.dtor_element;
            {
              RAST._IExpr _out633;
              DCOMP._IOwnership _out634;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out633, out _out634, out _out635);
              r = _out633;
              resultingOwnership = _out634;
              readIdents = _out635;
            }
          } else if (_source263.is_Map) {
            DAST._IType _4241___mcc_h361 = _source263.dtor_key;
            DAST._IType _4242___mcc_h362 = _source263.dtor_value;
            {
              RAST._IExpr _out636;
              DCOMP._IOwnership _out637;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out636, out _out637, out _out638);
              r = _out636;
              resultingOwnership = _out637;
              readIdents = _out638;
            }
          } else if (_source263.is_SetBuilder) {
            DAST._IType _4243___mcc_h365 = _source263.dtor_element;
            {
              RAST._IExpr _out639;
              DCOMP._IOwnership _out640;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out641;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out639, out _out640, out _out641);
              r = _out639;
              resultingOwnership = _out640;
              readIdents = _out641;
            }
          } else if (_source263.is_MapBuilder) {
            DAST._IType _4244___mcc_h367 = _source263.dtor_key;
            DAST._IType _4245___mcc_h368 = _source263.dtor_value;
            {
              RAST._IExpr _out642;
              DCOMP._IOwnership _out643;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out642, out _out643, out _out644);
              r = _out642;
              resultingOwnership = _out643;
              readIdents = _out644;
            }
          } else if (_source263.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4246___mcc_h371 = _source263.dtor_args;
            DAST._IType _4247___mcc_h372 = _source263.dtor_result;
            {
              RAST._IExpr _out645;
              DCOMP._IOwnership _out646;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out645, out _out646, out _out647);
              r = _out645;
              resultingOwnership = _out646;
              readIdents = _out647;
            }
          } else if (_source263.is_Primitive) {
            DAST._IPrimitive _4248___mcc_h375 = _source263.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out648;
              DCOMP._IOwnership _out649;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out648, out _out649, out _out650);
              r = _out648;
              resultingOwnership = _out649;
              readIdents = _out650;
            }
          } else if (_source263.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4249___mcc_h377 = _source263.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out651;
              DCOMP._IOwnership _out652;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out653;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out651, out _out652, out _out653);
              r = _out651;
              resultingOwnership = _out652;
              readIdents = _out653;
            }
          } else if (_source263.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4250___mcc_h379 = _source263.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out654;
              DCOMP._IOwnership _out655;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out654, out _out655, out _out656);
              r = _out654;
              resultingOwnership = _out655;
              readIdents = _out656;
            }
          } else {
            {
              RAST._IExpr _out657;
              DCOMP._IOwnership _out658;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out657, out _out658, out _out659);
              r = _out657;
              resultingOwnership = _out658;
              readIdents = _out659;
            }
          }
        } else if (_source245.is_Seq) {
          DAST._IType _4251___mcc_h381 = _source245.dtor_element;
          DAST._IType _source266 = _3993___mcc_h1;
          if (_source266.is_UserDefined) {
            DAST._IResolvedType _4252___mcc_h384 = _source266.dtor_resolved;
            DAST._IResolvedType _source267 = _4252___mcc_h384;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4253___mcc_h386 = _source267.dtor_path;
            Dafny.ISequence<DAST._IType> _4254___mcc_h387 = _source267.dtor_typeArgs;
            DAST._IResolvedTypeBase _4255___mcc_h388 = _source267.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4256___mcc_h389 = _source267.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4257___mcc_h390 = _source267.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4258___mcc_h391 = _source267.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source268 = _4255___mcc_h388;
            if (_source268.is_Class) {
              {
                RAST._IExpr _out660;
                DCOMP._IOwnership _out661;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out662;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out660, out _out661, out _out662);
                r = _out660;
                resultingOwnership = _out661;
                readIdents = _out662;
              }
            } else if (_source268.is_Datatype) {
              {
                RAST._IExpr _out663;
                DCOMP._IOwnership _out664;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out665;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out663, out _out664, out _out665);
                r = _out663;
                resultingOwnership = _out664;
                readIdents = _out665;
              }
            } else if (_source268.is_Trait) {
              {
                RAST._IExpr _out666;
                DCOMP._IOwnership _out667;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out666, out _out667, out _out668);
                r = _out666;
                resultingOwnership = _out667;
                readIdents = _out668;
              }
            } else {
              DAST._IType _4259___mcc_h398 = _source268.dtor_baseType;
              DAST._INewtypeRange _4260___mcc_h399 = _source268.dtor_range;
              bool _4261___mcc_h400 = _source268.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4262_attributes = _4256___mcc_h389;
              bool _4263_erase = _4261___mcc_h400;
              DAST._INewtypeRange _4264_range = _4260___mcc_h399;
              DAST._IType _4265_b = _4259___mcc_h398;
              {
                RAST._IExpr _out669;
                DCOMP._IOwnership _out670;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out669, out _out670, out _out671);
                r = _out669;
                resultingOwnership = _out670;
                readIdents = _out671;
              }
            }
          } else if (_source266.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4266___mcc_h404 = _source266.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out672;
              DCOMP._IOwnership _out673;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out674;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out672, out _out673, out _out674);
              r = _out672;
              resultingOwnership = _out673;
              readIdents = _out674;
            }
          } else if (_source266.is_Array) {
            DAST._IType _4267___mcc_h406 = _source266.dtor_element;
            BigInteger _4268___mcc_h407 = _source266.dtor_dims;
            {
              RAST._IExpr _out675;
              DCOMP._IOwnership _out676;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out677;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out675, out _out676, out _out677);
              r = _out675;
              resultingOwnership = _out676;
              readIdents = _out677;
            }
          } else if (_source266.is_Seq) {
            DAST._IType _4269___mcc_h410 = _source266.dtor_element;
            {
              RAST._IExpr _out678;
              DCOMP._IOwnership _out679;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out678, out _out679, out _out680);
              r = _out678;
              resultingOwnership = _out679;
              readIdents = _out680;
            }
          } else if (_source266.is_Set) {
            DAST._IType _4270___mcc_h412 = _source266.dtor_element;
            {
              RAST._IExpr _out681;
              DCOMP._IOwnership _out682;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out683;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out681, out _out682, out _out683);
              r = _out681;
              resultingOwnership = _out682;
              readIdents = _out683;
            }
          } else if (_source266.is_Multiset) {
            DAST._IType _4271___mcc_h414 = _source266.dtor_element;
            {
              RAST._IExpr _out684;
              DCOMP._IOwnership _out685;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out686;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out684, out _out685, out _out686);
              r = _out684;
              resultingOwnership = _out685;
              readIdents = _out686;
            }
          } else if (_source266.is_Map) {
            DAST._IType _4272___mcc_h416 = _source266.dtor_key;
            DAST._IType _4273___mcc_h417 = _source266.dtor_value;
            {
              RAST._IExpr _out687;
              DCOMP._IOwnership _out688;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out689;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out687, out _out688, out _out689);
              r = _out687;
              resultingOwnership = _out688;
              readIdents = _out689;
            }
          } else if (_source266.is_SetBuilder) {
            DAST._IType _4274___mcc_h420 = _source266.dtor_element;
            {
              RAST._IExpr _out690;
              DCOMP._IOwnership _out691;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out690, out _out691, out _out692);
              r = _out690;
              resultingOwnership = _out691;
              readIdents = _out692;
            }
          } else if (_source266.is_MapBuilder) {
            DAST._IType _4275___mcc_h422 = _source266.dtor_key;
            DAST._IType _4276___mcc_h423 = _source266.dtor_value;
            {
              RAST._IExpr _out693;
              DCOMP._IOwnership _out694;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out695;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out693, out _out694, out _out695);
              r = _out693;
              resultingOwnership = _out694;
              readIdents = _out695;
            }
          } else if (_source266.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4277___mcc_h426 = _source266.dtor_args;
            DAST._IType _4278___mcc_h427 = _source266.dtor_result;
            {
              RAST._IExpr _out696;
              DCOMP._IOwnership _out697;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out698;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out696, out _out697, out _out698);
              r = _out696;
              resultingOwnership = _out697;
              readIdents = _out698;
            }
          } else if (_source266.is_Primitive) {
            DAST._IPrimitive _4279___mcc_h430 = _source266.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out699;
              DCOMP._IOwnership _out700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out699, out _out700, out _out701);
              r = _out699;
              resultingOwnership = _out700;
              readIdents = _out701;
            }
          } else if (_source266.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4280___mcc_h432 = _source266.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out702;
              DCOMP._IOwnership _out703;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out702, out _out703, out _out704);
              r = _out702;
              resultingOwnership = _out703;
              readIdents = _out704;
            }
          } else if (_source266.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4281___mcc_h434 = _source266.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out705;
              DCOMP._IOwnership _out706;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out707;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out705, out _out706, out _out707);
              r = _out705;
              resultingOwnership = _out706;
              readIdents = _out707;
            }
          } else {
            {
              RAST._IExpr _out708;
              DCOMP._IOwnership _out709;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out710;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out708, out _out709, out _out710);
              r = _out708;
              resultingOwnership = _out709;
              readIdents = _out710;
            }
          }
        } else if (_source245.is_Set) {
          DAST._IType _4282___mcc_h436 = _source245.dtor_element;
          DAST._IType _source269 = _3993___mcc_h1;
          if (_source269.is_UserDefined) {
            DAST._IResolvedType _4283___mcc_h439 = _source269.dtor_resolved;
            DAST._IResolvedType _source270 = _4283___mcc_h439;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4284___mcc_h441 = _source270.dtor_path;
            Dafny.ISequence<DAST._IType> _4285___mcc_h442 = _source270.dtor_typeArgs;
            DAST._IResolvedTypeBase _4286___mcc_h443 = _source270.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4287___mcc_h444 = _source270.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4288___mcc_h445 = _source270.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4289___mcc_h446 = _source270.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source271 = _4286___mcc_h443;
            if (_source271.is_Class) {
              {
                RAST._IExpr _out711;
                DCOMP._IOwnership _out712;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out713;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out711, out _out712, out _out713);
                r = _out711;
                resultingOwnership = _out712;
                readIdents = _out713;
              }
            } else if (_source271.is_Datatype) {
              {
                RAST._IExpr _out714;
                DCOMP._IOwnership _out715;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out714, out _out715, out _out716);
                r = _out714;
                resultingOwnership = _out715;
                readIdents = _out716;
              }
            } else if (_source271.is_Trait) {
              {
                RAST._IExpr _out717;
                DCOMP._IOwnership _out718;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out719;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out717, out _out718, out _out719);
                r = _out717;
                resultingOwnership = _out718;
                readIdents = _out719;
              }
            } else {
              DAST._IType _4290___mcc_h453 = _source271.dtor_baseType;
              DAST._INewtypeRange _4291___mcc_h454 = _source271.dtor_range;
              bool _4292___mcc_h455 = _source271.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4293_attributes = _4287___mcc_h444;
              bool _4294_erase = _4292___mcc_h455;
              DAST._INewtypeRange _4295_range = _4291___mcc_h454;
              DAST._IType _4296_b = _4290___mcc_h453;
              {
                RAST._IExpr _out720;
                DCOMP._IOwnership _out721;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out722;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out720, out _out721, out _out722);
                r = _out720;
                resultingOwnership = _out721;
                readIdents = _out722;
              }
            }
          } else if (_source269.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4297___mcc_h459 = _source269.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out723;
              DCOMP._IOwnership _out724;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out725;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out723, out _out724, out _out725);
              r = _out723;
              resultingOwnership = _out724;
              readIdents = _out725;
            }
          } else if (_source269.is_Array) {
            DAST._IType _4298___mcc_h461 = _source269.dtor_element;
            BigInteger _4299___mcc_h462 = _source269.dtor_dims;
            {
              RAST._IExpr _out726;
              DCOMP._IOwnership _out727;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out728;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out726, out _out727, out _out728);
              r = _out726;
              resultingOwnership = _out727;
              readIdents = _out728;
            }
          } else if (_source269.is_Seq) {
            DAST._IType _4300___mcc_h465 = _source269.dtor_element;
            {
              RAST._IExpr _out729;
              DCOMP._IOwnership _out730;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out729, out _out730, out _out731);
              r = _out729;
              resultingOwnership = _out730;
              readIdents = _out731;
            }
          } else if (_source269.is_Set) {
            DAST._IType _4301___mcc_h467 = _source269.dtor_element;
            {
              RAST._IExpr _out732;
              DCOMP._IOwnership _out733;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out734;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out732, out _out733, out _out734);
              r = _out732;
              resultingOwnership = _out733;
              readIdents = _out734;
            }
          } else if (_source269.is_Multiset) {
            DAST._IType _4302___mcc_h469 = _source269.dtor_element;
            {
              RAST._IExpr _out735;
              DCOMP._IOwnership _out736;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out735, out _out736, out _out737);
              r = _out735;
              resultingOwnership = _out736;
              readIdents = _out737;
            }
          } else if (_source269.is_Map) {
            DAST._IType _4303___mcc_h471 = _source269.dtor_key;
            DAST._IType _4304___mcc_h472 = _source269.dtor_value;
            {
              RAST._IExpr _out738;
              DCOMP._IOwnership _out739;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out738, out _out739, out _out740);
              r = _out738;
              resultingOwnership = _out739;
              readIdents = _out740;
            }
          } else if (_source269.is_SetBuilder) {
            DAST._IType _4305___mcc_h475 = _source269.dtor_element;
            {
              RAST._IExpr _out741;
              DCOMP._IOwnership _out742;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out743;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out741, out _out742, out _out743);
              r = _out741;
              resultingOwnership = _out742;
              readIdents = _out743;
            }
          } else if (_source269.is_MapBuilder) {
            DAST._IType _4306___mcc_h477 = _source269.dtor_key;
            DAST._IType _4307___mcc_h478 = _source269.dtor_value;
            {
              RAST._IExpr _out744;
              DCOMP._IOwnership _out745;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out744, out _out745, out _out746);
              r = _out744;
              resultingOwnership = _out745;
              readIdents = _out746;
            }
          } else if (_source269.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4308___mcc_h481 = _source269.dtor_args;
            DAST._IType _4309___mcc_h482 = _source269.dtor_result;
            {
              RAST._IExpr _out747;
              DCOMP._IOwnership _out748;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out747, out _out748, out _out749);
              r = _out747;
              resultingOwnership = _out748;
              readIdents = _out749;
            }
          } else if (_source269.is_Primitive) {
            DAST._IPrimitive _4310___mcc_h485 = _source269.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out750;
              DCOMP._IOwnership _out751;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out752;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out750, out _out751, out _out752);
              r = _out750;
              resultingOwnership = _out751;
              readIdents = _out752;
            }
          } else if (_source269.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4311___mcc_h487 = _source269.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out753;
              DCOMP._IOwnership _out754;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out755;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out753, out _out754, out _out755);
              r = _out753;
              resultingOwnership = _out754;
              readIdents = _out755;
            }
          } else if (_source269.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4312___mcc_h489 = _source269.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out756;
              DCOMP._IOwnership _out757;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out758;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out756, out _out757, out _out758);
              r = _out756;
              resultingOwnership = _out757;
              readIdents = _out758;
            }
          } else {
            {
              RAST._IExpr _out759;
              DCOMP._IOwnership _out760;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out759, out _out760, out _out761);
              r = _out759;
              resultingOwnership = _out760;
              readIdents = _out761;
            }
          }
        } else if (_source245.is_Multiset) {
          DAST._IType _4313___mcc_h491 = _source245.dtor_element;
          DAST._IType _source272 = _3993___mcc_h1;
          if (_source272.is_UserDefined) {
            DAST._IResolvedType _4314___mcc_h494 = _source272.dtor_resolved;
            DAST._IResolvedType _source273 = _4314___mcc_h494;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4315___mcc_h496 = _source273.dtor_path;
            Dafny.ISequence<DAST._IType> _4316___mcc_h497 = _source273.dtor_typeArgs;
            DAST._IResolvedTypeBase _4317___mcc_h498 = _source273.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4318___mcc_h499 = _source273.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4319___mcc_h500 = _source273.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4320___mcc_h501 = _source273.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source274 = _4317___mcc_h498;
            if (_source274.is_Class) {
              {
                RAST._IExpr _out762;
                DCOMP._IOwnership _out763;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out764;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out762, out _out763, out _out764);
                r = _out762;
                resultingOwnership = _out763;
                readIdents = _out764;
              }
            } else if (_source274.is_Datatype) {
              {
                RAST._IExpr _out765;
                DCOMP._IOwnership _out766;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out767;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out765, out _out766, out _out767);
                r = _out765;
                resultingOwnership = _out766;
                readIdents = _out767;
              }
            } else if (_source274.is_Trait) {
              {
                RAST._IExpr _out768;
                DCOMP._IOwnership _out769;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out768, out _out769, out _out770);
                r = _out768;
                resultingOwnership = _out769;
                readIdents = _out770;
              }
            } else {
              DAST._IType _4321___mcc_h508 = _source274.dtor_baseType;
              DAST._INewtypeRange _4322___mcc_h509 = _source274.dtor_range;
              bool _4323___mcc_h510 = _source274.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4324_attributes = _4318___mcc_h499;
              bool _4325_erase = _4323___mcc_h510;
              DAST._INewtypeRange _4326_range = _4322___mcc_h509;
              DAST._IType _4327_b = _4321___mcc_h508;
              {
                RAST._IExpr _out771;
                DCOMP._IOwnership _out772;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out771, out _out772, out _out773);
                r = _out771;
                resultingOwnership = _out772;
                readIdents = _out773;
              }
            }
          } else if (_source272.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4328___mcc_h514 = _source272.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out774;
              DCOMP._IOwnership _out775;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out776;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out774, out _out775, out _out776);
              r = _out774;
              resultingOwnership = _out775;
              readIdents = _out776;
            }
          } else if (_source272.is_Array) {
            DAST._IType _4329___mcc_h516 = _source272.dtor_element;
            BigInteger _4330___mcc_h517 = _source272.dtor_dims;
            {
              RAST._IExpr _out777;
              DCOMP._IOwnership _out778;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out779;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out777, out _out778, out _out779);
              r = _out777;
              resultingOwnership = _out778;
              readIdents = _out779;
            }
          } else if (_source272.is_Seq) {
            DAST._IType _4331___mcc_h520 = _source272.dtor_element;
            {
              RAST._IExpr _out780;
              DCOMP._IOwnership _out781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out780, out _out781, out _out782);
              r = _out780;
              resultingOwnership = _out781;
              readIdents = _out782;
            }
          } else if (_source272.is_Set) {
            DAST._IType _4332___mcc_h522 = _source272.dtor_element;
            {
              RAST._IExpr _out783;
              DCOMP._IOwnership _out784;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out783, out _out784, out _out785);
              r = _out783;
              resultingOwnership = _out784;
              readIdents = _out785;
            }
          } else if (_source272.is_Multiset) {
            DAST._IType _4333___mcc_h524 = _source272.dtor_element;
            {
              RAST._IExpr _out786;
              DCOMP._IOwnership _out787;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out788;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out786, out _out787, out _out788);
              r = _out786;
              resultingOwnership = _out787;
              readIdents = _out788;
            }
          } else if (_source272.is_Map) {
            DAST._IType _4334___mcc_h526 = _source272.dtor_key;
            DAST._IType _4335___mcc_h527 = _source272.dtor_value;
            {
              RAST._IExpr _out789;
              DCOMP._IOwnership _out790;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out791;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out789, out _out790, out _out791);
              r = _out789;
              resultingOwnership = _out790;
              readIdents = _out791;
            }
          } else if (_source272.is_SetBuilder) {
            DAST._IType _4336___mcc_h530 = _source272.dtor_element;
            {
              RAST._IExpr _out792;
              DCOMP._IOwnership _out793;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out792, out _out793, out _out794);
              r = _out792;
              resultingOwnership = _out793;
              readIdents = _out794;
            }
          } else if (_source272.is_MapBuilder) {
            DAST._IType _4337___mcc_h532 = _source272.dtor_key;
            DAST._IType _4338___mcc_h533 = _source272.dtor_value;
            {
              RAST._IExpr _out795;
              DCOMP._IOwnership _out796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out795, out _out796, out _out797);
              r = _out795;
              resultingOwnership = _out796;
              readIdents = _out797;
            }
          } else if (_source272.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4339___mcc_h536 = _source272.dtor_args;
            DAST._IType _4340___mcc_h537 = _source272.dtor_result;
            {
              RAST._IExpr _out798;
              DCOMP._IOwnership _out799;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out800;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out798, out _out799, out _out800);
              r = _out798;
              resultingOwnership = _out799;
              readIdents = _out800;
            }
          } else if (_source272.is_Primitive) {
            DAST._IPrimitive _4341___mcc_h540 = _source272.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out801;
              DCOMP._IOwnership _out802;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out803;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out801, out _out802, out _out803);
              r = _out801;
              resultingOwnership = _out802;
              readIdents = _out803;
            }
          } else if (_source272.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4342___mcc_h542 = _source272.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out804;
              DCOMP._IOwnership _out805;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out804, out _out805, out _out806);
              r = _out804;
              resultingOwnership = _out805;
              readIdents = _out806;
            }
          } else if (_source272.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4343___mcc_h544 = _source272.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out807;
              DCOMP._IOwnership _out808;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out807, out _out808, out _out809);
              r = _out807;
              resultingOwnership = _out808;
              readIdents = _out809;
            }
          } else {
            {
              RAST._IExpr _out810;
              DCOMP._IOwnership _out811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out810, out _out811, out _out812);
              r = _out810;
              resultingOwnership = _out811;
              readIdents = _out812;
            }
          }
        } else if (_source245.is_Map) {
          DAST._IType _4344___mcc_h546 = _source245.dtor_key;
          DAST._IType _4345___mcc_h547 = _source245.dtor_value;
          DAST._IType _source275 = _3993___mcc_h1;
          if (_source275.is_UserDefined) {
            DAST._IResolvedType _4346___mcc_h552 = _source275.dtor_resolved;
            DAST._IResolvedType _source276 = _4346___mcc_h552;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4347___mcc_h554 = _source276.dtor_path;
            Dafny.ISequence<DAST._IType> _4348___mcc_h555 = _source276.dtor_typeArgs;
            DAST._IResolvedTypeBase _4349___mcc_h556 = _source276.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4350___mcc_h557 = _source276.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4351___mcc_h558 = _source276.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4352___mcc_h559 = _source276.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source277 = _4349___mcc_h556;
            if (_source277.is_Class) {
              {
                RAST._IExpr _out813;
                DCOMP._IOwnership _out814;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out815;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out813, out _out814, out _out815);
                r = _out813;
                resultingOwnership = _out814;
                readIdents = _out815;
              }
            } else if (_source277.is_Datatype) {
              {
                RAST._IExpr _out816;
                DCOMP._IOwnership _out817;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out816, out _out817, out _out818);
                r = _out816;
                resultingOwnership = _out817;
                readIdents = _out818;
              }
            } else if (_source277.is_Trait) {
              {
                RAST._IExpr _out819;
                DCOMP._IOwnership _out820;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out821;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out819, out _out820, out _out821);
                r = _out819;
                resultingOwnership = _out820;
                readIdents = _out821;
              }
            } else {
              DAST._IType _4353___mcc_h566 = _source277.dtor_baseType;
              DAST._INewtypeRange _4354___mcc_h567 = _source277.dtor_range;
              bool _4355___mcc_h568 = _source277.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4356_attributes = _4350___mcc_h557;
              bool _4357_erase = _4355___mcc_h568;
              DAST._INewtypeRange _4358_range = _4354___mcc_h567;
              DAST._IType _4359_b = _4353___mcc_h566;
              {
                RAST._IExpr _out822;
                DCOMP._IOwnership _out823;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out824;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out822, out _out823, out _out824);
                r = _out822;
                resultingOwnership = _out823;
                readIdents = _out824;
              }
            }
          } else if (_source275.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4360___mcc_h572 = _source275.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out825;
              DCOMP._IOwnership _out826;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out825, out _out826, out _out827);
              r = _out825;
              resultingOwnership = _out826;
              readIdents = _out827;
            }
          } else if (_source275.is_Array) {
            DAST._IType _4361___mcc_h574 = _source275.dtor_element;
            BigInteger _4362___mcc_h575 = _source275.dtor_dims;
            {
              RAST._IExpr _out828;
              DCOMP._IOwnership _out829;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out828, out _out829, out _out830);
              r = _out828;
              resultingOwnership = _out829;
              readIdents = _out830;
            }
          } else if (_source275.is_Seq) {
            DAST._IType _4363___mcc_h578 = _source275.dtor_element;
            {
              RAST._IExpr _out831;
              DCOMP._IOwnership _out832;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out833;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out831, out _out832, out _out833);
              r = _out831;
              resultingOwnership = _out832;
              readIdents = _out833;
            }
          } else if (_source275.is_Set) {
            DAST._IType _4364___mcc_h580 = _source275.dtor_element;
            {
              RAST._IExpr _out834;
              DCOMP._IOwnership _out835;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out836;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out834, out _out835, out _out836);
              r = _out834;
              resultingOwnership = _out835;
              readIdents = _out836;
            }
          } else if (_source275.is_Multiset) {
            DAST._IType _4365___mcc_h582 = _source275.dtor_element;
            {
              RAST._IExpr _out837;
              DCOMP._IOwnership _out838;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out837, out _out838, out _out839);
              r = _out837;
              resultingOwnership = _out838;
              readIdents = _out839;
            }
          } else if (_source275.is_Map) {
            DAST._IType _4366___mcc_h584 = _source275.dtor_key;
            DAST._IType _4367___mcc_h585 = _source275.dtor_value;
            {
              RAST._IExpr _out840;
              DCOMP._IOwnership _out841;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out840, out _out841, out _out842);
              r = _out840;
              resultingOwnership = _out841;
              readIdents = _out842;
            }
          } else if (_source275.is_SetBuilder) {
            DAST._IType _4368___mcc_h588 = _source275.dtor_element;
            {
              RAST._IExpr _out843;
              DCOMP._IOwnership _out844;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out843, out _out844, out _out845);
              r = _out843;
              resultingOwnership = _out844;
              readIdents = _out845;
            }
          } else if (_source275.is_MapBuilder) {
            DAST._IType _4369___mcc_h590 = _source275.dtor_key;
            DAST._IType _4370___mcc_h591 = _source275.dtor_value;
            {
              RAST._IExpr _out846;
              DCOMP._IOwnership _out847;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out848;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out846, out _out847, out _out848);
              r = _out846;
              resultingOwnership = _out847;
              readIdents = _out848;
            }
          } else if (_source275.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4371___mcc_h594 = _source275.dtor_args;
            DAST._IType _4372___mcc_h595 = _source275.dtor_result;
            {
              RAST._IExpr _out849;
              DCOMP._IOwnership _out850;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out849, out _out850, out _out851);
              r = _out849;
              resultingOwnership = _out850;
              readIdents = _out851;
            }
          } else if (_source275.is_Primitive) {
            DAST._IPrimitive _4373___mcc_h598 = _source275.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out852;
              DCOMP._IOwnership _out853;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out852, out _out853, out _out854);
              r = _out852;
              resultingOwnership = _out853;
              readIdents = _out854;
            }
          } else if (_source275.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4374___mcc_h600 = _source275.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out855;
              DCOMP._IOwnership _out856;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out857;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out855, out _out856, out _out857);
              r = _out855;
              resultingOwnership = _out856;
              readIdents = _out857;
            }
          } else if (_source275.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4375___mcc_h602 = _source275.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out858;
              DCOMP._IOwnership _out859;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out860;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out858, out _out859, out _out860);
              r = _out858;
              resultingOwnership = _out859;
              readIdents = _out860;
            }
          } else {
            {
              RAST._IExpr _out861;
              DCOMP._IOwnership _out862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out861, out _out862, out _out863);
              r = _out861;
              resultingOwnership = _out862;
              readIdents = _out863;
            }
          }
        } else if (_source245.is_SetBuilder) {
          DAST._IType _4376___mcc_h604 = _source245.dtor_element;
          DAST._IType _source278 = _3993___mcc_h1;
          if (_source278.is_UserDefined) {
            DAST._IResolvedType _4377___mcc_h607 = _source278.dtor_resolved;
            DAST._IResolvedType _source279 = _4377___mcc_h607;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4378___mcc_h609 = _source279.dtor_path;
            Dafny.ISequence<DAST._IType> _4379___mcc_h610 = _source279.dtor_typeArgs;
            DAST._IResolvedTypeBase _4380___mcc_h611 = _source279.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4381___mcc_h612 = _source279.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4382___mcc_h613 = _source279.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4383___mcc_h614 = _source279.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source280 = _4380___mcc_h611;
            if (_source280.is_Class) {
              {
                RAST._IExpr _out864;
                DCOMP._IOwnership _out865;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out866;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out864, out _out865, out _out866);
                r = _out864;
                resultingOwnership = _out865;
                readIdents = _out866;
              }
            } else if (_source280.is_Datatype) {
              {
                RAST._IExpr _out867;
                DCOMP._IOwnership _out868;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out869;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out867, out _out868, out _out869);
                r = _out867;
                resultingOwnership = _out868;
                readIdents = _out869;
              }
            } else if (_source280.is_Trait) {
              {
                RAST._IExpr _out870;
                DCOMP._IOwnership _out871;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out872;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out870, out _out871, out _out872);
                r = _out870;
                resultingOwnership = _out871;
                readIdents = _out872;
              }
            } else {
              DAST._IType _4384___mcc_h621 = _source280.dtor_baseType;
              DAST._INewtypeRange _4385___mcc_h622 = _source280.dtor_range;
              bool _4386___mcc_h623 = _source280.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4387_attributes = _4381___mcc_h612;
              bool _4388_erase = _4386___mcc_h623;
              DAST._INewtypeRange _4389_range = _4385___mcc_h622;
              DAST._IType _4390_b = _4384___mcc_h621;
              {
                RAST._IExpr _out873;
                DCOMP._IOwnership _out874;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out873, out _out874, out _out875);
                r = _out873;
                resultingOwnership = _out874;
                readIdents = _out875;
              }
            }
          } else if (_source278.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4391___mcc_h627 = _source278.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out876;
              DCOMP._IOwnership _out877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out876, out _out877, out _out878);
              r = _out876;
              resultingOwnership = _out877;
              readIdents = _out878;
            }
          } else if (_source278.is_Array) {
            DAST._IType _4392___mcc_h629 = _source278.dtor_element;
            BigInteger _4393___mcc_h630 = _source278.dtor_dims;
            {
              RAST._IExpr _out879;
              DCOMP._IOwnership _out880;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out881;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out879, out _out880, out _out881);
              r = _out879;
              resultingOwnership = _out880;
              readIdents = _out881;
            }
          } else if (_source278.is_Seq) {
            DAST._IType _4394___mcc_h633 = _source278.dtor_element;
            {
              RAST._IExpr _out882;
              DCOMP._IOwnership _out883;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out884;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out882, out _out883, out _out884);
              r = _out882;
              resultingOwnership = _out883;
              readIdents = _out884;
            }
          } else if (_source278.is_Set) {
            DAST._IType _4395___mcc_h635 = _source278.dtor_element;
            {
              RAST._IExpr _out885;
              DCOMP._IOwnership _out886;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out885, out _out886, out _out887);
              r = _out885;
              resultingOwnership = _out886;
              readIdents = _out887;
            }
          } else if (_source278.is_Multiset) {
            DAST._IType _4396___mcc_h637 = _source278.dtor_element;
            {
              RAST._IExpr _out888;
              DCOMP._IOwnership _out889;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out890;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out888, out _out889, out _out890);
              r = _out888;
              resultingOwnership = _out889;
              readIdents = _out890;
            }
          } else if (_source278.is_Map) {
            DAST._IType _4397___mcc_h639 = _source278.dtor_key;
            DAST._IType _4398___mcc_h640 = _source278.dtor_value;
            {
              RAST._IExpr _out891;
              DCOMP._IOwnership _out892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out893;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out891, out _out892, out _out893);
              r = _out891;
              resultingOwnership = _out892;
              readIdents = _out893;
            }
          } else if (_source278.is_SetBuilder) {
            DAST._IType _4399___mcc_h643 = _source278.dtor_element;
            {
              RAST._IExpr _out894;
              DCOMP._IOwnership _out895;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out896;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out894, out _out895, out _out896);
              r = _out894;
              resultingOwnership = _out895;
              readIdents = _out896;
            }
          } else if (_source278.is_MapBuilder) {
            DAST._IType _4400___mcc_h645 = _source278.dtor_key;
            DAST._IType _4401___mcc_h646 = _source278.dtor_value;
            {
              RAST._IExpr _out897;
              DCOMP._IOwnership _out898;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out897, out _out898, out _out899);
              r = _out897;
              resultingOwnership = _out898;
              readIdents = _out899;
            }
          } else if (_source278.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4402___mcc_h649 = _source278.dtor_args;
            DAST._IType _4403___mcc_h650 = _source278.dtor_result;
            {
              RAST._IExpr _out900;
              DCOMP._IOwnership _out901;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out902;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out900, out _out901, out _out902);
              r = _out900;
              resultingOwnership = _out901;
              readIdents = _out902;
            }
          } else if (_source278.is_Primitive) {
            DAST._IPrimitive _4404___mcc_h653 = _source278.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out903;
              DCOMP._IOwnership _out904;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out905;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out903, out _out904, out _out905);
              r = _out903;
              resultingOwnership = _out904;
              readIdents = _out905;
            }
          } else if (_source278.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4405___mcc_h655 = _source278.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out906;
              DCOMP._IOwnership _out907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out906, out _out907, out _out908);
              r = _out906;
              resultingOwnership = _out907;
              readIdents = _out908;
            }
          } else if (_source278.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4406___mcc_h657 = _source278.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out909;
              DCOMP._IOwnership _out910;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out911;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out909, out _out910, out _out911);
              r = _out909;
              resultingOwnership = _out910;
              readIdents = _out911;
            }
          } else {
            {
              RAST._IExpr _out912;
              DCOMP._IOwnership _out913;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out914;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out912, out _out913, out _out914);
              r = _out912;
              resultingOwnership = _out913;
              readIdents = _out914;
            }
          }
        } else if (_source245.is_MapBuilder) {
          DAST._IType _4407___mcc_h659 = _source245.dtor_key;
          DAST._IType _4408___mcc_h660 = _source245.dtor_value;
          DAST._IType _source281 = _3993___mcc_h1;
          if (_source281.is_UserDefined) {
            DAST._IResolvedType _4409___mcc_h665 = _source281.dtor_resolved;
            DAST._IResolvedType _source282 = _4409___mcc_h665;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4410___mcc_h667 = _source282.dtor_path;
            Dafny.ISequence<DAST._IType> _4411___mcc_h668 = _source282.dtor_typeArgs;
            DAST._IResolvedTypeBase _4412___mcc_h669 = _source282.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4413___mcc_h670 = _source282.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4414___mcc_h671 = _source282.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4415___mcc_h672 = _source282.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source283 = _4412___mcc_h669;
            if (_source283.is_Class) {
              {
                RAST._IExpr _out915;
                DCOMP._IOwnership _out916;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out917;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out915, out _out916, out _out917);
                r = _out915;
                resultingOwnership = _out916;
                readIdents = _out917;
              }
            } else if (_source283.is_Datatype) {
              {
                RAST._IExpr _out918;
                DCOMP._IOwnership _out919;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out918, out _out919, out _out920);
                r = _out918;
                resultingOwnership = _out919;
                readIdents = _out920;
              }
            } else if (_source283.is_Trait) {
              {
                RAST._IExpr _out921;
                DCOMP._IOwnership _out922;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out921, out _out922, out _out923);
                r = _out921;
                resultingOwnership = _out922;
                readIdents = _out923;
              }
            } else {
              DAST._IType _4416___mcc_h679 = _source283.dtor_baseType;
              DAST._INewtypeRange _4417___mcc_h680 = _source283.dtor_range;
              bool _4418___mcc_h681 = _source283.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4419_attributes = _4413___mcc_h670;
              bool _4420_erase = _4418___mcc_h681;
              DAST._INewtypeRange _4421_range = _4417___mcc_h680;
              DAST._IType _4422_b = _4416___mcc_h679;
              {
                RAST._IExpr _out924;
                DCOMP._IOwnership _out925;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out926;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out924, out _out925, out _out926);
                r = _out924;
                resultingOwnership = _out925;
                readIdents = _out926;
              }
            }
          } else if (_source281.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4423___mcc_h685 = _source281.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out927;
              DCOMP._IOwnership _out928;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out929;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out927, out _out928, out _out929);
              r = _out927;
              resultingOwnership = _out928;
              readIdents = _out929;
            }
          } else if (_source281.is_Array) {
            DAST._IType _4424___mcc_h687 = _source281.dtor_element;
            BigInteger _4425___mcc_h688 = _source281.dtor_dims;
            {
              RAST._IExpr _out930;
              DCOMP._IOwnership _out931;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out930, out _out931, out _out932);
              r = _out930;
              resultingOwnership = _out931;
              readIdents = _out932;
            }
          } else if (_source281.is_Seq) {
            DAST._IType _4426___mcc_h691 = _source281.dtor_element;
            {
              RAST._IExpr _out933;
              DCOMP._IOwnership _out934;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out935;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out933, out _out934, out _out935);
              r = _out933;
              resultingOwnership = _out934;
              readIdents = _out935;
            }
          } else if (_source281.is_Set) {
            DAST._IType _4427___mcc_h693 = _source281.dtor_element;
            {
              RAST._IExpr _out936;
              DCOMP._IOwnership _out937;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out938;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out936, out _out937, out _out938);
              r = _out936;
              resultingOwnership = _out937;
              readIdents = _out938;
            }
          } else if (_source281.is_Multiset) {
            DAST._IType _4428___mcc_h695 = _source281.dtor_element;
            {
              RAST._IExpr _out939;
              DCOMP._IOwnership _out940;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out941;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out939, out _out940, out _out941);
              r = _out939;
              resultingOwnership = _out940;
              readIdents = _out941;
            }
          } else if (_source281.is_Map) {
            DAST._IType _4429___mcc_h697 = _source281.dtor_key;
            DAST._IType _4430___mcc_h698 = _source281.dtor_value;
            {
              RAST._IExpr _out942;
              DCOMP._IOwnership _out943;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out942, out _out943, out _out944);
              r = _out942;
              resultingOwnership = _out943;
              readIdents = _out944;
            }
          } else if (_source281.is_SetBuilder) {
            DAST._IType _4431___mcc_h701 = _source281.dtor_element;
            {
              RAST._IExpr _out945;
              DCOMP._IOwnership _out946;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out947;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out945, out _out946, out _out947);
              r = _out945;
              resultingOwnership = _out946;
              readIdents = _out947;
            }
          } else if (_source281.is_MapBuilder) {
            DAST._IType _4432___mcc_h703 = _source281.dtor_key;
            DAST._IType _4433___mcc_h704 = _source281.dtor_value;
            {
              RAST._IExpr _out948;
              DCOMP._IOwnership _out949;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out950;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out948, out _out949, out _out950);
              r = _out948;
              resultingOwnership = _out949;
              readIdents = _out950;
            }
          } else if (_source281.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4434___mcc_h707 = _source281.dtor_args;
            DAST._IType _4435___mcc_h708 = _source281.dtor_result;
            {
              RAST._IExpr _out951;
              DCOMP._IOwnership _out952;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out951, out _out952, out _out953);
              r = _out951;
              resultingOwnership = _out952;
              readIdents = _out953;
            }
          } else if (_source281.is_Primitive) {
            DAST._IPrimitive _4436___mcc_h711 = _source281.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out954;
              DCOMP._IOwnership _out955;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out954, out _out955, out _out956);
              r = _out954;
              resultingOwnership = _out955;
              readIdents = _out956;
            }
          } else if (_source281.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4437___mcc_h713 = _source281.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out957;
              DCOMP._IOwnership _out958;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out957, out _out958, out _out959);
              r = _out957;
              resultingOwnership = _out958;
              readIdents = _out959;
            }
          } else if (_source281.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4438___mcc_h715 = _source281.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out960;
              DCOMP._IOwnership _out961;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out962;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out960, out _out961, out _out962);
              r = _out960;
              resultingOwnership = _out961;
              readIdents = _out962;
            }
          } else {
            {
              RAST._IExpr _out963;
              DCOMP._IOwnership _out964;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out963, out _out964, out _out965);
              r = _out963;
              resultingOwnership = _out964;
              readIdents = _out965;
            }
          }
        } else if (_source245.is_Arrow) {
          Dafny.ISequence<DAST._IType> _4439___mcc_h717 = _source245.dtor_args;
          DAST._IType _4440___mcc_h718 = _source245.dtor_result;
          DAST._IType _source284 = _3993___mcc_h1;
          if (_source284.is_UserDefined) {
            DAST._IResolvedType _4441___mcc_h723 = _source284.dtor_resolved;
            DAST._IResolvedType _source285 = _4441___mcc_h723;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4442___mcc_h725 = _source285.dtor_path;
            Dafny.ISequence<DAST._IType> _4443___mcc_h726 = _source285.dtor_typeArgs;
            DAST._IResolvedTypeBase _4444___mcc_h727 = _source285.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4445___mcc_h728 = _source285.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4446___mcc_h729 = _source285.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4447___mcc_h730 = _source285.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source286 = _4444___mcc_h727;
            if (_source286.is_Class) {
              {
                RAST._IExpr _out966;
                DCOMP._IOwnership _out967;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out966, out _out967, out _out968);
                r = _out966;
                resultingOwnership = _out967;
                readIdents = _out968;
              }
            } else if (_source286.is_Datatype) {
              {
                RAST._IExpr _out969;
                DCOMP._IOwnership _out970;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out971;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out969, out _out970, out _out971);
                r = _out969;
                resultingOwnership = _out970;
                readIdents = _out971;
              }
            } else if (_source286.is_Trait) {
              {
                RAST._IExpr _out972;
                DCOMP._IOwnership _out973;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out972, out _out973, out _out974);
                r = _out972;
                resultingOwnership = _out973;
                readIdents = _out974;
              }
            } else {
              DAST._IType _4448___mcc_h737 = _source286.dtor_baseType;
              DAST._INewtypeRange _4449___mcc_h738 = _source286.dtor_range;
              bool _4450___mcc_h739 = _source286.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4451_attributes = _4445___mcc_h728;
              bool _4452_erase = _4450___mcc_h739;
              DAST._INewtypeRange _4453_range = _4449___mcc_h738;
              DAST._IType _4454_b = _4448___mcc_h737;
              {
                RAST._IExpr _out975;
                DCOMP._IOwnership _out976;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out975, out _out976, out _out977);
                r = _out975;
                resultingOwnership = _out976;
                readIdents = _out977;
              }
            }
          } else if (_source284.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4455___mcc_h743 = _source284.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out978;
              DCOMP._IOwnership _out979;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out978, out _out979, out _out980);
              r = _out978;
              resultingOwnership = _out979;
              readIdents = _out980;
            }
          } else if (_source284.is_Array) {
            DAST._IType _4456___mcc_h745 = _source284.dtor_element;
            BigInteger _4457___mcc_h746 = _source284.dtor_dims;
            {
              RAST._IExpr _out981;
              DCOMP._IOwnership _out982;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out983;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out981, out _out982, out _out983);
              r = _out981;
              resultingOwnership = _out982;
              readIdents = _out983;
            }
          } else if (_source284.is_Seq) {
            DAST._IType _4458___mcc_h749 = _source284.dtor_element;
            {
              RAST._IExpr _out984;
              DCOMP._IOwnership _out985;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out986;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out984, out _out985, out _out986);
              r = _out984;
              resultingOwnership = _out985;
              readIdents = _out986;
            }
          } else if (_source284.is_Set) {
            DAST._IType _4459___mcc_h751 = _source284.dtor_element;
            {
              RAST._IExpr _out987;
              DCOMP._IOwnership _out988;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out987, out _out988, out _out989);
              r = _out987;
              resultingOwnership = _out988;
              readIdents = _out989;
            }
          } else if (_source284.is_Multiset) {
            DAST._IType _4460___mcc_h753 = _source284.dtor_element;
            {
              RAST._IExpr _out990;
              DCOMP._IOwnership _out991;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out990, out _out991, out _out992);
              r = _out990;
              resultingOwnership = _out991;
              readIdents = _out992;
            }
          } else if (_source284.is_Map) {
            DAST._IType _4461___mcc_h755 = _source284.dtor_key;
            DAST._IType _4462___mcc_h756 = _source284.dtor_value;
            {
              RAST._IExpr _out993;
              DCOMP._IOwnership _out994;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out995;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out993, out _out994, out _out995);
              r = _out993;
              resultingOwnership = _out994;
              readIdents = _out995;
            }
          } else if (_source284.is_SetBuilder) {
            DAST._IType _4463___mcc_h759 = _source284.dtor_element;
            {
              RAST._IExpr _out996;
              DCOMP._IOwnership _out997;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out996, out _out997, out _out998);
              r = _out996;
              resultingOwnership = _out997;
              readIdents = _out998;
            }
          } else if (_source284.is_MapBuilder) {
            DAST._IType _4464___mcc_h761 = _source284.dtor_key;
            DAST._IType _4465___mcc_h762 = _source284.dtor_value;
            {
              RAST._IExpr _out999;
              DCOMP._IOwnership _out1000;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1001;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out999, out _out1000, out _out1001);
              r = _out999;
              resultingOwnership = _out1000;
              readIdents = _out1001;
            }
          } else if (_source284.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4466___mcc_h765 = _source284.dtor_args;
            DAST._IType _4467___mcc_h766 = _source284.dtor_result;
            {
              RAST._IExpr _out1002;
              DCOMP._IOwnership _out1003;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1002, out _out1003, out _out1004);
              r = _out1002;
              resultingOwnership = _out1003;
              readIdents = _out1004;
            }
          } else if (_source284.is_Primitive) {
            DAST._IPrimitive _4468___mcc_h769 = _source284.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out1005;
              DCOMP._IOwnership _out1006;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1007;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1005, out _out1006, out _out1007);
              r = _out1005;
              resultingOwnership = _out1006;
              readIdents = _out1007;
            }
          } else if (_source284.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4469___mcc_h771 = _source284.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out1008;
              DCOMP._IOwnership _out1009;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1008, out _out1009, out _out1010);
              r = _out1008;
              resultingOwnership = _out1009;
              readIdents = _out1010;
            }
          } else if (_source284.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4470___mcc_h773 = _source284.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out1011;
              DCOMP._IOwnership _out1012;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1013;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1011, out _out1012, out _out1013);
              r = _out1011;
              resultingOwnership = _out1012;
              readIdents = _out1013;
            }
          } else {
            {
              RAST._IExpr _out1014;
              DCOMP._IOwnership _out1015;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1016;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1014, out _out1015, out _out1016);
              r = _out1014;
              resultingOwnership = _out1015;
              readIdents = _out1016;
            }
          }
        } else if (_source245.is_Primitive) {
          DAST._IPrimitive _4471___mcc_h775 = _source245.dtor_Primitive_i_a0;
          DAST._IPrimitive _source287 = _4471___mcc_h775;
          if (_source287.is_Int) {
            DAST._IType _source288 = _3993___mcc_h1;
            if (_source288.is_UserDefined) {
              DAST._IResolvedType _4472___mcc_h778 = _source288.dtor_resolved;
              DAST._IResolvedType _source289 = _4472___mcc_h778;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4473___mcc_h780 = _source289.dtor_path;
              Dafny.ISequence<DAST._IType> _4474___mcc_h781 = _source289.dtor_typeArgs;
              DAST._IResolvedTypeBase _4475___mcc_h782 = _source289.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4476___mcc_h783 = _source289.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4477___mcc_h784 = _source289.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4478___mcc_h785 = _source289.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source290 = _4475___mcc_h782;
              if (_source290.is_Class) {
                {
                  RAST._IExpr _out1017;
                  DCOMP._IOwnership _out1018;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1017, out _out1018, out _out1019);
                  r = _out1017;
                  resultingOwnership = _out1018;
                  readIdents = _out1019;
                }
              } else if (_source290.is_Datatype) {
                {
                  RAST._IExpr _out1020;
                  DCOMP._IOwnership _out1021;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1022;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1020, out _out1021, out _out1022);
                  r = _out1020;
                  resultingOwnership = _out1021;
                  readIdents = _out1022;
                }
              } else if (_source290.is_Trait) {
                {
                  RAST._IExpr _out1023;
                  DCOMP._IOwnership _out1024;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1025;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1023, out _out1024, out _out1025);
                  r = _out1023;
                  resultingOwnership = _out1024;
                  readIdents = _out1025;
                }
              } else {
                DAST._IType _4479___mcc_h792 = _source290.dtor_baseType;
                DAST._INewtypeRange _4480___mcc_h793 = _source290.dtor_range;
                bool _4481___mcc_h794 = _source290.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4482_attributes = _4476___mcc_h783;
                bool _4483_erase = _4481___mcc_h794;
                DAST._INewtypeRange _4484_range = _4480___mcc_h793;
                DAST._IType _4485_b = _4479___mcc_h792;
                {
                  RAST._IExpr _out1026;
                  DCOMP._IOwnership _out1027;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1026, out _out1027, out _out1028);
                  r = _out1026;
                  resultingOwnership = _out1027;
                  readIdents = _out1028;
                }
              }
            } else if (_source288.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4486___mcc_h798 = _source288.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1029;
                DCOMP._IOwnership _out1030;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1029, out _out1030, out _out1031);
                r = _out1029;
                resultingOwnership = _out1030;
                readIdents = _out1031;
              }
            } else if (_source288.is_Array) {
              DAST._IType _4487___mcc_h800 = _source288.dtor_element;
              BigInteger _4488___mcc_h801 = _source288.dtor_dims;
              {
                RAST._IExpr _out1032;
                DCOMP._IOwnership _out1033;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1034;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1032, out _out1033, out _out1034);
                r = _out1032;
                resultingOwnership = _out1033;
                readIdents = _out1034;
              }
            } else if (_source288.is_Seq) {
              DAST._IType _4489___mcc_h804 = _source288.dtor_element;
              {
                RAST._IExpr _out1035;
                DCOMP._IOwnership _out1036;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1035, out _out1036, out _out1037);
                r = _out1035;
                resultingOwnership = _out1036;
                readIdents = _out1037;
              }
            } else if (_source288.is_Set) {
              DAST._IType _4490___mcc_h806 = _source288.dtor_element;
              {
                RAST._IExpr _out1038;
                DCOMP._IOwnership _out1039;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1038, out _out1039, out _out1040);
                r = _out1038;
                resultingOwnership = _out1039;
                readIdents = _out1040;
              }
            } else if (_source288.is_Multiset) {
              DAST._IType _4491___mcc_h808 = _source288.dtor_element;
              {
                RAST._IExpr _out1041;
                DCOMP._IOwnership _out1042;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1041, out _out1042, out _out1043);
                r = _out1041;
                resultingOwnership = _out1042;
                readIdents = _out1043;
              }
            } else if (_source288.is_Map) {
              DAST._IType _4492___mcc_h810 = _source288.dtor_key;
              DAST._IType _4493___mcc_h811 = _source288.dtor_value;
              {
                RAST._IExpr _out1044;
                DCOMP._IOwnership _out1045;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1046;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1044, out _out1045, out _out1046);
                r = _out1044;
                resultingOwnership = _out1045;
                readIdents = _out1046;
              }
            } else if (_source288.is_SetBuilder) {
              DAST._IType _4494___mcc_h814 = _source288.dtor_element;
              {
                RAST._IExpr _out1047;
                DCOMP._IOwnership _out1048;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1049;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1047, out _out1048, out _out1049);
                r = _out1047;
                resultingOwnership = _out1048;
                readIdents = _out1049;
              }
            } else if (_source288.is_MapBuilder) {
              DAST._IType _4495___mcc_h816 = _source288.dtor_key;
              DAST._IType _4496___mcc_h817 = _source288.dtor_value;
              {
                RAST._IExpr _out1050;
                DCOMP._IOwnership _out1051;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1050, out _out1051, out _out1052);
                r = _out1050;
                resultingOwnership = _out1051;
                readIdents = _out1052;
              }
            } else if (_source288.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4497___mcc_h820 = _source288.dtor_args;
              DAST._IType _4498___mcc_h821 = _source288.dtor_result;
              {
                RAST._IExpr _out1053;
                DCOMP._IOwnership _out1054;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1053, out _out1054, out _out1055);
                r = _out1053;
                resultingOwnership = _out1054;
                readIdents = _out1055;
              }
            } else if (_source288.is_Primitive) {
              DAST._IPrimitive _4499___mcc_h824 = _source288.dtor_Primitive_i_a0;
              DAST._IPrimitive _source291 = _4499___mcc_h824;
              if (_source291.is_Int) {
                {
                  RAST._IExpr _out1056;
                  DCOMP._IOwnership _out1057;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1058;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1056, out _out1057, out _out1058);
                  r = _out1056;
                  resultingOwnership = _out1057;
                  readIdents = _out1058;
                }
              } else if (_source291.is_Real) {
                {
                  RAST._IExpr _4500_recursiveGen;
                  DCOMP._IOwnership _4501___v125;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4502_recIdents;
                  RAST._IExpr _out1059;
                  DCOMP._IOwnership _out1060;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1061;
                  (this).GenExpr(_3986_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1059, out _out1060, out _out1061);
                  _4500_recursiveGen = _out1059;
                  _4501___v125 = _out1060;
                  _4502_recIdents = _out1061;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_4500_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out1062;
                  DCOMP._IOwnership _out1063;
                  (this).FromOwned(r, expectedOwnership, out _out1062, out _out1063);
                  r = _out1062;
                  resultingOwnership = _out1063;
                  readIdents = _4502_recIdents;
                }
              } else if (_source291.is_String) {
                {
                  RAST._IExpr _out1064;
                  DCOMP._IOwnership _out1065;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1066;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1064, out _out1065, out _out1066);
                  r = _out1064;
                  resultingOwnership = _out1065;
                  readIdents = _out1066;
                }
              } else if (_source291.is_Bool) {
                {
                  RAST._IExpr _out1067;
                  DCOMP._IOwnership _out1068;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1069;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1067, out _out1068, out _out1069);
                  r = _out1067;
                  resultingOwnership = _out1068;
                  readIdents = _out1069;
                }
              } else {
                {
                  RAST._IType _4503_rhsType;
                  RAST._IType _out1070;
                  _out1070 = (this).GenType(_3988_toTpe, DCOMP.GenTypeContext.InBinding());
                  _4503_rhsType = _out1070;
                  RAST._IExpr _4504_recursiveGen;
                  DCOMP._IOwnership _4505___v131;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4506_recIdents;
                  RAST._IExpr _out1071;
                  DCOMP._IOwnership _out1072;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1073;
                  (this).GenExpr(_3986_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1071, out _out1072, out _out1073);
                  _4504_recursiveGen = _out1071;
                  _4505___v131 = _out1072;
                  _4506_recIdents = _out1073;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_4504_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out1074;
                  DCOMP._IOwnership _out1075;
                  (this).FromOwned(r, expectedOwnership, out _out1074, out _out1075);
                  r = _out1074;
                  resultingOwnership = _out1075;
                  readIdents = _4506_recIdents;
                }
              }
            } else if (_source288.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4507___mcc_h826 = _source288.dtor_Passthrough_i_a0;
              {
                RAST._IType _4508_rhsType;
                RAST._IType _out1076;
                _out1076 = (this).GenType(_3988_toTpe, DCOMP.GenTypeContext.InBinding());
                _4508_rhsType = _out1076;
                RAST._IExpr _4509_recursiveGen;
                DCOMP._IOwnership _4510___v128;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4511_recIdents;
                RAST._IExpr _out1077;
                DCOMP._IOwnership _out1078;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                (this).GenExpr(_3986_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1077, out _out1078, out _out1079);
                _4509_recursiveGen = _out1077;
                _4510___v128 = _out1078;
                _4511_recIdents = _out1079;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4508_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_4509_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out1080;
                DCOMP._IOwnership _out1081;
                (this).FromOwned(r, expectedOwnership, out _out1080, out _out1081);
                r = _out1080;
                resultingOwnership = _out1081;
                readIdents = _4511_recIdents;
              }
            } else if (_source288.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4512___mcc_h828 = _source288.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1082;
                DCOMP._IOwnership _out1083;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1082, out _out1083, out _out1084);
                r = _out1082;
                resultingOwnership = _out1083;
                readIdents = _out1084;
              }
            } else {
              {
                RAST._IExpr _out1085;
                DCOMP._IOwnership _out1086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1085, out _out1086, out _out1087);
                r = _out1085;
                resultingOwnership = _out1086;
                readIdents = _out1087;
              }
            }
          } else if (_source287.is_Real) {
            DAST._IType _source292 = _3993___mcc_h1;
            if (_source292.is_UserDefined) {
              DAST._IResolvedType _4513___mcc_h830 = _source292.dtor_resolved;
              DAST._IResolvedType _source293 = _4513___mcc_h830;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4514___mcc_h832 = _source293.dtor_path;
              Dafny.ISequence<DAST._IType> _4515___mcc_h833 = _source293.dtor_typeArgs;
              DAST._IResolvedTypeBase _4516___mcc_h834 = _source293.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4517___mcc_h835 = _source293.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4518___mcc_h836 = _source293.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4519___mcc_h837 = _source293.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source294 = _4516___mcc_h834;
              if (_source294.is_Class) {
                {
                  RAST._IExpr _out1088;
                  DCOMP._IOwnership _out1089;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1088, out _out1089, out _out1090);
                  r = _out1088;
                  resultingOwnership = _out1089;
                  readIdents = _out1090;
                }
              } else if (_source294.is_Datatype) {
                {
                  RAST._IExpr _out1091;
                  DCOMP._IOwnership _out1092;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1093;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1091, out _out1092, out _out1093);
                  r = _out1091;
                  resultingOwnership = _out1092;
                  readIdents = _out1093;
                }
              } else if (_source294.is_Trait) {
                {
                  RAST._IExpr _out1094;
                  DCOMP._IOwnership _out1095;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1094, out _out1095, out _out1096);
                  r = _out1094;
                  resultingOwnership = _out1095;
                  readIdents = _out1096;
                }
              } else {
                DAST._IType _4520___mcc_h844 = _source294.dtor_baseType;
                DAST._INewtypeRange _4521___mcc_h845 = _source294.dtor_range;
                bool _4522___mcc_h846 = _source294.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4523_attributes = _4517___mcc_h835;
                bool _4524_erase = _4522___mcc_h846;
                DAST._INewtypeRange _4525_range = _4521___mcc_h845;
                DAST._IType _4526_b = _4520___mcc_h844;
                {
                  RAST._IExpr _out1097;
                  DCOMP._IOwnership _out1098;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1099;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1097, out _out1098, out _out1099);
                  r = _out1097;
                  resultingOwnership = _out1098;
                  readIdents = _out1099;
                }
              }
            } else if (_source292.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4527___mcc_h850 = _source292.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1100;
                DCOMP._IOwnership _out1101;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1102;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1100, out _out1101, out _out1102);
                r = _out1100;
                resultingOwnership = _out1101;
                readIdents = _out1102;
              }
            } else if (_source292.is_Array) {
              DAST._IType _4528___mcc_h852 = _source292.dtor_element;
              BigInteger _4529___mcc_h853 = _source292.dtor_dims;
              {
                RAST._IExpr _out1103;
                DCOMP._IOwnership _out1104;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1103, out _out1104, out _out1105);
                r = _out1103;
                resultingOwnership = _out1104;
                readIdents = _out1105;
              }
            } else if (_source292.is_Seq) {
              DAST._IType _4530___mcc_h856 = _source292.dtor_element;
              {
                RAST._IExpr _out1106;
                DCOMP._IOwnership _out1107;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1106, out _out1107, out _out1108);
                r = _out1106;
                resultingOwnership = _out1107;
                readIdents = _out1108;
              }
            } else if (_source292.is_Set) {
              DAST._IType _4531___mcc_h858 = _source292.dtor_element;
              {
                RAST._IExpr _out1109;
                DCOMP._IOwnership _out1110;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1111;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1109, out _out1110, out _out1111);
                r = _out1109;
                resultingOwnership = _out1110;
                readIdents = _out1111;
              }
            } else if (_source292.is_Multiset) {
              DAST._IType _4532___mcc_h860 = _source292.dtor_element;
              {
                RAST._IExpr _out1112;
                DCOMP._IOwnership _out1113;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1114;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1112, out _out1113, out _out1114);
                r = _out1112;
                resultingOwnership = _out1113;
                readIdents = _out1114;
              }
            } else if (_source292.is_Map) {
              DAST._IType _4533___mcc_h862 = _source292.dtor_key;
              DAST._IType _4534___mcc_h863 = _source292.dtor_value;
              {
                RAST._IExpr _out1115;
                DCOMP._IOwnership _out1116;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1115, out _out1116, out _out1117);
                r = _out1115;
                resultingOwnership = _out1116;
                readIdents = _out1117;
              }
            } else if (_source292.is_SetBuilder) {
              DAST._IType _4535___mcc_h866 = _source292.dtor_element;
              {
                RAST._IExpr _out1118;
                DCOMP._IOwnership _out1119;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1118, out _out1119, out _out1120);
                r = _out1118;
                resultingOwnership = _out1119;
                readIdents = _out1120;
              }
            } else if (_source292.is_MapBuilder) {
              DAST._IType _4536___mcc_h868 = _source292.dtor_key;
              DAST._IType _4537___mcc_h869 = _source292.dtor_value;
              {
                RAST._IExpr _out1121;
                DCOMP._IOwnership _out1122;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1123;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1121, out _out1122, out _out1123);
                r = _out1121;
                resultingOwnership = _out1122;
                readIdents = _out1123;
              }
            } else if (_source292.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4538___mcc_h872 = _source292.dtor_args;
              DAST._IType _4539___mcc_h873 = _source292.dtor_result;
              {
                RAST._IExpr _out1124;
                DCOMP._IOwnership _out1125;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1126;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1124, out _out1125, out _out1126);
                r = _out1124;
                resultingOwnership = _out1125;
                readIdents = _out1126;
              }
            } else if (_source292.is_Primitive) {
              DAST._IPrimitive _4540___mcc_h876 = _source292.dtor_Primitive_i_a0;
              DAST._IPrimitive _source295 = _4540___mcc_h876;
              if (_source295.is_Int) {
                {
                  RAST._IExpr _4541_recursiveGen;
                  DCOMP._IOwnership _4542___v126;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4543_recIdents;
                  RAST._IExpr _out1127;
                  DCOMP._IOwnership _out1128;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                  (this).GenExpr(_3986_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1127, out _out1128, out _out1129);
                  _4541_recursiveGen = _out1127;
                  _4542___v126 = _out1128;
                  _4543_recIdents = _out1129;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_4541_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out1130;
                  DCOMP._IOwnership _out1131;
                  (this).FromOwned(r, expectedOwnership, out _out1130, out _out1131);
                  r = _out1130;
                  resultingOwnership = _out1131;
                  readIdents = _4543_recIdents;
                }
              } else if (_source295.is_Real) {
                {
                  RAST._IExpr _out1132;
                  DCOMP._IOwnership _out1133;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1134;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1132, out _out1133, out _out1134);
                  r = _out1132;
                  resultingOwnership = _out1133;
                  readIdents = _out1134;
                }
              } else if (_source295.is_String) {
                {
                  RAST._IExpr _out1135;
                  DCOMP._IOwnership _out1136;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1135, out _out1136, out _out1137);
                  r = _out1135;
                  resultingOwnership = _out1136;
                  readIdents = _out1137;
                }
              } else if (_source295.is_Bool) {
                {
                  RAST._IExpr _out1138;
                  DCOMP._IOwnership _out1139;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1138, out _out1139, out _out1140);
                  r = _out1138;
                  resultingOwnership = _out1139;
                  readIdents = _out1140;
                }
              } else {
                {
                  RAST._IExpr _out1141;
                  DCOMP._IOwnership _out1142;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1143;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1141, out _out1142, out _out1143);
                  r = _out1141;
                  resultingOwnership = _out1142;
                  readIdents = _out1143;
                }
              }
            } else if (_source292.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4544___mcc_h878 = _source292.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out1144;
                DCOMP._IOwnership _out1145;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1144, out _out1145, out _out1146);
                r = _out1144;
                resultingOwnership = _out1145;
                readIdents = _out1146;
              }
            } else if (_source292.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4545___mcc_h880 = _source292.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1147;
                DCOMP._IOwnership _out1148;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1147, out _out1148, out _out1149);
                r = _out1147;
                resultingOwnership = _out1148;
                readIdents = _out1149;
              }
            } else {
              {
                RAST._IExpr _out1150;
                DCOMP._IOwnership _out1151;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1152;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1150, out _out1151, out _out1152);
                r = _out1150;
                resultingOwnership = _out1151;
                readIdents = _out1152;
              }
            }
          } else if (_source287.is_String) {
            DAST._IType _source296 = _3993___mcc_h1;
            if (_source296.is_UserDefined) {
              DAST._IResolvedType _4546___mcc_h882 = _source296.dtor_resolved;
              DAST._IResolvedType _source297 = _4546___mcc_h882;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4547___mcc_h884 = _source297.dtor_path;
              Dafny.ISequence<DAST._IType> _4548___mcc_h885 = _source297.dtor_typeArgs;
              DAST._IResolvedTypeBase _4549___mcc_h886 = _source297.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4550___mcc_h887 = _source297.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4551___mcc_h888 = _source297.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4552___mcc_h889 = _source297.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source298 = _4549___mcc_h886;
              if (_source298.is_Class) {
                {
                  RAST._IExpr _out1153;
                  DCOMP._IOwnership _out1154;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1155;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1153, out _out1154, out _out1155);
                  r = _out1153;
                  resultingOwnership = _out1154;
                  readIdents = _out1155;
                }
              } else if (_source298.is_Datatype) {
                {
                  RAST._IExpr _out1156;
                  DCOMP._IOwnership _out1157;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1158;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1156, out _out1157, out _out1158);
                  r = _out1156;
                  resultingOwnership = _out1157;
                  readIdents = _out1158;
                }
              } else if (_source298.is_Trait) {
                {
                  RAST._IExpr _out1159;
                  DCOMP._IOwnership _out1160;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1159, out _out1160, out _out1161);
                  r = _out1159;
                  resultingOwnership = _out1160;
                  readIdents = _out1161;
                }
              } else {
                DAST._IType _4553___mcc_h896 = _source298.dtor_baseType;
                DAST._INewtypeRange _4554___mcc_h897 = _source298.dtor_range;
                bool _4555___mcc_h898 = _source298.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4556_attributes = _4550___mcc_h887;
                bool _4557_erase = _4555___mcc_h898;
                DAST._INewtypeRange _4558_range = _4554___mcc_h897;
                DAST._IType _4559_b = _4553___mcc_h896;
                {
                  RAST._IExpr _out1162;
                  DCOMP._IOwnership _out1163;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1164;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1162, out _out1163, out _out1164);
                  r = _out1162;
                  resultingOwnership = _out1163;
                  readIdents = _out1164;
                }
              }
            } else if (_source296.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4560___mcc_h902 = _source296.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1165;
                DCOMP._IOwnership _out1166;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1167;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1165, out _out1166, out _out1167);
                r = _out1165;
                resultingOwnership = _out1166;
                readIdents = _out1167;
              }
            } else if (_source296.is_Array) {
              DAST._IType _4561___mcc_h904 = _source296.dtor_element;
              BigInteger _4562___mcc_h905 = _source296.dtor_dims;
              {
                RAST._IExpr _out1168;
                DCOMP._IOwnership _out1169;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1168, out _out1169, out _out1170);
                r = _out1168;
                resultingOwnership = _out1169;
                readIdents = _out1170;
              }
            } else if (_source296.is_Seq) {
              DAST._IType _4563___mcc_h908 = _source296.dtor_element;
              {
                RAST._IExpr _out1171;
                DCOMP._IOwnership _out1172;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1171, out _out1172, out _out1173);
                r = _out1171;
                resultingOwnership = _out1172;
                readIdents = _out1173;
              }
            } else if (_source296.is_Set) {
              DAST._IType _4564___mcc_h910 = _source296.dtor_element;
              {
                RAST._IExpr _out1174;
                DCOMP._IOwnership _out1175;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1174, out _out1175, out _out1176);
                r = _out1174;
                resultingOwnership = _out1175;
                readIdents = _out1176;
              }
            } else if (_source296.is_Multiset) {
              DAST._IType _4565___mcc_h912 = _source296.dtor_element;
              {
                RAST._IExpr _out1177;
                DCOMP._IOwnership _out1178;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1179;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1177, out _out1178, out _out1179);
                r = _out1177;
                resultingOwnership = _out1178;
                readIdents = _out1179;
              }
            } else if (_source296.is_Map) {
              DAST._IType _4566___mcc_h914 = _source296.dtor_key;
              DAST._IType _4567___mcc_h915 = _source296.dtor_value;
              {
                RAST._IExpr _out1180;
                DCOMP._IOwnership _out1181;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1180, out _out1181, out _out1182);
                r = _out1180;
                resultingOwnership = _out1181;
                readIdents = _out1182;
              }
            } else if (_source296.is_SetBuilder) {
              DAST._IType _4568___mcc_h918 = _source296.dtor_element;
              {
                RAST._IExpr _out1183;
                DCOMP._IOwnership _out1184;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1183, out _out1184, out _out1185);
                r = _out1183;
                resultingOwnership = _out1184;
                readIdents = _out1185;
              }
            } else if (_source296.is_MapBuilder) {
              DAST._IType _4569___mcc_h920 = _source296.dtor_key;
              DAST._IType _4570___mcc_h921 = _source296.dtor_value;
              {
                RAST._IExpr _out1186;
                DCOMP._IOwnership _out1187;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1188;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1186, out _out1187, out _out1188);
                r = _out1186;
                resultingOwnership = _out1187;
                readIdents = _out1188;
              }
            } else if (_source296.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4571___mcc_h924 = _source296.dtor_args;
              DAST._IType _4572___mcc_h925 = _source296.dtor_result;
              {
                RAST._IExpr _out1189;
                DCOMP._IOwnership _out1190;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1189, out _out1190, out _out1191);
                r = _out1189;
                resultingOwnership = _out1190;
                readIdents = _out1191;
              }
            } else if (_source296.is_Primitive) {
              DAST._IPrimitive _4573___mcc_h928 = _source296.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out1192;
                DCOMP._IOwnership _out1193;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1192, out _out1193, out _out1194);
                r = _out1192;
                resultingOwnership = _out1193;
                readIdents = _out1194;
              }
            } else if (_source296.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4574___mcc_h930 = _source296.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out1195;
                DCOMP._IOwnership _out1196;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1195, out _out1196, out _out1197);
                r = _out1195;
                resultingOwnership = _out1196;
                readIdents = _out1197;
              }
            } else if (_source296.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4575___mcc_h932 = _source296.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1198;
                DCOMP._IOwnership _out1199;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1200;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1198, out _out1199, out _out1200);
                r = _out1198;
                resultingOwnership = _out1199;
                readIdents = _out1200;
              }
            } else {
              {
                RAST._IExpr _out1201;
                DCOMP._IOwnership _out1202;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1203;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1201, out _out1202, out _out1203);
                r = _out1201;
                resultingOwnership = _out1202;
                readIdents = _out1203;
              }
            }
          } else if (_source287.is_Bool) {
            DAST._IType _source299 = _3993___mcc_h1;
            if (_source299.is_UserDefined) {
              DAST._IResolvedType _4576___mcc_h934 = _source299.dtor_resolved;
              DAST._IResolvedType _source300 = _4576___mcc_h934;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4577___mcc_h936 = _source300.dtor_path;
              Dafny.ISequence<DAST._IType> _4578___mcc_h937 = _source300.dtor_typeArgs;
              DAST._IResolvedTypeBase _4579___mcc_h938 = _source300.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4580___mcc_h939 = _source300.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4581___mcc_h940 = _source300.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4582___mcc_h941 = _source300.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source301 = _4579___mcc_h938;
              if (_source301.is_Class) {
                {
                  RAST._IExpr _out1204;
                  DCOMP._IOwnership _out1205;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1204, out _out1205, out _out1206);
                  r = _out1204;
                  resultingOwnership = _out1205;
                  readIdents = _out1206;
                }
              } else if (_source301.is_Datatype) {
                {
                  RAST._IExpr _out1207;
                  DCOMP._IOwnership _out1208;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1207, out _out1208, out _out1209);
                  r = _out1207;
                  resultingOwnership = _out1208;
                  readIdents = _out1209;
                }
              } else if (_source301.is_Trait) {
                {
                  RAST._IExpr _out1210;
                  DCOMP._IOwnership _out1211;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1212;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1210, out _out1211, out _out1212);
                  r = _out1210;
                  resultingOwnership = _out1211;
                  readIdents = _out1212;
                }
              } else {
                DAST._IType _4583___mcc_h948 = _source301.dtor_baseType;
                DAST._INewtypeRange _4584___mcc_h949 = _source301.dtor_range;
                bool _4585___mcc_h950 = _source301.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4586_attributes = _4580___mcc_h939;
                bool _4587_erase = _4585___mcc_h950;
                DAST._INewtypeRange _4588_range = _4584___mcc_h949;
                DAST._IType _4589_b = _4583___mcc_h948;
                {
                  RAST._IExpr _out1213;
                  DCOMP._IOwnership _out1214;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1215;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1213, out _out1214, out _out1215);
                  r = _out1213;
                  resultingOwnership = _out1214;
                  readIdents = _out1215;
                }
              }
            } else if (_source299.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4590___mcc_h954 = _source299.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1216;
                DCOMP._IOwnership _out1217;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1216, out _out1217, out _out1218);
                r = _out1216;
                resultingOwnership = _out1217;
                readIdents = _out1218;
              }
            } else if (_source299.is_Array) {
              DAST._IType _4591___mcc_h956 = _source299.dtor_element;
              BigInteger _4592___mcc_h957 = _source299.dtor_dims;
              {
                RAST._IExpr _out1219;
                DCOMP._IOwnership _out1220;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1221;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1219, out _out1220, out _out1221);
                r = _out1219;
                resultingOwnership = _out1220;
                readIdents = _out1221;
              }
            } else if (_source299.is_Seq) {
              DAST._IType _4593___mcc_h960 = _source299.dtor_element;
              {
                RAST._IExpr _out1222;
                DCOMP._IOwnership _out1223;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1224;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1222, out _out1223, out _out1224);
                r = _out1222;
                resultingOwnership = _out1223;
                readIdents = _out1224;
              }
            } else if (_source299.is_Set) {
              DAST._IType _4594___mcc_h962 = _source299.dtor_element;
              {
                RAST._IExpr _out1225;
                DCOMP._IOwnership _out1226;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1225, out _out1226, out _out1227);
                r = _out1225;
                resultingOwnership = _out1226;
                readIdents = _out1227;
              }
            } else if (_source299.is_Multiset) {
              DAST._IType _4595___mcc_h964 = _source299.dtor_element;
              {
                RAST._IExpr _out1228;
                DCOMP._IOwnership _out1229;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1228, out _out1229, out _out1230);
                r = _out1228;
                resultingOwnership = _out1229;
                readIdents = _out1230;
              }
            } else if (_source299.is_Map) {
              DAST._IType _4596___mcc_h966 = _source299.dtor_key;
              DAST._IType _4597___mcc_h967 = _source299.dtor_value;
              {
                RAST._IExpr _out1231;
                DCOMP._IOwnership _out1232;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1233;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1231, out _out1232, out _out1233);
                r = _out1231;
                resultingOwnership = _out1232;
                readIdents = _out1233;
              }
            } else if (_source299.is_SetBuilder) {
              DAST._IType _4598___mcc_h970 = _source299.dtor_element;
              {
                RAST._IExpr _out1234;
                DCOMP._IOwnership _out1235;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1236;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1234, out _out1235, out _out1236);
                r = _out1234;
                resultingOwnership = _out1235;
                readIdents = _out1236;
              }
            } else if (_source299.is_MapBuilder) {
              DAST._IType _4599___mcc_h972 = _source299.dtor_key;
              DAST._IType _4600___mcc_h973 = _source299.dtor_value;
              {
                RAST._IExpr _out1237;
                DCOMP._IOwnership _out1238;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1239;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1237, out _out1238, out _out1239);
                r = _out1237;
                resultingOwnership = _out1238;
                readIdents = _out1239;
              }
            } else if (_source299.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4601___mcc_h976 = _source299.dtor_args;
              DAST._IType _4602___mcc_h977 = _source299.dtor_result;
              {
                RAST._IExpr _out1240;
                DCOMP._IOwnership _out1241;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1240, out _out1241, out _out1242);
                r = _out1240;
                resultingOwnership = _out1241;
                readIdents = _out1242;
              }
            } else if (_source299.is_Primitive) {
              DAST._IPrimitive _4603___mcc_h980 = _source299.dtor_Primitive_i_a0;
              {
                RAST._IExpr _out1243;
                DCOMP._IOwnership _out1244;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1245;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1243, out _out1244, out _out1245);
                r = _out1243;
                resultingOwnership = _out1244;
                readIdents = _out1245;
              }
            } else if (_source299.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4604___mcc_h982 = _source299.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out1246;
                DCOMP._IOwnership _out1247;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1248;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1246, out _out1247, out _out1248);
                r = _out1246;
                resultingOwnership = _out1247;
                readIdents = _out1248;
              }
            } else if (_source299.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4605___mcc_h984 = _source299.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1249;
                DCOMP._IOwnership _out1250;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1249, out _out1250, out _out1251);
                r = _out1249;
                resultingOwnership = _out1250;
                readIdents = _out1251;
              }
            } else {
              {
                RAST._IExpr _out1252;
                DCOMP._IOwnership _out1253;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1254;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1252, out _out1253, out _out1254);
                r = _out1252;
                resultingOwnership = _out1253;
                readIdents = _out1254;
              }
            }
          } else {
            DAST._IType _source302 = _3993___mcc_h1;
            if (_source302.is_UserDefined) {
              DAST._IResolvedType _4606___mcc_h986 = _source302.dtor_resolved;
              DAST._IResolvedType _source303 = _4606___mcc_h986;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4607___mcc_h988 = _source303.dtor_path;
              Dafny.ISequence<DAST._IType> _4608___mcc_h989 = _source303.dtor_typeArgs;
              DAST._IResolvedTypeBase _4609___mcc_h990 = _source303.dtor_kind;
              Dafny.ISequence<DAST._IAttribute> _4610___mcc_h991 = _source303.dtor_attributes;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4611___mcc_h992 = _source303.dtor_properMethods;
              Dafny.ISequence<DAST._IType> _4612___mcc_h993 = _source303.dtor_extendedTypes;
              DAST._IResolvedTypeBase _source304 = _4609___mcc_h990;
              if (_source304.is_Class) {
                {
                  RAST._IExpr _out1255;
                  DCOMP._IOwnership _out1256;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1255, out _out1256, out _out1257);
                  r = _out1255;
                  resultingOwnership = _out1256;
                  readIdents = _out1257;
                }
              } else if (_source304.is_Datatype) {
                {
                  RAST._IExpr _out1258;
                  DCOMP._IOwnership _out1259;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1260;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1258, out _out1259, out _out1260);
                  r = _out1258;
                  resultingOwnership = _out1259;
                  readIdents = _out1260;
                }
              } else if (_source304.is_Trait) {
                {
                  RAST._IExpr _out1261;
                  DCOMP._IOwnership _out1262;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1261, out _out1262, out _out1263);
                  r = _out1261;
                  resultingOwnership = _out1262;
                  readIdents = _out1263;
                }
              } else {
                DAST._IType _4613___mcc_h1000 = _source304.dtor_baseType;
                DAST._INewtypeRange _4614___mcc_h1001 = _source304.dtor_range;
                bool _4615___mcc_h1002 = _source304.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4616_attributes = _4610___mcc_h991;
                bool _4617_erase = _4615___mcc_h1002;
                DAST._INewtypeRange _4618_range = _4614___mcc_h1001;
                DAST._IType _4619_b = _4613___mcc_h1000;
                {
                  RAST._IExpr _out1264;
                  DCOMP._IOwnership _out1265;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1266;
                  (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1264, out _out1265, out _out1266);
                  r = _out1264;
                  resultingOwnership = _out1265;
                  readIdents = _out1266;
                }
              }
            } else if (_source302.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4620___mcc_h1006 = _source302.dtor_Tuple_i_a0;
              {
                RAST._IExpr _out1267;
                DCOMP._IOwnership _out1268;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1269;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1267, out _out1268, out _out1269);
                r = _out1267;
                resultingOwnership = _out1268;
                readIdents = _out1269;
              }
            } else if (_source302.is_Array) {
              DAST._IType _4621___mcc_h1008 = _source302.dtor_element;
              BigInteger _4622___mcc_h1009 = _source302.dtor_dims;
              {
                RAST._IExpr _out1270;
                DCOMP._IOwnership _out1271;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1270, out _out1271, out _out1272);
                r = _out1270;
                resultingOwnership = _out1271;
                readIdents = _out1272;
              }
            } else if (_source302.is_Seq) {
              DAST._IType _4623___mcc_h1012 = _source302.dtor_element;
              {
                RAST._IExpr _out1273;
                DCOMP._IOwnership _out1274;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1273, out _out1274, out _out1275);
                r = _out1273;
                resultingOwnership = _out1274;
                readIdents = _out1275;
              }
            } else if (_source302.is_Set) {
              DAST._IType _4624___mcc_h1014 = _source302.dtor_element;
              {
                RAST._IExpr _out1276;
                DCOMP._IOwnership _out1277;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1276, out _out1277, out _out1278);
                r = _out1276;
                resultingOwnership = _out1277;
                readIdents = _out1278;
              }
            } else if (_source302.is_Multiset) {
              DAST._IType _4625___mcc_h1016 = _source302.dtor_element;
              {
                RAST._IExpr _out1279;
                DCOMP._IOwnership _out1280;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1281;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1279, out _out1280, out _out1281);
                r = _out1279;
                resultingOwnership = _out1280;
                readIdents = _out1281;
              }
            } else if (_source302.is_Map) {
              DAST._IType _4626___mcc_h1018 = _source302.dtor_key;
              DAST._IType _4627___mcc_h1019 = _source302.dtor_value;
              {
                RAST._IExpr _out1282;
                DCOMP._IOwnership _out1283;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1282, out _out1283, out _out1284);
                r = _out1282;
                resultingOwnership = _out1283;
                readIdents = _out1284;
              }
            } else if (_source302.is_SetBuilder) {
              DAST._IType _4628___mcc_h1022 = _source302.dtor_element;
              {
                RAST._IExpr _out1285;
                DCOMP._IOwnership _out1286;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1285, out _out1286, out _out1287);
                r = _out1285;
                resultingOwnership = _out1286;
                readIdents = _out1287;
              }
            } else if (_source302.is_MapBuilder) {
              DAST._IType _4629___mcc_h1024 = _source302.dtor_key;
              DAST._IType _4630___mcc_h1025 = _source302.dtor_value;
              {
                RAST._IExpr _out1288;
                DCOMP._IOwnership _out1289;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1290;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1288, out _out1289, out _out1290);
                r = _out1288;
                resultingOwnership = _out1289;
                readIdents = _out1290;
              }
            } else if (_source302.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4631___mcc_h1028 = _source302.dtor_args;
              DAST._IType _4632___mcc_h1029 = _source302.dtor_result;
              {
                RAST._IExpr _out1291;
                DCOMP._IOwnership _out1292;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1293;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1291, out _out1292, out _out1293);
                r = _out1291;
                resultingOwnership = _out1292;
                readIdents = _out1293;
              }
            } else if (_source302.is_Primitive) {
              DAST._IPrimitive _4633___mcc_h1032 = _source302.dtor_Primitive_i_a0;
              DAST._IPrimitive _source305 = _4633___mcc_h1032;
              if (_source305.is_Int) {
                {
                  RAST._IType _4634_rhsType;
                  RAST._IType _out1294;
                  _out1294 = (this).GenType(_3987_fromTpe, DCOMP.GenTypeContext.InBinding());
                  _4634_rhsType = _out1294;
                  RAST._IExpr _4635_recursiveGen;
                  DCOMP._IOwnership _4636___v132;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4637_recIdents;
                  RAST._IExpr _out1295;
                  DCOMP._IOwnership _out1296;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1297;
                  (this).GenExpr(_3986_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1295, out _out1296, out _out1297);
                  _4635_recursiveGen = _out1295;
                  _4636___v132 = _out1296;
                  _4637_recIdents = _out1297;
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1((_4635_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")));
                  RAST._IExpr _out1298;
                  DCOMP._IOwnership _out1299;
                  (this).FromOwned(r, expectedOwnership, out _out1298, out _out1299);
                  r = _out1298;
                  resultingOwnership = _out1299;
                  readIdents = _4637_recIdents;
                }
              } else if (_source305.is_Real) {
                {
                  RAST._IExpr _out1300;
                  DCOMP._IOwnership _out1301;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1300, out _out1301, out _out1302);
                  r = _out1300;
                  resultingOwnership = _out1301;
                  readIdents = _out1302;
                }
              } else if (_source305.is_String) {
                {
                  RAST._IExpr _out1303;
                  DCOMP._IOwnership _out1304;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1303, out _out1304, out _out1305);
                  r = _out1303;
                  resultingOwnership = _out1304;
                  readIdents = _out1305;
                }
              } else if (_source305.is_Bool) {
                {
                  RAST._IExpr _out1306;
                  DCOMP._IOwnership _out1307;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1306, out _out1307, out _out1308);
                  r = _out1306;
                  resultingOwnership = _out1307;
                  readIdents = _out1308;
                }
              } else {
                {
                  RAST._IExpr _out1309;
                  DCOMP._IOwnership _out1310;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1311;
                  (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1309, out _out1310, out _out1311);
                  r = _out1309;
                  resultingOwnership = _out1310;
                  readIdents = _out1311;
                }
              }
            } else if (_source302.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4638___mcc_h1034 = _source302.dtor_Passthrough_i_a0;
              {
                RAST._IExpr _out1312;
                DCOMP._IOwnership _out1313;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1314;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1312, out _out1313, out _out1314);
                r = _out1312;
                resultingOwnership = _out1313;
                readIdents = _out1314;
              }
            } else if (_source302.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4639___mcc_h1036 = _source302.dtor_TypeArg_i_a0;
              {
                RAST._IExpr _out1315;
                DCOMP._IOwnership _out1316;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1317;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1315, out _out1316, out _out1317);
                r = _out1315;
                resultingOwnership = _out1316;
                readIdents = _out1317;
              }
            } else {
              {
                RAST._IExpr _out1318;
                DCOMP._IOwnership _out1319;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1318, out _out1319, out _out1320);
                r = _out1318;
                resultingOwnership = _out1319;
                readIdents = _out1320;
              }
            }
          }
        } else if (_source245.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _4640___mcc_h1038 = _source245.dtor_Passthrough_i_a0;
          DAST._IType _source306 = _3993___mcc_h1;
          if (_source306.is_UserDefined) {
            DAST._IResolvedType _4641___mcc_h1041 = _source306.dtor_resolved;
            DAST._IResolvedType _source307 = _4641___mcc_h1041;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4642___mcc_h1043 = _source307.dtor_path;
            Dafny.ISequence<DAST._IType> _4643___mcc_h1044 = _source307.dtor_typeArgs;
            DAST._IResolvedTypeBase _4644___mcc_h1045 = _source307.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4645___mcc_h1046 = _source307.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4646___mcc_h1047 = _source307.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4647___mcc_h1048 = _source307.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source308 = _4644___mcc_h1045;
            if (_source308.is_Class) {
              {
                RAST._IExpr _out1321;
                DCOMP._IOwnership _out1322;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1321, out _out1322, out _out1323);
                r = _out1321;
                resultingOwnership = _out1322;
                readIdents = _out1323;
              }
            } else if (_source308.is_Datatype) {
              {
                RAST._IExpr _out1324;
                DCOMP._IOwnership _out1325;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1326;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1324, out _out1325, out _out1326);
                r = _out1324;
                resultingOwnership = _out1325;
                readIdents = _out1326;
              }
            } else if (_source308.is_Trait) {
              {
                RAST._IExpr _out1327;
                DCOMP._IOwnership _out1328;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1327, out _out1328, out _out1329);
                r = _out1327;
                resultingOwnership = _out1328;
                readIdents = _out1329;
              }
            } else {
              DAST._IType _4648___mcc_h1055 = _source308.dtor_baseType;
              DAST._INewtypeRange _4649___mcc_h1056 = _source308.dtor_range;
              bool _4650___mcc_h1057 = _source308.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4651_attributes = _4645___mcc_h1046;
              bool _4652_erase = _4650___mcc_h1057;
              DAST._INewtypeRange _4653_range = _4649___mcc_h1056;
              DAST._IType _4654_b = _4648___mcc_h1055;
              {
                RAST._IExpr _out1330;
                DCOMP._IOwnership _out1331;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1332;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1330, out _out1331, out _out1332);
                r = _out1330;
                resultingOwnership = _out1331;
                readIdents = _out1332;
              }
            }
          } else if (_source306.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4655___mcc_h1061 = _source306.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out1333;
              DCOMP._IOwnership _out1334;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1335;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1333, out _out1334, out _out1335);
              r = _out1333;
              resultingOwnership = _out1334;
              readIdents = _out1335;
            }
          } else if (_source306.is_Array) {
            DAST._IType _4656___mcc_h1063 = _source306.dtor_element;
            BigInteger _4657___mcc_h1064 = _source306.dtor_dims;
            {
              RAST._IExpr _out1336;
              DCOMP._IOwnership _out1337;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1336, out _out1337, out _out1338);
              r = _out1336;
              resultingOwnership = _out1337;
              readIdents = _out1338;
            }
          } else if (_source306.is_Seq) {
            DAST._IType _4658___mcc_h1067 = _source306.dtor_element;
            {
              RAST._IExpr _out1339;
              DCOMP._IOwnership _out1340;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1339, out _out1340, out _out1341);
              r = _out1339;
              resultingOwnership = _out1340;
              readIdents = _out1341;
            }
          } else if (_source306.is_Set) {
            DAST._IType _4659___mcc_h1069 = _source306.dtor_element;
            {
              RAST._IExpr _out1342;
              DCOMP._IOwnership _out1343;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1344;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1342, out _out1343, out _out1344);
              r = _out1342;
              resultingOwnership = _out1343;
              readIdents = _out1344;
            }
          } else if (_source306.is_Multiset) {
            DAST._IType _4660___mcc_h1071 = _source306.dtor_element;
            {
              RAST._IExpr _out1345;
              DCOMP._IOwnership _out1346;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1347;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1345, out _out1346, out _out1347);
              r = _out1345;
              resultingOwnership = _out1346;
              readIdents = _out1347;
            }
          } else if (_source306.is_Map) {
            DAST._IType _4661___mcc_h1073 = _source306.dtor_key;
            DAST._IType _4662___mcc_h1074 = _source306.dtor_value;
            {
              RAST._IExpr _out1348;
              DCOMP._IOwnership _out1349;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1348, out _out1349, out _out1350);
              r = _out1348;
              resultingOwnership = _out1349;
              readIdents = _out1350;
            }
          } else if (_source306.is_SetBuilder) {
            DAST._IType _4663___mcc_h1077 = _source306.dtor_element;
            {
              RAST._IExpr _out1351;
              DCOMP._IOwnership _out1352;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1353;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1351, out _out1352, out _out1353);
              r = _out1351;
              resultingOwnership = _out1352;
              readIdents = _out1353;
            }
          } else if (_source306.is_MapBuilder) {
            DAST._IType _4664___mcc_h1079 = _source306.dtor_key;
            DAST._IType _4665___mcc_h1080 = _source306.dtor_value;
            {
              RAST._IExpr _out1354;
              DCOMP._IOwnership _out1355;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1356;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1354, out _out1355, out _out1356);
              r = _out1354;
              resultingOwnership = _out1355;
              readIdents = _out1356;
            }
          } else if (_source306.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4666___mcc_h1083 = _source306.dtor_args;
            DAST._IType _4667___mcc_h1084 = _source306.dtor_result;
            {
              RAST._IExpr _out1357;
              DCOMP._IOwnership _out1358;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1359;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1357, out _out1358, out _out1359);
              r = _out1357;
              resultingOwnership = _out1358;
              readIdents = _out1359;
            }
          } else if (_source306.is_Primitive) {
            DAST._IPrimitive _4668___mcc_h1087 = _source306.dtor_Primitive_i_a0;
            DAST._IPrimitive _source309 = _4668___mcc_h1087;
            if (_source309.is_Int) {
              {
                RAST._IType _4669_rhsType;
                RAST._IType _out1360;
                _out1360 = (this).GenType(_3987_fromTpe, DCOMP.GenTypeContext.InBinding());
                _4669_rhsType = _out1360;
                RAST._IExpr _4670_recursiveGen;
                DCOMP._IOwnership _4671___v130;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4672_recIdents;
                RAST._IExpr _out1361;
                DCOMP._IOwnership _out1362;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
                (this).GenExpr(_3986_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1361, out _out1362, out _out1363);
                _4670_recursiveGen = _out1361;
                _4671___v130 = _out1362;
                _4672_recIdents = _out1363;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt::new(::std::rc::Rc::new(::dafny_runtime::BigInt::from("), (_4670_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")))")));
                RAST._IExpr _out1364;
                DCOMP._IOwnership _out1365;
                (this).FromOwned(r, expectedOwnership, out _out1364, out _out1365);
                r = _out1364;
                resultingOwnership = _out1365;
                readIdents = _4672_recIdents;
              }
            } else if (_source309.is_Real) {
              {
                RAST._IExpr _out1366;
                DCOMP._IOwnership _out1367;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1366, out _out1367, out _out1368);
                r = _out1366;
                resultingOwnership = _out1367;
                readIdents = _out1368;
              }
            } else if (_source309.is_String) {
              {
                RAST._IExpr _out1369;
                DCOMP._IOwnership _out1370;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1369, out _out1370, out _out1371);
                r = _out1369;
                resultingOwnership = _out1370;
                readIdents = _out1371;
              }
            } else if (_source309.is_Bool) {
              {
                RAST._IExpr _out1372;
                DCOMP._IOwnership _out1373;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1374;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1372, out _out1373, out _out1374);
                r = _out1372;
                resultingOwnership = _out1373;
                readIdents = _out1374;
              }
            } else {
              {
                RAST._IExpr _out1375;
                DCOMP._IOwnership _out1376;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1377;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1375, out _out1376, out _out1377);
                r = _out1375;
                resultingOwnership = _out1376;
                readIdents = _out1377;
              }
            }
          } else if (_source306.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4673___mcc_h1089 = _source306.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _4674_recursiveGen;
              DCOMP._IOwnership _4675___v135;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4676_recIdents;
              RAST._IExpr _out1378;
              DCOMP._IOwnership _out1379;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1380;
              (this).GenExpr(_3986_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1378, out _out1379, out _out1380);
              _4674_recursiveGen = _out1378;
              _4675___v135 = _out1379;
              _4676_recIdents = _out1380;
              RAST._IType _4677_toTpeGen;
              RAST._IType _out1381;
              _out1381 = (this).GenType(_3988_toTpe, DCOMP.GenTypeContext.InBinding());
              _4677_toTpeGen = _out1381;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_4674_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_4677_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out1382;
              DCOMP._IOwnership _out1383;
              (this).FromOwned(r, expectedOwnership, out _out1382, out _out1383);
              r = _out1382;
              resultingOwnership = _out1383;
              readIdents = _4676_recIdents;
            }
          } else if (_source306.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4678___mcc_h1091 = _source306.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out1384;
              DCOMP._IOwnership _out1385;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1386;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1384, out _out1385, out _out1386);
              r = _out1384;
              resultingOwnership = _out1385;
              readIdents = _out1386;
            }
          } else {
            {
              RAST._IExpr _out1387;
              DCOMP._IOwnership _out1388;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1387, out _out1388, out _out1389);
              r = _out1387;
              resultingOwnership = _out1388;
              readIdents = _out1389;
            }
          }
        } else if (_source245.is_TypeArg) {
          Dafny.ISequence<Dafny.Rune> _4679___mcc_h1093 = _source245.dtor_TypeArg_i_a0;
          DAST._IType _source310 = _3993___mcc_h1;
          if (_source310.is_UserDefined) {
            DAST._IResolvedType _4680___mcc_h1096 = _source310.dtor_resolved;
            DAST._IResolvedType _source311 = _4680___mcc_h1096;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4681___mcc_h1098 = _source311.dtor_path;
            Dafny.ISequence<DAST._IType> _4682___mcc_h1099 = _source311.dtor_typeArgs;
            DAST._IResolvedTypeBase _4683___mcc_h1100 = _source311.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4684___mcc_h1101 = _source311.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4685___mcc_h1102 = _source311.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4686___mcc_h1103 = _source311.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source312 = _4683___mcc_h1100;
            if (_source312.is_Class) {
              {
                RAST._IExpr _out1390;
                DCOMP._IOwnership _out1391;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1392;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1390, out _out1391, out _out1392);
                r = _out1390;
                resultingOwnership = _out1391;
                readIdents = _out1392;
              }
            } else if (_source312.is_Datatype) {
              {
                RAST._IExpr _out1393;
                DCOMP._IOwnership _out1394;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1393, out _out1394, out _out1395);
                r = _out1393;
                resultingOwnership = _out1394;
                readIdents = _out1395;
              }
            } else if (_source312.is_Trait) {
              {
                RAST._IExpr _out1396;
                DCOMP._IOwnership _out1397;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1398;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1396, out _out1397, out _out1398);
                r = _out1396;
                resultingOwnership = _out1397;
                readIdents = _out1398;
              }
            } else {
              DAST._IType _4687___mcc_h1110 = _source312.dtor_baseType;
              DAST._INewtypeRange _4688___mcc_h1111 = _source312.dtor_range;
              bool _4689___mcc_h1112 = _source312.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4690_attributes = _4684___mcc_h1101;
              bool _4691_erase = _4689___mcc_h1112;
              DAST._INewtypeRange _4692_range = _4688___mcc_h1111;
              DAST._IType _4693_b = _4687___mcc_h1110;
              {
                RAST._IExpr _out1399;
                DCOMP._IOwnership _out1400;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1401;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1399, out _out1400, out _out1401);
                r = _out1399;
                resultingOwnership = _out1400;
                readIdents = _out1401;
              }
            }
          } else if (_source310.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4694___mcc_h1116 = _source310.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out1402;
              DCOMP._IOwnership _out1403;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1402, out _out1403, out _out1404);
              r = _out1402;
              resultingOwnership = _out1403;
              readIdents = _out1404;
            }
          } else if (_source310.is_Array) {
            DAST._IType _4695___mcc_h1118 = _source310.dtor_element;
            BigInteger _4696___mcc_h1119 = _source310.dtor_dims;
            {
              RAST._IExpr _out1405;
              DCOMP._IOwnership _out1406;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1407;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1405, out _out1406, out _out1407);
              r = _out1405;
              resultingOwnership = _out1406;
              readIdents = _out1407;
            }
          } else if (_source310.is_Seq) {
            DAST._IType _4697___mcc_h1122 = _source310.dtor_element;
            {
              RAST._IExpr _out1408;
              DCOMP._IOwnership _out1409;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1410;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1408, out _out1409, out _out1410);
              r = _out1408;
              resultingOwnership = _out1409;
              readIdents = _out1410;
            }
          } else if (_source310.is_Set) {
            DAST._IType _4698___mcc_h1124 = _source310.dtor_element;
            {
              RAST._IExpr _out1411;
              DCOMP._IOwnership _out1412;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1413;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1411, out _out1412, out _out1413);
              r = _out1411;
              resultingOwnership = _out1412;
              readIdents = _out1413;
            }
          } else if (_source310.is_Multiset) {
            DAST._IType _4699___mcc_h1126 = _source310.dtor_element;
            {
              RAST._IExpr _out1414;
              DCOMP._IOwnership _out1415;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1414, out _out1415, out _out1416);
              r = _out1414;
              resultingOwnership = _out1415;
              readIdents = _out1416;
            }
          } else if (_source310.is_Map) {
            DAST._IType _4700___mcc_h1128 = _source310.dtor_key;
            DAST._IType _4701___mcc_h1129 = _source310.dtor_value;
            {
              RAST._IExpr _out1417;
              DCOMP._IOwnership _out1418;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1417, out _out1418, out _out1419);
              r = _out1417;
              resultingOwnership = _out1418;
              readIdents = _out1419;
            }
          } else if (_source310.is_SetBuilder) {
            DAST._IType _4702___mcc_h1132 = _source310.dtor_element;
            {
              RAST._IExpr _out1420;
              DCOMP._IOwnership _out1421;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1422;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1420, out _out1421, out _out1422);
              r = _out1420;
              resultingOwnership = _out1421;
              readIdents = _out1422;
            }
          } else if (_source310.is_MapBuilder) {
            DAST._IType _4703___mcc_h1134 = _source310.dtor_key;
            DAST._IType _4704___mcc_h1135 = _source310.dtor_value;
            {
              RAST._IExpr _out1423;
              DCOMP._IOwnership _out1424;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1425;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1423, out _out1424, out _out1425);
              r = _out1423;
              resultingOwnership = _out1424;
              readIdents = _out1425;
            }
          } else if (_source310.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4705___mcc_h1138 = _source310.dtor_args;
            DAST._IType _4706___mcc_h1139 = _source310.dtor_result;
            {
              RAST._IExpr _out1426;
              DCOMP._IOwnership _out1427;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1426, out _out1427, out _out1428);
              r = _out1426;
              resultingOwnership = _out1427;
              readIdents = _out1428;
            }
          } else if (_source310.is_Primitive) {
            DAST._IPrimitive _4707___mcc_h1142 = _source310.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out1429;
              DCOMP._IOwnership _out1430;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1431;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1429, out _out1430, out _out1431);
              r = _out1429;
              resultingOwnership = _out1430;
              readIdents = _out1431;
            }
          } else if (_source310.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4708___mcc_h1144 = _source310.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out1432;
              DCOMP._IOwnership _out1433;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1434;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1432, out _out1433, out _out1434);
              r = _out1432;
              resultingOwnership = _out1433;
              readIdents = _out1434;
            }
          } else if (_source310.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4709___mcc_h1146 = _source310.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out1435;
              DCOMP._IOwnership _out1436;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1437;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1435, out _out1436, out _out1437);
              r = _out1435;
              resultingOwnership = _out1436;
              readIdents = _out1437;
            }
          } else {
            {
              RAST._IExpr _out1438;
              DCOMP._IOwnership _out1439;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1438, out _out1439, out _out1440);
              r = _out1438;
              resultingOwnership = _out1439;
              readIdents = _out1440;
            }
          }
        } else {
          DAST._IType _source313 = _3993___mcc_h1;
          if (_source313.is_UserDefined) {
            DAST._IResolvedType _4710___mcc_h1148 = _source313.dtor_resolved;
            DAST._IResolvedType _source314 = _4710___mcc_h1148;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4711___mcc_h1150 = _source314.dtor_path;
            Dafny.ISequence<DAST._IType> _4712___mcc_h1151 = _source314.dtor_typeArgs;
            DAST._IResolvedTypeBase _4713___mcc_h1152 = _source314.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4714___mcc_h1153 = _source314.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4715___mcc_h1154 = _source314.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4716___mcc_h1155 = _source314.dtor_extendedTypes;
            DAST._IResolvedTypeBase _source315 = _4713___mcc_h1152;
            if (_source315.is_Class) {
              {
                RAST._IExpr _out1441;
                DCOMP._IOwnership _out1442;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1443;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1441, out _out1442, out _out1443);
                r = _out1441;
                resultingOwnership = _out1442;
                readIdents = _out1443;
              }
            } else if (_source315.is_Datatype) {
              {
                RAST._IExpr _out1444;
                DCOMP._IOwnership _out1445;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1446;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1444, out _out1445, out _out1446);
                r = _out1444;
                resultingOwnership = _out1445;
                readIdents = _out1446;
              }
            } else if (_source315.is_Trait) {
              {
                RAST._IExpr _out1447;
                DCOMP._IOwnership _out1448;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
                (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1447, out _out1448, out _out1449);
                r = _out1447;
                resultingOwnership = _out1448;
                readIdents = _out1449;
              }
            } else {
              DAST._IType _4717___mcc_h1162 = _source315.dtor_baseType;
              DAST._INewtypeRange _4718___mcc_h1163 = _source315.dtor_range;
              bool _4719___mcc_h1164 = _source315.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4720_attributes = _4714___mcc_h1153;
              bool _4721_erase = _4719___mcc_h1164;
              DAST._INewtypeRange _4722_range = _4718___mcc_h1163;
              DAST._IType _4723_b = _4717___mcc_h1162;
              {
                RAST._IExpr _out1450;
                DCOMP._IOwnership _out1451;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
                (this).GenExprConvertToNewtype(e, selfIdent, env, expectedOwnership, out _out1450, out _out1451, out _out1452);
                r = _out1450;
                resultingOwnership = _out1451;
                readIdents = _out1452;
              }
            }
          } else if (_source313.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4724___mcc_h1168 = _source313.dtor_Tuple_i_a0;
            {
              RAST._IExpr _out1453;
              DCOMP._IOwnership _out1454;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1455;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1453, out _out1454, out _out1455);
              r = _out1453;
              resultingOwnership = _out1454;
              readIdents = _out1455;
            }
          } else if (_source313.is_Array) {
            DAST._IType _4725___mcc_h1170 = _source313.dtor_element;
            BigInteger _4726___mcc_h1171 = _source313.dtor_dims;
            {
              RAST._IExpr _out1456;
              DCOMP._IOwnership _out1457;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1458;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1456, out _out1457, out _out1458);
              r = _out1456;
              resultingOwnership = _out1457;
              readIdents = _out1458;
            }
          } else if (_source313.is_Seq) {
            DAST._IType _4727___mcc_h1174 = _source313.dtor_element;
            {
              RAST._IExpr _out1459;
              DCOMP._IOwnership _out1460;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1459, out _out1460, out _out1461);
              r = _out1459;
              resultingOwnership = _out1460;
              readIdents = _out1461;
            }
          } else if (_source313.is_Set) {
            DAST._IType _4728___mcc_h1176 = _source313.dtor_element;
            {
              RAST._IExpr _out1462;
              DCOMP._IOwnership _out1463;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1462, out _out1463, out _out1464);
              r = _out1462;
              resultingOwnership = _out1463;
              readIdents = _out1464;
            }
          } else if (_source313.is_Multiset) {
            DAST._IType _4729___mcc_h1178 = _source313.dtor_element;
            {
              RAST._IExpr _out1465;
              DCOMP._IOwnership _out1466;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1467;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1465, out _out1466, out _out1467);
              r = _out1465;
              resultingOwnership = _out1466;
              readIdents = _out1467;
            }
          } else if (_source313.is_Map) {
            DAST._IType _4730___mcc_h1180 = _source313.dtor_key;
            DAST._IType _4731___mcc_h1181 = _source313.dtor_value;
            {
              RAST._IExpr _out1468;
              DCOMP._IOwnership _out1469;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1470;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1468, out _out1469, out _out1470);
              r = _out1468;
              resultingOwnership = _out1469;
              readIdents = _out1470;
            }
          } else if (_source313.is_SetBuilder) {
            DAST._IType _4732___mcc_h1184 = _source313.dtor_element;
            {
              RAST._IExpr _out1471;
              DCOMP._IOwnership _out1472;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1471, out _out1472, out _out1473);
              r = _out1471;
              resultingOwnership = _out1472;
              readIdents = _out1473;
            }
          } else if (_source313.is_MapBuilder) {
            DAST._IType _4733___mcc_h1186 = _source313.dtor_key;
            DAST._IType _4734___mcc_h1187 = _source313.dtor_value;
            {
              RAST._IExpr _out1474;
              DCOMP._IOwnership _out1475;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1474, out _out1475, out _out1476);
              r = _out1474;
              resultingOwnership = _out1475;
              readIdents = _out1476;
            }
          } else if (_source313.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4735___mcc_h1190 = _source313.dtor_args;
            DAST._IType _4736___mcc_h1191 = _source313.dtor_result;
            {
              RAST._IExpr _out1477;
              DCOMP._IOwnership _out1478;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1479;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1477, out _out1478, out _out1479);
              r = _out1477;
              resultingOwnership = _out1478;
              readIdents = _out1479;
            }
          } else if (_source313.is_Primitive) {
            DAST._IPrimitive _4737___mcc_h1194 = _source313.dtor_Primitive_i_a0;
            {
              RAST._IExpr _out1480;
              DCOMP._IOwnership _out1481;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1482;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1480, out _out1481, out _out1482);
              r = _out1480;
              resultingOwnership = _out1481;
              readIdents = _out1482;
            }
          } else if (_source313.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4738___mcc_h1196 = _source313.dtor_Passthrough_i_a0;
            {
              RAST._IExpr _out1483;
              DCOMP._IOwnership _out1484;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1483, out _out1484, out _out1485);
              r = _out1483;
              resultingOwnership = _out1484;
              readIdents = _out1485;
            }
          } else if (_source313.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4739___mcc_h1198 = _source313.dtor_TypeArg_i_a0;
            {
              RAST._IExpr _out1486;
              DCOMP._IOwnership _out1487;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1486, out _out1487, out _out1488);
              r = _out1486;
              resultingOwnership = _out1487;
              readIdents = _out1488;
            }
          } else {
            {
              RAST._IExpr _out1489;
              DCOMP._IOwnership _out1490;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1491;
              (this).GenExprConvertNotImplemented(e, selfIdent, env, expectedOwnership, out _out1489, out _out1490, out _out1491);
              r = _out1489;
              resultingOwnership = _out1490;
              readIdents = _out1491;
            }
          }
        }
      }
      return ;
    }
    public void GenIdent(Dafny.ISequence<Dafny.Rune> rName, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      r = RAST.Expr.create_Identifier(rName);
      Std.Wrappers._IOption<RAST._IType> _4740_tpe;
      _4740_tpe = (env).GetType(rName);
      Std.Wrappers._IOption<RAST._IType> _4741_placeboOpt;
      _4741_placeboOpt = (((_4740_tpe).is_Some) ? (((_4740_tpe).dtor_value).ExtractMaybePlacebo()) : (Std.Wrappers.Option<RAST._IType>.create_None()));
      bool _4742_currentlyBorrowed;
      _4742_currentlyBorrowed = (env).IsBorrowed(rName);
      bool _4743_noNeedOfClone;
      _4743_noNeedOfClone = (env).CanReadWithoutClone(rName);
      if ((_4741_placeboOpt).is_Some) {
        r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("read"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
        _4742_currentlyBorrowed = false;
        _4743_noNeedOfClone = true;
        _4740_tpe = Std.Wrappers.Option<RAST._IType>.create_Some((_4741_placeboOpt).dtor_value);
      }
      if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) {
        resultingOwnership = ((_4742_currentlyBorrowed) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()));
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
        if ((rName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
        } else {
          if (((_4740_tpe).is_Some) && (((_4740_tpe).dtor_value).IsObjectOrPointer())) {
            r = ((this).modify__macro).Apply1(r);
          } else {
            r = RAST.__default.BorrowMut(r);
          }
        }
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
        bool _4744_needObjectFromRef;
        _4744_needObjectFromRef = ((((selfIdent).is_ThisTyped) && ((selfIdent).IsSelf())) && (((selfIdent).dtor_rSelfName).Equals(rName))) && (((System.Func<DAST._IType, bool>)((_source316) => {
          if (_source316.is_UserDefined) {
            DAST._IResolvedType _4745___mcc_h0 = _source316.dtor_resolved;
            DAST._IResolvedType _source317 = _4745___mcc_h0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4746___mcc_h2 = _source317.dtor_path;
            Dafny.ISequence<DAST._IType> _4747___mcc_h3 = _source317.dtor_typeArgs;
            DAST._IResolvedTypeBase _4748___mcc_h4 = _source317.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _4749___mcc_h5 = _source317.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4750___mcc_h6 = _source317.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _4751___mcc_h7 = _source317.dtor_extendedTypes;
            Dafny.ISequence<DAST._IAttribute> _4752_attributes = _4749___mcc_h5;
            DAST._IResolvedTypeBase _4753_base = _4748___mcc_h4;
            return ((_4753_base).is_Class) || ((_4753_base).is_Trait);
          } else if (_source316.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4754___mcc_h14 = _source316.dtor_Tuple_i_a0;
            return false;
          } else if (_source316.is_Array) {
            DAST._IType _4755___mcc_h16 = _source316.dtor_element;
            BigInteger _4756___mcc_h17 = _source316.dtor_dims;
            return false;
          } else if (_source316.is_Seq) {
            DAST._IType _4757___mcc_h20 = _source316.dtor_element;
            return false;
          } else if (_source316.is_Set) {
            DAST._IType _4758___mcc_h22 = _source316.dtor_element;
            return false;
          } else if (_source316.is_Multiset) {
            DAST._IType _4759___mcc_h24 = _source316.dtor_element;
            return false;
          } else if (_source316.is_Map) {
            DAST._IType _4760___mcc_h26 = _source316.dtor_key;
            DAST._IType _4761___mcc_h27 = _source316.dtor_value;
            return false;
          } else if (_source316.is_SetBuilder) {
            DAST._IType _4762___mcc_h30 = _source316.dtor_element;
            return false;
          } else if (_source316.is_MapBuilder) {
            DAST._IType _4763___mcc_h32 = _source316.dtor_key;
            DAST._IType _4764___mcc_h33 = _source316.dtor_value;
            return false;
          } else if (_source316.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4765___mcc_h36 = _source316.dtor_args;
            DAST._IType _4766___mcc_h37 = _source316.dtor_result;
            return false;
          } else if (_source316.is_Primitive) {
            DAST._IPrimitive _4767___mcc_h40 = _source316.dtor_Primitive_i_a0;
            return false;
          } else if (_source316.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4768___mcc_h42 = _source316.dtor_Passthrough_i_a0;
            return false;
          } else if (_source316.is_TypeArg) {
            Dafny.ISequence<Dafny.Rune> _4769___mcc_h44 = _source316.dtor_TypeArg_i_a0;
            return false;
          } else {
            return false;
          }
        }))((selfIdent).dtor_dafnyType));
        if (_4744_needObjectFromRef) {
          r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Object"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"))))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(r));
        } else {
          if (!(_4743_noNeedOfClone)) {
            r = (r).Clone();
          }
        }
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwnedBox())) {
        if (!(_4743_noNeedOfClone)) {
          r = (r).Clone();
        }
        r = RAST.__default.BoxNew(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwnedBox();
      } else if (_4742_currentlyBorrowed) {
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        if (!(rName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
          if (((_4740_tpe).is_Some) && (((_4740_tpe).dtor_value).IsPointer())) {
            r = ((this).read__macro).Apply1(r);
          } else {
            r = RAST.__default.Borrow(r);
          }
        }
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      }
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(rName);
      return ;
    }
    public bool HasExternAttributeRenamingModule(Dafny.ISequence<DAST._IAttribute> attributes) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<DAST._IAttribute>, bool>>((_4770_attributes) => Dafny.Helpers.Quantifier<DAST._IAttribute>((_4770_attributes).UniqueElements, false, (((_exists_var_1) => {
        DAST._IAttribute _4771_attribute = (DAST._IAttribute)_exists_var_1;
        return ((_4770_attributes).Contains(_4771_attribute)) && ((((_4771_attribute).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"))) && ((new BigInteger(((_4771_attribute).dtor_args).Count)) == (new BigInteger(2))));
      }))))(attributes);
    }
    public void GenArgs(DCOMP._ISelfInfo selfIdent, DAST._ICallName name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DCOMP._IEnvironment env, out Dafny.ISequence<RAST._IExpr> argExprs, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents, out Dafny.ISequence<RAST._IType> typeExprs, out Std.Wrappers._IOption<DAST._IResolvedType> fullNameQualifier)
    {
      argExprs = Dafny.Sequence<RAST._IExpr>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      typeExprs = Dafny.Sequence<RAST._IType>.Empty;
      fullNameQualifier = Std.Wrappers.Option<DAST._IResolvedType>.Default();
      argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _hi35 = new BigInteger((args).Count);
      for (BigInteger _4772_i = BigInteger.Zero; _4772_i < _hi35; _4772_i++) {
        DCOMP._IOwnership _4773_argOwnership;
        _4773_argOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
        if (((name).is_CallName) && ((_4772_i) < (new BigInteger((((name).dtor_signature)).Count)))) {
          RAST._IType _4774_tpe;
          RAST._IType _out1492;
          _out1492 = (this).GenType(((((name).dtor_signature)).Select(_4772_i)).dtor_typ, DCOMP.GenTypeContext.@default());
          _4774_tpe = _out1492;
          if ((_4774_tpe).CanReadWithoutClone()) {
            _4773_argOwnership = DCOMP.Ownership.create_OwnershipOwned();
          }
        }
        RAST._IExpr _4775_argExpr;
        DCOMP._IOwnership _4776___v142;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4777_argIdents;
        RAST._IExpr _out1493;
        DCOMP._IOwnership _out1494;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1495;
        (this).GenExpr((args).Select(_4772_i), selfIdent, env, _4773_argOwnership, out _out1493, out _out1494, out _out1495);
        _4775_argExpr = _out1493;
        _4776___v142 = _out1494;
        _4777_argIdents = _out1495;
        argExprs = Dafny.Sequence<RAST._IExpr>.Concat(argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_4775_argExpr));
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4777_argIdents);
      }
      typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _hi36 = new BigInteger((typeArgs).Count);
      for (BigInteger _4778_typeI = BigInteger.Zero; _4778_typeI < _hi36; _4778_typeI++) {
        RAST._IType _4779_typeExpr;
        RAST._IType _out1496;
        _out1496 = (this).GenType((typeArgs).Select(_4778_typeI), DCOMP.GenTypeContext.@default());
        _4779_typeExpr = _out1496;
        typeExprs = Dafny.Sequence<RAST._IType>.Concat(typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4779_typeExpr));
      }
      fullNameQualifier = ((System.Func<DAST._ICallName, Std.Wrappers._IOption<DAST._IResolvedType>>)((_source318) => {
        if (_source318.is_CallName) {
          Dafny.ISequence<Dafny.Rune> _4780___mcc_h0 = _source318.dtor_name;
          Std.Wrappers._IOption<DAST._IType> _4781___mcc_h1 = _source318.dtor_onType;
          Std.Wrappers._IOption<DAST._IFormal> _4782___mcc_h2 = _source318.dtor_receiverArgs;
          Dafny.ISequence<DAST._IFormal> _4783___mcc_h3 = _source318.dtor_signature;
          Std.Wrappers._IOption<DAST._IType> _source319 = _4781___mcc_h1;
          if (_source319.is_None) {
            return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
          } else {
            DAST._IType _4784___mcc_h8 = _source319.dtor_value;
            DAST._IType _source320 = _4784___mcc_h8;
            if (_source320.is_UserDefined) {
              DAST._IResolvedType _4785___mcc_h10 = _source320.dtor_resolved;
              DAST._IResolvedType _4786_resolvedType = _4785___mcc_h10;
              Dafny.ISequence<Dafny.Rune> _4787_nameIdent = _4780___mcc_h0;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_Some(Std.Wrappers.Option<DAST._IResolvedType>.GetOr(DCOMP.__default.TraitTypeContainingMethod(_4786_resolvedType, (_4787_nameIdent)), _4786_resolvedType));
            } else if (_source320.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4788___mcc_h12 = _source320.dtor_Tuple_i_a0;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_Array) {
              DAST._IType _4789___mcc_h14 = _source320.dtor_element;
              BigInteger _4790___mcc_h15 = _source320.dtor_dims;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_Seq) {
              DAST._IType _4791___mcc_h18 = _source320.dtor_element;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_Set) {
              DAST._IType _4792___mcc_h20 = _source320.dtor_element;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_Multiset) {
              DAST._IType _4793___mcc_h22 = _source320.dtor_element;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_Map) {
              DAST._IType _4794___mcc_h24 = _source320.dtor_key;
              DAST._IType _4795___mcc_h25 = _source320.dtor_value;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_SetBuilder) {
              DAST._IType _4796___mcc_h28 = _source320.dtor_element;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_MapBuilder) {
              DAST._IType _4797___mcc_h30 = _source320.dtor_key;
              DAST._IType _4798___mcc_h31 = _source320.dtor_value;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4799___mcc_h34 = _source320.dtor_args;
              DAST._IType _4800___mcc_h35 = _source320.dtor_result;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_Primitive) {
              DAST._IPrimitive _4801___mcc_h38 = _source320.dtor_Primitive_i_a0;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4802___mcc_h40 = _source320.dtor_Passthrough_i_a0;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else if (_source320.is_TypeArg) {
              Dafny.ISequence<Dafny.Rune> _4803___mcc_h42 = _source320.dtor_TypeArg_i_a0;
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            } else {
              return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
            }
          }
        } else if (_source318.is_MapBuilderAdd) {
          return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
        } else if (_source318.is_MapBuilderBuild) {
          return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
        } else if (_source318.is_SetBuilderAdd) {
          return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
        } else {
          return Std.Wrappers.Option<DAST._IResolvedType>.create_None();
        }
      }))(name);
      if ((((((fullNameQualifier).is_Some) && ((selfIdent).is_ThisTyped)) && (((selfIdent).dtor_dafnyType).is_UserDefined)) && ((this).IsSameResolvedType(((selfIdent).dtor_dafnyType).dtor_resolved, (fullNameQualifier).dtor_value))) && (!((this).HasExternAttributeRenamingModule(((fullNameQualifier).dtor_value).dtor_attributes)))) {
        fullNameQualifier = Std.Wrappers.Option<DAST._IResolvedType>.create_None();
      }
    }
    public void GenExpr(DAST._IExpression e, DCOMP._ISelfInfo selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source321 = e;
      if (_source321.is_Literal) {
        DAST._ILiteral _4804___mcc_h0 = _source321.dtor_Literal_i_a0;
        RAST._IExpr _out1497;
        DCOMP._IOwnership _out1498;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1499;
        (this).GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out1497, out _out1498, out _out1499);
        r = _out1497;
        resultingOwnership = _out1498;
        readIdents = _out1499;
      } else if (_source321.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _4805___mcc_h1 = _source321.dtor_Ident_i_a0;
        Dafny.ISequence<Dafny.Rune> _4806_name = _4805___mcc_h1;
        {
          RAST._IExpr _out1500;
          DCOMP._IOwnership _out1501;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
          (this).GenIdent(DCOMP.__default.escapeName(_4806_name), selfIdent, env, expectedOwnership, out _out1500, out _out1501, out _out1502);
          r = _out1500;
          resultingOwnership = _out1501;
          readIdents = _out1502;
        }
      } else if (_source321.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4807___mcc_h2 = _source321.dtor_Companion_i_a0;
        Dafny.ISequence<DAST._IType> _4808___mcc_h3 = _source321.dtor_typeArgs;
        Dafny.ISequence<DAST._IType> _4809_typeArgs = _4808___mcc_h3;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4810_path = _4807___mcc_h2;
        {
          RAST._IExpr _out1503;
          _out1503 = DCOMP.COMP.GenPathExpr(_4810_path);
          r = _out1503;
          if ((new BigInteger((_4809_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _4811_typeExprs;
            _4811_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi37 = new BigInteger((_4809_typeArgs).Count);
            for (BigInteger _4812_i = BigInteger.Zero; _4812_i < _hi37; _4812_i++) {
              RAST._IType _4813_typeExpr;
              RAST._IType _out1504;
              _out1504 = (this).GenType((_4809_typeArgs).Select(_4812_i), DCOMP.GenTypeContext.@default());
              _4813_typeExpr = _out1504;
              _4811_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4811_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4813_typeExpr));
            }
            r = (r).ApplyType(_4811_typeExprs);
          }
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else {
            RAST._IExpr _out1505;
            DCOMP._IOwnership _out1506;
            (this).FromOwned(r, expectedOwnership, out _out1505, out _out1506);
            r = _out1505;
            resultingOwnership = _out1506;
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source321.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _4814___mcc_h4 = _source321.dtor_Tuple_i_a0;
        Dafny.ISequence<DAST._IExpression> _4815_values = _4814___mcc_h4;
        {
          Dafny.ISequence<RAST._IExpr> _4816_exprs;
          _4816_exprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _hi38 = new BigInteger((_4815_values).Count);
          for (BigInteger _4817_i = BigInteger.Zero; _4817_i < _hi38; _4817_i++) {
            RAST._IExpr _4818_recursiveGen;
            DCOMP._IOwnership _4819___v147;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4820_recIdents;
            RAST._IExpr _out1507;
            DCOMP._IOwnership _out1508;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
            (this).GenExpr((_4815_values).Select(_4817_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1507, out _out1508, out _out1509);
            _4818_recursiveGen = _out1507;
            _4819___v147 = _out1508;
            _4820_recIdents = _out1509;
            _4816_exprs = Dafny.Sequence<RAST._IExpr>.Concat(_4816_exprs, Dafny.Sequence<RAST._IExpr>.FromElements(_4818_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4820_recIdents);
          }
          r = RAST.Expr.create_Tuple(_4816_exprs);
          RAST._IExpr _out1510;
          DCOMP._IOwnership _out1511;
          (this).FromOwned(r, expectedOwnership, out _out1510, out _out1511);
          r = _out1510;
          resultingOwnership = _out1511;
          return ;
        }
      } else if (_source321.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4821___mcc_h5 = _source321.dtor_path;
        Dafny.ISequence<DAST._IType> _4822___mcc_h6 = _source321.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4823___mcc_h7 = _source321.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4824_args = _4823___mcc_h7;
        Dafny.ISequence<DAST._IType> _4825_typeArgs = _4822___mcc_h6;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4826_path = _4821___mcc_h5;
        {
          RAST._IExpr _out1512;
          _out1512 = DCOMP.COMP.GenPathExpr(_4826_path);
          r = _out1512;
          if ((new BigInteger((_4825_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _4827_typeExprs;
            _4827_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi39 = new BigInteger((_4825_typeArgs).Count);
            for (BigInteger _4828_i = BigInteger.Zero; _4828_i < _hi39; _4828_i++) {
              RAST._IType _4829_typeExpr;
              RAST._IType _out1513;
              _out1513 = (this).GenType((_4825_typeArgs).Select(_4828_i), DCOMP.GenTypeContext.@default());
              _4829_typeExpr = _out1513;
              _4827_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4827_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4829_typeExpr));
            }
            r = (r).ApplyType(_4827_typeExprs);
          }
          r = (r).MSel((this).allocate__fn);
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _4830_arguments;
          _4830_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi40 = new BigInteger((_4824_args).Count);
          for (BigInteger _4831_i = BigInteger.Zero; _4831_i < _hi40; _4831_i++) {
            RAST._IExpr _4832_recursiveGen;
            DCOMP._IOwnership _4833___v148;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4834_recIdents;
            RAST._IExpr _out1514;
            DCOMP._IOwnership _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            (this).GenExpr((_4824_args).Select(_4831_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1514, out _out1515, out _out1516);
            _4832_recursiveGen = _out1514;
            _4833___v148 = _out1515;
            _4834_recIdents = _out1516;
            _4830_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4830_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_4832_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4834_recIdents);
          }
          r = (r).Apply(_4830_arguments);
          RAST._IExpr _out1517;
          DCOMP._IOwnership _out1518;
          (this).FromOwned(r, expectedOwnership, out _out1517, out _out1518);
          r = _out1517;
          resultingOwnership = _out1518;
          return ;
        }
      } else if (_source321.is_NewUninitArray) {
        Dafny.ISequence<DAST._IExpression> _4835___mcc_h8 = _source321.dtor_dims;
        DAST._IType _4836___mcc_h9 = _source321.dtor_typ;
        DAST._IType _4837_typ = _4836___mcc_h9;
        Dafny.ISequence<DAST._IExpression> _4838_dims = _4835___mcc_h8;
        {
          if ((new BigInteger(16)) < (new BigInteger((_4838_dims).Count))) {
            Dafny.ISequence<Dafny.Rune> _4839_msg;
            _4839_msg = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsupported: Creation of arrays of more than 16 dimensions");
            if ((this.error).is_None) {
              (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_4839_msg);
            }
            r = RAST.Expr.create_RawExpr(_4839_msg);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          } else {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
            RAST._IType _4840_typeGen;
            RAST._IType _out1519;
            _out1519 = (this).GenType(_4837_typ, DCOMP.GenTypeContext.@default());
            _4840_typeGen = _out1519;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            Dafny.ISequence<RAST._IExpr> _4841_dimExprs;
            _4841_dimExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _hi41 = new BigInteger((_4838_dims).Count);
            for (BigInteger _4842_i = BigInteger.Zero; _4842_i < _hi41; _4842_i++) {
              RAST._IExpr _4843_recursiveGen;
              DCOMP._IOwnership _4844___v149;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4845_recIdents;
              RAST._IExpr _out1520;
              DCOMP._IOwnership _out1521;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
              (this).GenExpr((_4838_dims).Select(_4842_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1520, out _out1521, out _out1522);
              _4843_recursiveGen = _out1520;
              _4844___v149 = _out1521;
              _4845_recIdents = _out1522;
              _4841_dimExprs = Dafny.Sequence<RAST._IExpr>.Concat(_4841_dimExprs, Dafny.Sequence<RAST._IExpr>.FromElements(((_4843_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_usize"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4845_recIdents);
            }
            if ((new BigInteger((_4838_dims).Count)) > (BigInteger.One)) {
              Dafny.ISequence<Dafny.Rune> _4846_class__name;
              _4846_class__name = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Array"), Std.Strings.__default.OfNat(new BigInteger((_4838_dims).Count)));
              r = ((((RAST.__default.dafny__runtime).MSel(_4846_class__name)).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4840_typeGen))).MSel((this).placebos__usize)).Apply(_4841_dimExprs);
            } else {
              r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("array"))).MSel((this).placebos__usize)).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4840_typeGen))).Apply(_4841_dimExprs);
            }
          }
          RAST._IExpr _out1523;
          DCOMP._IOwnership _out1524;
          (this).FromOwned(r, expectedOwnership, out _out1523, out _out1524);
          r = _out1523;
          resultingOwnership = _out1524;
        }
      } else if (_source321.is_ArrayIndexToInt) {
        DAST._IExpression _4847___mcc_h10 = _source321.dtor_value;
        DAST._IExpression _4848_underlying = _4847___mcc_h10;
        {
          RAST._IExpr _4849_recursiveGen;
          DCOMP._IOwnership _4850___v150;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4851_recIdents;
          RAST._IExpr _out1525;
          DCOMP._IOwnership _out1526;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1527;
          (this).GenExpr(_4848_underlying, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1525, out _out1526, out _out1527);
          _4849_recursiveGen = _out1525;
          _4850___v150 = _out1526;
          _4851_recIdents = _out1527;
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(_4849_recursiveGen);
          readIdents = _4851_recIdents;
          RAST._IExpr _out1528;
          DCOMP._IOwnership _out1529;
          (this).FromOwned(r, expectedOwnership, out _out1528, out _out1529);
          r = _out1528;
          resultingOwnership = _out1529;
        }
      } else if (_source321.is_FinalizeNewArray) {
        DAST._IExpression _4852___mcc_h11 = _source321.dtor_value;
        DAST._IType _4853___mcc_h12 = _source321.dtor_typ;
        DAST._IType _4854_typ = _4853___mcc_h12;
        DAST._IExpression _4855_underlying = _4852___mcc_h11;
        {
          RAST._IType _4856_tpe;
          RAST._IType _out1530;
          _out1530 = (this).GenType(_4854_typ, DCOMP.GenTypeContext.@default());
          _4856_tpe = _out1530;
          RAST._IExpr _4857_recursiveGen;
          DCOMP._IOwnership _4858___v151;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4859_recIdents;
          RAST._IExpr _out1531;
          DCOMP._IOwnership _out1532;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
          (this).GenExpr(_4855_underlying, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1531, out _out1532, out _out1533);
          _4857_recursiveGen = _out1531;
          _4858___v151 = _out1532;
          _4859_recIdents = _out1533;
          readIdents = _4859_recIdents;
          if ((_4856_tpe).IsObjectOrPointer()) {
            RAST._IType _4860_t;
            _4860_t = (_4856_tpe).ObjectOrPointerUnderlying();
            if ((_4860_t).is_Array) {
              r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("array"))).MSel((this).array__construct)).Apply1(_4857_recursiveGen);
            } else if ((_4860_t).IsMultiArray()) {
              Dafny.ISequence<Dafny.Rune> _4861_c;
              _4861_c = (_4860_t).MultiArrayClass();
              r = (((RAST.__default.dafny__runtime).MSel(_4861_c)).MSel((this).array__construct)).Apply1(_4857_recursiveGen);
            } else {
              (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Finalize New Array with a pointer or object type to something that is not an array or a multi array: "), (_4856_tpe)._ToString(DCOMP.__default.IND)));
              r = RAST.Expr.create_RawExpr((this.error).dtor_value);
            }
          } else {
            (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Finalize New Array with a type that is not a pointer or an object: "), (_4856_tpe)._ToString(DCOMP.__default.IND)));
            r = RAST.Expr.create_RawExpr((this.error).dtor_value);
          }
          RAST._IExpr _out1534;
          DCOMP._IOwnership _out1535;
          (this).FromOwned(r, expectedOwnership, out _out1534, out _out1535);
          r = _out1534;
          resultingOwnership = _out1535;
        }
      } else if (_source321.is_DatatypeValue) {
        DAST._IResolvedType _4862___mcc_h13 = _source321.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _4863___mcc_h14 = _source321.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _4864___mcc_h15 = _source321.dtor_variant;
        bool _4865___mcc_h16 = _source321.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4866___mcc_h17 = _source321.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4867_values = _4866___mcc_h17;
        bool _4868_isCo = _4865___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _4869_variant = _4864___mcc_h15;
        Dafny.ISequence<DAST._IType> _4870_typeArgs = _4863___mcc_h14;
        DAST._IResolvedType _4871_datatypeType = _4862___mcc_h13;
        {
          RAST._IExpr _out1536;
          _out1536 = DCOMP.COMP.GenPathExpr((_4871_datatypeType).dtor_path);
          r = _out1536;
          Dafny.ISequence<RAST._IType> _4872_genTypeArgs;
          _4872_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi42 = new BigInteger((_4870_typeArgs).Count);
          for (BigInteger _4873_i = BigInteger.Zero; _4873_i < _hi42; _4873_i++) {
            RAST._IType _4874_typeExpr;
            RAST._IType _out1537;
            _out1537 = (this).GenType((_4870_typeArgs).Select(_4873_i), DCOMP.GenTypeContext.@default());
            _4874_typeExpr = _out1537;
            _4872_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_4872_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_4874_typeExpr));
          }
          if ((new BigInteger((_4870_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_4872_genTypeArgs);
          }
          r = (r).MSel(DCOMP.__default.escapeName(_4869_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _4875_assignments;
          _4875_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi43 = new BigInteger((_4867_values).Count);
          for (BigInteger _4876_i = BigInteger.Zero; _4876_i < _hi43; _4876_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs64 = (_4867_values).Select(_4876_i);
            Dafny.ISequence<Dafny.Rune> _4877_name = _let_tmp_rhs64.dtor__0;
            DAST._IExpression _4878_value = _let_tmp_rhs64.dtor__1;
            if (_4868_isCo) {
              RAST._IExpr _4879_recursiveGen;
              DCOMP._IOwnership _4880___v152;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4881_recIdents;
              RAST._IExpr _out1538;
              DCOMP._IOwnership _out1539;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
              (this).GenExpr(_4878_value, selfIdent, DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out1538, out _out1539, out _out1540);
              _4879_recursiveGen = _out1538;
              _4880___v152 = _out1539;
              _4881_recIdents = _out1540;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4881_recIdents);
              Dafny.ISequence<Dafny.Rune> _4882_allReadCloned;
              _4882_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_4881_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _4883_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_4881_recIdents).Elements) {
                  _4883_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_4881_recIdents).Contains(_4883_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 3844)");
              after__ASSIGN_SUCH_THAT_2: ;
                _4882_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4882_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), _4883_next), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _4883_next), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _4881_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4881_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4883_next));
              }
              Dafny.ISequence<Dafny.Rune> _4884_wasAssigned;
              _4884_wasAssigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _4882_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_4879_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _4875_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_4875_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_4877_name), RAST.Expr.create_RawExpr(_4884_wasAssigned))));
            } else {
              RAST._IExpr _4885_recursiveGen;
              DCOMP._IOwnership _4886___v153;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4887_recIdents;
              RAST._IExpr _out1541;
              DCOMP._IOwnership _out1542;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1543;
              (this).GenExpr(_4878_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1541, out _out1542, out _out1543);
              _4885_recursiveGen = _out1541;
              _4886___v153 = _out1542;
              _4887_recIdents = _out1543;
              _4875_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_4875_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_4877_name), _4885_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4887_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _4875_assignments);
          if ((this).IsRcWrapped((_4871_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out1544;
          DCOMP._IOwnership _out1545;
          (this).FromOwned(r, expectedOwnership, out _out1544, out _out1545);
          r = _out1544;
          resultingOwnership = _out1545;
          return ;
        }
      } else if (_source321.is_Convert) {
        DAST._IExpression _4888___mcc_h18 = _source321.dtor_value;
        DAST._IType _4889___mcc_h19 = _source321.dtor_from;
        DAST._IType _4890___mcc_h20 = _source321.dtor_typ;
        {
          RAST._IExpr _out1546;
          DCOMP._IOwnership _out1547;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
          (this).GenExprConvert(e, selfIdent, env, expectedOwnership, out _out1546, out _out1547, out _out1548);
          r = _out1546;
          resultingOwnership = _out1547;
          readIdents = _out1548;
        }
      } else if (_source321.is_SeqConstruct) {
        DAST._IExpression _4891___mcc_h21 = _source321.dtor_length;
        DAST._IExpression _4892___mcc_h22 = _source321.dtor_elem;
        DAST._IExpression _4893_expr = _4892___mcc_h22;
        DAST._IExpression _4894_length = _4891___mcc_h21;
        {
          RAST._IExpr _4895_recursiveGen;
          DCOMP._IOwnership _4896___v157;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4897_recIdents;
          RAST._IExpr _out1549;
          DCOMP._IOwnership _out1550;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1551;
          (this).GenExpr(_4893_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1549, out _out1550, out _out1551);
          _4895_recursiveGen = _out1549;
          _4896___v157 = _out1550;
          _4897_recIdents = _out1551;
          RAST._IExpr _4898_lengthGen;
          DCOMP._IOwnership _4899___v158;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4900_lengthIdents;
          RAST._IExpr _out1552;
          DCOMP._IOwnership _out1553;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1554;
          (this).GenExpr(_4894_length, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1552, out _out1553, out _out1554);
          _4898_lengthGen = _out1552;
          _4899___v158 = _out1553;
          _4900_lengthIdents = _out1554;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_4895_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_4898_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4897_recIdents, _4900_lengthIdents);
          RAST._IExpr _out1555;
          DCOMP._IOwnership _out1556;
          (this).FromOwned(r, expectedOwnership, out _out1555, out _out1556);
          r = _out1555;
          resultingOwnership = _out1556;
          return ;
        }
      } else if (_source321.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _4901___mcc_h23 = _source321.dtor_elements;
        DAST._IType _4902___mcc_h24 = _source321.dtor_typ;
        DAST._IType _4903_typ = _4902___mcc_h24;
        Dafny.ISequence<DAST._IExpression> _4904_exprs = _4901___mcc_h23;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _4905_genTpe;
          RAST._IType _out1557;
          _out1557 = (this).GenType(_4903_typ, DCOMP.GenTypeContext.@default());
          _4905_genTpe = _out1557;
          BigInteger _4906_i;
          _4906_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4907_args;
          _4907_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4906_i) < (new BigInteger((_4904_exprs).Count))) {
            RAST._IExpr _4908_recursiveGen;
            DCOMP._IOwnership _4909___v159;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4910_recIdents;
            RAST._IExpr _out1558;
            DCOMP._IOwnership _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            (this).GenExpr((_4904_exprs).Select(_4906_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1558, out _out1559, out _out1560);
            _4908_recursiveGen = _out1558;
            _4909___v159 = _out1559;
            _4910_recIdents = _out1560;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4910_recIdents);
            _4907_args = Dafny.Sequence<RAST._IExpr>.Concat(_4907_args, Dafny.Sequence<RAST._IExpr>.FromElements(_4908_recursiveGen));
            _4906_i = (_4906_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_4907_args);
          if ((new BigInteger((_4907_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_4905_genTpe));
          }
          RAST._IExpr _out1561;
          DCOMP._IOwnership _out1562;
          (this).FromOwned(r, expectedOwnership, out _out1561, out _out1562);
          r = _out1561;
          resultingOwnership = _out1562;
          return ;
        }
      } else if (_source321.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _4911___mcc_h25 = _source321.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4912_exprs = _4911___mcc_h25;
        {
          Dafny.ISequence<RAST._IExpr> _4913_generatedValues;
          _4913_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4914_i;
          _4914_i = BigInteger.Zero;
          while ((_4914_i) < (new BigInteger((_4912_exprs).Count))) {
            RAST._IExpr _4915_recursiveGen;
            DCOMP._IOwnership _4916___v160;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4917_recIdents;
            RAST._IExpr _out1563;
            DCOMP._IOwnership _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            (this).GenExpr((_4912_exprs).Select(_4914_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1563, out _out1564, out _out1565);
            _4915_recursiveGen = _out1563;
            _4916___v160 = _out1564;
            _4917_recIdents = _out1565;
            _4913_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4913_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4915_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4917_recIdents);
            _4914_i = (_4914_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_4913_generatedValues);
          RAST._IExpr _out1566;
          DCOMP._IOwnership _out1567;
          (this).FromOwned(r, expectedOwnership, out _out1566, out _out1567);
          r = _out1566;
          resultingOwnership = _out1567;
          return ;
        }
      } else if (_source321.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _4918___mcc_h26 = _source321.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4919_exprs = _4918___mcc_h26;
        {
          Dafny.ISequence<RAST._IExpr> _4920_generatedValues;
          _4920_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4921_i;
          _4921_i = BigInteger.Zero;
          while ((_4921_i) < (new BigInteger((_4919_exprs).Count))) {
            RAST._IExpr _4922_recursiveGen;
            DCOMP._IOwnership _4923___v161;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4924_recIdents;
            RAST._IExpr _out1568;
            DCOMP._IOwnership _out1569;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1570;
            (this).GenExpr((_4919_exprs).Select(_4921_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1568, out _out1569, out _out1570);
            _4922_recursiveGen = _out1568;
            _4923___v161 = _out1569;
            _4924_recIdents = _out1570;
            _4920_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4920_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4922_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4924_recIdents);
            _4921_i = (_4921_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_4920_generatedValues);
          RAST._IExpr _out1571;
          DCOMP._IOwnership _out1572;
          (this).FromOwned(r, expectedOwnership, out _out1571, out _out1572);
          r = _out1571;
          resultingOwnership = _out1572;
          return ;
        }
      } else if (_source321.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4925___mcc_h27 = _source321.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4926_mapElems = _4925___mcc_h27;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _4927_generatedValues;
          _4927_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4928_i;
          _4928_i = BigInteger.Zero;
          while ((_4928_i) < (new BigInteger((_4926_mapElems).Count))) {
            RAST._IExpr _4929_recursiveGenKey;
            DCOMP._IOwnership _4930___v163;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4931_recIdentsKey;
            RAST._IExpr _out1573;
            DCOMP._IOwnership _out1574;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1575;
            (this).GenExpr(((_4926_mapElems).Select(_4928_i)).dtor__0, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1573, out _out1574, out _out1575);
            _4929_recursiveGenKey = _out1573;
            _4930___v163 = _out1574;
            _4931_recIdentsKey = _out1575;
            RAST._IExpr _4932_recursiveGenValue;
            DCOMP._IOwnership _4933___v164;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4934_recIdentsValue;
            RAST._IExpr _out1576;
            DCOMP._IOwnership _out1577;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1578;
            (this).GenExpr(((_4926_mapElems).Select(_4928_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1576, out _out1577, out _out1578);
            _4932_recursiveGenValue = _out1576;
            _4933___v164 = _out1577;
            _4934_recIdentsValue = _out1578;
            _4927_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_4927_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_4929_recursiveGenKey, _4932_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4931_recIdentsKey), _4934_recIdentsValue);
            _4928_i = (_4928_i) + (BigInteger.One);
          }
          _4928_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4935_arguments;
          _4935_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4928_i) < (new BigInteger((_4927_generatedValues).Count))) {
            RAST._IExpr _4936_genKey;
            _4936_genKey = ((_4927_generatedValues).Select(_4928_i)).dtor__0;
            RAST._IExpr _4937_genValue;
            _4937_genValue = ((_4927_generatedValues).Select(_4928_i)).dtor__1;
            _4935_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4935_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _4936_genKey, _4937_genValue, DAST.Format.BinaryOpFormat.create_NoFormat())));
            _4928_i = (_4928_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_4935_arguments);
          RAST._IExpr _out1579;
          DCOMP._IOwnership _out1580;
          (this).FromOwned(r, expectedOwnership, out _out1579, out _out1580);
          r = _out1579;
          resultingOwnership = _out1580;
          return ;
        }
      } else if (_source321.is_MapBuilder) {
        DAST._IType _4938___mcc_h28 = _source321.dtor_keyType;
        DAST._IType _4939___mcc_h29 = _source321.dtor_valueType;
        DAST._IType _4940_valueType = _4939___mcc_h29;
        DAST._IType _4941_keyType = _4938___mcc_h28;
        {
          RAST._IType _4942_kType;
          RAST._IType _out1581;
          _out1581 = (this).GenType(_4941_keyType, DCOMP.GenTypeContext.@default());
          _4942_kType = _out1581;
          RAST._IType _4943_vType;
          RAST._IType _out1582;
          _out1582 = (this).GenType(_4940_valueType, DCOMP.GenTypeContext.@default());
          _4943_vType = _out1582;
          r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4942_kType, _4943_vType))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1583;
          DCOMP._IOwnership _out1584;
          (this).FromOwned(r, expectedOwnership, out _out1583, out _out1584);
          r = _out1583;
          resultingOwnership = _out1584;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source321.is_SeqUpdate) {
        DAST._IExpression _4944___mcc_h30 = _source321.dtor_expr;
        DAST._IExpression _4945___mcc_h31 = _source321.dtor_indexExpr;
        DAST._IExpression _4946___mcc_h32 = _source321.dtor_value;
        DAST._IExpression _4947_value = _4946___mcc_h32;
        DAST._IExpression _4948_index = _4945___mcc_h31;
        DAST._IExpression _4949_expr = _4944___mcc_h30;
        {
          RAST._IExpr _4950_exprR;
          DCOMP._IOwnership _4951___v165;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4952_exprIdents;
          RAST._IExpr _out1585;
          DCOMP._IOwnership _out1586;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1587;
          (this).GenExpr(_4949_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1585, out _out1586, out _out1587);
          _4950_exprR = _out1585;
          _4951___v165 = _out1586;
          _4952_exprIdents = _out1587;
          RAST._IExpr _4953_indexR;
          DCOMP._IOwnership _4954_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4955_indexIdents;
          RAST._IExpr _out1588;
          DCOMP._IOwnership _out1589;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
          (this).GenExpr(_4948_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1588, out _out1589, out _out1590);
          _4953_indexR = _out1588;
          _4954_indexOwnership = _out1589;
          _4955_indexIdents = _out1590;
          RAST._IExpr _4956_valueR;
          DCOMP._IOwnership _4957_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4958_valueIdents;
          RAST._IExpr _out1591;
          DCOMP._IOwnership _out1592;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
          (this).GenExpr(_4947_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1591, out _out1592, out _out1593);
          _4956_valueR = _out1591;
          _4957_valueOwnership = _out1592;
          _4958_valueIdents = _out1593;
          r = ((_4950_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4953_indexR, _4956_valueR));
          RAST._IExpr _out1594;
          DCOMP._IOwnership _out1595;
          (this).FromOwned(r, expectedOwnership, out _out1594, out _out1595);
          r = _out1594;
          resultingOwnership = _out1595;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4952_exprIdents, _4955_indexIdents), _4958_valueIdents);
          return ;
        }
      } else if (_source321.is_MapUpdate) {
        DAST._IExpression _4959___mcc_h33 = _source321.dtor_expr;
        DAST._IExpression _4960___mcc_h34 = _source321.dtor_indexExpr;
        DAST._IExpression _4961___mcc_h35 = _source321.dtor_value;
        DAST._IExpression _4962_value = _4961___mcc_h35;
        DAST._IExpression _4963_index = _4960___mcc_h34;
        DAST._IExpression _4964_expr = _4959___mcc_h33;
        {
          RAST._IExpr _4965_exprR;
          DCOMP._IOwnership _4966___v166;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4967_exprIdents;
          RAST._IExpr _out1596;
          DCOMP._IOwnership _out1597;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1598;
          (this).GenExpr(_4964_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1596, out _out1597, out _out1598);
          _4965_exprR = _out1596;
          _4966___v166 = _out1597;
          _4967_exprIdents = _out1598;
          RAST._IExpr _4968_indexR;
          DCOMP._IOwnership _4969_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4970_indexIdents;
          RAST._IExpr _out1599;
          DCOMP._IOwnership _out1600;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
          (this).GenExpr(_4963_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1599, out _out1600, out _out1601);
          _4968_indexR = _out1599;
          _4969_indexOwnership = _out1600;
          _4970_indexIdents = _out1601;
          RAST._IExpr _4971_valueR;
          DCOMP._IOwnership _4972_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4973_valueIdents;
          RAST._IExpr _out1602;
          DCOMP._IOwnership _out1603;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
          (this).GenExpr(_4962_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1602, out _out1603, out _out1604);
          _4971_valueR = _out1602;
          _4972_valueOwnership = _out1603;
          _4973_valueIdents = _out1604;
          r = ((_4965_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4968_indexR, _4971_valueR));
          RAST._IExpr _out1605;
          DCOMP._IOwnership _out1606;
          (this).FromOwned(r, expectedOwnership, out _out1605, out _out1606);
          r = _out1605;
          resultingOwnership = _out1606;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4967_exprIdents, _4970_indexIdents), _4973_valueIdents);
          return ;
        }
      } else if (_source321.is_SetBuilder) {
        DAST._IType _4974___mcc_h36 = _source321.dtor_elemType;
        DAST._IType _4975_elemType = _4974___mcc_h36;
        {
          RAST._IType _4976_eType;
          RAST._IType _out1607;
          _out1607 = (this).GenType(_4975_elemType, DCOMP.GenTypeContext.@default());
          _4976_eType = _out1607;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_4976_eType))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1608;
          DCOMP._IOwnership _out1609;
          (this).FromOwned(r, expectedOwnership, out _out1608, out _out1609);
          r = _out1608;
          resultingOwnership = _out1609;
          return ;
        }
      } else if (_source321.is_ToMultiset) {
        DAST._IExpression _4977___mcc_h37 = _source321.dtor_ToMultiset_i_a0;
        DAST._IExpression _4978_expr = _4977___mcc_h37;
        {
          RAST._IExpr _4979_recursiveGen;
          DCOMP._IOwnership _4980___v162;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4981_recIdents;
          RAST._IExpr _out1610;
          DCOMP._IOwnership _out1611;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
          (this).GenExpr(_4978_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1610, out _out1611, out _out1612);
          _4979_recursiveGen = _out1610;
          _4980___v162 = _out1611;
          _4981_recIdents = _out1612;
          r = ((_4979_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _4981_recIdents;
          RAST._IExpr _out1613;
          DCOMP._IOwnership _out1614;
          (this).FromOwned(r, expectedOwnership, out _out1613, out _out1614);
          r = _out1613;
          resultingOwnership = _out1614;
          return ;
        }
      } else if (_source321.is_This) {
        {
          DCOMP._ISelfInfo _source322 = selfIdent;
          if (_source322.is_NoSelf) {
            DCOMP._ISelfInfo _4982_None = selfIdent;
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out1615;
              DCOMP._IOwnership _out1616;
              (this).FromOwned(r, expectedOwnership, out _out1615, out _out1616);
              r = _out1615;
              resultingOwnership = _out1616;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4983___mcc_h321 = _source322.dtor_rSelfName;
            DAST._IType _4984___mcc_h322 = _source322.dtor_dafnyType;
            DAST._IType _4985_dafnyType = _4984___mcc_h322;
            Dafny.ISequence<Dafny.Rune> _4986_id = _4983___mcc_h321;
            {
              RAST._IExpr _out1617;
              DCOMP._IOwnership _out1618;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1619;
              (this).GenIdent(_4986_id, selfIdent, env, expectedOwnership, out _out1617, out _out1618, out _out1619);
              r = _out1617;
              resultingOwnership = _out1618;
              readIdents = _out1619;
            }
          }
          return ;
        }
      } else if (_source321.is_Ite) {
        DAST._IExpression _4987___mcc_h38 = _source321.dtor_cond;
        DAST._IExpression _4988___mcc_h39 = _source321.dtor_thn;
        DAST._IExpression _4989___mcc_h40 = _source321.dtor_els;
        DAST._IExpression _4990_f = _4989___mcc_h40;
        DAST._IExpression _4991_t = _4988___mcc_h39;
        DAST._IExpression _4992_cond = _4987___mcc_h38;
        {
          RAST._IExpr _4993_cond;
          DCOMP._IOwnership _4994___v167;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4995_recIdentsCond;
          RAST._IExpr _out1620;
          DCOMP._IOwnership _out1621;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1622;
          (this).GenExpr(_4992_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1620, out _out1621, out _out1622);
          _4993_cond = _out1620;
          _4994___v167 = _out1621;
          _4995_recIdentsCond = _out1622;
          RAST._IExpr _4996_fExpr;
          DCOMP._IOwnership _4997_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4998_recIdentsF;
          RAST._IExpr _out1623;
          DCOMP._IOwnership _out1624;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
          (this).GenExpr(_4990_f, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1623, out _out1624, out _out1625);
          _4996_fExpr = _out1623;
          _4997_fOwned = _out1624;
          _4998_recIdentsF = _out1625;
          RAST._IExpr _4999_tExpr;
          DCOMP._IOwnership _5000___v168;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5001_recIdentsT;
          RAST._IExpr _out1626;
          DCOMP._IOwnership _out1627;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
          (this).GenExpr(_4991_t, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1626, out _out1627, out _out1628);
          _4999_tExpr = _out1626;
          _5000___v168 = _out1627;
          _5001_recIdentsT = _out1628;
          r = RAST.Expr.create_IfExpr(_4993_cond, _4999_tExpr, _4996_fExpr);
          RAST._IExpr _out1629;
          DCOMP._IOwnership _out1630;
          (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipOwned(), expectedOwnership, out _out1629, out _out1630);
          r = _out1629;
          resultingOwnership = _out1630;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4995_recIdentsCond, _5001_recIdentsT), _4998_recIdentsF);
          return ;
        }
      } else if (_source321.is_UnOp) {
        DAST._IUnaryOp _5002___mcc_h41 = _source321.dtor_unOp;
        DAST._IExpression _5003___mcc_h42 = _source321.dtor_expr;
        DAST.Format._IUnaryOpFormat _5004___mcc_h43 = _source321.dtor_format1;
        DAST._IUnaryOp _source323 = _5002___mcc_h41;
        if (_source323.is_Not) {
          DAST.Format._IUnaryOpFormat _5005_format = _5004___mcc_h43;
          DAST._IExpression _5006_e = _5003___mcc_h42;
          {
            RAST._IExpr _5007_recursiveGen;
            DCOMP._IOwnership _5008___v169;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5009_recIdents;
            RAST._IExpr _out1631;
            DCOMP._IOwnership _out1632;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
            (this).GenExpr(_5006_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1631, out _out1632, out _out1633);
            _5007_recursiveGen = _out1631;
            _5008___v169 = _out1632;
            _5009_recIdents = _out1633;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _5007_recursiveGen, _5005_format);
            RAST._IExpr _out1634;
            DCOMP._IOwnership _out1635;
            (this).FromOwned(r, expectedOwnership, out _out1634, out _out1635);
            r = _out1634;
            resultingOwnership = _out1635;
            readIdents = _5009_recIdents;
            return ;
          }
        } else if (_source323.is_BitwiseNot) {
          DAST.Format._IUnaryOpFormat _5010_format = _5004___mcc_h43;
          DAST._IExpression _5011_e = _5003___mcc_h42;
          {
            RAST._IExpr _5012_recursiveGen;
            DCOMP._IOwnership _5013___v170;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5014_recIdents;
            RAST._IExpr _out1636;
            DCOMP._IOwnership _out1637;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1638;
            (this).GenExpr(_5011_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1636, out _out1637, out _out1638);
            _5012_recursiveGen = _out1636;
            _5013___v170 = _out1637;
            _5014_recIdents = _out1638;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _5012_recursiveGen, _5010_format);
            RAST._IExpr _out1639;
            DCOMP._IOwnership _out1640;
            (this).FromOwned(r, expectedOwnership, out _out1639, out _out1640);
            r = _out1639;
            resultingOwnership = _out1640;
            readIdents = _5014_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnaryOpFormat _5015_format = _5004___mcc_h43;
          DAST._IExpression _5016_e = _5003___mcc_h42;
          {
            RAST._IExpr _5017_recursiveGen;
            DCOMP._IOwnership _5018_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5019_recIdents;
            RAST._IExpr _out1641;
            DCOMP._IOwnership _out1642;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1643;
            (this).GenExpr(_5016_e, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1641, out _out1642, out _out1643);
            _5017_recursiveGen = _out1641;
            _5018_recOwned = _out1642;
            _5019_recIdents = _out1643;
            r = ((_5017_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out1644;
            DCOMP._IOwnership _out1645;
            (this).FromOwned(r, expectedOwnership, out _out1644, out _out1645);
            r = _out1644;
            resultingOwnership = _out1645;
            readIdents = _5019_recIdents;
            return ;
          }
        }
      } else if (_source321.is_BinOp) {
        DAST._IBinOp _5020___mcc_h44 = _source321.dtor_op;
        DAST._IExpression _5021___mcc_h45 = _source321.dtor_left;
        DAST._IExpression _5022___mcc_h46 = _source321.dtor_right;
        DAST.Format._IBinaryOpFormat _5023___mcc_h47 = _source321.dtor_format2;
        RAST._IExpr _out1646;
        DCOMP._IOwnership _out1647;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1648;
        (this).GenExprBinary(e, selfIdent, env, expectedOwnership, out _out1646, out _out1647, out _out1648);
        r = _out1646;
        resultingOwnership = _out1647;
        readIdents = _out1648;
      } else if (_source321.is_ArrayLen) {
        DAST._IExpression _5024___mcc_h48 = _source321.dtor_expr;
        DAST._IType _5025___mcc_h49 = _source321.dtor_exprType;
        BigInteger _5026___mcc_h50 = _source321.dtor_dim;
        bool _5027___mcc_h51 = _source321.dtor_native;
        bool _5028_native = _5027___mcc_h51;
        BigInteger _5029_dim = _5026___mcc_h50;
        DAST._IType _5030_exprType = _5025___mcc_h49;
        DAST._IExpression _5031_expr = _5024___mcc_h48;
        {
          RAST._IExpr _5032_recursiveGen;
          DCOMP._IOwnership _5033___v175;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5034_recIdents;
          RAST._IExpr _out1649;
          DCOMP._IOwnership _out1650;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1651;
          (this).GenExpr(_5031_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1649, out _out1650, out _out1651);
          _5032_recursiveGen = _out1649;
          _5033___v175 = _out1650;
          _5034_recIdents = _out1651;
          RAST._IType _5035_arrayType;
          RAST._IType _out1652;
          _out1652 = (this).GenType(_5030_exprType, DCOMP.GenTypeContext.@default());
          _5035_arrayType = _out1652;
          if (!((_5035_arrayType).IsObjectOrPointer())) {
            Dafny.ISequence<Dafny.Rune> _5036_msg;
            _5036_msg = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Array length of something not an array but "), (_5035_arrayType)._ToString(DCOMP.__default.IND));
            (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_5036_msg);
            r = RAST.Expr.create_RawExpr(_5036_msg);
          } else {
            RAST._IType _5037_underlying;
            _5037_underlying = (_5035_arrayType).ObjectOrPointerUnderlying();
            if (((_5029_dim).Sign == 0) && ((_5037_underlying).is_Array)) {
              r = ((((this).read__macro).Apply1(_5032_recursiveGen)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            } else {
              if ((_5029_dim).Sign == 0) {
                r = (((((this).read__macro).Apply1(_5032_recursiveGen)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("data"))).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("len"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              } else {
                r = (((this).read__macro).Apply1(_5032_recursiveGen)).Sel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Length"), Std.Strings.__default.OfNat(_5029_dim)));
              }
            }
            if (!(_5028_native)) {
              r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(r);
            }
          }
          RAST._IExpr _out1653;
          DCOMP._IOwnership _out1654;
          (this).FromOwned(r, expectedOwnership, out _out1653, out _out1654);
          r = _out1653;
          resultingOwnership = _out1654;
          readIdents = _5034_recIdents;
          return ;
        }
      } else if (_source321.is_MapKeys) {
        DAST._IExpression _5038___mcc_h52 = _source321.dtor_expr;
        DAST._IExpression _5039_expr = _5038___mcc_h52;
        {
          RAST._IExpr _5040_recursiveGen;
          DCOMP._IOwnership _5041___v176;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5042_recIdents;
          RAST._IExpr _out1655;
          DCOMP._IOwnership _out1656;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1657;
          (this).GenExpr(_5039_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1655, out _out1656, out _out1657);
          _5040_recursiveGen = _out1655;
          _5041___v176 = _out1656;
          _5042_recIdents = _out1657;
          readIdents = _5042_recIdents;
          r = ((_5040_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1658;
          DCOMP._IOwnership _out1659;
          (this).FromOwned(r, expectedOwnership, out _out1658, out _out1659);
          r = _out1658;
          resultingOwnership = _out1659;
          return ;
        }
      } else if (_source321.is_MapValues) {
        DAST._IExpression _5043___mcc_h53 = _source321.dtor_expr;
        DAST._IExpression _5044_expr = _5043___mcc_h53;
        {
          RAST._IExpr _5045_recursiveGen;
          DCOMP._IOwnership _5046___v177;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5047_recIdents;
          RAST._IExpr _out1660;
          DCOMP._IOwnership _out1661;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
          (this).GenExpr(_5044_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1660, out _out1661, out _out1662);
          _5045_recursiveGen = _out1660;
          _5046___v177 = _out1661;
          _5047_recIdents = _out1662;
          readIdents = _5047_recIdents;
          r = ((_5045_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out1663;
          DCOMP._IOwnership _out1664;
          (this).FromOwned(r, expectedOwnership, out _out1663, out _out1664);
          r = _out1663;
          resultingOwnership = _out1664;
          return ;
        }
      } else if (_source321.is_Select) {
        DAST._IExpression _5048___mcc_h54 = _source321.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _5049___mcc_h55 = _source321.dtor_field;
        bool _5050___mcc_h56 = _source321.dtor_isConstant;
        bool _5051___mcc_h57 = _source321.dtor_onDatatype;
        DAST._IType _5052___mcc_h58 = _source321.dtor_fieldType;
        DAST._IExpression _source324 = _5048___mcc_h54;
        if (_source324.is_Literal) {
          DAST._ILiteral _5053___mcc_h59 = _source324.dtor_Literal_i_a0;
          DAST._IType _5054_fieldType = _5052___mcc_h58;
          bool _5055_isDatatype = _5051___mcc_h57;
          bool _5056_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5057_field = _5049___mcc_h55;
          DAST._IExpression _5058_on = _5048___mcc_h54;
          {
            if (_5055_isDatatype) {
              RAST._IExpr _5059_onExpr;
              DCOMP._IOwnership _5060_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5061_recIdents;
              RAST._IExpr _out1665;
              DCOMP._IOwnership _out1666;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1667;
              (this).GenExpr(_5058_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1665, out _out1666, out _out1667);
              _5059_onExpr = _out1665;
              _5060_onOwned = _out1666;
              _5061_recIdents = _out1667;
              r = ((_5059_onExpr).Sel(DCOMP.__default.escapeName(_5057_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5062_typ;
              RAST._IType _out1668;
              _out1668 = (this).GenType(_5054_fieldType, DCOMP.GenTypeContext.@default());
              _5062_typ = _out1668;
              RAST._IExpr _out1669;
              DCOMP._IOwnership _out1670;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1669, out _out1670);
              r = _out1669;
              resultingOwnership = _out1670;
              readIdents = _5061_recIdents;
            } else {
              RAST._IExpr _5063_onExpr;
              DCOMP._IOwnership _5064_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5065_recIdents;
              RAST._IExpr _out1671;
              DCOMP._IOwnership _out1672;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1673;
              (this).GenExpr(_5058_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1671, out _out1672, out _out1673);
              _5063_onExpr = _out1671;
              _5064_onOwned = _out1672;
              _5065_recIdents = _out1673;
              r = _5063_onExpr;
              if (!object.Equals(_5063_onExpr, RAST.__default.self)) {
                RAST._IExpr _source325 = _5063_onExpr;
                if (_source325.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5066___mcc_h325 = _source325.dtor_content;
                } else if (_source325.is_ExprFromType) {
                  RAST._IType _5067___mcc_h327 = _source325.dtor_tpe;
                } else if (_source325.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5068___mcc_h329 = _source325.dtor_name;
                } else if (_source325.is_Match) {
                  RAST._IExpr _5069___mcc_h331 = _source325.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5070___mcc_h332 = _source325.dtor_cases;
                } else if (_source325.is_StmtExpr) {
                  RAST._IExpr _5071___mcc_h335 = _source325.dtor_stmt;
                  RAST._IExpr _5072___mcc_h336 = _source325.dtor_rhs;
                } else if (_source325.is_Block) {
                  RAST._IExpr _5073___mcc_h339 = _source325.dtor_underlying;
                } else if (_source325.is_StructBuild) {
                  RAST._IExpr _5074___mcc_h341 = _source325.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5075___mcc_h342 = _source325.dtor_assignments;
                } else if (_source325.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5076___mcc_h345 = _source325.dtor_arguments;
                } else if (_source325.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5077___mcc_h347 = _source325.dtor_op1;
                  RAST._IExpr _5078___mcc_h348 = _source325.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5079___mcc_h349 = _source325.dtor_format;
                  if (object.Equals(_5077___mcc_h347, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source326 = _5078___mcc_h348;
                    if (_source326.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5080___mcc_h353 = _source326.dtor_content;
                    } else if (_source326.is_ExprFromType) {
                      RAST._IType _5081___mcc_h355 = _source326.dtor_tpe;
                    } else if (_source326.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5082___mcc_h357 = _source326.dtor_name;
                      if (object.Equals(_5082___mcc_h357, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source326.is_Match) {
                      RAST._IExpr _5083___mcc_h359 = _source326.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5084___mcc_h360 = _source326.dtor_cases;
                    } else if (_source326.is_StmtExpr) {
                      RAST._IExpr _5085___mcc_h363 = _source326.dtor_stmt;
                      RAST._IExpr _5086___mcc_h364 = _source326.dtor_rhs;
                    } else if (_source326.is_Block) {
                      RAST._IExpr _5087___mcc_h367 = _source326.dtor_underlying;
                    } else if (_source326.is_StructBuild) {
                      RAST._IExpr _5088___mcc_h369 = _source326.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5089___mcc_h370 = _source326.dtor_assignments;
                    } else if (_source326.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5090___mcc_h373 = _source326.dtor_arguments;
                    } else if (_source326.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5091___mcc_h375 = _source326.dtor_op1;
                      RAST._IExpr _5092___mcc_h376 = _source326.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5093___mcc_h377 = _source326.dtor_format;
                    } else if (_source326.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5094___mcc_h381 = _source326.dtor_op2;
                      RAST._IExpr _5095___mcc_h382 = _source326.dtor_left;
                      RAST._IExpr _5096___mcc_h383 = _source326.dtor_right;
                      DAST.Format._IBinaryOpFormat _5097___mcc_h384 = _source326.dtor_format2;
                    } else if (_source326.is_TypeAscription) {
                      RAST._IExpr _5098___mcc_h389 = _source326.dtor_left;
                      RAST._IType _5099___mcc_h390 = _source326.dtor_tpe;
                    } else if (_source326.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5100___mcc_h393 = _source326.dtor_value;
                    } else if (_source326.is_LiteralBool) {
                      bool _5101___mcc_h395 = _source326.dtor_bvalue;
                    } else if (_source326.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5102___mcc_h397 = _source326.dtor_value;
                      bool _5103___mcc_h398 = _source326.dtor_binary;
                    } else if (_source326.is_DeclareVar) {
                      RAST._IDeclareType _5104___mcc_h401 = _source326.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5105___mcc_h402 = _source326.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5106___mcc_h403 = _source326.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5107___mcc_h404 = _source326.dtor_optRhs;
                    } else if (_source326.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5108___mcc_h409 = _source326.dtor_names;
                      RAST._IExpr _5109___mcc_h410 = _source326.dtor_rhs;
                    } else if (_source326.is_IfExpr) {
                      RAST._IExpr _5110___mcc_h413 = _source326.dtor_cond;
                      RAST._IExpr _5111___mcc_h414 = _source326.dtor_thn;
                      RAST._IExpr _5112___mcc_h415 = _source326.dtor_els;
                    } else if (_source326.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5113___mcc_h419 = _source326.dtor_optCond;
                      RAST._IExpr _5114___mcc_h420 = _source326.dtor_underlying;
                    } else if (_source326.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5115___mcc_h423 = _source326.dtor_name;
                      RAST._IExpr _5116___mcc_h424 = _source326.dtor_range;
                      RAST._IExpr _5117___mcc_h425 = _source326.dtor_body;
                    } else if (_source326.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5118___mcc_h429 = _source326.dtor_lbl;
                      RAST._IExpr _5119___mcc_h430 = _source326.dtor_underlying;
                    } else if (_source326.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5120___mcc_h433 = _source326.dtor_optLbl;
                    } else if (_source326.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5121___mcc_h435 = _source326.dtor_optLbl;
                    } else if (_source326.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5122___mcc_h437 = _source326.dtor_optExpr;
                    } else if (_source326.is_CallType) {
                      RAST._IExpr _5123___mcc_h439 = _source326.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5124___mcc_h440 = _source326.dtor_typeParameters;
                    } else if (_source326.is_Call) {
                      RAST._IExpr _5125___mcc_h443 = _source326.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5126___mcc_h444 = _source326.dtor_arguments;
                    } else if (_source326.is_Select) {
                      RAST._IExpr _5127___mcc_h447 = _source326.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5128___mcc_h448 = _source326.dtor_name;
                    } else if (_source326.is_MemberSelect) {
                      RAST._IExpr _5129___mcc_h451 = _source326.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5130___mcc_h452 = _source326.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5131___mcc_h455 = _source326.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5132___mcc_h456 = _source326.dtor_retType;
                      RAST._IExpr _5133___mcc_h457 = _source326.dtor_body;
                    }
                  } else {
                  }
                } else if (_source325.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5134___mcc_h461 = _source325.dtor_op2;
                  RAST._IExpr _5135___mcc_h462 = _source325.dtor_left;
                  RAST._IExpr _5136___mcc_h463 = _source325.dtor_right;
                  DAST.Format._IBinaryOpFormat _5137___mcc_h464 = _source325.dtor_format2;
                } else if (_source325.is_TypeAscription) {
                  RAST._IExpr _5138___mcc_h469 = _source325.dtor_left;
                  RAST._IType _5139___mcc_h470 = _source325.dtor_tpe;
                } else if (_source325.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5140___mcc_h473 = _source325.dtor_value;
                } else if (_source325.is_LiteralBool) {
                  bool _5141___mcc_h475 = _source325.dtor_bvalue;
                } else if (_source325.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5142___mcc_h477 = _source325.dtor_value;
                  bool _5143___mcc_h478 = _source325.dtor_binary;
                } else if (_source325.is_DeclareVar) {
                  RAST._IDeclareType _5144___mcc_h481 = _source325.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5145___mcc_h482 = _source325.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5146___mcc_h483 = _source325.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5147___mcc_h484 = _source325.dtor_optRhs;
                } else if (_source325.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5148___mcc_h489 = _source325.dtor_names;
                  RAST._IExpr _5149___mcc_h490 = _source325.dtor_rhs;
                } else if (_source325.is_IfExpr) {
                  RAST._IExpr _5150___mcc_h493 = _source325.dtor_cond;
                  RAST._IExpr _5151___mcc_h494 = _source325.dtor_thn;
                  RAST._IExpr _5152___mcc_h495 = _source325.dtor_els;
                } else if (_source325.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5153___mcc_h499 = _source325.dtor_optCond;
                  RAST._IExpr _5154___mcc_h500 = _source325.dtor_underlying;
                } else if (_source325.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5155___mcc_h503 = _source325.dtor_name;
                  RAST._IExpr _5156___mcc_h504 = _source325.dtor_range;
                  RAST._IExpr _5157___mcc_h505 = _source325.dtor_body;
                } else if (_source325.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5158___mcc_h509 = _source325.dtor_lbl;
                  RAST._IExpr _5159___mcc_h510 = _source325.dtor_underlying;
                } else if (_source325.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5160___mcc_h513 = _source325.dtor_optLbl;
                } else if (_source325.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5161___mcc_h515 = _source325.dtor_optLbl;
                } else if (_source325.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5162___mcc_h517 = _source325.dtor_optExpr;
                } else if (_source325.is_CallType) {
                  RAST._IExpr _5163___mcc_h519 = _source325.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5164___mcc_h520 = _source325.dtor_typeParameters;
                } else if (_source325.is_Call) {
                  RAST._IExpr _5165___mcc_h523 = _source325.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5166___mcc_h524 = _source325.dtor_arguments;
                } else if (_source325.is_Select) {
                  RAST._IExpr _5167___mcc_h527 = _source325.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5168___mcc_h528 = _source325.dtor_name;
                } else if (_source325.is_MemberSelect) {
                  RAST._IExpr _5169___mcc_h531 = _source325.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5170___mcc_h532 = _source325.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5171___mcc_h535 = _source325.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5172___mcc_h536 = _source325.dtor_retType;
                  RAST._IExpr _5173___mcc_h537 = _source325.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5057_field));
              if (_5056_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1674;
              DCOMP._IOwnership _out1675;
              (this).FromOwned(r, expectedOwnership, out _out1674, out _out1675);
              r = _out1674;
              resultingOwnership = _out1675;
              readIdents = _5065_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _5174___mcc_h61 = _source324.dtor_Ident_i_a0;
          DAST._IType _5175_fieldType = _5052___mcc_h58;
          bool _5176_isDatatype = _5051___mcc_h57;
          bool _5177_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5178_field = _5049___mcc_h55;
          DAST._IExpression _5179_on = _5048___mcc_h54;
          {
            if (_5176_isDatatype) {
              RAST._IExpr _5180_onExpr;
              DCOMP._IOwnership _5181_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5182_recIdents;
              RAST._IExpr _out1676;
              DCOMP._IOwnership _out1677;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1678;
              (this).GenExpr(_5179_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1676, out _out1677, out _out1678);
              _5180_onExpr = _out1676;
              _5181_onOwned = _out1677;
              _5182_recIdents = _out1678;
              r = ((_5180_onExpr).Sel(DCOMP.__default.escapeName(_5178_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5183_typ;
              RAST._IType _out1679;
              _out1679 = (this).GenType(_5175_fieldType, DCOMP.GenTypeContext.@default());
              _5183_typ = _out1679;
              RAST._IExpr _out1680;
              DCOMP._IOwnership _out1681;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1680, out _out1681);
              r = _out1680;
              resultingOwnership = _out1681;
              readIdents = _5182_recIdents;
            } else {
              RAST._IExpr _5184_onExpr;
              DCOMP._IOwnership _5185_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5186_recIdents;
              RAST._IExpr _out1682;
              DCOMP._IOwnership _out1683;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
              (this).GenExpr(_5179_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1682, out _out1683, out _out1684);
              _5184_onExpr = _out1682;
              _5185_onOwned = _out1683;
              _5186_recIdents = _out1684;
              r = _5184_onExpr;
              if (!object.Equals(_5184_onExpr, RAST.__default.self)) {
                RAST._IExpr _source327 = _5184_onExpr;
                if (_source327.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5187___mcc_h541 = _source327.dtor_content;
                } else if (_source327.is_ExprFromType) {
                  RAST._IType _5188___mcc_h543 = _source327.dtor_tpe;
                } else if (_source327.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5189___mcc_h545 = _source327.dtor_name;
                } else if (_source327.is_Match) {
                  RAST._IExpr _5190___mcc_h547 = _source327.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5191___mcc_h548 = _source327.dtor_cases;
                } else if (_source327.is_StmtExpr) {
                  RAST._IExpr _5192___mcc_h551 = _source327.dtor_stmt;
                  RAST._IExpr _5193___mcc_h552 = _source327.dtor_rhs;
                } else if (_source327.is_Block) {
                  RAST._IExpr _5194___mcc_h555 = _source327.dtor_underlying;
                } else if (_source327.is_StructBuild) {
                  RAST._IExpr _5195___mcc_h557 = _source327.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5196___mcc_h558 = _source327.dtor_assignments;
                } else if (_source327.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5197___mcc_h561 = _source327.dtor_arguments;
                } else if (_source327.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5198___mcc_h563 = _source327.dtor_op1;
                  RAST._IExpr _5199___mcc_h564 = _source327.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5200___mcc_h565 = _source327.dtor_format;
                  if (object.Equals(_5198___mcc_h563, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source328 = _5199___mcc_h564;
                    if (_source328.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5201___mcc_h569 = _source328.dtor_content;
                    } else if (_source328.is_ExprFromType) {
                      RAST._IType _5202___mcc_h571 = _source328.dtor_tpe;
                    } else if (_source328.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5203___mcc_h573 = _source328.dtor_name;
                      if (object.Equals(_5203___mcc_h573, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source328.is_Match) {
                      RAST._IExpr _5204___mcc_h575 = _source328.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5205___mcc_h576 = _source328.dtor_cases;
                    } else if (_source328.is_StmtExpr) {
                      RAST._IExpr _5206___mcc_h579 = _source328.dtor_stmt;
                      RAST._IExpr _5207___mcc_h580 = _source328.dtor_rhs;
                    } else if (_source328.is_Block) {
                      RAST._IExpr _5208___mcc_h583 = _source328.dtor_underlying;
                    } else if (_source328.is_StructBuild) {
                      RAST._IExpr _5209___mcc_h585 = _source328.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5210___mcc_h586 = _source328.dtor_assignments;
                    } else if (_source328.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5211___mcc_h589 = _source328.dtor_arguments;
                    } else if (_source328.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5212___mcc_h591 = _source328.dtor_op1;
                      RAST._IExpr _5213___mcc_h592 = _source328.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5214___mcc_h593 = _source328.dtor_format;
                    } else if (_source328.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5215___mcc_h597 = _source328.dtor_op2;
                      RAST._IExpr _5216___mcc_h598 = _source328.dtor_left;
                      RAST._IExpr _5217___mcc_h599 = _source328.dtor_right;
                      DAST.Format._IBinaryOpFormat _5218___mcc_h600 = _source328.dtor_format2;
                    } else if (_source328.is_TypeAscription) {
                      RAST._IExpr _5219___mcc_h605 = _source328.dtor_left;
                      RAST._IType _5220___mcc_h606 = _source328.dtor_tpe;
                    } else if (_source328.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5221___mcc_h609 = _source328.dtor_value;
                    } else if (_source328.is_LiteralBool) {
                      bool _5222___mcc_h611 = _source328.dtor_bvalue;
                    } else if (_source328.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5223___mcc_h613 = _source328.dtor_value;
                      bool _5224___mcc_h614 = _source328.dtor_binary;
                    } else if (_source328.is_DeclareVar) {
                      RAST._IDeclareType _5225___mcc_h617 = _source328.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5226___mcc_h618 = _source328.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5227___mcc_h619 = _source328.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5228___mcc_h620 = _source328.dtor_optRhs;
                    } else if (_source328.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5229___mcc_h625 = _source328.dtor_names;
                      RAST._IExpr _5230___mcc_h626 = _source328.dtor_rhs;
                    } else if (_source328.is_IfExpr) {
                      RAST._IExpr _5231___mcc_h629 = _source328.dtor_cond;
                      RAST._IExpr _5232___mcc_h630 = _source328.dtor_thn;
                      RAST._IExpr _5233___mcc_h631 = _source328.dtor_els;
                    } else if (_source328.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5234___mcc_h635 = _source328.dtor_optCond;
                      RAST._IExpr _5235___mcc_h636 = _source328.dtor_underlying;
                    } else if (_source328.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5236___mcc_h639 = _source328.dtor_name;
                      RAST._IExpr _5237___mcc_h640 = _source328.dtor_range;
                      RAST._IExpr _5238___mcc_h641 = _source328.dtor_body;
                    } else if (_source328.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5239___mcc_h645 = _source328.dtor_lbl;
                      RAST._IExpr _5240___mcc_h646 = _source328.dtor_underlying;
                    } else if (_source328.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5241___mcc_h649 = _source328.dtor_optLbl;
                    } else if (_source328.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5242___mcc_h651 = _source328.dtor_optLbl;
                    } else if (_source328.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5243___mcc_h653 = _source328.dtor_optExpr;
                    } else if (_source328.is_CallType) {
                      RAST._IExpr _5244___mcc_h655 = _source328.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5245___mcc_h656 = _source328.dtor_typeParameters;
                    } else if (_source328.is_Call) {
                      RAST._IExpr _5246___mcc_h659 = _source328.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5247___mcc_h660 = _source328.dtor_arguments;
                    } else if (_source328.is_Select) {
                      RAST._IExpr _5248___mcc_h663 = _source328.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5249___mcc_h664 = _source328.dtor_name;
                    } else if (_source328.is_MemberSelect) {
                      RAST._IExpr _5250___mcc_h667 = _source328.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5251___mcc_h668 = _source328.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5252___mcc_h671 = _source328.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5253___mcc_h672 = _source328.dtor_retType;
                      RAST._IExpr _5254___mcc_h673 = _source328.dtor_body;
                    }
                  } else {
                  }
                } else if (_source327.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5255___mcc_h677 = _source327.dtor_op2;
                  RAST._IExpr _5256___mcc_h678 = _source327.dtor_left;
                  RAST._IExpr _5257___mcc_h679 = _source327.dtor_right;
                  DAST.Format._IBinaryOpFormat _5258___mcc_h680 = _source327.dtor_format2;
                } else if (_source327.is_TypeAscription) {
                  RAST._IExpr _5259___mcc_h685 = _source327.dtor_left;
                  RAST._IType _5260___mcc_h686 = _source327.dtor_tpe;
                } else if (_source327.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5261___mcc_h689 = _source327.dtor_value;
                } else if (_source327.is_LiteralBool) {
                  bool _5262___mcc_h691 = _source327.dtor_bvalue;
                } else if (_source327.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5263___mcc_h693 = _source327.dtor_value;
                  bool _5264___mcc_h694 = _source327.dtor_binary;
                } else if (_source327.is_DeclareVar) {
                  RAST._IDeclareType _5265___mcc_h697 = _source327.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5266___mcc_h698 = _source327.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5267___mcc_h699 = _source327.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5268___mcc_h700 = _source327.dtor_optRhs;
                } else if (_source327.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5269___mcc_h705 = _source327.dtor_names;
                  RAST._IExpr _5270___mcc_h706 = _source327.dtor_rhs;
                } else if (_source327.is_IfExpr) {
                  RAST._IExpr _5271___mcc_h709 = _source327.dtor_cond;
                  RAST._IExpr _5272___mcc_h710 = _source327.dtor_thn;
                  RAST._IExpr _5273___mcc_h711 = _source327.dtor_els;
                } else if (_source327.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5274___mcc_h715 = _source327.dtor_optCond;
                  RAST._IExpr _5275___mcc_h716 = _source327.dtor_underlying;
                } else if (_source327.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5276___mcc_h719 = _source327.dtor_name;
                  RAST._IExpr _5277___mcc_h720 = _source327.dtor_range;
                  RAST._IExpr _5278___mcc_h721 = _source327.dtor_body;
                } else if (_source327.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5279___mcc_h725 = _source327.dtor_lbl;
                  RAST._IExpr _5280___mcc_h726 = _source327.dtor_underlying;
                } else if (_source327.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5281___mcc_h729 = _source327.dtor_optLbl;
                } else if (_source327.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5282___mcc_h731 = _source327.dtor_optLbl;
                } else if (_source327.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5283___mcc_h733 = _source327.dtor_optExpr;
                } else if (_source327.is_CallType) {
                  RAST._IExpr _5284___mcc_h735 = _source327.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5285___mcc_h736 = _source327.dtor_typeParameters;
                } else if (_source327.is_Call) {
                  RAST._IExpr _5286___mcc_h739 = _source327.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5287___mcc_h740 = _source327.dtor_arguments;
                } else if (_source327.is_Select) {
                  RAST._IExpr _5288___mcc_h743 = _source327.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5289___mcc_h744 = _source327.dtor_name;
                } else if (_source327.is_MemberSelect) {
                  RAST._IExpr _5290___mcc_h747 = _source327.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5291___mcc_h748 = _source327.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5292___mcc_h751 = _source327.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5293___mcc_h752 = _source327.dtor_retType;
                  RAST._IExpr _5294___mcc_h753 = _source327.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5178_field));
              if (_5177_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1685;
              DCOMP._IOwnership _out1686;
              (this).FromOwned(r, expectedOwnership, out _out1685, out _out1686);
              r = _out1685;
              resultingOwnership = _out1686;
              readIdents = _5186_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5295___mcc_h63 = _source324.dtor_Companion_i_a0;
          Dafny.ISequence<DAST._IType> _5296___mcc_h64 = _source324.dtor_typeArgs;
          DAST._IType _5297_fieldType = _5052___mcc_h58;
          bool _5298_isDatatype = _5051___mcc_h57;
          bool _5299_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5300_field = _5049___mcc_h55;
          Dafny.ISequence<DAST._IType> _5301_typeArgs = _5296___mcc_h64;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5302_c = _5295___mcc_h63;
          {
            RAST._IExpr _5303_onExpr;
            DCOMP._IOwnership _5304_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5305_recIdents;
            RAST._IExpr _out1687;
            DCOMP._IOwnership _out1688;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1689;
            (this).GenExpr(DAST.Expression.create_Companion(_5302_c, _5301_typeArgs), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1687, out _out1688, out _out1689);
            _5303_onExpr = _out1687;
            _5304_onOwned = _out1688;
            _5305_recIdents = _out1689;
            r = ((_5303_onExpr).MSel(DCOMP.__default.escapeName(_5300_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out1690;
            DCOMP._IOwnership _out1691;
            (this).FromOwned(r, expectedOwnership, out _out1690, out _out1691);
            r = _out1690;
            resultingOwnership = _out1691;
            readIdents = _5305_recIdents;
            return ;
          }
        } else if (_source324.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _5306___mcc_h67 = _source324.dtor_Tuple_i_a0;
          DAST._IType _5307_fieldType = _5052___mcc_h58;
          bool _5308_isDatatype = _5051___mcc_h57;
          bool _5309_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5310_field = _5049___mcc_h55;
          DAST._IExpression _5311_on = _5048___mcc_h54;
          {
            if (_5308_isDatatype) {
              RAST._IExpr _5312_onExpr;
              DCOMP._IOwnership _5313_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5314_recIdents;
              RAST._IExpr _out1692;
              DCOMP._IOwnership _out1693;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1694;
              (this).GenExpr(_5311_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1692, out _out1693, out _out1694);
              _5312_onExpr = _out1692;
              _5313_onOwned = _out1693;
              _5314_recIdents = _out1694;
              r = ((_5312_onExpr).Sel(DCOMP.__default.escapeName(_5310_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5315_typ;
              RAST._IType _out1695;
              _out1695 = (this).GenType(_5307_fieldType, DCOMP.GenTypeContext.@default());
              _5315_typ = _out1695;
              RAST._IExpr _out1696;
              DCOMP._IOwnership _out1697;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1696, out _out1697);
              r = _out1696;
              resultingOwnership = _out1697;
              readIdents = _5314_recIdents;
            } else {
              RAST._IExpr _5316_onExpr;
              DCOMP._IOwnership _5317_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5318_recIdents;
              RAST._IExpr _out1698;
              DCOMP._IOwnership _out1699;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1700;
              (this).GenExpr(_5311_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1698, out _out1699, out _out1700);
              _5316_onExpr = _out1698;
              _5317_onOwned = _out1699;
              _5318_recIdents = _out1700;
              r = _5316_onExpr;
              if (!object.Equals(_5316_onExpr, RAST.__default.self)) {
                RAST._IExpr _source329 = _5316_onExpr;
                if (_source329.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5319___mcc_h757 = _source329.dtor_content;
                } else if (_source329.is_ExprFromType) {
                  RAST._IType _5320___mcc_h759 = _source329.dtor_tpe;
                } else if (_source329.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5321___mcc_h761 = _source329.dtor_name;
                } else if (_source329.is_Match) {
                  RAST._IExpr _5322___mcc_h763 = _source329.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5323___mcc_h764 = _source329.dtor_cases;
                } else if (_source329.is_StmtExpr) {
                  RAST._IExpr _5324___mcc_h767 = _source329.dtor_stmt;
                  RAST._IExpr _5325___mcc_h768 = _source329.dtor_rhs;
                } else if (_source329.is_Block) {
                  RAST._IExpr _5326___mcc_h771 = _source329.dtor_underlying;
                } else if (_source329.is_StructBuild) {
                  RAST._IExpr _5327___mcc_h773 = _source329.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5328___mcc_h774 = _source329.dtor_assignments;
                } else if (_source329.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5329___mcc_h777 = _source329.dtor_arguments;
                } else if (_source329.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5330___mcc_h779 = _source329.dtor_op1;
                  RAST._IExpr _5331___mcc_h780 = _source329.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5332___mcc_h781 = _source329.dtor_format;
                  if (object.Equals(_5330___mcc_h779, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source330 = _5331___mcc_h780;
                    if (_source330.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5333___mcc_h785 = _source330.dtor_content;
                    } else if (_source330.is_ExprFromType) {
                      RAST._IType _5334___mcc_h787 = _source330.dtor_tpe;
                    } else if (_source330.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5335___mcc_h789 = _source330.dtor_name;
                      if (object.Equals(_5335___mcc_h789, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source330.is_Match) {
                      RAST._IExpr _5336___mcc_h791 = _source330.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5337___mcc_h792 = _source330.dtor_cases;
                    } else if (_source330.is_StmtExpr) {
                      RAST._IExpr _5338___mcc_h795 = _source330.dtor_stmt;
                      RAST._IExpr _5339___mcc_h796 = _source330.dtor_rhs;
                    } else if (_source330.is_Block) {
                      RAST._IExpr _5340___mcc_h799 = _source330.dtor_underlying;
                    } else if (_source330.is_StructBuild) {
                      RAST._IExpr _5341___mcc_h801 = _source330.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5342___mcc_h802 = _source330.dtor_assignments;
                    } else if (_source330.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5343___mcc_h805 = _source330.dtor_arguments;
                    } else if (_source330.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5344___mcc_h807 = _source330.dtor_op1;
                      RAST._IExpr _5345___mcc_h808 = _source330.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5346___mcc_h809 = _source330.dtor_format;
                    } else if (_source330.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5347___mcc_h813 = _source330.dtor_op2;
                      RAST._IExpr _5348___mcc_h814 = _source330.dtor_left;
                      RAST._IExpr _5349___mcc_h815 = _source330.dtor_right;
                      DAST.Format._IBinaryOpFormat _5350___mcc_h816 = _source330.dtor_format2;
                    } else if (_source330.is_TypeAscription) {
                      RAST._IExpr _5351___mcc_h821 = _source330.dtor_left;
                      RAST._IType _5352___mcc_h822 = _source330.dtor_tpe;
                    } else if (_source330.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5353___mcc_h825 = _source330.dtor_value;
                    } else if (_source330.is_LiteralBool) {
                      bool _5354___mcc_h827 = _source330.dtor_bvalue;
                    } else if (_source330.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5355___mcc_h829 = _source330.dtor_value;
                      bool _5356___mcc_h830 = _source330.dtor_binary;
                    } else if (_source330.is_DeclareVar) {
                      RAST._IDeclareType _5357___mcc_h833 = _source330.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5358___mcc_h834 = _source330.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5359___mcc_h835 = _source330.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5360___mcc_h836 = _source330.dtor_optRhs;
                    } else if (_source330.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5361___mcc_h841 = _source330.dtor_names;
                      RAST._IExpr _5362___mcc_h842 = _source330.dtor_rhs;
                    } else if (_source330.is_IfExpr) {
                      RAST._IExpr _5363___mcc_h845 = _source330.dtor_cond;
                      RAST._IExpr _5364___mcc_h846 = _source330.dtor_thn;
                      RAST._IExpr _5365___mcc_h847 = _source330.dtor_els;
                    } else if (_source330.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5366___mcc_h851 = _source330.dtor_optCond;
                      RAST._IExpr _5367___mcc_h852 = _source330.dtor_underlying;
                    } else if (_source330.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5368___mcc_h855 = _source330.dtor_name;
                      RAST._IExpr _5369___mcc_h856 = _source330.dtor_range;
                      RAST._IExpr _5370___mcc_h857 = _source330.dtor_body;
                    } else if (_source330.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5371___mcc_h861 = _source330.dtor_lbl;
                      RAST._IExpr _5372___mcc_h862 = _source330.dtor_underlying;
                    } else if (_source330.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5373___mcc_h865 = _source330.dtor_optLbl;
                    } else if (_source330.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5374___mcc_h867 = _source330.dtor_optLbl;
                    } else if (_source330.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5375___mcc_h869 = _source330.dtor_optExpr;
                    } else if (_source330.is_CallType) {
                      RAST._IExpr _5376___mcc_h871 = _source330.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5377___mcc_h872 = _source330.dtor_typeParameters;
                    } else if (_source330.is_Call) {
                      RAST._IExpr _5378___mcc_h875 = _source330.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5379___mcc_h876 = _source330.dtor_arguments;
                    } else if (_source330.is_Select) {
                      RAST._IExpr _5380___mcc_h879 = _source330.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5381___mcc_h880 = _source330.dtor_name;
                    } else if (_source330.is_MemberSelect) {
                      RAST._IExpr _5382___mcc_h883 = _source330.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5383___mcc_h884 = _source330.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5384___mcc_h887 = _source330.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5385___mcc_h888 = _source330.dtor_retType;
                      RAST._IExpr _5386___mcc_h889 = _source330.dtor_body;
                    }
                  } else {
                  }
                } else if (_source329.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5387___mcc_h893 = _source329.dtor_op2;
                  RAST._IExpr _5388___mcc_h894 = _source329.dtor_left;
                  RAST._IExpr _5389___mcc_h895 = _source329.dtor_right;
                  DAST.Format._IBinaryOpFormat _5390___mcc_h896 = _source329.dtor_format2;
                } else if (_source329.is_TypeAscription) {
                  RAST._IExpr _5391___mcc_h901 = _source329.dtor_left;
                  RAST._IType _5392___mcc_h902 = _source329.dtor_tpe;
                } else if (_source329.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5393___mcc_h905 = _source329.dtor_value;
                } else if (_source329.is_LiteralBool) {
                  bool _5394___mcc_h907 = _source329.dtor_bvalue;
                } else if (_source329.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5395___mcc_h909 = _source329.dtor_value;
                  bool _5396___mcc_h910 = _source329.dtor_binary;
                } else if (_source329.is_DeclareVar) {
                  RAST._IDeclareType _5397___mcc_h913 = _source329.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5398___mcc_h914 = _source329.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5399___mcc_h915 = _source329.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5400___mcc_h916 = _source329.dtor_optRhs;
                } else if (_source329.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5401___mcc_h921 = _source329.dtor_names;
                  RAST._IExpr _5402___mcc_h922 = _source329.dtor_rhs;
                } else if (_source329.is_IfExpr) {
                  RAST._IExpr _5403___mcc_h925 = _source329.dtor_cond;
                  RAST._IExpr _5404___mcc_h926 = _source329.dtor_thn;
                  RAST._IExpr _5405___mcc_h927 = _source329.dtor_els;
                } else if (_source329.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5406___mcc_h931 = _source329.dtor_optCond;
                  RAST._IExpr _5407___mcc_h932 = _source329.dtor_underlying;
                } else if (_source329.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5408___mcc_h935 = _source329.dtor_name;
                  RAST._IExpr _5409___mcc_h936 = _source329.dtor_range;
                  RAST._IExpr _5410___mcc_h937 = _source329.dtor_body;
                } else if (_source329.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5411___mcc_h941 = _source329.dtor_lbl;
                  RAST._IExpr _5412___mcc_h942 = _source329.dtor_underlying;
                } else if (_source329.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5413___mcc_h945 = _source329.dtor_optLbl;
                } else if (_source329.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5414___mcc_h947 = _source329.dtor_optLbl;
                } else if (_source329.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5415___mcc_h949 = _source329.dtor_optExpr;
                } else if (_source329.is_CallType) {
                  RAST._IExpr _5416___mcc_h951 = _source329.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5417___mcc_h952 = _source329.dtor_typeParameters;
                } else if (_source329.is_Call) {
                  RAST._IExpr _5418___mcc_h955 = _source329.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5419___mcc_h956 = _source329.dtor_arguments;
                } else if (_source329.is_Select) {
                  RAST._IExpr _5420___mcc_h959 = _source329.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5421___mcc_h960 = _source329.dtor_name;
                } else if (_source329.is_MemberSelect) {
                  RAST._IExpr _5422___mcc_h963 = _source329.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5423___mcc_h964 = _source329.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5424___mcc_h967 = _source329.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5425___mcc_h968 = _source329.dtor_retType;
                  RAST._IExpr _5426___mcc_h969 = _source329.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5310_field));
              if (_5309_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1701;
              DCOMP._IOwnership _out1702;
              (this).FromOwned(r, expectedOwnership, out _out1701, out _out1702);
              r = _out1701;
              resultingOwnership = _out1702;
              readIdents = _5318_recIdents;
            }
            return ;
          }
        } else if (_source324.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5427___mcc_h69 = _source324.dtor_path;
          Dafny.ISequence<DAST._IType> _5428___mcc_h70 = _source324.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5429___mcc_h71 = _source324.dtor_args;
          DAST._IType _5430_fieldType = _5052___mcc_h58;
          bool _5431_isDatatype = _5051___mcc_h57;
          bool _5432_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5433_field = _5049___mcc_h55;
          DAST._IExpression _5434_on = _5048___mcc_h54;
          {
            if (_5431_isDatatype) {
              RAST._IExpr _5435_onExpr;
              DCOMP._IOwnership _5436_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5437_recIdents;
              RAST._IExpr _out1703;
              DCOMP._IOwnership _out1704;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
              (this).GenExpr(_5434_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1703, out _out1704, out _out1705);
              _5435_onExpr = _out1703;
              _5436_onOwned = _out1704;
              _5437_recIdents = _out1705;
              r = ((_5435_onExpr).Sel(DCOMP.__default.escapeName(_5433_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5438_typ;
              RAST._IType _out1706;
              _out1706 = (this).GenType(_5430_fieldType, DCOMP.GenTypeContext.@default());
              _5438_typ = _out1706;
              RAST._IExpr _out1707;
              DCOMP._IOwnership _out1708;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1707, out _out1708);
              r = _out1707;
              resultingOwnership = _out1708;
              readIdents = _5437_recIdents;
            } else {
              RAST._IExpr _5439_onExpr;
              DCOMP._IOwnership _5440_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5441_recIdents;
              RAST._IExpr _out1709;
              DCOMP._IOwnership _out1710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1711;
              (this).GenExpr(_5434_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1709, out _out1710, out _out1711);
              _5439_onExpr = _out1709;
              _5440_onOwned = _out1710;
              _5441_recIdents = _out1711;
              r = _5439_onExpr;
              if (!object.Equals(_5439_onExpr, RAST.__default.self)) {
                RAST._IExpr _source331 = _5439_onExpr;
                if (_source331.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5442___mcc_h973 = _source331.dtor_content;
                } else if (_source331.is_ExprFromType) {
                  RAST._IType _5443___mcc_h975 = _source331.dtor_tpe;
                } else if (_source331.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5444___mcc_h977 = _source331.dtor_name;
                } else if (_source331.is_Match) {
                  RAST._IExpr _5445___mcc_h979 = _source331.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5446___mcc_h980 = _source331.dtor_cases;
                } else if (_source331.is_StmtExpr) {
                  RAST._IExpr _5447___mcc_h983 = _source331.dtor_stmt;
                  RAST._IExpr _5448___mcc_h984 = _source331.dtor_rhs;
                } else if (_source331.is_Block) {
                  RAST._IExpr _5449___mcc_h987 = _source331.dtor_underlying;
                } else if (_source331.is_StructBuild) {
                  RAST._IExpr _5450___mcc_h989 = _source331.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5451___mcc_h990 = _source331.dtor_assignments;
                } else if (_source331.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5452___mcc_h993 = _source331.dtor_arguments;
                } else if (_source331.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5453___mcc_h995 = _source331.dtor_op1;
                  RAST._IExpr _5454___mcc_h996 = _source331.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5455___mcc_h997 = _source331.dtor_format;
                  if (object.Equals(_5453___mcc_h995, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source332 = _5454___mcc_h996;
                    if (_source332.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5456___mcc_h1001 = _source332.dtor_content;
                    } else if (_source332.is_ExprFromType) {
                      RAST._IType _5457___mcc_h1003 = _source332.dtor_tpe;
                    } else if (_source332.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5458___mcc_h1005 = _source332.dtor_name;
                      if (object.Equals(_5458___mcc_h1005, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source332.is_Match) {
                      RAST._IExpr _5459___mcc_h1007 = _source332.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5460___mcc_h1008 = _source332.dtor_cases;
                    } else if (_source332.is_StmtExpr) {
                      RAST._IExpr _5461___mcc_h1011 = _source332.dtor_stmt;
                      RAST._IExpr _5462___mcc_h1012 = _source332.dtor_rhs;
                    } else if (_source332.is_Block) {
                      RAST._IExpr _5463___mcc_h1015 = _source332.dtor_underlying;
                    } else if (_source332.is_StructBuild) {
                      RAST._IExpr _5464___mcc_h1017 = _source332.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5465___mcc_h1018 = _source332.dtor_assignments;
                    } else if (_source332.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5466___mcc_h1021 = _source332.dtor_arguments;
                    } else if (_source332.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5467___mcc_h1023 = _source332.dtor_op1;
                      RAST._IExpr _5468___mcc_h1024 = _source332.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5469___mcc_h1025 = _source332.dtor_format;
                    } else if (_source332.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5470___mcc_h1029 = _source332.dtor_op2;
                      RAST._IExpr _5471___mcc_h1030 = _source332.dtor_left;
                      RAST._IExpr _5472___mcc_h1031 = _source332.dtor_right;
                      DAST.Format._IBinaryOpFormat _5473___mcc_h1032 = _source332.dtor_format2;
                    } else if (_source332.is_TypeAscription) {
                      RAST._IExpr _5474___mcc_h1037 = _source332.dtor_left;
                      RAST._IType _5475___mcc_h1038 = _source332.dtor_tpe;
                    } else if (_source332.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5476___mcc_h1041 = _source332.dtor_value;
                    } else if (_source332.is_LiteralBool) {
                      bool _5477___mcc_h1043 = _source332.dtor_bvalue;
                    } else if (_source332.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5478___mcc_h1045 = _source332.dtor_value;
                      bool _5479___mcc_h1046 = _source332.dtor_binary;
                    } else if (_source332.is_DeclareVar) {
                      RAST._IDeclareType _5480___mcc_h1049 = _source332.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5481___mcc_h1050 = _source332.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5482___mcc_h1051 = _source332.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5483___mcc_h1052 = _source332.dtor_optRhs;
                    } else if (_source332.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5484___mcc_h1057 = _source332.dtor_names;
                      RAST._IExpr _5485___mcc_h1058 = _source332.dtor_rhs;
                    } else if (_source332.is_IfExpr) {
                      RAST._IExpr _5486___mcc_h1061 = _source332.dtor_cond;
                      RAST._IExpr _5487___mcc_h1062 = _source332.dtor_thn;
                      RAST._IExpr _5488___mcc_h1063 = _source332.dtor_els;
                    } else if (_source332.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5489___mcc_h1067 = _source332.dtor_optCond;
                      RAST._IExpr _5490___mcc_h1068 = _source332.dtor_underlying;
                    } else if (_source332.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5491___mcc_h1071 = _source332.dtor_name;
                      RAST._IExpr _5492___mcc_h1072 = _source332.dtor_range;
                      RAST._IExpr _5493___mcc_h1073 = _source332.dtor_body;
                    } else if (_source332.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5494___mcc_h1077 = _source332.dtor_lbl;
                      RAST._IExpr _5495___mcc_h1078 = _source332.dtor_underlying;
                    } else if (_source332.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5496___mcc_h1081 = _source332.dtor_optLbl;
                    } else if (_source332.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5497___mcc_h1083 = _source332.dtor_optLbl;
                    } else if (_source332.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5498___mcc_h1085 = _source332.dtor_optExpr;
                    } else if (_source332.is_CallType) {
                      RAST._IExpr _5499___mcc_h1087 = _source332.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5500___mcc_h1088 = _source332.dtor_typeParameters;
                    } else if (_source332.is_Call) {
                      RAST._IExpr _5501___mcc_h1091 = _source332.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5502___mcc_h1092 = _source332.dtor_arguments;
                    } else if (_source332.is_Select) {
                      RAST._IExpr _5503___mcc_h1095 = _source332.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5504___mcc_h1096 = _source332.dtor_name;
                    } else if (_source332.is_MemberSelect) {
                      RAST._IExpr _5505___mcc_h1099 = _source332.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5506___mcc_h1100 = _source332.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5507___mcc_h1103 = _source332.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5508___mcc_h1104 = _source332.dtor_retType;
                      RAST._IExpr _5509___mcc_h1105 = _source332.dtor_body;
                    }
                  } else {
                  }
                } else if (_source331.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5510___mcc_h1109 = _source331.dtor_op2;
                  RAST._IExpr _5511___mcc_h1110 = _source331.dtor_left;
                  RAST._IExpr _5512___mcc_h1111 = _source331.dtor_right;
                  DAST.Format._IBinaryOpFormat _5513___mcc_h1112 = _source331.dtor_format2;
                } else if (_source331.is_TypeAscription) {
                  RAST._IExpr _5514___mcc_h1117 = _source331.dtor_left;
                  RAST._IType _5515___mcc_h1118 = _source331.dtor_tpe;
                } else if (_source331.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5516___mcc_h1121 = _source331.dtor_value;
                } else if (_source331.is_LiteralBool) {
                  bool _5517___mcc_h1123 = _source331.dtor_bvalue;
                } else if (_source331.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5518___mcc_h1125 = _source331.dtor_value;
                  bool _5519___mcc_h1126 = _source331.dtor_binary;
                } else if (_source331.is_DeclareVar) {
                  RAST._IDeclareType _5520___mcc_h1129 = _source331.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5521___mcc_h1130 = _source331.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5522___mcc_h1131 = _source331.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5523___mcc_h1132 = _source331.dtor_optRhs;
                } else if (_source331.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5524___mcc_h1137 = _source331.dtor_names;
                  RAST._IExpr _5525___mcc_h1138 = _source331.dtor_rhs;
                } else if (_source331.is_IfExpr) {
                  RAST._IExpr _5526___mcc_h1141 = _source331.dtor_cond;
                  RAST._IExpr _5527___mcc_h1142 = _source331.dtor_thn;
                  RAST._IExpr _5528___mcc_h1143 = _source331.dtor_els;
                } else if (_source331.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5529___mcc_h1147 = _source331.dtor_optCond;
                  RAST._IExpr _5530___mcc_h1148 = _source331.dtor_underlying;
                } else if (_source331.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5531___mcc_h1151 = _source331.dtor_name;
                  RAST._IExpr _5532___mcc_h1152 = _source331.dtor_range;
                  RAST._IExpr _5533___mcc_h1153 = _source331.dtor_body;
                } else if (_source331.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5534___mcc_h1157 = _source331.dtor_lbl;
                  RAST._IExpr _5535___mcc_h1158 = _source331.dtor_underlying;
                } else if (_source331.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5536___mcc_h1161 = _source331.dtor_optLbl;
                } else if (_source331.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5537___mcc_h1163 = _source331.dtor_optLbl;
                } else if (_source331.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5538___mcc_h1165 = _source331.dtor_optExpr;
                } else if (_source331.is_CallType) {
                  RAST._IExpr _5539___mcc_h1167 = _source331.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5540___mcc_h1168 = _source331.dtor_typeParameters;
                } else if (_source331.is_Call) {
                  RAST._IExpr _5541___mcc_h1171 = _source331.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5542___mcc_h1172 = _source331.dtor_arguments;
                } else if (_source331.is_Select) {
                  RAST._IExpr _5543___mcc_h1175 = _source331.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5544___mcc_h1176 = _source331.dtor_name;
                } else if (_source331.is_MemberSelect) {
                  RAST._IExpr _5545___mcc_h1179 = _source331.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5546___mcc_h1180 = _source331.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5547___mcc_h1183 = _source331.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5548___mcc_h1184 = _source331.dtor_retType;
                  RAST._IExpr _5549___mcc_h1185 = _source331.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5433_field));
              if (_5432_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1712;
              DCOMP._IOwnership _out1713;
              (this).FromOwned(r, expectedOwnership, out _out1712, out _out1713);
              r = _out1712;
              resultingOwnership = _out1713;
              readIdents = _5441_recIdents;
            }
            return ;
          }
        } else if (_source324.is_NewUninitArray) {
          Dafny.ISequence<DAST._IExpression> _5550___mcc_h75 = _source324.dtor_dims;
          DAST._IType _5551___mcc_h76 = _source324.dtor_typ;
          DAST._IType _5552_fieldType = _5052___mcc_h58;
          bool _5553_isDatatype = _5051___mcc_h57;
          bool _5554_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5555_field = _5049___mcc_h55;
          DAST._IExpression _5556_on = _5048___mcc_h54;
          {
            if (_5553_isDatatype) {
              RAST._IExpr _5557_onExpr;
              DCOMP._IOwnership _5558_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5559_recIdents;
              RAST._IExpr _out1714;
              DCOMP._IOwnership _out1715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1716;
              (this).GenExpr(_5556_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1714, out _out1715, out _out1716);
              _5557_onExpr = _out1714;
              _5558_onOwned = _out1715;
              _5559_recIdents = _out1716;
              r = ((_5557_onExpr).Sel(DCOMP.__default.escapeName(_5555_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5560_typ;
              RAST._IType _out1717;
              _out1717 = (this).GenType(_5552_fieldType, DCOMP.GenTypeContext.@default());
              _5560_typ = _out1717;
              RAST._IExpr _out1718;
              DCOMP._IOwnership _out1719;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1718, out _out1719);
              r = _out1718;
              resultingOwnership = _out1719;
              readIdents = _5559_recIdents;
            } else {
              RAST._IExpr _5561_onExpr;
              DCOMP._IOwnership _5562_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5563_recIdents;
              RAST._IExpr _out1720;
              DCOMP._IOwnership _out1721;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1722;
              (this).GenExpr(_5556_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1720, out _out1721, out _out1722);
              _5561_onExpr = _out1720;
              _5562_onOwned = _out1721;
              _5563_recIdents = _out1722;
              r = _5561_onExpr;
              if (!object.Equals(_5561_onExpr, RAST.__default.self)) {
                RAST._IExpr _source333 = _5561_onExpr;
                if (_source333.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5564___mcc_h1189 = _source333.dtor_content;
                } else if (_source333.is_ExprFromType) {
                  RAST._IType _5565___mcc_h1191 = _source333.dtor_tpe;
                } else if (_source333.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5566___mcc_h1193 = _source333.dtor_name;
                } else if (_source333.is_Match) {
                  RAST._IExpr _5567___mcc_h1195 = _source333.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5568___mcc_h1196 = _source333.dtor_cases;
                } else if (_source333.is_StmtExpr) {
                  RAST._IExpr _5569___mcc_h1199 = _source333.dtor_stmt;
                  RAST._IExpr _5570___mcc_h1200 = _source333.dtor_rhs;
                } else if (_source333.is_Block) {
                  RAST._IExpr _5571___mcc_h1203 = _source333.dtor_underlying;
                } else if (_source333.is_StructBuild) {
                  RAST._IExpr _5572___mcc_h1205 = _source333.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5573___mcc_h1206 = _source333.dtor_assignments;
                } else if (_source333.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5574___mcc_h1209 = _source333.dtor_arguments;
                } else if (_source333.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5575___mcc_h1211 = _source333.dtor_op1;
                  RAST._IExpr _5576___mcc_h1212 = _source333.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5577___mcc_h1213 = _source333.dtor_format;
                  if (object.Equals(_5575___mcc_h1211, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source334 = _5576___mcc_h1212;
                    if (_source334.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5578___mcc_h1217 = _source334.dtor_content;
                    } else if (_source334.is_ExprFromType) {
                      RAST._IType _5579___mcc_h1219 = _source334.dtor_tpe;
                    } else if (_source334.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5580___mcc_h1221 = _source334.dtor_name;
                      if (object.Equals(_5580___mcc_h1221, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source334.is_Match) {
                      RAST._IExpr _5581___mcc_h1223 = _source334.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5582___mcc_h1224 = _source334.dtor_cases;
                    } else if (_source334.is_StmtExpr) {
                      RAST._IExpr _5583___mcc_h1227 = _source334.dtor_stmt;
                      RAST._IExpr _5584___mcc_h1228 = _source334.dtor_rhs;
                    } else if (_source334.is_Block) {
                      RAST._IExpr _5585___mcc_h1231 = _source334.dtor_underlying;
                    } else if (_source334.is_StructBuild) {
                      RAST._IExpr _5586___mcc_h1233 = _source334.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5587___mcc_h1234 = _source334.dtor_assignments;
                    } else if (_source334.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5588___mcc_h1237 = _source334.dtor_arguments;
                    } else if (_source334.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5589___mcc_h1239 = _source334.dtor_op1;
                      RAST._IExpr _5590___mcc_h1240 = _source334.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5591___mcc_h1241 = _source334.dtor_format;
                    } else if (_source334.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5592___mcc_h1245 = _source334.dtor_op2;
                      RAST._IExpr _5593___mcc_h1246 = _source334.dtor_left;
                      RAST._IExpr _5594___mcc_h1247 = _source334.dtor_right;
                      DAST.Format._IBinaryOpFormat _5595___mcc_h1248 = _source334.dtor_format2;
                    } else if (_source334.is_TypeAscription) {
                      RAST._IExpr _5596___mcc_h1253 = _source334.dtor_left;
                      RAST._IType _5597___mcc_h1254 = _source334.dtor_tpe;
                    } else if (_source334.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5598___mcc_h1257 = _source334.dtor_value;
                    } else if (_source334.is_LiteralBool) {
                      bool _5599___mcc_h1259 = _source334.dtor_bvalue;
                    } else if (_source334.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5600___mcc_h1261 = _source334.dtor_value;
                      bool _5601___mcc_h1262 = _source334.dtor_binary;
                    } else if (_source334.is_DeclareVar) {
                      RAST._IDeclareType _5602___mcc_h1265 = _source334.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5603___mcc_h1266 = _source334.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5604___mcc_h1267 = _source334.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5605___mcc_h1268 = _source334.dtor_optRhs;
                    } else if (_source334.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5606___mcc_h1273 = _source334.dtor_names;
                      RAST._IExpr _5607___mcc_h1274 = _source334.dtor_rhs;
                    } else if (_source334.is_IfExpr) {
                      RAST._IExpr _5608___mcc_h1277 = _source334.dtor_cond;
                      RAST._IExpr _5609___mcc_h1278 = _source334.dtor_thn;
                      RAST._IExpr _5610___mcc_h1279 = _source334.dtor_els;
                    } else if (_source334.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5611___mcc_h1283 = _source334.dtor_optCond;
                      RAST._IExpr _5612___mcc_h1284 = _source334.dtor_underlying;
                    } else if (_source334.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5613___mcc_h1287 = _source334.dtor_name;
                      RAST._IExpr _5614___mcc_h1288 = _source334.dtor_range;
                      RAST._IExpr _5615___mcc_h1289 = _source334.dtor_body;
                    } else if (_source334.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5616___mcc_h1293 = _source334.dtor_lbl;
                      RAST._IExpr _5617___mcc_h1294 = _source334.dtor_underlying;
                    } else if (_source334.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5618___mcc_h1297 = _source334.dtor_optLbl;
                    } else if (_source334.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5619___mcc_h1299 = _source334.dtor_optLbl;
                    } else if (_source334.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5620___mcc_h1301 = _source334.dtor_optExpr;
                    } else if (_source334.is_CallType) {
                      RAST._IExpr _5621___mcc_h1303 = _source334.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5622___mcc_h1304 = _source334.dtor_typeParameters;
                    } else if (_source334.is_Call) {
                      RAST._IExpr _5623___mcc_h1307 = _source334.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5624___mcc_h1308 = _source334.dtor_arguments;
                    } else if (_source334.is_Select) {
                      RAST._IExpr _5625___mcc_h1311 = _source334.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5626___mcc_h1312 = _source334.dtor_name;
                    } else if (_source334.is_MemberSelect) {
                      RAST._IExpr _5627___mcc_h1315 = _source334.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5628___mcc_h1316 = _source334.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5629___mcc_h1319 = _source334.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5630___mcc_h1320 = _source334.dtor_retType;
                      RAST._IExpr _5631___mcc_h1321 = _source334.dtor_body;
                    }
                  } else {
                  }
                } else if (_source333.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5632___mcc_h1325 = _source333.dtor_op2;
                  RAST._IExpr _5633___mcc_h1326 = _source333.dtor_left;
                  RAST._IExpr _5634___mcc_h1327 = _source333.dtor_right;
                  DAST.Format._IBinaryOpFormat _5635___mcc_h1328 = _source333.dtor_format2;
                } else if (_source333.is_TypeAscription) {
                  RAST._IExpr _5636___mcc_h1333 = _source333.dtor_left;
                  RAST._IType _5637___mcc_h1334 = _source333.dtor_tpe;
                } else if (_source333.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5638___mcc_h1337 = _source333.dtor_value;
                } else if (_source333.is_LiteralBool) {
                  bool _5639___mcc_h1339 = _source333.dtor_bvalue;
                } else if (_source333.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5640___mcc_h1341 = _source333.dtor_value;
                  bool _5641___mcc_h1342 = _source333.dtor_binary;
                } else if (_source333.is_DeclareVar) {
                  RAST._IDeclareType _5642___mcc_h1345 = _source333.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5643___mcc_h1346 = _source333.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5644___mcc_h1347 = _source333.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5645___mcc_h1348 = _source333.dtor_optRhs;
                } else if (_source333.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5646___mcc_h1353 = _source333.dtor_names;
                  RAST._IExpr _5647___mcc_h1354 = _source333.dtor_rhs;
                } else if (_source333.is_IfExpr) {
                  RAST._IExpr _5648___mcc_h1357 = _source333.dtor_cond;
                  RAST._IExpr _5649___mcc_h1358 = _source333.dtor_thn;
                  RAST._IExpr _5650___mcc_h1359 = _source333.dtor_els;
                } else if (_source333.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5651___mcc_h1363 = _source333.dtor_optCond;
                  RAST._IExpr _5652___mcc_h1364 = _source333.dtor_underlying;
                } else if (_source333.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5653___mcc_h1367 = _source333.dtor_name;
                  RAST._IExpr _5654___mcc_h1368 = _source333.dtor_range;
                  RAST._IExpr _5655___mcc_h1369 = _source333.dtor_body;
                } else if (_source333.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5656___mcc_h1373 = _source333.dtor_lbl;
                  RAST._IExpr _5657___mcc_h1374 = _source333.dtor_underlying;
                } else if (_source333.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5658___mcc_h1377 = _source333.dtor_optLbl;
                } else if (_source333.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5659___mcc_h1379 = _source333.dtor_optLbl;
                } else if (_source333.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5660___mcc_h1381 = _source333.dtor_optExpr;
                } else if (_source333.is_CallType) {
                  RAST._IExpr _5661___mcc_h1383 = _source333.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5662___mcc_h1384 = _source333.dtor_typeParameters;
                } else if (_source333.is_Call) {
                  RAST._IExpr _5663___mcc_h1387 = _source333.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5664___mcc_h1388 = _source333.dtor_arguments;
                } else if (_source333.is_Select) {
                  RAST._IExpr _5665___mcc_h1391 = _source333.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5666___mcc_h1392 = _source333.dtor_name;
                } else if (_source333.is_MemberSelect) {
                  RAST._IExpr _5667___mcc_h1395 = _source333.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5668___mcc_h1396 = _source333.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5669___mcc_h1399 = _source333.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5670___mcc_h1400 = _source333.dtor_retType;
                  RAST._IExpr _5671___mcc_h1401 = _source333.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5555_field));
              if (_5554_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1723;
              DCOMP._IOwnership _out1724;
              (this).FromOwned(r, expectedOwnership, out _out1723, out _out1724);
              r = _out1723;
              resultingOwnership = _out1724;
              readIdents = _5563_recIdents;
            }
            return ;
          }
        } else if (_source324.is_ArrayIndexToInt) {
          DAST._IExpression _5672___mcc_h79 = _source324.dtor_value;
          DAST._IType _5673_fieldType = _5052___mcc_h58;
          bool _5674_isDatatype = _5051___mcc_h57;
          bool _5675_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5676_field = _5049___mcc_h55;
          DAST._IExpression _5677_on = _5048___mcc_h54;
          {
            if (_5674_isDatatype) {
              RAST._IExpr _5678_onExpr;
              DCOMP._IOwnership _5679_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5680_recIdents;
              RAST._IExpr _out1725;
              DCOMP._IOwnership _out1726;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1727;
              (this).GenExpr(_5677_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1725, out _out1726, out _out1727);
              _5678_onExpr = _out1725;
              _5679_onOwned = _out1726;
              _5680_recIdents = _out1727;
              r = ((_5678_onExpr).Sel(DCOMP.__default.escapeName(_5676_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5681_typ;
              RAST._IType _out1728;
              _out1728 = (this).GenType(_5673_fieldType, DCOMP.GenTypeContext.@default());
              _5681_typ = _out1728;
              RAST._IExpr _out1729;
              DCOMP._IOwnership _out1730;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1729, out _out1730);
              r = _out1729;
              resultingOwnership = _out1730;
              readIdents = _5680_recIdents;
            } else {
              RAST._IExpr _5682_onExpr;
              DCOMP._IOwnership _5683_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5684_recIdents;
              RAST._IExpr _out1731;
              DCOMP._IOwnership _out1732;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1733;
              (this).GenExpr(_5677_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1731, out _out1732, out _out1733);
              _5682_onExpr = _out1731;
              _5683_onOwned = _out1732;
              _5684_recIdents = _out1733;
              r = _5682_onExpr;
              if (!object.Equals(_5682_onExpr, RAST.__default.self)) {
                RAST._IExpr _source335 = _5682_onExpr;
                if (_source335.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5685___mcc_h1405 = _source335.dtor_content;
                } else if (_source335.is_ExprFromType) {
                  RAST._IType _5686___mcc_h1407 = _source335.dtor_tpe;
                } else if (_source335.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5687___mcc_h1409 = _source335.dtor_name;
                } else if (_source335.is_Match) {
                  RAST._IExpr _5688___mcc_h1411 = _source335.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5689___mcc_h1412 = _source335.dtor_cases;
                } else if (_source335.is_StmtExpr) {
                  RAST._IExpr _5690___mcc_h1415 = _source335.dtor_stmt;
                  RAST._IExpr _5691___mcc_h1416 = _source335.dtor_rhs;
                } else if (_source335.is_Block) {
                  RAST._IExpr _5692___mcc_h1419 = _source335.dtor_underlying;
                } else if (_source335.is_StructBuild) {
                  RAST._IExpr _5693___mcc_h1421 = _source335.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5694___mcc_h1422 = _source335.dtor_assignments;
                } else if (_source335.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5695___mcc_h1425 = _source335.dtor_arguments;
                } else if (_source335.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5696___mcc_h1427 = _source335.dtor_op1;
                  RAST._IExpr _5697___mcc_h1428 = _source335.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5698___mcc_h1429 = _source335.dtor_format;
                  if (object.Equals(_5696___mcc_h1427, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source336 = _5697___mcc_h1428;
                    if (_source336.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5699___mcc_h1433 = _source336.dtor_content;
                    } else if (_source336.is_ExprFromType) {
                      RAST._IType _5700___mcc_h1435 = _source336.dtor_tpe;
                    } else if (_source336.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5701___mcc_h1437 = _source336.dtor_name;
                      if (object.Equals(_5701___mcc_h1437, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source336.is_Match) {
                      RAST._IExpr _5702___mcc_h1439 = _source336.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5703___mcc_h1440 = _source336.dtor_cases;
                    } else if (_source336.is_StmtExpr) {
                      RAST._IExpr _5704___mcc_h1443 = _source336.dtor_stmt;
                      RAST._IExpr _5705___mcc_h1444 = _source336.dtor_rhs;
                    } else if (_source336.is_Block) {
                      RAST._IExpr _5706___mcc_h1447 = _source336.dtor_underlying;
                    } else if (_source336.is_StructBuild) {
                      RAST._IExpr _5707___mcc_h1449 = _source336.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5708___mcc_h1450 = _source336.dtor_assignments;
                    } else if (_source336.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5709___mcc_h1453 = _source336.dtor_arguments;
                    } else if (_source336.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5710___mcc_h1455 = _source336.dtor_op1;
                      RAST._IExpr _5711___mcc_h1456 = _source336.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5712___mcc_h1457 = _source336.dtor_format;
                    } else if (_source336.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5713___mcc_h1461 = _source336.dtor_op2;
                      RAST._IExpr _5714___mcc_h1462 = _source336.dtor_left;
                      RAST._IExpr _5715___mcc_h1463 = _source336.dtor_right;
                      DAST.Format._IBinaryOpFormat _5716___mcc_h1464 = _source336.dtor_format2;
                    } else if (_source336.is_TypeAscription) {
                      RAST._IExpr _5717___mcc_h1469 = _source336.dtor_left;
                      RAST._IType _5718___mcc_h1470 = _source336.dtor_tpe;
                    } else if (_source336.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5719___mcc_h1473 = _source336.dtor_value;
                    } else if (_source336.is_LiteralBool) {
                      bool _5720___mcc_h1475 = _source336.dtor_bvalue;
                    } else if (_source336.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5721___mcc_h1477 = _source336.dtor_value;
                      bool _5722___mcc_h1478 = _source336.dtor_binary;
                    } else if (_source336.is_DeclareVar) {
                      RAST._IDeclareType _5723___mcc_h1481 = _source336.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5724___mcc_h1482 = _source336.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5725___mcc_h1483 = _source336.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5726___mcc_h1484 = _source336.dtor_optRhs;
                    } else if (_source336.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5727___mcc_h1489 = _source336.dtor_names;
                      RAST._IExpr _5728___mcc_h1490 = _source336.dtor_rhs;
                    } else if (_source336.is_IfExpr) {
                      RAST._IExpr _5729___mcc_h1493 = _source336.dtor_cond;
                      RAST._IExpr _5730___mcc_h1494 = _source336.dtor_thn;
                      RAST._IExpr _5731___mcc_h1495 = _source336.dtor_els;
                    } else if (_source336.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5732___mcc_h1499 = _source336.dtor_optCond;
                      RAST._IExpr _5733___mcc_h1500 = _source336.dtor_underlying;
                    } else if (_source336.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5734___mcc_h1503 = _source336.dtor_name;
                      RAST._IExpr _5735___mcc_h1504 = _source336.dtor_range;
                      RAST._IExpr _5736___mcc_h1505 = _source336.dtor_body;
                    } else if (_source336.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5737___mcc_h1509 = _source336.dtor_lbl;
                      RAST._IExpr _5738___mcc_h1510 = _source336.dtor_underlying;
                    } else if (_source336.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5739___mcc_h1513 = _source336.dtor_optLbl;
                    } else if (_source336.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5740___mcc_h1515 = _source336.dtor_optLbl;
                    } else if (_source336.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5741___mcc_h1517 = _source336.dtor_optExpr;
                    } else if (_source336.is_CallType) {
                      RAST._IExpr _5742___mcc_h1519 = _source336.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5743___mcc_h1520 = _source336.dtor_typeParameters;
                    } else if (_source336.is_Call) {
                      RAST._IExpr _5744___mcc_h1523 = _source336.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5745___mcc_h1524 = _source336.dtor_arguments;
                    } else if (_source336.is_Select) {
                      RAST._IExpr _5746___mcc_h1527 = _source336.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5747___mcc_h1528 = _source336.dtor_name;
                    } else if (_source336.is_MemberSelect) {
                      RAST._IExpr _5748___mcc_h1531 = _source336.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5749___mcc_h1532 = _source336.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5750___mcc_h1535 = _source336.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5751___mcc_h1536 = _source336.dtor_retType;
                      RAST._IExpr _5752___mcc_h1537 = _source336.dtor_body;
                    }
                  } else {
                  }
                } else if (_source335.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5753___mcc_h1541 = _source335.dtor_op2;
                  RAST._IExpr _5754___mcc_h1542 = _source335.dtor_left;
                  RAST._IExpr _5755___mcc_h1543 = _source335.dtor_right;
                  DAST.Format._IBinaryOpFormat _5756___mcc_h1544 = _source335.dtor_format2;
                } else if (_source335.is_TypeAscription) {
                  RAST._IExpr _5757___mcc_h1549 = _source335.dtor_left;
                  RAST._IType _5758___mcc_h1550 = _source335.dtor_tpe;
                } else if (_source335.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5759___mcc_h1553 = _source335.dtor_value;
                } else if (_source335.is_LiteralBool) {
                  bool _5760___mcc_h1555 = _source335.dtor_bvalue;
                } else if (_source335.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5761___mcc_h1557 = _source335.dtor_value;
                  bool _5762___mcc_h1558 = _source335.dtor_binary;
                } else if (_source335.is_DeclareVar) {
                  RAST._IDeclareType _5763___mcc_h1561 = _source335.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5764___mcc_h1562 = _source335.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5765___mcc_h1563 = _source335.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5766___mcc_h1564 = _source335.dtor_optRhs;
                } else if (_source335.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5767___mcc_h1569 = _source335.dtor_names;
                  RAST._IExpr _5768___mcc_h1570 = _source335.dtor_rhs;
                } else if (_source335.is_IfExpr) {
                  RAST._IExpr _5769___mcc_h1573 = _source335.dtor_cond;
                  RAST._IExpr _5770___mcc_h1574 = _source335.dtor_thn;
                  RAST._IExpr _5771___mcc_h1575 = _source335.dtor_els;
                } else if (_source335.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5772___mcc_h1579 = _source335.dtor_optCond;
                  RAST._IExpr _5773___mcc_h1580 = _source335.dtor_underlying;
                } else if (_source335.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5774___mcc_h1583 = _source335.dtor_name;
                  RAST._IExpr _5775___mcc_h1584 = _source335.dtor_range;
                  RAST._IExpr _5776___mcc_h1585 = _source335.dtor_body;
                } else if (_source335.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5777___mcc_h1589 = _source335.dtor_lbl;
                  RAST._IExpr _5778___mcc_h1590 = _source335.dtor_underlying;
                } else if (_source335.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5779___mcc_h1593 = _source335.dtor_optLbl;
                } else if (_source335.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5780___mcc_h1595 = _source335.dtor_optLbl;
                } else if (_source335.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5781___mcc_h1597 = _source335.dtor_optExpr;
                } else if (_source335.is_CallType) {
                  RAST._IExpr _5782___mcc_h1599 = _source335.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5783___mcc_h1600 = _source335.dtor_typeParameters;
                } else if (_source335.is_Call) {
                  RAST._IExpr _5784___mcc_h1603 = _source335.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5785___mcc_h1604 = _source335.dtor_arguments;
                } else if (_source335.is_Select) {
                  RAST._IExpr _5786___mcc_h1607 = _source335.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5787___mcc_h1608 = _source335.dtor_name;
                } else if (_source335.is_MemberSelect) {
                  RAST._IExpr _5788___mcc_h1611 = _source335.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5789___mcc_h1612 = _source335.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5790___mcc_h1615 = _source335.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5791___mcc_h1616 = _source335.dtor_retType;
                  RAST._IExpr _5792___mcc_h1617 = _source335.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5676_field));
              if (_5675_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1734;
              DCOMP._IOwnership _out1735;
              (this).FromOwned(r, expectedOwnership, out _out1734, out _out1735);
              r = _out1734;
              resultingOwnership = _out1735;
              readIdents = _5684_recIdents;
            }
            return ;
          }
        } else if (_source324.is_FinalizeNewArray) {
          DAST._IExpression _5793___mcc_h81 = _source324.dtor_value;
          DAST._IType _5794___mcc_h82 = _source324.dtor_typ;
          DAST._IType _5795_fieldType = _5052___mcc_h58;
          bool _5796_isDatatype = _5051___mcc_h57;
          bool _5797_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5798_field = _5049___mcc_h55;
          DAST._IExpression _5799_on = _5048___mcc_h54;
          {
            if (_5796_isDatatype) {
              RAST._IExpr _5800_onExpr;
              DCOMP._IOwnership _5801_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5802_recIdents;
              RAST._IExpr _out1736;
              DCOMP._IOwnership _out1737;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1738;
              (this).GenExpr(_5799_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1736, out _out1737, out _out1738);
              _5800_onExpr = _out1736;
              _5801_onOwned = _out1737;
              _5802_recIdents = _out1738;
              r = ((_5800_onExpr).Sel(DCOMP.__default.escapeName(_5798_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5803_typ;
              RAST._IType _out1739;
              _out1739 = (this).GenType(_5795_fieldType, DCOMP.GenTypeContext.@default());
              _5803_typ = _out1739;
              RAST._IExpr _out1740;
              DCOMP._IOwnership _out1741;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1740, out _out1741);
              r = _out1740;
              resultingOwnership = _out1741;
              readIdents = _5802_recIdents;
            } else {
              RAST._IExpr _5804_onExpr;
              DCOMP._IOwnership _5805_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5806_recIdents;
              RAST._IExpr _out1742;
              DCOMP._IOwnership _out1743;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1744;
              (this).GenExpr(_5799_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1742, out _out1743, out _out1744);
              _5804_onExpr = _out1742;
              _5805_onOwned = _out1743;
              _5806_recIdents = _out1744;
              r = _5804_onExpr;
              if (!object.Equals(_5804_onExpr, RAST.__default.self)) {
                RAST._IExpr _source337 = _5804_onExpr;
                if (_source337.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5807___mcc_h1621 = _source337.dtor_content;
                } else if (_source337.is_ExprFromType) {
                  RAST._IType _5808___mcc_h1623 = _source337.dtor_tpe;
                } else if (_source337.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5809___mcc_h1625 = _source337.dtor_name;
                } else if (_source337.is_Match) {
                  RAST._IExpr _5810___mcc_h1627 = _source337.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5811___mcc_h1628 = _source337.dtor_cases;
                } else if (_source337.is_StmtExpr) {
                  RAST._IExpr _5812___mcc_h1631 = _source337.dtor_stmt;
                  RAST._IExpr _5813___mcc_h1632 = _source337.dtor_rhs;
                } else if (_source337.is_Block) {
                  RAST._IExpr _5814___mcc_h1635 = _source337.dtor_underlying;
                } else if (_source337.is_StructBuild) {
                  RAST._IExpr _5815___mcc_h1637 = _source337.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5816___mcc_h1638 = _source337.dtor_assignments;
                } else if (_source337.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5817___mcc_h1641 = _source337.dtor_arguments;
                } else if (_source337.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5818___mcc_h1643 = _source337.dtor_op1;
                  RAST._IExpr _5819___mcc_h1644 = _source337.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5820___mcc_h1645 = _source337.dtor_format;
                  if (object.Equals(_5818___mcc_h1643, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source338 = _5819___mcc_h1644;
                    if (_source338.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5821___mcc_h1649 = _source338.dtor_content;
                    } else if (_source338.is_ExprFromType) {
                      RAST._IType _5822___mcc_h1651 = _source338.dtor_tpe;
                    } else if (_source338.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5823___mcc_h1653 = _source338.dtor_name;
                      if (object.Equals(_5823___mcc_h1653, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source338.is_Match) {
                      RAST._IExpr _5824___mcc_h1655 = _source338.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5825___mcc_h1656 = _source338.dtor_cases;
                    } else if (_source338.is_StmtExpr) {
                      RAST._IExpr _5826___mcc_h1659 = _source338.dtor_stmt;
                      RAST._IExpr _5827___mcc_h1660 = _source338.dtor_rhs;
                    } else if (_source338.is_Block) {
                      RAST._IExpr _5828___mcc_h1663 = _source338.dtor_underlying;
                    } else if (_source338.is_StructBuild) {
                      RAST._IExpr _5829___mcc_h1665 = _source338.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5830___mcc_h1666 = _source338.dtor_assignments;
                    } else if (_source338.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5831___mcc_h1669 = _source338.dtor_arguments;
                    } else if (_source338.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5832___mcc_h1671 = _source338.dtor_op1;
                      RAST._IExpr _5833___mcc_h1672 = _source338.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5834___mcc_h1673 = _source338.dtor_format;
                    } else if (_source338.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5835___mcc_h1677 = _source338.dtor_op2;
                      RAST._IExpr _5836___mcc_h1678 = _source338.dtor_left;
                      RAST._IExpr _5837___mcc_h1679 = _source338.dtor_right;
                      DAST.Format._IBinaryOpFormat _5838___mcc_h1680 = _source338.dtor_format2;
                    } else if (_source338.is_TypeAscription) {
                      RAST._IExpr _5839___mcc_h1685 = _source338.dtor_left;
                      RAST._IType _5840___mcc_h1686 = _source338.dtor_tpe;
                    } else if (_source338.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5841___mcc_h1689 = _source338.dtor_value;
                    } else if (_source338.is_LiteralBool) {
                      bool _5842___mcc_h1691 = _source338.dtor_bvalue;
                    } else if (_source338.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5843___mcc_h1693 = _source338.dtor_value;
                      bool _5844___mcc_h1694 = _source338.dtor_binary;
                    } else if (_source338.is_DeclareVar) {
                      RAST._IDeclareType _5845___mcc_h1697 = _source338.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5846___mcc_h1698 = _source338.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5847___mcc_h1699 = _source338.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5848___mcc_h1700 = _source338.dtor_optRhs;
                    } else if (_source338.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5849___mcc_h1705 = _source338.dtor_names;
                      RAST._IExpr _5850___mcc_h1706 = _source338.dtor_rhs;
                    } else if (_source338.is_IfExpr) {
                      RAST._IExpr _5851___mcc_h1709 = _source338.dtor_cond;
                      RAST._IExpr _5852___mcc_h1710 = _source338.dtor_thn;
                      RAST._IExpr _5853___mcc_h1711 = _source338.dtor_els;
                    } else if (_source338.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5854___mcc_h1715 = _source338.dtor_optCond;
                      RAST._IExpr _5855___mcc_h1716 = _source338.dtor_underlying;
                    } else if (_source338.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5856___mcc_h1719 = _source338.dtor_name;
                      RAST._IExpr _5857___mcc_h1720 = _source338.dtor_range;
                      RAST._IExpr _5858___mcc_h1721 = _source338.dtor_body;
                    } else if (_source338.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5859___mcc_h1725 = _source338.dtor_lbl;
                      RAST._IExpr _5860___mcc_h1726 = _source338.dtor_underlying;
                    } else if (_source338.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5861___mcc_h1729 = _source338.dtor_optLbl;
                    } else if (_source338.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5862___mcc_h1731 = _source338.dtor_optLbl;
                    } else if (_source338.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5863___mcc_h1733 = _source338.dtor_optExpr;
                    } else if (_source338.is_CallType) {
                      RAST._IExpr _5864___mcc_h1735 = _source338.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5865___mcc_h1736 = _source338.dtor_typeParameters;
                    } else if (_source338.is_Call) {
                      RAST._IExpr _5866___mcc_h1739 = _source338.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5867___mcc_h1740 = _source338.dtor_arguments;
                    } else if (_source338.is_Select) {
                      RAST._IExpr _5868___mcc_h1743 = _source338.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5869___mcc_h1744 = _source338.dtor_name;
                    } else if (_source338.is_MemberSelect) {
                      RAST._IExpr _5870___mcc_h1747 = _source338.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5871___mcc_h1748 = _source338.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5872___mcc_h1751 = _source338.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5873___mcc_h1752 = _source338.dtor_retType;
                      RAST._IExpr _5874___mcc_h1753 = _source338.dtor_body;
                    }
                  } else {
                  }
                } else if (_source337.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5875___mcc_h1757 = _source337.dtor_op2;
                  RAST._IExpr _5876___mcc_h1758 = _source337.dtor_left;
                  RAST._IExpr _5877___mcc_h1759 = _source337.dtor_right;
                  DAST.Format._IBinaryOpFormat _5878___mcc_h1760 = _source337.dtor_format2;
                } else if (_source337.is_TypeAscription) {
                  RAST._IExpr _5879___mcc_h1765 = _source337.dtor_left;
                  RAST._IType _5880___mcc_h1766 = _source337.dtor_tpe;
                } else if (_source337.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _5881___mcc_h1769 = _source337.dtor_value;
                } else if (_source337.is_LiteralBool) {
                  bool _5882___mcc_h1771 = _source337.dtor_bvalue;
                } else if (_source337.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _5883___mcc_h1773 = _source337.dtor_value;
                  bool _5884___mcc_h1774 = _source337.dtor_binary;
                } else if (_source337.is_DeclareVar) {
                  RAST._IDeclareType _5885___mcc_h1777 = _source337.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _5886___mcc_h1778 = _source337.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _5887___mcc_h1779 = _source337.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _5888___mcc_h1780 = _source337.dtor_optRhs;
                } else if (_source337.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _5889___mcc_h1785 = _source337.dtor_names;
                  RAST._IExpr _5890___mcc_h1786 = _source337.dtor_rhs;
                } else if (_source337.is_IfExpr) {
                  RAST._IExpr _5891___mcc_h1789 = _source337.dtor_cond;
                  RAST._IExpr _5892___mcc_h1790 = _source337.dtor_thn;
                  RAST._IExpr _5893___mcc_h1791 = _source337.dtor_els;
                } else if (_source337.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _5894___mcc_h1795 = _source337.dtor_optCond;
                  RAST._IExpr _5895___mcc_h1796 = _source337.dtor_underlying;
                } else if (_source337.is_For) {
                  Dafny.ISequence<Dafny.Rune> _5896___mcc_h1799 = _source337.dtor_name;
                  RAST._IExpr _5897___mcc_h1800 = _source337.dtor_range;
                  RAST._IExpr _5898___mcc_h1801 = _source337.dtor_body;
                } else if (_source337.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _5899___mcc_h1805 = _source337.dtor_lbl;
                  RAST._IExpr _5900___mcc_h1806 = _source337.dtor_underlying;
                } else if (_source337.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5901___mcc_h1809 = _source337.dtor_optLbl;
                } else if (_source337.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5902___mcc_h1811 = _source337.dtor_optLbl;
                } else if (_source337.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _5903___mcc_h1813 = _source337.dtor_optExpr;
                } else if (_source337.is_CallType) {
                  RAST._IExpr _5904___mcc_h1815 = _source337.dtor_obj;
                  Dafny.ISequence<RAST._IType> _5905___mcc_h1816 = _source337.dtor_typeParameters;
                } else if (_source337.is_Call) {
                  RAST._IExpr _5906___mcc_h1819 = _source337.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _5907___mcc_h1820 = _source337.dtor_arguments;
                } else if (_source337.is_Select) {
                  RAST._IExpr _5908___mcc_h1823 = _source337.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5909___mcc_h1824 = _source337.dtor_name;
                } else if (_source337.is_MemberSelect) {
                  RAST._IExpr _5910___mcc_h1827 = _source337.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _5911___mcc_h1828 = _source337.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _5912___mcc_h1831 = _source337.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _5913___mcc_h1832 = _source337.dtor_retType;
                  RAST._IExpr _5914___mcc_h1833 = _source337.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5798_field));
              if (_5797_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1745;
              DCOMP._IOwnership _out1746;
              (this).FromOwned(r, expectedOwnership, out _out1745, out _out1746);
              r = _out1745;
              resultingOwnership = _out1746;
              readIdents = _5806_recIdents;
            }
            return ;
          }
        } else if (_source324.is_DatatypeValue) {
          DAST._IResolvedType _5915___mcc_h85 = _source324.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _5916___mcc_h86 = _source324.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _5917___mcc_h87 = _source324.dtor_variant;
          bool _5918___mcc_h88 = _source324.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5919___mcc_h89 = _source324.dtor_contents;
          DAST._IType _5920_fieldType = _5052___mcc_h58;
          bool _5921_isDatatype = _5051___mcc_h57;
          bool _5922_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _5923_field = _5049___mcc_h55;
          DAST._IExpression _5924_on = _5048___mcc_h54;
          {
            if (_5921_isDatatype) {
              RAST._IExpr _5925_onExpr;
              DCOMP._IOwnership _5926_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5927_recIdents;
              RAST._IExpr _out1747;
              DCOMP._IOwnership _out1748;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
              (this).GenExpr(_5924_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1747, out _out1748, out _out1749);
              _5925_onExpr = _out1747;
              _5926_onOwned = _out1748;
              _5927_recIdents = _out1749;
              r = ((_5925_onExpr).Sel(DCOMP.__default.escapeName(_5923_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _5928_typ;
              RAST._IType _out1750;
              _out1750 = (this).GenType(_5920_fieldType, DCOMP.GenTypeContext.@default());
              _5928_typ = _out1750;
              RAST._IExpr _out1751;
              DCOMP._IOwnership _out1752;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1751, out _out1752);
              r = _out1751;
              resultingOwnership = _out1752;
              readIdents = _5927_recIdents;
            } else {
              RAST._IExpr _5929_onExpr;
              DCOMP._IOwnership _5930_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5931_recIdents;
              RAST._IExpr _out1753;
              DCOMP._IOwnership _out1754;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1755;
              (this).GenExpr(_5924_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1753, out _out1754, out _out1755);
              _5929_onExpr = _out1753;
              _5930_onOwned = _out1754;
              _5931_recIdents = _out1755;
              r = _5929_onExpr;
              if (!object.Equals(_5929_onExpr, RAST.__default.self)) {
                RAST._IExpr _source339 = _5929_onExpr;
                if (_source339.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _5932___mcc_h1837 = _source339.dtor_content;
                } else if (_source339.is_ExprFromType) {
                  RAST._IType _5933___mcc_h1839 = _source339.dtor_tpe;
                } else if (_source339.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _5934___mcc_h1841 = _source339.dtor_name;
                } else if (_source339.is_Match) {
                  RAST._IExpr _5935___mcc_h1843 = _source339.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _5936___mcc_h1844 = _source339.dtor_cases;
                } else if (_source339.is_StmtExpr) {
                  RAST._IExpr _5937___mcc_h1847 = _source339.dtor_stmt;
                  RAST._IExpr _5938___mcc_h1848 = _source339.dtor_rhs;
                } else if (_source339.is_Block) {
                  RAST._IExpr _5939___mcc_h1851 = _source339.dtor_underlying;
                } else if (_source339.is_StructBuild) {
                  RAST._IExpr _5940___mcc_h1853 = _source339.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _5941___mcc_h1854 = _source339.dtor_assignments;
                } else if (_source339.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _5942___mcc_h1857 = _source339.dtor_arguments;
                } else if (_source339.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _5943___mcc_h1859 = _source339.dtor_op1;
                  RAST._IExpr _5944___mcc_h1860 = _source339.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _5945___mcc_h1861 = _source339.dtor_format;
                  if (object.Equals(_5943___mcc_h1859, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source340 = _5944___mcc_h1860;
                    if (_source340.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _5946___mcc_h1865 = _source340.dtor_content;
                    } else if (_source340.is_ExprFromType) {
                      RAST._IType _5947___mcc_h1867 = _source340.dtor_tpe;
                    } else if (_source340.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _5948___mcc_h1869 = _source340.dtor_name;
                      if (object.Equals(_5948___mcc_h1869, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source340.is_Match) {
                      RAST._IExpr _5949___mcc_h1871 = _source340.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _5950___mcc_h1872 = _source340.dtor_cases;
                    } else if (_source340.is_StmtExpr) {
                      RAST._IExpr _5951___mcc_h1875 = _source340.dtor_stmt;
                      RAST._IExpr _5952___mcc_h1876 = _source340.dtor_rhs;
                    } else if (_source340.is_Block) {
                      RAST._IExpr _5953___mcc_h1879 = _source340.dtor_underlying;
                    } else if (_source340.is_StructBuild) {
                      RAST._IExpr _5954___mcc_h1881 = _source340.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _5955___mcc_h1882 = _source340.dtor_assignments;
                    } else if (_source340.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _5956___mcc_h1885 = _source340.dtor_arguments;
                    } else if (_source340.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5957___mcc_h1887 = _source340.dtor_op1;
                      RAST._IExpr _5958___mcc_h1888 = _source340.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _5959___mcc_h1889 = _source340.dtor_format;
                    } else if (_source340.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _5960___mcc_h1893 = _source340.dtor_op2;
                      RAST._IExpr _5961___mcc_h1894 = _source340.dtor_left;
                      RAST._IExpr _5962___mcc_h1895 = _source340.dtor_right;
                      DAST.Format._IBinaryOpFormat _5963___mcc_h1896 = _source340.dtor_format2;
                    } else if (_source340.is_TypeAscription) {
                      RAST._IExpr _5964___mcc_h1901 = _source340.dtor_left;
                      RAST._IType _5965___mcc_h1902 = _source340.dtor_tpe;
                    } else if (_source340.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _5966___mcc_h1905 = _source340.dtor_value;
                    } else if (_source340.is_LiteralBool) {
                      bool _5967___mcc_h1907 = _source340.dtor_bvalue;
                    } else if (_source340.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _5968___mcc_h1909 = _source340.dtor_value;
                      bool _5969___mcc_h1910 = _source340.dtor_binary;
                    } else if (_source340.is_DeclareVar) {
                      RAST._IDeclareType _5970___mcc_h1913 = _source340.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _5971___mcc_h1914 = _source340.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _5972___mcc_h1915 = _source340.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _5973___mcc_h1916 = _source340.dtor_optRhs;
                    } else if (_source340.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _5974___mcc_h1921 = _source340.dtor_names;
                      RAST._IExpr _5975___mcc_h1922 = _source340.dtor_rhs;
                    } else if (_source340.is_IfExpr) {
                      RAST._IExpr _5976___mcc_h1925 = _source340.dtor_cond;
                      RAST._IExpr _5977___mcc_h1926 = _source340.dtor_thn;
                      RAST._IExpr _5978___mcc_h1927 = _source340.dtor_els;
                    } else if (_source340.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _5979___mcc_h1931 = _source340.dtor_optCond;
                      RAST._IExpr _5980___mcc_h1932 = _source340.dtor_underlying;
                    } else if (_source340.is_For) {
                      Dafny.ISequence<Dafny.Rune> _5981___mcc_h1935 = _source340.dtor_name;
                      RAST._IExpr _5982___mcc_h1936 = _source340.dtor_range;
                      RAST._IExpr _5983___mcc_h1937 = _source340.dtor_body;
                    } else if (_source340.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _5984___mcc_h1941 = _source340.dtor_lbl;
                      RAST._IExpr _5985___mcc_h1942 = _source340.dtor_underlying;
                    } else if (_source340.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5986___mcc_h1945 = _source340.dtor_optLbl;
                    } else if (_source340.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _5987___mcc_h1947 = _source340.dtor_optLbl;
                    } else if (_source340.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _5988___mcc_h1949 = _source340.dtor_optExpr;
                    } else if (_source340.is_CallType) {
                      RAST._IExpr _5989___mcc_h1951 = _source340.dtor_obj;
                      Dafny.ISequence<RAST._IType> _5990___mcc_h1952 = _source340.dtor_typeParameters;
                    } else if (_source340.is_Call) {
                      RAST._IExpr _5991___mcc_h1955 = _source340.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _5992___mcc_h1956 = _source340.dtor_arguments;
                    } else if (_source340.is_Select) {
                      RAST._IExpr _5993___mcc_h1959 = _source340.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5994___mcc_h1960 = _source340.dtor_name;
                    } else if (_source340.is_MemberSelect) {
                      RAST._IExpr _5995___mcc_h1963 = _source340.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _5996___mcc_h1964 = _source340.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _5997___mcc_h1967 = _source340.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _5998___mcc_h1968 = _source340.dtor_retType;
                      RAST._IExpr _5999___mcc_h1969 = _source340.dtor_body;
                    }
                  } else {
                  }
                } else if (_source339.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6000___mcc_h1973 = _source339.dtor_op2;
                  RAST._IExpr _6001___mcc_h1974 = _source339.dtor_left;
                  RAST._IExpr _6002___mcc_h1975 = _source339.dtor_right;
                  DAST.Format._IBinaryOpFormat _6003___mcc_h1976 = _source339.dtor_format2;
                } else if (_source339.is_TypeAscription) {
                  RAST._IExpr _6004___mcc_h1981 = _source339.dtor_left;
                  RAST._IType _6005___mcc_h1982 = _source339.dtor_tpe;
                } else if (_source339.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6006___mcc_h1985 = _source339.dtor_value;
                } else if (_source339.is_LiteralBool) {
                  bool _6007___mcc_h1987 = _source339.dtor_bvalue;
                } else if (_source339.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6008___mcc_h1989 = _source339.dtor_value;
                  bool _6009___mcc_h1990 = _source339.dtor_binary;
                } else if (_source339.is_DeclareVar) {
                  RAST._IDeclareType _6010___mcc_h1993 = _source339.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6011___mcc_h1994 = _source339.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6012___mcc_h1995 = _source339.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6013___mcc_h1996 = _source339.dtor_optRhs;
                } else if (_source339.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6014___mcc_h2001 = _source339.dtor_names;
                  RAST._IExpr _6015___mcc_h2002 = _source339.dtor_rhs;
                } else if (_source339.is_IfExpr) {
                  RAST._IExpr _6016___mcc_h2005 = _source339.dtor_cond;
                  RAST._IExpr _6017___mcc_h2006 = _source339.dtor_thn;
                  RAST._IExpr _6018___mcc_h2007 = _source339.dtor_els;
                } else if (_source339.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6019___mcc_h2011 = _source339.dtor_optCond;
                  RAST._IExpr _6020___mcc_h2012 = _source339.dtor_underlying;
                } else if (_source339.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6021___mcc_h2015 = _source339.dtor_name;
                  RAST._IExpr _6022___mcc_h2016 = _source339.dtor_range;
                  RAST._IExpr _6023___mcc_h2017 = _source339.dtor_body;
                } else if (_source339.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6024___mcc_h2021 = _source339.dtor_lbl;
                  RAST._IExpr _6025___mcc_h2022 = _source339.dtor_underlying;
                } else if (_source339.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6026___mcc_h2025 = _source339.dtor_optLbl;
                } else if (_source339.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6027___mcc_h2027 = _source339.dtor_optLbl;
                } else if (_source339.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6028___mcc_h2029 = _source339.dtor_optExpr;
                } else if (_source339.is_CallType) {
                  RAST._IExpr _6029___mcc_h2031 = _source339.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6030___mcc_h2032 = _source339.dtor_typeParameters;
                } else if (_source339.is_Call) {
                  RAST._IExpr _6031___mcc_h2035 = _source339.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6032___mcc_h2036 = _source339.dtor_arguments;
                } else if (_source339.is_Select) {
                  RAST._IExpr _6033___mcc_h2039 = _source339.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6034___mcc_h2040 = _source339.dtor_name;
                } else if (_source339.is_MemberSelect) {
                  RAST._IExpr _6035___mcc_h2043 = _source339.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6036___mcc_h2044 = _source339.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6037___mcc_h2047 = _source339.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6038___mcc_h2048 = _source339.dtor_retType;
                  RAST._IExpr _6039___mcc_h2049 = _source339.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_5923_field));
              if (_5922_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1756;
              DCOMP._IOwnership _out1757;
              (this).FromOwned(r, expectedOwnership, out _out1756, out _out1757);
              r = _out1756;
              resultingOwnership = _out1757;
              readIdents = _5931_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Convert) {
          DAST._IExpression _6040___mcc_h95 = _source324.dtor_value;
          DAST._IType _6041___mcc_h96 = _source324.dtor_from;
          DAST._IType _6042___mcc_h97 = _source324.dtor_typ;
          DAST._IType _6043_fieldType = _5052___mcc_h58;
          bool _6044_isDatatype = _5051___mcc_h57;
          bool _6045_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _6046_field = _5049___mcc_h55;
          DAST._IExpression _6047_on = _5048___mcc_h54;
          {
            if (_6044_isDatatype) {
              RAST._IExpr _6048_onExpr;
              DCOMP._IOwnership _6049_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6050_recIdents;
              RAST._IExpr _out1758;
              DCOMP._IOwnership _out1759;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1760;
              (this).GenExpr(_6047_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1758, out _out1759, out _out1760);
              _6048_onExpr = _out1758;
              _6049_onOwned = _out1759;
              _6050_recIdents = _out1760;
              r = ((_6048_onExpr).Sel(DCOMP.__default.escapeName(_6046_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6051_typ;
              RAST._IType _out1761;
              _out1761 = (this).GenType(_6043_fieldType, DCOMP.GenTypeContext.@default());
              _6051_typ = _out1761;
              RAST._IExpr _out1762;
              DCOMP._IOwnership _out1763;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1762, out _out1763);
              r = _out1762;
              resultingOwnership = _out1763;
              readIdents = _6050_recIdents;
            } else {
              RAST._IExpr _6052_onExpr;
              DCOMP._IOwnership _6053_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6054_recIdents;
              RAST._IExpr _out1764;
              DCOMP._IOwnership _out1765;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1766;
              (this).GenExpr(_6047_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1764, out _out1765, out _out1766);
              _6052_onExpr = _out1764;
              _6053_onOwned = _out1765;
              _6054_recIdents = _out1766;
              r = _6052_onExpr;
              if (!object.Equals(_6052_onExpr, RAST.__default.self)) {
                RAST._IExpr _source341 = _6052_onExpr;
                if (_source341.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6055___mcc_h2053 = _source341.dtor_content;
                } else if (_source341.is_ExprFromType) {
                  RAST._IType _6056___mcc_h2055 = _source341.dtor_tpe;
                } else if (_source341.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6057___mcc_h2057 = _source341.dtor_name;
                } else if (_source341.is_Match) {
                  RAST._IExpr _6058___mcc_h2059 = _source341.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6059___mcc_h2060 = _source341.dtor_cases;
                } else if (_source341.is_StmtExpr) {
                  RAST._IExpr _6060___mcc_h2063 = _source341.dtor_stmt;
                  RAST._IExpr _6061___mcc_h2064 = _source341.dtor_rhs;
                } else if (_source341.is_Block) {
                  RAST._IExpr _6062___mcc_h2067 = _source341.dtor_underlying;
                } else if (_source341.is_StructBuild) {
                  RAST._IExpr _6063___mcc_h2069 = _source341.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6064___mcc_h2070 = _source341.dtor_assignments;
                } else if (_source341.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6065___mcc_h2073 = _source341.dtor_arguments;
                } else if (_source341.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6066___mcc_h2075 = _source341.dtor_op1;
                  RAST._IExpr _6067___mcc_h2076 = _source341.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6068___mcc_h2077 = _source341.dtor_format;
                  if (object.Equals(_6066___mcc_h2075, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source342 = _6067___mcc_h2076;
                    if (_source342.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6069___mcc_h2081 = _source342.dtor_content;
                    } else if (_source342.is_ExprFromType) {
                      RAST._IType _6070___mcc_h2083 = _source342.dtor_tpe;
                    } else if (_source342.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6071___mcc_h2085 = _source342.dtor_name;
                      if (object.Equals(_6071___mcc_h2085, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source342.is_Match) {
                      RAST._IExpr _6072___mcc_h2087 = _source342.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6073___mcc_h2088 = _source342.dtor_cases;
                    } else if (_source342.is_StmtExpr) {
                      RAST._IExpr _6074___mcc_h2091 = _source342.dtor_stmt;
                      RAST._IExpr _6075___mcc_h2092 = _source342.dtor_rhs;
                    } else if (_source342.is_Block) {
                      RAST._IExpr _6076___mcc_h2095 = _source342.dtor_underlying;
                    } else if (_source342.is_StructBuild) {
                      RAST._IExpr _6077___mcc_h2097 = _source342.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6078___mcc_h2098 = _source342.dtor_assignments;
                    } else if (_source342.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6079___mcc_h2101 = _source342.dtor_arguments;
                    } else if (_source342.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6080___mcc_h2103 = _source342.dtor_op1;
                      RAST._IExpr _6081___mcc_h2104 = _source342.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6082___mcc_h2105 = _source342.dtor_format;
                    } else if (_source342.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6083___mcc_h2109 = _source342.dtor_op2;
                      RAST._IExpr _6084___mcc_h2110 = _source342.dtor_left;
                      RAST._IExpr _6085___mcc_h2111 = _source342.dtor_right;
                      DAST.Format._IBinaryOpFormat _6086___mcc_h2112 = _source342.dtor_format2;
                    } else if (_source342.is_TypeAscription) {
                      RAST._IExpr _6087___mcc_h2117 = _source342.dtor_left;
                      RAST._IType _6088___mcc_h2118 = _source342.dtor_tpe;
                    } else if (_source342.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6089___mcc_h2121 = _source342.dtor_value;
                    } else if (_source342.is_LiteralBool) {
                      bool _6090___mcc_h2123 = _source342.dtor_bvalue;
                    } else if (_source342.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6091___mcc_h2125 = _source342.dtor_value;
                      bool _6092___mcc_h2126 = _source342.dtor_binary;
                    } else if (_source342.is_DeclareVar) {
                      RAST._IDeclareType _6093___mcc_h2129 = _source342.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6094___mcc_h2130 = _source342.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6095___mcc_h2131 = _source342.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6096___mcc_h2132 = _source342.dtor_optRhs;
                    } else if (_source342.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6097___mcc_h2137 = _source342.dtor_names;
                      RAST._IExpr _6098___mcc_h2138 = _source342.dtor_rhs;
                    } else if (_source342.is_IfExpr) {
                      RAST._IExpr _6099___mcc_h2141 = _source342.dtor_cond;
                      RAST._IExpr _6100___mcc_h2142 = _source342.dtor_thn;
                      RAST._IExpr _6101___mcc_h2143 = _source342.dtor_els;
                    } else if (_source342.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6102___mcc_h2147 = _source342.dtor_optCond;
                      RAST._IExpr _6103___mcc_h2148 = _source342.dtor_underlying;
                    } else if (_source342.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6104___mcc_h2151 = _source342.dtor_name;
                      RAST._IExpr _6105___mcc_h2152 = _source342.dtor_range;
                      RAST._IExpr _6106___mcc_h2153 = _source342.dtor_body;
                    } else if (_source342.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6107___mcc_h2157 = _source342.dtor_lbl;
                      RAST._IExpr _6108___mcc_h2158 = _source342.dtor_underlying;
                    } else if (_source342.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6109___mcc_h2161 = _source342.dtor_optLbl;
                    } else if (_source342.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6110___mcc_h2163 = _source342.dtor_optLbl;
                    } else if (_source342.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6111___mcc_h2165 = _source342.dtor_optExpr;
                    } else if (_source342.is_CallType) {
                      RAST._IExpr _6112___mcc_h2167 = _source342.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6113___mcc_h2168 = _source342.dtor_typeParameters;
                    } else if (_source342.is_Call) {
                      RAST._IExpr _6114___mcc_h2171 = _source342.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6115___mcc_h2172 = _source342.dtor_arguments;
                    } else if (_source342.is_Select) {
                      RAST._IExpr _6116___mcc_h2175 = _source342.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6117___mcc_h2176 = _source342.dtor_name;
                    } else if (_source342.is_MemberSelect) {
                      RAST._IExpr _6118___mcc_h2179 = _source342.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6119___mcc_h2180 = _source342.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6120___mcc_h2183 = _source342.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6121___mcc_h2184 = _source342.dtor_retType;
                      RAST._IExpr _6122___mcc_h2185 = _source342.dtor_body;
                    }
                  } else {
                  }
                } else if (_source341.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6123___mcc_h2189 = _source341.dtor_op2;
                  RAST._IExpr _6124___mcc_h2190 = _source341.dtor_left;
                  RAST._IExpr _6125___mcc_h2191 = _source341.dtor_right;
                  DAST.Format._IBinaryOpFormat _6126___mcc_h2192 = _source341.dtor_format2;
                } else if (_source341.is_TypeAscription) {
                  RAST._IExpr _6127___mcc_h2197 = _source341.dtor_left;
                  RAST._IType _6128___mcc_h2198 = _source341.dtor_tpe;
                } else if (_source341.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6129___mcc_h2201 = _source341.dtor_value;
                } else if (_source341.is_LiteralBool) {
                  bool _6130___mcc_h2203 = _source341.dtor_bvalue;
                } else if (_source341.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6131___mcc_h2205 = _source341.dtor_value;
                  bool _6132___mcc_h2206 = _source341.dtor_binary;
                } else if (_source341.is_DeclareVar) {
                  RAST._IDeclareType _6133___mcc_h2209 = _source341.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6134___mcc_h2210 = _source341.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6135___mcc_h2211 = _source341.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6136___mcc_h2212 = _source341.dtor_optRhs;
                } else if (_source341.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6137___mcc_h2217 = _source341.dtor_names;
                  RAST._IExpr _6138___mcc_h2218 = _source341.dtor_rhs;
                } else if (_source341.is_IfExpr) {
                  RAST._IExpr _6139___mcc_h2221 = _source341.dtor_cond;
                  RAST._IExpr _6140___mcc_h2222 = _source341.dtor_thn;
                  RAST._IExpr _6141___mcc_h2223 = _source341.dtor_els;
                } else if (_source341.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6142___mcc_h2227 = _source341.dtor_optCond;
                  RAST._IExpr _6143___mcc_h2228 = _source341.dtor_underlying;
                } else if (_source341.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6144___mcc_h2231 = _source341.dtor_name;
                  RAST._IExpr _6145___mcc_h2232 = _source341.dtor_range;
                  RAST._IExpr _6146___mcc_h2233 = _source341.dtor_body;
                } else if (_source341.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6147___mcc_h2237 = _source341.dtor_lbl;
                  RAST._IExpr _6148___mcc_h2238 = _source341.dtor_underlying;
                } else if (_source341.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6149___mcc_h2241 = _source341.dtor_optLbl;
                } else if (_source341.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6150___mcc_h2243 = _source341.dtor_optLbl;
                } else if (_source341.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6151___mcc_h2245 = _source341.dtor_optExpr;
                } else if (_source341.is_CallType) {
                  RAST._IExpr _6152___mcc_h2247 = _source341.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6153___mcc_h2248 = _source341.dtor_typeParameters;
                } else if (_source341.is_Call) {
                  RAST._IExpr _6154___mcc_h2251 = _source341.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6155___mcc_h2252 = _source341.dtor_arguments;
                } else if (_source341.is_Select) {
                  RAST._IExpr _6156___mcc_h2255 = _source341.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6157___mcc_h2256 = _source341.dtor_name;
                } else if (_source341.is_MemberSelect) {
                  RAST._IExpr _6158___mcc_h2259 = _source341.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6159___mcc_h2260 = _source341.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6160___mcc_h2263 = _source341.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6161___mcc_h2264 = _source341.dtor_retType;
                  RAST._IExpr _6162___mcc_h2265 = _source341.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6046_field));
              if (_6045_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1767;
              DCOMP._IOwnership _out1768;
              (this).FromOwned(r, expectedOwnership, out _out1767, out _out1768);
              r = _out1767;
              resultingOwnership = _out1768;
              readIdents = _6054_recIdents;
            }
            return ;
          }
        } else if (_source324.is_SeqConstruct) {
          DAST._IExpression _6163___mcc_h101 = _source324.dtor_length;
          DAST._IExpression _6164___mcc_h102 = _source324.dtor_elem;
          DAST._IType _6165_fieldType = _5052___mcc_h58;
          bool _6166_isDatatype = _5051___mcc_h57;
          bool _6167_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _6168_field = _5049___mcc_h55;
          DAST._IExpression _6169_on = _5048___mcc_h54;
          {
            if (_6166_isDatatype) {
              RAST._IExpr _6170_onExpr;
              DCOMP._IOwnership _6171_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6172_recIdents;
              RAST._IExpr _out1769;
              DCOMP._IOwnership _out1770;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1771;
              (this).GenExpr(_6169_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1769, out _out1770, out _out1771);
              _6170_onExpr = _out1769;
              _6171_onOwned = _out1770;
              _6172_recIdents = _out1771;
              r = ((_6170_onExpr).Sel(DCOMP.__default.escapeName(_6168_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6173_typ;
              RAST._IType _out1772;
              _out1772 = (this).GenType(_6165_fieldType, DCOMP.GenTypeContext.@default());
              _6173_typ = _out1772;
              RAST._IExpr _out1773;
              DCOMP._IOwnership _out1774;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1773, out _out1774);
              r = _out1773;
              resultingOwnership = _out1774;
              readIdents = _6172_recIdents;
            } else {
              RAST._IExpr _6174_onExpr;
              DCOMP._IOwnership _6175_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6176_recIdents;
              RAST._IExpr _out1775;
              DCOMP._IOwnership _out1776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1777;
              (this).GenExpr(_6169_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1775, out _out1776, out _out1777);
              _6174_onExpr = _out1775;
              _6175_onOwned = _out1776;
              _6176_recIdents = _out1777;
              r = _6174_onExpr;
              if (!object.Equals(_6174_onExpr, RAST.__default.self)) {
                RAST._IExpr _source343 = _6174_onExpr;
                if (_source343.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6177___mcc_h2269 = _source343.dtor_content;
                } else if (_source343.is_ExprFromType) {
                  RAST._IType _6178___mcc_h2271 = _source343.dtor_tpe;
                } else if (_source343.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6179___mcc_h2273 = _source343.dtor_name;
                } else if (_source343.is_Match) {
                  RAST._IExpr _6180___mcc_h2275 = _source343.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6181___mcc_h2276 = _source343.dtor_cases;
                } else if (_source343.is_StmtExpr) {
                  RAST._IExpr _6182___mcc_h2279 = _source343.dtor_stmt;
                  RAST._IExpr _6183___mcc_h2280 = _source343.dtor_rhs;
                } else if (_source343.is_Block) {
                  RAST._IExpr _6184___mcc_h2283 = _source343.dtor_underlying;
                } else if (_source343.is_StructBuild) {
                  RAST._IExpr _6185___mcc_h2285 = _source343.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6186___mcc_h2286 = _source343.dtor_assignments;
                } else if (_source343.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6187___mcc_h2289 = _source343.dtor_arguments;
                } else if (_source343.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6188___mcc_h2291 = _source343.dtor_op1;
                  RAST._IExpr _6189___mcc_h2292 = _source343.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6190___mcc_h2293 = _source343.dtor_format;
                  if (object.Equals(_6188___mcc_h2291, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source344 = _6189___mcc_h2292;
                    if (_source344.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6191___mcc_h2297 = _source344.dtor_content;
                    } else if (_source344.is_ExprFromType) {
                      RAST._IType _6192___mcc_h2299 = _source344.dtor_tpe;
                    } else if (_source344.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6193___mcc_h2301 = _source344.dtor_name;
                      if (object.Equals(_6193___mcc_h2301, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source344.is_Match) {
                      RAST._IExpr _6194___mcc_h2303 = _source344.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6195___mcc_h2304 = _source344.dtor_cases;
                    } else if (_source344.is_StmtExpr) {
                      RAST._IExpr _6196___mcc_h2307 = _source344.dtor_stmt;
                      RAST._IExpr _6197___mcc_h2308 = _source344.dtor_rhs;
                    } else if (_source344.is_Block) {
                      RAST._IExpr _6198___mcc_h2311 = _source344.dtor_underlying;
                    } else if (_source344.is_StructBuild) {
                      RAST._IExpr _6199___mcc_h2313 = _source344.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6200___mcc_h2314 = _source344.dtor_assignments;
                    } else if (_source344.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6201___mcc_h2317 = _source344.dtor_arguments;
                    } else if (_source344.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6202___mcc_h2319 = _source344.dtor_op1;
                      RAST._IExpr _6203___mcc_h2320 = _source344.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6204___mcc_h2321 = _source344.dtor_format;
                    } else if (_source344.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6205___mcc_h2325 = _source344.dtor_op2;
                      RAST._IExpr _6206___mcc_h2326 = _source344.dtor_left;
                      RAST._IExpr _6207___mcc_h2327 = _source344.dtor_right;
                      DAST.Format._IBinaryOpFormat _6208___mcc_h2328 = _source344.dtor_format2;
                    } else if (_source344.is_TypeAscription) {
                      RAST._IExpr _6209___mcc_h2333 = _source344.dtor_left;
                      RAST._IType _6210___mcc_h2334 = _source344.dtor_tpe;
                    } else if (_source344.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6211___mcc_h2337 = _source344.dtor_value;
                    } else if (_source344.is_LiteralBool) {
                      bool _6212___mcc_h2339 = _source344.dtor_bvalue;
                    } else if (_source344.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6213___mcc_h2341 = _source344.dtor_value;
                      bool _6214___mcc_h2342 = _source344.dtor_binary;
                    } else if (_source344.is_DeclareVar) {
                      RAST._IDeclareType _6215___mcc_h2345 = _source344.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6216___mcc_h2346 = _source344.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6217___mcc_h2347 = _source344.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6218___mcc_h2348 = _source344.dtor_optRhs;
                    } else if (_source344.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6219___mcc_h2353 = _source344.dtor_names;
                      RAST._IExpr _6220___mcc_h2354 = _source344.dtor_rhs;
                    } else if (_source344.is_IfExpr) {
                      RAST._IExpr _6221___mcc_h2357 = _source344.dtor_cond;
                      RAST._IExpr _6222___mcc_h2358 = _source344.dtor_thn;
                      RAST._IExpr _6223___mcc_h2359 = _source344.dtor_els;
                    } else if (_source344.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6224___mcc_h2363 = _source344.dtor_optCond;
                      RAST._IExpr _6225___mcc_h2364 = _source344.dtor_underlying;
                    } else if (_source344.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6226___mcc_h2367 = _source344.dtor_name;
                      RAST._IExpr _6227___mcc_h2368 = _source344.dtor_range;
                      RAST._IExpr _6228___mcc_h2369 = _source344.dtor_body;
                    } else if (_source344.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6229___mcc_h2373 = _source344.dtor_lbl;
                      RAST._IExpr _6230___mcc_h2374 = _source344.dtor_underlying;
                    } else if (_source344.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6231___mcc_h2377 = _source344.dtor_optLbl;
                    } else if (_source344.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6232___mcc_h2379 = _source344.dtor_optLbl;
                    } else if (_source344.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6233___mcc_h2381 = _source344.dtor_optExpr;
                    } else if (_source344.is_CallType) {
                      RAST._IExpr _6234___mcc_h2383 = _source344.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6235___mcc_h2384 = _source344.dtor_typeParameters;
                    } else if (_source344.is_Call) {
                      RAST._IExpr _6236___mcc_h2387 = _source344.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6237___mcc_h2388 = _source344.dtor_arguments;
                    } else if (_source344.is_Select) {
                      RAST._IExpr _6238___mcc_h2391 = _source344.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6239___mcc_h2392 = _source344.dtor_name;
                    } else if (_source344.is_MemberSelect) {
                      RAST._IExpr _6240___mcc_h2395 = _source344.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6241___mcc_h2396 = _source344.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6242___mcc_h2399 = _source344.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6243___mcc_h2400 = _source344.dtor_retType;
                      RAST._IExpr _6244___mcc_h2401 = _source344.dtor_body;
                    }
                  } else {
                  }
                } else if (_source343.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6245___mcc_h2405 = _source343.dtor_op2;
                  RAST._IExpr _6246___mcc_h2406 = _source343.dtor_left;
                  RAST._IExpr _6247___mcc_h2407 = _source343.dtor_right;
                  DAST.Format._IBinaryOpFormat _6248___mcc_h2408 = _source343.dtor_format2;
                } else if (_source343.is_TypeAscription) {
                  RAST._IExpr _6249___mcc_h2413 = _source343.dtor_left;
                  RAST._IType _6250___mcc_h2414 = _source343.dtor_tpe;
                } else if (_source343.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6251___mcc_h2417 = _source343.dtor_value;
                } else if (_source343.is_LiteralBool) {
                  bool _6252___mcc_h2419 = _source343.dtor_bvalue;
                } else if (_source343.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6253___mcc_h2421 = _source343.dtor_value;
                  bool _6254___mcc_h2422 = _source343.dtor_binary;
                } else if (_source343.is_DeclareVar) {
                  RAST._IDeclareType _6255___mcc_h2425 = _source343.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6256___mcc_h2426 = _source343.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6257___mcc_h2427 = _source343.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6258___mcc_h2428 = _source343.dtor_optRhs;
                } else if (_source343.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6259___mcc_h2433 = _source343.dtor_names;
                  RAST._IExpr _6260___mcc_h2434 = _source343.dtor_rhs;
                } else if (_source343.is_IfExpr) {
                  RAST._IExpr _6261___mcc_h2437 = _source343.dtor_cond;
                  RAST._IExpr _6262___mcc_h2438 = _source343.dtor_thn;
                  RAST._IExpr _6263___mcc_h2439 = _source343.dtor_els;
                } else if (_source343.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6264___mcc_h2443 = _source343.dtor_optCond;
                  RAST._IExpr _6265___mcc_h2444 = _source343.dtor_underlying;
                } else if (_source343.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6266___mcc_h2447 = _source343.dtor_name;
                  RAST._IExpr _6267___mcc_h2448 = _source343.dtor_range;
                  RAST._IExpr _6268___mcc_h2449 = _source343.dtor_body;
                } else if (_source343.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6269___mcc_h2453 = _source343.dtor_lbl;
                  RAST._IExpr _6270___mcc_h2454 = _source343.dtor_underlying;
                } else if (_source343.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6271___mcc_h2457 = _source343.dtor_optLbl;
                } else if (_source343.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6272___mcc_h2459 = _source343.dtor_optLbl;
                } else if (_source343.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6273___mcc_h2461 = _source343.dtor_optExpr;
                } else if (_source343.is_CallType) {
                  RAST._IExpr _6274___mcc_h2463 = _source343.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6275___mcc_h2464 = _source343.dtor_typeParameters;
                } else if (_source343.is_Call) {
                  RAST._IExpr _6276___mcc_h2467 = _source343.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6277___mcc_h2468 = _source343.dtor_arguments;
                } else if (_source343.is_Select) {
                  RAST._IExpr _6278___mcc_h2471 = _source343.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6279___mcc_h2472 = _source343.dtor_name;
                } else if (_source343.is_MemberSelect) {
                  RAST._IExpr _6280___mcc_h2475 = _source343.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6281___mcc_h2476 = _source343.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6282___mcc_h2479 = _source343.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6283___mcc_h2480 = _source343.dtor_retType;
                  RAST._IExpr _6284___mcc_h2481 = _source343.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6168_field));
              if (_6167_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1778;
              DCOMP._IOwnership _out1779;
              (this).FromOwned(r, expectedOwnership, out _out1778, out _out1779);
              r = _out1778;
              resultingOwnership = _out1779;
              readIdents = _6176_recIdents;
            }
            return ;
          }
        } else if (_source324.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _6285___mcc_h105 = _source324.dtor_elements;
          DAST._IType _6286___mcc_h106 = _source324.dtor_typ;
          DAST._IType _6287_fieldType = _5052___mcc_h58;
          bool _6288_isDatatype = _5051___mcc_h57;
          bool _6289_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _6290_field = _5049___mcc_h55;
          DAST._IExpression _6291_on = _5048___mcc_h54;
          {
            if (_6288_isDatatype) {
              RAST._IExpr _6292_onExpr;
              DCOMP._IOwnership _6293_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6294_recIdents;
              RAST._IExpr _out1780;
              DCOMP._IOwnership _out1781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1782;
              (this).GenExpr(_6291_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1780, out _out1781, out _out1782);
              _6292_onExpr = _out1780;
              _6293_onOwned = _out1781;
              _6294_recIdents = _out1782;
              r = ((_6292_onExpr).Sel(DCOMP.__default.escapeName(_6290_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6295_typ;
              RAST._IType _out1783;
              _out1783 = (this).GenType(_6287_fieldType, DCOMP.GenTypeContext.@default());
              _6295_typ = _out1783;
              RAST._IExpr _out1784;
              DCOMP._IOwnership _out1785;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1784, out _out1785);
              r = _out1784;
              resultingOwnership = _out1785;
              readIdents = _6294_recIdents;
            } else {
              RAST._IExpr _6296_onExpr;
              DCOMP._IOwnership _6297_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6298_recIdents;
              RAST._IExpr _out1786;
              DCOMP._IOwnership _out1787;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1788;
              (this).GenExpr(_6291_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1786, out _out1787, out _out1788);
              _6296_onExpr = _out1786;
              _6297_onOwned = _out1787;
              _6298_recIdents = _out1788;
              r = _6296_onExpr;
              if (!object.Equals(_6296_onExpr, RAST.__default.self)) {
                RAST._IExpr _source345 = _6296_onExpr;
                if (_source345.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6299___mcc_h2485 = _source345.dtor_content;
                } else if (_source345.is_ExprFromType) {
                  RAST._IType _6300___mcc_h2487 = _source345.dtor_tpe;
                } else if (_source345.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6301___mcc_h2489 = _source345.dtor_name;
                } else if (_source345.is_Match) {
                  RAST._IExpr _6302___mcc_h2491 = _source345.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6303___mcc_h2492 = _source345.dtor_cases;
                } else if (_source345.is_StmtExpr) {
                  RAST._IExpr _6304___mcc_h2495 = _source345.dtor_stmt;
                  RAST._IExpr _6305___mcc_h2496 = _source345.dtor_rhs;
                } else if (_source345.is_Block) {
                  RAST._IExpr _6306___mcc_h2499 = _source345.dtor_underlying;
                } else if (_source345.is_StructBuild) {
                  RAST._IExpr _6307___mcc_h2501 = _source345.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6308___mcc_h2502 = _source345.dtor_assignments;
                } else if (_source345.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6309___mcc_h2505 = _source345.dtor_arguments;
                } else if (_source345.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6310___mcc_h2507 = _source345.dtor_op1;
                  RAST._IExpr _6311___mcc_h2508 = _source345.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6312___mcc_h2509 = _source345.dtor_format;
                  if (object.Equals(_6310___mcc_h2507, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source346 = _6311___mcc_h2508;
                    if (_source346.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6313___mcc_h2513 = _source346.dtor_content;
                    } else if (_source346.is_ExprFromType) {
                      RAST._IType _6314___mcc_h2515 = _source346.dtor_tpe;
                    } else if (_source346.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6315___mcc_h2517 = _source346.dtor_name;
                      if (object.Equals(_6315___mcc_h2517, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source346.is_Match) {
                      RAST._IExpr _6316___mcc_h2519 = _source346.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6317___mcc_h2520 = _source346.dtor_cases;
                    } else if (_source346.is_StmtExpr) {
                      RAST._IExpr _6318___mcc_h2523 = _source346.dtor_stmt;
                      RAST._IExpr _6319___mcc_h2524 = _source346.dtor_rhs;
                    } else if (_source346.is_Block) {
                      RAST._IExpr _6320___mcc_h2527 = _source346.dtor_underlying;
                    } else if (_source346.is_StructBuild) {
                      RAST._IExpr _6321___mcc_h2529 = _source346.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6322___mcc_h2530 = _source346.dtor_assignments;
                    } else if (_source346.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6323___mcc_h2533 = _source346.dtor_arguments;
                    } else if (_source346.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6324___mcc_h2535 = _source346.dtor_op1;
                      RAST._IExpr _6325___mcc_h2536 = _source346.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6326___mcc_h2537 = _source346.dtor_format;
                    } else if (_source346.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6327___mcc_h2541 = _source346.dtor_op2;
                      RAST._IExpr _6328___mcc_h2542 = _source346.dtor_left;
                      RAST._IExpr _6329___mcc_h2543 = _source346.dtor_right;
                      DAST.Format._IBinaryOpFormat _6330___mcc_h2544 = _source346.dtor_format2;
                    } else if (_source346.is_TypeAscription) {
                      RAST._IExpr _6331___mcc_h2549 = _source346.dtor_left;
                      RAST._IType _6332___mcc_h2550 = _source346.dtor_tpe;
                    } else if (_source346.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6333___mcc_h2553 = _source346.dtor_value;
                    } else if (_source346.is_LiteralBool) {
                      bool _6334___mcc_h2555 = _source346.dtor_bvalue;
                    } else if (_source346.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6335___mcc_h2557 = _source346.dtor_value;
                      bool _6336___mcc_h2558 = _source346.dtor_binary;
                    } else if (_source346.is_DeclareVar) {
                      RAST._IDeclareType _6337___mcc_h2561 = _source346.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6338___mcc_h2562 = _source346.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6339___mcc_h2563 = _source346.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6340___mcc_h2564 = _source346.dtor_optRhs;
                    } else if (_source346.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6341___mcc_h2569 = _source346.dtor_names;
                      RAST._IExpr _6342___mcc_h2570 = _source346.dtor_rhs;
                    } else if (_source346.is_IfExpr) {
                      RAST._IExpr _6343___mcc_h2573 = _source346.dtor_cond;
                      RAST._IExpr _6344___mcc_h2574 = _source346.dtor_thn;
                      RAST._IExpr _6345___mcc_h2575 = _source346.dtor_els;
                    } else if (_source346.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6346___mcc_h2579 = _source346.dtor_optCond;
                      RAST._IExpr _6347___mcc_h2580 = _source346.dtor_underlying;
                    } else if (_source346.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6348___mcc_h2583 = _source346.dtor_name;
                      RAST._IExpr _6349___mcc_h2584 = _source346.dtor_range;
                      RAST._IExpr _6350___mcc_h2585 = _source346.dtor_body;
                    } else if (_source346.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6351___mcc_h2589 = _source346.dtor_lbl;
                      RAST._IExpr _6352___mcc_h2590 = _source346.dtor_underlying;
                    } else if (_source346.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6353___mcc_h2593 = _source346.dtor_optLbl;
                    } else if (_source346.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6354___mcc_h2595 = _source346.dtor_optLbl;
                    } else if (_source346.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6355___mcc_h2597 = _source346.dtor_optExpr;
                    } else if (_source346.is_CallType) {
                      RAST._IExpr _6356___mcc_h2599 = _source346.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6357___mcc_h2600 = _source346.dtor_typeParameters;
                    } else if (_source346.is_Call) {
                      RAST._IExpr _6358___mcc_h2603 = _source346.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6359___mcc_h2604 = _source346.dtor_arguments;
                    } else if (_source346.is_Select) {
                      RAST._IExpr _6360___mcc_h2607 = _source346.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6361___mcc_h2608 = _source346.dtor_name;
                    } else if (_source346.is_MemberSelect) {
                      RAST._IExpr _6362___mcc_h2611 = _source346.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6363___mcc_h2612 = _source346.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6364___mcc_h2615 = _source346.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6365___mcc_h2616 = _source346.dtor_retType;
                      RAST._IExpr _6366___mcc_h2617 = _source346.dtor_body;
                    }
                  } else {
                  }
                } else if (_source345.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6367___mcc_h2621 = _source345.dtor_op2;
                  RAST._IExpr _6368___mcc_h2622 = _source345.dtor_left;
                  RAST._IExpr _6369___mcc_h2623 = _source345.dtor_right;
                  DAST.Format._IBinaryOpFormat _6370___mcc_h2624 = _source345.dtor_format2;
                } else if (_source345.is_TypeAscription) {
                  RAST._IExpr _6371___mcc_h2629 = _source345.dtor_left;
                  RAST._IType _6372___mcc_h2630 = _source345.dtor_tpe;
                } else if (_source345.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6373___mcc_h2633 = _source345.dtor_value;
                } else if (_source345.is_LiteralBool) {
                  bool _6374___mcc_h2635 = _source345.dtor_bvalue;
                } else if (_source345.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6375___mcc_h2637 = _source345.dtor_value;
                  bool _6376___mcc_h2638 = _source345.dtor_binary;
                } else if (_source345.is_DeclareVar) {
                  RAST._IDeclareType _6377___mcc_h2641 = _source345.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6378___mcc_h2642 = _source345.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6379___mcc_h2643 = _source345.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6380___mcc_h2644 = _source345.dtor_optRhs;
                } else if (_source345.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6381___mcc_h2649 = _source345.dtor_names;
                  RAST._IExpr _6382___mcc_h2650 = _source345.dtor_rhs;
                } else if (_source345.is_IfExpr) {
                  RAST._IExpr _6383___mcc_h2653 = _source345.dtor_cond;
                  RAST._IExpr _6384___mcc_h2654 = _source345.dtor_thn;
                  RAST._IExpr _6385___mcc_h2655 = _source345.dtor_els;
                } else if (_source345.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6386___mcc_h2659 = _source345.dtor_optCond;
                  RAST._IExpr _6387___mcc_h2660 = _source345.dtor_underlying;
                } else if (_source345.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6388___mcc_h2663 = _source345.dtor_name;
                  RAST._IExpr _6389___mcc_h2664 = _source345.dtor_range;
                  RAST._IExpr _6390___mcc_h2665 = _source345.dtor_body;
                } else if (_source345.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6391___mcc_h2669 = _source345.dtor_lbl;
                  RAST._IExpr _6392___mcc_h2670 = _source345.dtor_underlying;
                } else if (_source345.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6393___mcc_h2673 = _source345.dtor_optLbl;
                } else if (_source345.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6394___mcc_h2675 = _source345.dtor_optLbl;
                } else if (_source345.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6395___mcc_h2677 = _source345.dtor_optExpr;
                } else if (_source345.is_CallType) {
                  RAST._IExpr _6396___mcc_h2679 = _source345.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6397___mcc_h2680 = _source345.dtor_typeParameters;
                } else if (_source345.is_Call) {
                  RAST._IExpr _6398___mcc_h2683 = _source345.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6399___mcc_h2684 = _source345.dtor_arguments;
                } else if (_source345.is_Select) {
                  RAST._IExpr _6400___mcc_h2687 = _source345.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6401___mcc_h2688 = _source345.dtor_name;
                } else if (_source345.is_MemberSelect) {
                  RAST._IExpr _6402___mcc_h2691 = _source345.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6403___mcc_h2692 = _source345.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6404___mcc_h2695 = _source345.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6405___mcc_h2696 = _source345.dtor_retType;
                  RAST._IExpr _6406___mcc_h2697 = _source345.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6290_field));
              if (_6289_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1789;
              DCOMP._IOwnership _out1790;
              (this).FromOwned(r, expectedOwnership, out _out1789, out _out1790);
              r = _out1789;
              resultingOwnership = _out1790;
              readIdents = _6298_recIdents;
            }
            return ;
          }
        } else if (_source324.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _6407___mcc_h109 = _source324.dtor_elements;
          DAST._IType _6408_fieldType = _5052___mcc_h58;
          bool _6409_isDatatype = _5051___mcc_h57;
          bool _6410_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _6411_field = _5049___mcc_h55;
          DAST._IExpression _6412_on = _5048___mcc_h54;
          {
            if (_6409_isDatatype) {
              RAST._IExpr _6413_onExpr;
              DCOMP._IOwnership _6414_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6415_recIdents;
              RAST._IExpr _out1791;
              DCOMP._IOwnership _out1792;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1793;
              (this).GenExpr(_6412_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1791, out _out1792, out _out1793);
              _6413_onExpr = _out1791;
              _6414_onOwned = _out1792;
              _6415_recIdents = _out1793;
              r = ((_6413_onExpr).Sel(DCOMP.__default.escapeName(_6411_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6416_typ;
              RAST._IType _out1794;
              _out1794 = (this).GenType(_6408_fieldType, DCOMP.GenTypeContext.@default());
              _6416_typ = _out1794;
              RAST._IExpr _out1795;
              DCOMP._IOwnership _out1796;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1795, out _out1796);
              r = _out1795;
              resultingOwnership = _out1796;
              readIdents = _6415_recIdents;
            } else {
              RAST._IExpr _6417_onExpr;
              DCOMP._IOwnership _6418_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6419_recIdents;
              RAST._IExpr _out1797;
              DCOMP._IOwnership _out1798;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1799;
              (this).GenExpr(_6412_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1797, out _out1798, out _out1799);
              _6417_onExpr = _out1797;
              _6418_onOwned = _out1798;
              _6419_recIdents = _out1799;
              r = _6417_onExpr;
              if (!object.Equals(_6417_onExpr, RAST.__default.self)) {
                RAST._IExpr _source347 = _6417_onExpr;
                if (_source347.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6420___mcc_h2701 = _source347.dtor_content;
                } else if (_source347.is_ExprFromType) {
                  RAST._IType _6421___mcc_h2703 = _source347.dtor_tpe;
                } else if (_source347.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6422___mcc_h2705 = _source347.dtor_name;
                } else if (_source347.is_Match) {
                  RAST._IExpr _6423___mcc_h2707 = _source347.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6424___mcc_h2708 = _source347.dtor_cases;
                } else if (_source347.is_StmtExpr) {
                  RAST._IExpr _6425___mcc_h2711 = _source347.dtor_stmt;
                  RAST._IExpr _6426___mcc_h2712 = _source347.dtor_rhs;
                } else if (_source347.is_Block) {
                  RAST._IExpr _6427___mcc_h2715 = _source347.dtor_underlying;
                } else if (_source347.is_StructBuild) {
                  RAST._IExpr _6428___mcc_h2717 = _source347.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6429___mcc_h2718 = _source347.dtor_assignments;
                } else if (_source347.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6430___mcc_h2721 = _source347.dtor_arguments;
                } else if (_source347.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6431___mcc_h2723 = _source347.dtor_op1;
                  RAST._IExpr _6432___mcc_h2724 = _source347.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6433___mcc_h2725 = _source347.dtor_format;
                  if (object.Equals(_6431___mcc_h2723, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source348 = _6432___mcc_h2724;
                    if (_source348.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6434___mcc_h2729 = _source348.dtor_content;
                    } else if (_source348.is_ExprFromType) {
                      RAST._IType _6435___mcc_h2731 = _source348.dtor_tpe;
                    } else if (_source348.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6436___mcc_h2733 = _source348.dtor_name;
                      if (object.Equals(_6436___mcc_h2733, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source348.is_Match) {
                      RAST._IExpr _6437___mcc_h2735 = _source348.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6438___mcc_h2736 = _source348.dtor_cases;
                    } else if (_source348.is_StmtExpr) {
                      RAST._IExpr _6439___mcc_h2739 = _source348.dtor_stmt;
                      RAST._IExpr _6440___mcc_h2740 = _source348.dtor_rhs;
                    } else if (_source348.is_Block) {
                      RAST._IExpr _6441___mcc_h2743 = _source348.dtor_underlying;
                    } else if (_source348.is_StructBuild) {
                      RAST._IExpr _6442___mcc_h2745 = _source348.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6443___mcc_h2746 = _source348.dtor_assignments;
                    } else if (_source348.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6444___mcc_h2749 = _source348.dtor_arguments;
                    } else if (_source348.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6445___mcc_h2751 = _source348.dtor_op1;
                      RAST._IExpr _6446___mcc_h2752 = _source348.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6447___mcc_h2753 = _source348.dtor_format;
                    } else if (_source348.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6448___mcc_h2757 = _source348.dtor_op2;
                      RAST._IExpr _6449___mcc_h2758 = _source348.dtor_left;
                      RAST._IExpr _6450___mcc_h2759 = _source348.dtor_right;
                      DAST.Format._IBinaryOpFormat _6451___mcc_h2760 = _source348.dtor_format2;
                    } else if (_source348.is_TypeAscription) {
                      RAST._IExpr _6452___mcc_h2765 = _source348.dtor_left;
                      RAST._IType _6453___mcc_h2766 = _source348.dtor_tpe;
                    } else if (_source348.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6454___mcc_h2769 = _source348.dtor_value;
                    } else if (_source348.is_LiteralBool) {
                      bool _6455___mcc_h2771 = _source348.dtor_bvalue;
                    } else if (_source348.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6456___mcc_h2773 = _source348.dtor_value;
                      bool _6457___mcc_h2774 = _source348.dtor_binary;
                    } else if (_source348.is_DeclareVar) {
                      RAST._IDeclareType _6458___mcc_h2777 = _source348.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6459___mcc_h2778 = _source348.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6460___mcc_h2779 = _source348.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6461___mcc_h2780 = _source348.dtor_optRhs;
                    } else if (_source348.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6462___mcc_h2785 = _source348.dtor_names;
                      RAST._IExpr _6463___mcc_h2786 = _source348.dtor_rhs;
                    } else if (_source348.is_IfExpr) {
                      RAST._IExpr _6464___mcc_h2789 = _source348.dtor_cond;
                      RAST._IExpr _6465___mcc_h2790 = _source348.dtor_thn;
                      RAST._IExpr _6466___mcc_h2791 = _source348.dtor_els;
                    } else if (_source348.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6467___mcc_h2795 = _source348.dtor_optCond;
                      RAST._IExpr _6468___mcc_h2796 = _source348.dtor_underlying;
                    } else if (_source348.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6469___mcc_h2799 = _source348.dtor_name;
                      RAST._IExpr _6470___mcc_h2800 = _source348.dtor_range;
                      RAST._IExpr _6471___mcc_h2801 = _source348.dtor_body;
                    } else if (_source348.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6472___mcc_h2805 = _source348.dtor_lbl;
                      RAST._IExpr _6473___mcc_h2806 = _source348.dtor_underlying;
                    } else if (_source348.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6474___mcc_h2809 = _source348.dtor_optLbl;
                    } else if (_source348.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6475___mcc_h2811 = _source348.dtor_optLbl;
                    } else if (_source348.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6476___mcc_h2813 = _source348.dtor_optExpr;
                    } else if (_source348.is_CallType) {
                      RAST._IExpr _6477___mcc_h2815 = _source348.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6478___mcc_h2816 = _source348.dtor_typeParameters;
                    } else if (_source348.is_Call) {
                      RAST._IExpr _6479___mcc_h2819 = _source348.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6480___mcc_h2820 = _source348.dtor_arguments;
                    } else if (_source348.is_Select) {
                      RAST._IExpr _6481___mcc_h2823 = _source348.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6482___mcc_h2824 = _source348.dtor_name;
                    } else if (_source348.is_MemberSelect) {
                      RAST._IExpr _6483___mcc_h2827 = _source348.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6484___mcc_h2828 = _source348.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6485___mcc_h2831 = _source348.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6486___mcc_h2832 = _source348.dtor_retType;
                      RAST._IExpr _6487___mcc_h2833 = _source348.dtor_body;
                    }
                  } else {
                  }
                } else if (_source347.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6488___mcc_h2837 = _source347.dtor_op2;
                  RAST._IExpr _6489___mcc_h2838 = _source347.dtor_left;
                  RAST._IExpr _6490___mcc_h2839 = _source347.dtor_right;
                  DAST.Format._IBinaryOpFormat _6491___mcc_h2840 = _source347.dtor_format2;
                } else if (_source347.is_TypeAscription) {
                  RAST._IExpr _6492___mcc_h2845 = _source347.dtor_left;
                  RAST._IType _6493___mcc_h2846 = _source347.dtor_tpe;
                } else if (_source347.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6494___mcc_h2849 = _source347.dtor_value;
                } else if (_source347.is_LiteralBool) {
                  bool _6495___mcc_h2851 = _source347.dtor_bvalue;
                } else if (_source347.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6496___mcc_h2853 = _source347.dtor_value;
                  bool _6497___mcc_h2854 = _source347.dtor_binary;
                } else if (_source347.is_DeclareVar) {
                  RAST._IDeclareType _6498___mcc_h2857 = _source347.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6499___mcc_h2858 = _source347.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6500___mcc_h2859 = _source347.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6501___mcc_h2860 = _source347.dtor_optRhs;
                } else if (_source347.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6502___mcc_h2865 = _source347.dtor_names;
                  RAST._IExpr _6503___mcc_h2866 = _source347.dtor_rhs;
                } else if (_source347.is_IfExpr) {
                  RAST._IExpr _6504___mcc_h2869 = _source347.dtor_cond;
                  RAST._IExpr _6505___mcc_h2870 = _source347.dtor_thn;
                  RAST._IExpr _6506___mcc_h2871 = _source347.dtor_els;
                } else if (_source347.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6507___mcc_h2875 = _source347.dtor_optCond;
                  RAST._IExpr _6508___mcc_h2876 = _source347.dtor_underlying;
                } else if (_source347.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6509___mcc_h2879 = _source347.dtor_name;
                  RAST._IExpr _6510___mcc_h2880 = _source347.dtor_range;
                  RAST._IExpr _6511___mcc_h2881 = _source347.dtor_body;
                } else if (_source347.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6512___mcc_h2885 = _source347.dtor_lbl;
                  RAST._IExpr _6513___mcc_h2886 = _source347.dtor_underlying;
                } else if (_source347.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6514___mcc_h2889 = _source347.dtor_optLbl;
                } else if (_source347.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6515___mcc_h2891 = _source347.dtor_optLbl;
                } else if (_source347.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6516___mcc_h2893 = _source347.dtor_optExpr;
                } else if (_source347.is_CallType) {
                  RAST._IExpr _6517___mcc_h2895 = _source347.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6518___mcc_h2896 = _source347.dtor_typeParameters;
                } else if (_source347.is_Call) {
                  RAST._IExpr _6519___mcc_h2899 = _source347.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6520___mcc_h2900 = _source347.dtor_arguments;
                } else if (_source347.is_Select) {
                  RAST._IExpr _6521___mcc_h2903 = _source347.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6522___mcc_h2904 = _source347.dtor_name;
                } else if (_source347.is_MemberSelect) {
                  RAST._IExpr _6523___mcc_h2907 = _source347.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6524___mcc_h2908 = _source347.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6525___mcc_h2911 = _source347.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6526___mcc_h2912 = _source347.dtor_retType;
                  RAST._IExpr _6527___mcc_h2913 = _source347.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6411_field));
              if (_6410_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1800;
              DCOMP._IOwnership _out1801;
              (this).FromOwned(r, expectedOwnership, out _out1800, out _out1801);
              r = _out1800;
              resultingOwnership = _out1801;
              readIdents = _6419_recIdents;
            }
            return ;
          }
        } else if (_source324.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _6528___mcc_h111 = _source324.dtor_elements;
          DAST._IType _6529_fieldType = _5052___mcc_h58;
          bool _6530_isDatatype = _5051___mcc_h57;
          bool _6531_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _6532_field = _5049___mcc_h55;
          DAST._IExpression _6533_on = _5048___mcc_h54;
          {
            if (_6530_isDatatype) {
              RAST._IExpr _6534_onExpr;
              DCOMP._IOwnership _6535_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6536_recIdents;
              RAST._IExpr _out1802;
              DCOMP._IOwnership _out1803;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1804;
              (this).GenExpr(_6533_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1802, out _out1803, out _out1804);
              _6534_onExpr = _out1802;
              _6535_onOwned = _out1803;
              _6536_recIdents = _out1804;
              r = ((_6534_onExpr).Sel(DCOMP.__default.escapeName(_6532_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6537_typ;
              RAST._IType _out1805;
              _out1805 = (this).GenType(_6529_fieldType, DCOMP.GenTypeContext.@default());
              _6537_typ = _out1805;
              RAST._IExpr _out1806;
              DCOMP._IOwnership _out1807;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1806, out _out1807);
              r = _out1806;
              resultingOwnership = _out1807;
              readIdents = _6536_recIdents;
            } else {
              RAST._IExpr _6538_onExpr;
              DCOMP._IOwnership _6539_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6540_recIdents;
              RAST._IExpr _out1808;
              DCOMP._IOwnership _out1809;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1810;
              (this).GenExpr(_6533_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1808, out _out1809, out _out1810);
              _6538_onExpr = _out1808;
              _6539_onOwned = _out1809;
              _6540_recIdents = _out1810;
              r = _6538_onExpr;
              if (!object.Equals(_6538_onExpr, RAST.__default.self)) {
                RAST._IExpr _source349 = _6538_onExpr;
                if (_source349.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6541___mcc_h2917 = _source349.dtor_content;
                } else if (_source349.is_ExprFromType) {
                  RAST._IType _6542___mcc_h2919 = _source349.dtor_tpe;
                } else if (_source349.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6543___mcc_h2921 = _source349.dtor_name;
                } else if (_source349.is_Match) {
                  RAST._IExpr _6544___mcc_h2923 = _source349.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6545___mcc_h2924 = _source349.dtor_cases;
                } else if (_source349.is_StmtExpr) {
                  RAST._IExpr _6546___mcc_h2927 = _source349.dtor_stmt;
                  RAST._IExpr _6547___mcc_h2928 = _source349.dtor_rhs;
                } else if (_source349.is_Block) {
                  RAST._IExpr _6548___mcc_h2931 = _source349.dtor_underlying;
                } else if (_source349.is_StructBuild) {
                  RAST._IExpr _6549___mcc_h2933 = _source349.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6550___mcc_h2934 = _source349.dtor_assignments;
                } else if (_source349.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6551___mcc_h2937 = _source349.dtor_arguments;
                } else if (_source349.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6552___mcc_h2939 = _source349.dtor_op1;
                  RAST._IExpr _6553___mcc_h2940 = _source349.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6554___mcc_h2941 = _source349.dtor_format;
                  if (object.Equals(_6552___mcc_h2939, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source350 = _6553___mcc_h2940;
                    if (_source350.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6555___mcc_h2945 = _source350.dtor_content;
                    } else if (_source350.is_ExprFromType) {
                      RAST._IType _6556___mcc_h2947 = _source350.dtor_tpe;
                    } else if (_source350.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6557___mcc_h2949 = _source350.dtor_name;
                      if (object.Equals(_6557___mcc_h2949, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source350.is_Match) {
                      RAST._IExpr _6558___mcc_h2951 = _source350.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6559___mcc_h2952 = _source350.dtor_cases;
                    } else if (_source350.is_StmtExpr) {
                      RAST._IExpr _6560___mcc_h2955 = _source350.dtor_stmt;
                      RAST._IExpr _6561___mcc_h2956 = _source350.dtor_rhs;
                    } else if (_source350.is_Block) {
                      RAST._IExpr _6562___mcc_h2959 = _source350.dtor_underlying;
                    } else if (_source350.is_StructBuild) {
                      RAST._IExpr _6563___mcc_h2961 = _source350.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6564___mcc_h2962 = _source350.dtor_assignments;
                    } else if (_source350.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6565___mcc_h2965 = _source350.dtor_arguments;
                    } else if (_source350.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6566___mcc_h2967 = _source350.dtor_op1;
                      RAST._IExpr _6567___mcc_h2968 = _source350.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6568___mcc_h2969 = _source350.dtor_format;
                    } else if (_source350.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6569___mcc_h2973 = _source350.dtor_op2;
                      RAST._IExpr _6570___mcc_h2974 = _source350.dtor_left;
                      RAST._IExpr _6571___mcc_h2975 = _source350.dtor_right;
                      DAST.Format._IBinaryOpFormat _6572___mcc_h2976 = _source350.dtor_format2;
                    } else if (_source350.is_TypeAscription) {
                      RAST._IExpr _6573___mcc_h2981 = _source350.dtor_left;
                      RAST._IType _6574___mcc_h2982 = _source350.dtor_tpe;
                    } else if (_source350.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6575___mcc_h2985 = _source350.dtor_value;
                    } else if (_source350.is_LiteralBool) {
                      bool _6576___mcc_h2987 = _source350.dtor_bvalue;
                    } else if (_source350.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6577___mcc_h2989 = _source350.dtor_value;
                      bool _6578___mcc_h2990 = _source350.dtor_binary;
                    } else if (_source350.is_DeclareVar) {
                      RAST._IDeclareType _6579___mcc_h2993 = _source350.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6580___mcc_h2994 = _source350.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6581___mcc_h2995 = _source350.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6582___mcc_h2996 = _source350.dtor_optRhs;
                    } else if (_source350.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6583___mcc_h3001 = _source350.dtor_names;
                      RAST._IExpr _6584___mcc_h3002 = _source350.dtor_rhs;
                    } else if (_source350.is_IfExpr) {
                      RAST._IExpr _6585___mcc_h3005 = _source350.dtor_cond;
                      RAST._IExpr _6586___mcc_h3006 = _source350.dtor_thn;
                      RAST._IExpr _6587___mcc_h3007 = _source350.dtor_els;
                    } else if (_source350.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6588___mcc_h3011 = _source350.dtor_optCond;
                      RAST._IExpr _6589___mcc_h3012 = _source350.dtor_underlying;
                    } else if (_source350.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6590___mcc_h3015 = _source350.dtor_name;
                      RAST._IExpr _6591___mcc_h3016 = _source350.dtor_range;
                      RAST._IExpr _6592___mcc_h3017 = _source350.dtor_body;
                    } else if (_source350.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6593___mcc_h3021 = _source350.dtor_lbl;
                      RAST._IExpr _6594___mcc_h3022 = _source350.dtor_underlying;
                    } else if (_source350.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6595___mcc_h3025 = _source350.dtor_optLbl;
                    } else if (_source350.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6596___mcc_h3027 = _source350.dtor_optLbl;
                    } else if (_source350.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6597___mcc_h3029 = _source350.dtor_optExpr;
                    } else if (_source350.is_CallType) {
                      RAST._IExpr _6598___mcc_h3031 = _source350.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6599___mcc_h3032 = _source350.dtor_typeParameters;
                    } else if (_source350.is_Call) {
                      RAST._IExpr _6600___mcc_h3035 = _source350.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6601___mcc_h3036 = _source350.dtor_arguments;
                    } else if (_source350.is_Select) {
                      RAST._IExpr _6602___mcc_h3039 = _source350.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6603___mcc_h3040 = _source350.dtor_name;
                    } else if (_source350.is_MemberSelect) {
                      RAST._IExpr _6604___mcc_h3043 = _source350.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6605___mcc_h3044 = _source350.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6606___mcc_h3047 = _source350.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6607___mcc_h3048 = _source350.dtor_retType;
                      RAST._IExpr _6608___mcc_h3049 = _source350.dtor_body;
                    }
                  } else {
                  }
                } else if (_source349.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6609___mcc_h3053 = _source349.dtor_op2;
                  RAST._IExpr _6610___mcc_h3054 = _source349.dtor_left;
                  RAST._IExpr _6611___mcc_h3055 = _source349.dtor_right;
                  DAST.Format._IBinaryOpFormat _6612___mcc_h3056 = _source349.dtor_format2;
                } else if (_source349.is_TypeAscription) {
                  RAST._IExpr _6613___mcc_h3061 = _source349.dtor_left;
                  RAST._IType _6614___mcc_h3062 = _source349.dtor_tpe;
                } else if (_source349.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6615___mcc_h3065 = _source349.dtor_value;
                } else if (_source349.is_LiteralBool) {
                  bool _6616___mcc_h3067 = _source349.dtor_bvalue;
                } else if (_source349.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6617___mcc_h3069 = _source349.dtor_value;
                  bool _6618___mcc_h3070 = _source349.dtor_binary;
                } else if (_source349.is_DeclareVar) {
                  RAST._IDeclareType _6619___mcc_h3073 = _source349.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6620___mcc_h3074 = _source349.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6621___mcc_h3075 = _source349.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6622___mcc_h3076 = _source349.dtor_optRhs;
                } else if (_source349.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6623___mcc_h3081 = _source349.dtor_names;
                  RAST._IExpr _6624___mcc_h3082 = _source349.dtor_rhs;
                } else if (_source349.is_IfExpr) {
                  RAST._IExpr _6625___mcc_h3085 = _source349.dtor_cond;
                  RAST._IExpr _6626___mcc_h3086 = _source349.dtor_thn;
                  RAST._IExpr _6627___mcc_h3087 = _source349.dtor_els;
                } else if (_source349.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6628___mcc_h3091 = _source349.dtor_optCond;
                  RAST._IExpr _6629___mcc_h3092 = _source349.dtor_underlying;
                } else if (_source349.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6630___mcc_h3095 = _source349.dtor_name;
                  RAST._IExpr _6631___mcc_h3096 = _source349.dtor_range;
                  RAST._IExpr _6632___mcc_h3097 = _source349.dtor_body;
                } else if (_source349.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6633___mcc_h3101 = _source349.dtor_lbl;
                  RAST._IExpr _6634___mcc_h3102 = _source349.dtor_underlying;
                } else if (_source349.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6635___mcc_h3105 = _source349.dtor_optLbl;
                } else if (_source349.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6636___mcc_h3107 = _source349.dtor_optLbl;
                } else if (_source349.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6637___mcc_h3109 = _source349.dtor_optExpr;
                } else if (_source349.is_CallType) {
                  RAST._IExpr _6638___mcc_h3111 = _source349.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6639___mcc_h3112 = _source349.dtor_typeParameters;
                } else if (_source349.is_Call) {
                  RAST._IExpr _6640___mcc_h3115 = _source349.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6641___mcc_h3116 = _source349.dtor_arguments;
                } else if (_source349.is_Select) {
                  RAST._IExpr _6642___mcc_h3119 = _source349.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6643___mcc_h3120 = _source349.dtor_name;
                } else if (_source349.is_MemberSelect) {
                  RAST._IExpr _6644___mcc_h3123 = _source349.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6645___mcc_h3124 = _source349.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6646___mcc_h3127 = _source349.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6647___mcc_h3128 = _source349.dtor_retType;
                  RAST._IExpr _6648___mcc_h3129 = _source349.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6532_field));
              if (_6531_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1811;
              DCOMP._IOwnership _out1812;
              (this).FromOwned(r, expectedOwnership, out _out1811, out _out1812);
              r = _out1811;
              resultingOwnership = _out1812;
              readIdents = _6540_recIdents;
            }
            return ;
          }
        } else if (_source324.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6649___mcc_h113 = _source324.dtor_mapElems;
          DAST._IType _6650_fieldType = _5052___mcc_h58;
          bool _6651_isDatatype = _5051___mcc_h57;
          bool _6652_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _6653_field = _5049___mcc_h55;
          DAST._IExpression _6654_on = _5048___mcc_h54;
          {
            if (_6651_isDatatype) {
              RAST._IExpr _6655_onExpr;
              DCOMP._IOwnership _6656_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6657_recIdents;
              RAST._IExpr _out1813;
              DCOMP._IOwnership _out1814;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1815;
              (this).GenExpr(_6654_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1813, out _out1814, out _out1815);
              _6655_onExpr = _out1813;
              _6656_onOwned = _out1814;
              _6657_recIdents = _out1815;
              r = ((_6655_onExpr).Sel(DCOMP.__default.escapeName(_6653_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6658_typ;
              RAST._IType _out1816;
              _out1816 = (this).GenType(_6650_fieldType, DCOMP.GenTypeContext.@default());
              _6658_typ = _out1816;
              RAST._IExpr _out1817;
              DCOMP._IOwnership _out1818;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1817, out _out1818);
              r = _out1817;
              resultingOwnership = _out1818;
              readIdents = _6657_recIdents;
            } else {
              RAST._IExpr _6659_onExpr;
              DCOMP._IOwnership _6660_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6661_recIdents;
              RAST._IExpr _out1819;
              DCOMP._IOwnership _out1820;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1821;
              (this).GenExpr(_6654_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1819, out _out1820, out _out1821);
              _6659_onExpr = _out1819;
              _6660_onOwned = _out1820;
              _6661_recIdents = _out1821;
              r = _6659_onExpr;
              if (!object.Equals(_6659_onExpr, RAST.__default.self)) {
                RAST._IExpr _source351 = _6659_onExpr;
                if (_source351.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6662___mcc_h3133 = _source351.dtor_content;
                } else if (_source351.is_ExprFromType) {
                  RAST._IType _6663___mcc_h3135 = _source351.dtor_tpe;
                } else if (_source351.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6664___mcc_h3137 = _source351.dtor_name;
                } else if (_source351.is_Match) {
                  RAST._IExpr _6665___mcc_h3139 = _source351.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6666___mcc_h3140 = _source351.dtor_cases;
                } else if (_source351.is_StmtExpr) {
                  RAST._IExpr _6667___mcc_h3143 = _source351.dtor_stmt;
                  RAST._IExpr _6668___mcc_h3144 = _source351.dtor_rhs;
                } else if (_source351.is_Block) {
                  RAST._IExpr _6669___mcc_h3147 = _source351.dtor_underlying;
                } else if (_source351.is_StructBuild) {
                  RAST._IExpr _6670___mcc_h3149 = _source351.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6671___mcc_h3150 = _source351.dtor_assignments;
                } else if (_source351.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6672___mcc_h3153 = _source351.dtor_arguments;
                } else if (_source351.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6673___mcc_h3155 = _source351.dtor_op1;
                  RAST._IExpr _6674___mcc_h3156 = _source351.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6675___mcc_h3157 = _source351.dtor_format;
                  if (object.Equals(_6673___mcc_h3155, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source352 = _6674___mcc_h3156;
                    if (_source352.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6676___mcc_h3161 = _source352.dtor_content;
                    } else if (_source352.is_ExprFromType) {
                      RAST._IType _6677___mcc_h3163 = _source352.dtor_tpe;
                    } else if (_source352.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6678___mcc_h3165 = _source352.dtor_name;
                      if (object.Equals(_6678___mcc_h3165, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source352.is_Match) {
                      RAST._IExpr _6679___mcc_h3167 = _source352.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6680___mcc_h3168 = _source352.dtor_cases;
                    } else if (_source352.is_StmtExpr) {
                      RAST._IExpr _6681___mcc_h3171 = _source352.dtor_stmt;
                      RAST._IExpr _6682___mcc_h3172 = _source352.dtor_rhs;
                    } else if (_source352.is_Block) {
                      RAST._IExpr _6683___mcc_h3175 = _source352.dtor_underlying;
                    } else if (_source352.is_StructBuild) {
                      RAST._IExpr _6684___mcc_h3177 = _source352.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6685___mcc_h3178 = _source352.dtor_assignments;
                    } else if (_source352.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6686___mcc_h3181 = _source352.dtor_arguments;
                    } else if (_source352.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6687___mcc_h3183 = _source352.dtor_op1;
                      RAST._IExpr _6688___mcc_h3184 = _source352.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6689___mcc_h3185 = _source352.dtor_format;
                    } else if (_source352.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6690___mcc_h3189 = _source352.dtor_op2;
                      RAST._IExpr _6691___mcc_h3190 = _source352.dtor_left;
                      RAST._IExpr _6692___mcc_h3191 = _source352.dtor_right;
                      DAST.Format._IBinaryOpFormat _6693___mcc_h3192 = _source352.dtor_format2;
                    } else if (_source352.is_TypeAscription) {
                      RAST._IExpr _6694___mcc_h3197 = _source352.dtor_left;
                      RAST._IType _6695___mcc_h3198 = _source352.dtor_tpe;
                    } else if (_source352.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6696___mcc_h3201 = _source352.dtor_value;
                    } else if (_source352.is_LiteralBool) {
                      bool _6697___mcc_h3203 = _source352.dtor_bvalue;
                    } else if (_source352.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6698___mcc_h3205 = _source352.dtor_value;
                      bool _6699___mcc_h3206 = _source352.dtor_binary;
                    } else if (_source352.is_DeclareVar) {
                      RAST._IDeclareType _6700___mcc_h3209 = _source352.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6701___mcc_h3210 = _source352.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6702___mcc_h3211 = _source352.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6703___mcc_h3212 = _source352.dtor_optRhs;
                    } else if (_source352.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6704___mcc_h3217 = _source352.dtor_names;
                      RAST._IExpr _6705___mcc_h3218 = _source352.dtor_rhs;
                    } else if (_source352.is_IfExpr) {
                      RAST._IExpr _6706___mcc_h3221 = _source352.dtor_cond;
                      RAST._IExpr _6707___mcc_h3222 = _source352.dtor_thn;
                      RAST._IExpr _6708___mcc_h3223 = _source352.dtor_els;
                    } else if (_source352.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6709___mcc_h3227 = _source352.dtor_optCond;
                      RAST._IExpr _6710___mcc_h3228 = _source352.dtor_underlying;
                    } else if (_source352.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6711___mcc_h3231 = _source352.dtor_name;
                      RAST._IExpr _6712___mcc_h3232 = _source352.dtor_range;
                      RAST._IExpr _6713___mcc_h3233 = _source352.dtor_body;
                    } else if (_source352.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6714___mcc_h3237 = _source352.dtor_lbl;
                      RAST._IExpr _6715___mcc_h3238 = _source352.dtor_underlying;
                    } else if (_source352.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6716___mcc_h3241 = _source352.dtor_optLbl;
                    } else if (_source352.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6717___mcc_h3243 = _source352.dtor_optLbl;
                    } else if (_source352.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6718___mcc_h3245 = _source352.dtor_optExpr;
                    } else if (_source352.is_CallType) {
                      RAST._IExpr _6719___mcc_h3247 = _source352.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6720___mcc_h3248 = _source352.dtor_typeParameters;
                    } else if (_source352.is_Call) {
                      RAST._IExpr _6721___mcc_h3251 = _source352.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6722___mcc_h3252 = _source352.dtor_arguments;
                    } else if (_source352.is_Select) {
                      RAST._IExpr _6723___mcc_h3255 = _source352.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6724___mcc_h3256 = _source352.dtor_name;
                    } else if (_source352.is_MemberSelect) {
                      RAST._IExpr _6725___mcc_h3259 = _source352.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6726___mcc_h3260 = _source352.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6727___mcc_h3263 = _source352.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6728___mcc_h3264 = _source352.dtor_retType;
                      RAST._IExpr _6729___mcc_h3265 = _source352.dtor_body;
                    }
                  } else {
                  }
                } else if (_source351.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6730___mcc_h3269 = _source351.dtor_op2;
                  RAST._IExpr _6731___mcc_h3270 = _source351.dtor_left;
                  RAST._IExpr _6732___mcc_h3271 = _source351.dtor_right;
                  DAST.Format._IBinaryOpFormat _6733___mcc_h3272 = _source351.dtor_format2;
                } else if (_source351.is_TypeAscription) {
                  RAST._IExpr _6734___mcc_h3277 = _source351.dtor_left;
                  RAST._IType _6735___mcc_h3278 = _source351.dtor_tpe;
                } else if (_source351.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6736___mcc_h3281 = _source351.dtor_value;
                } else if (_source351.is_LiteralBool) {
                  bool _6737___mcc_h3283 = _source351.dtor_bvalue;
                } else if (_source351.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6738___mcc_h3285 = _source351.dtor_value;
                  bool _6739___mcc_h3286 = _source351.dtor_binary;
                } else if (_source351.is_DeclareVar) {
                  RAST._IDeclareType _6740___mcc_h3289 = _source351.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6741___mcc_h3290 = _source351.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6742___mcc_h3291 = _source351.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6743___mcc_h3292 = _source351.dtor_optRhs;
                } else if (_source351.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6744___mcc_h3297 = _source351.dtor_names;
                  RAST._IExpr _6745___mcc_h3298 = _source351.dtor_rhs;
                } else if (_source351.is_IfExpr) {
                  RAST._IExpr _6746___mcc_h3301 = _source351.dtor_cond;
                  RAST._IExpr _6747___mcc_h3302 = _source351.dtor_thn;
                  RAST._IExpr _6748___mcc_h3303 = _source351.dtor_els;
                } else if (_source351.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6749___mcc_h3307 = _source351.dtor_optCond;
                  RAST._IExpr _6750___mcc_h3308 = _source351.dtor_underlying;
                } else if (_source351.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6751___mcc_h3311 = _source351.dtor_name;
                  RAST._IExpr _6752___mcc_h3312 = _source351.dtor_range;
                  RAST._IExpr _6753___mcc_h3313 = _source351.dtor_body;
                } else if (_source351.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6754___mcc_h3317 = _source351.dtor_lbl;
                  RAST._IExpr _6755___mcc_h3318 = _source351.dtor_underlying;
                } else if (_source351.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6756___mcc_h3321 = _source351.dtor_optLbl;
                } else if (_source351.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6757___mcc_h3323 = _source351.dtor_optLbl;
                } else if (_source351.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6758___mcc_h3325 = _source351.dtor_optExpr;
                } else if (_source351.is_CallType) {
                  RAST._IExpr _6759___mcc_h3327 = _source351.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6760___mcc_h3328 = _source351.dtor_typeParameters;
                } else if (_source351.is_Call) {
                  RAST._IExpr _6761___mcc_h3331 = _source351.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6762___mcc_h3332 = _source351.dtor_arguments;
                } else if (_source351.is_Select) {
                  RAST._IExpr _6763___mcc_h3335 = _source351.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6764___mcc_h3336 = _source351.dtor_name;
                } else if (_source351.is_MemberSelect) {
                  RAST._IExpr _6765___mcc_h3339 = _source351.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6766___mcc_h3340 = _source351.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6767___mcc_h3343 = _source351.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6768___mcc_h3344 = _source351.dtor_retType;
                  RAST._IExpr _6769___mcc_h3345 = _source351.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6653_field));
              if (_6652_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1822;
              DCOMP._IOwnership _out1823;
              (this).FromOwned(r, expectedOwnership, out _out1822, out _out1823);
              r = _out1822;
              resultingOwnership = _out1823;
              readIdents = _6661_recIdents;
            }
            return ;
          }
        } else if (_source324.is_MapBuilder) {
          DAST._IType _6770___mcc_h115 = _source324.dtor_keyType;
          DAST._IType _6771___mcc_h116 = _source324.dtor_valueType;
          DAST._IType _6772_fieldType = _5052___mcc_h58;
          bool _6773_isDatatype = _5051___mcc_h57;
          bool _6774_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _6775_field = _5049___mcc_h55;
          DAST._IExpression _6776_on = _5048___mcc_h54;
          {
            if (_6773_isDatatype) {
              RAST._IExpr _6777_onExpr;
              DCOMP._IOwnership _6778_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6779_recIdents;
              RAST._IExpr _out1824;
              DCOMP._IOwnership _out1825;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1826;
              (this).GenExpr(_6776_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1824, out _out1825, out _out1826);
              _6777_onExpr = _out1824;
              _6778_onOwned = _out1825;
              _6779_recIdents = _out1826;
              r = ((_6777_onExpr).Sel(DCOMP.__default.escapeName(_6775_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6780_typ;
              RAST._IType _out1827;
              _out1827 = (this).GenType(_6772_fieldType, DCOMP.GenTypeContext.@default());
              _6780_typ = _out1827;
              RAST._IExpr _out1828;
              DCOMP._IOwnership _out1829;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1828, out _out1829);
              r = _out1828;
              resultingOwnership = _out1829;
              readIdents = _6779_recIdents;
            } else {
              RAST._IExpr _6781_onExpr;
              DCOMP._IOwnership _6782_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6783_recIdents;
              RAST._IExpr _out1830;
              DCOMP._IOwnership _out1831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1832;
              (this).GenExpr(_6776_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1830, out _out1831, out _out1832);
              _6781_onExpr = _out1830;
              _6782_onOwned = _out1831;
              _6783_recIdents = _out1832;
              r = _6781_onExpr;
              if (!object.Equals(_6781_onExpr, RAST.__default.self)) {
                RAST._IExpr _source353 = _6781_onExpr;
                if (_source353.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6784___mcc_h3349 = _source353.dtor_content;
                } else if (_source353.is_ExprFromType) {
                  RAST._IType _6785___mcc_h3351 = _source353.dtor_tpe;
                } else if (_source353.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6786___mcc_h3353 = _source353.dtor_name;
                } else if (_source353.is_Match) {
                  RAST._IExpr _6787___mcc_h3355 = _source353.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6788___mcc_h3356 = _source353.dtor_cases;
                } else if (_source353.is_StmtExpr) {
                  RAST._IExpr _6789___mcc_h3359 = _source353.dtor_stmt;
                  RAST._IExpr _6790___mcc_h3360 = _source353.dtor_rhs;
                } else if (_source353.is_Block) {
                  RAST._IExpr _6791___mcc_h3363 = _source353.dtor_underlying;
                } else if (_source353.is_StructBuild) {
                  RAST._IExpr _6792___mcc_h3365 = _source353.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6793___mcc_h3366 = _source353.dtor_assignments;
                } else if (_source353.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6794___mcc_h3369 = _source353.dtor_arguments;
                } else if (_source353.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6795___mcc_h3371 = _source353.dtor_op1;
                  RAST._IExpr _6796___mcc_h3372 = _source353.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6797___mcc_h3373 = _source353.dtor_format;
                  if (object.Equals(_6795___mcc_h3371, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source354 = _6796___mcc_h3372;
                    if (_source354.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6798___mcc_h3377 = _source354.dtor_content;
                    } else if (_source354.is_ExprFromType) {
                      RAST._IType _6799___mcc_h3379 = _source354.dtor_tpe;
                    } else if (_source354.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6800___mcc_h3381 = _source354.dtor_name;
                      if (object.Equals(_6800___mcc_h3381, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source354.is_Match) {
                      RAST._IExpr _6801___mcc_h3383 = _source354.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6802___mcc_h3384 = _source354.dtor_cases;
                    } else if (_source354.is_StmtExpr) {
                      RAST._IExpr _6803___mcc_h3387 = _source354.dtor_stmt;
                      RAST._IExpr _6804___mcc_h3388 = _source354.dtor_rhs;
                    } else if (_source354.is_Block) {
                      RAST._IExpr _6805___mcc_h3391 = _source354.dtor_underlying;
                    } else if (_source354.is_StructBuild) {
                      RAST._IExpr _6806___mcc_h3393 = _source354.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6807___mcc_h3394 = _source354.dtor_assignments;
                    } else if (_source354.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6808___mcc_h3397 = _source354.dtor_arguments;
                    } else if (_source354.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6809___mcc_h3399 = _source354.dtor_op1;
                      RAST._IExpr _6810___mcc_h3400 = _source354.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6811___mcc_h3401 = _source354.dtor_format;
                    } else if (_source354.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6812___mcc_h3405 = _source354.dtor_op2;
                      RAST._IExpr _6813___mcc_h3406 = _source354.dtor_left;
                      RAST._IExpr _6814___mcc_h3407 = _source354.dtor_right;
                      DAST.Format._IBinaryOpFormat _6815___mcc_h3408 = _source354.dtor_format2;
                    } else if (_source354.is_TypeAscription) {
                      RAST._IExpr _6816___mcc_h3413 = _source354.dtor_left;
                      RAST._IType _6817___mcc_h3414 = _source354.dtor_tpe;
                    } else if (_source354.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6818___mcc_h3417 = _source354.dtor_value;
                    } else if (_source354.is_LiteralBool) {
                      bool _6819___mcc_h3419 = _source354.dtor_bvalue;
                    } else if (_source354.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6820___mcc_h3421 = _source354.dtor_value;
                      bool _6821___mcc_h3422 = _source354.dtor_binary;
                    } else if (_source354.is_DeclareVar) {
                      RAST._IDeclareType _6822___mcc_h3425 = _source354.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6823___mcc_h3426 = _source354.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6824___mcc_h3427 = _source354.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6825___mcc_h3428 = _source354.dtor_optRhs;
                    } else if (_source354.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6826___mcc_h3433 = _source354.dtor_names;
                      RAST._IExpr _6827___mcc_h3434 = _source354.dtor_rhs;
                    } else if (_source354.is_IfExpr) {
                      RAST._IExpr _6828___mcc_h3437 = _source354.dtor_cond;
                      RAST._IExpr _6829___mcc_h3438 = _source354.dtor_thn;
                      RAST._IExpr _6830___mcc_h3439 = _source354.dtor_els;
                    } else if (_source354.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6831___mcc_h3443 = _source354.dtor_optCond;
                      RAST._IExpr _6832___mcc_h3444 = _source354.dtor_underlying;
                    } else if (_source354.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6833___mcc_h3447 = _source354.dtor_name;
                      RAST._IExpr _6834___mcc_h3448 = _source354.dtor_range;
                      RAST._IExpr _6835___mcc_h3449 = _source354.dtor_body;
                    } else if (_source354.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6836___mcc_h3453 = _source354.dtor_lbl;
                      RAST._IExpr _6837___mcc_h3454 = _source354.dtor_underlying;
                    } else if (_source354.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6838___mcc_h3457 = _source354.dtor_optLbl;
                    } else if (_source354.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6839___mcc_h3459 = _source354.dtor_optLbl;
                    } else if (_source354.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6840___mcc_h3461 = _source354.dtor_optExpr;
                    } else if (_source354.is_CallType) {
                      RAST._IExpr _6841___mcc_h3463 = _source354.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6842___mcc_h3464 = _source354.dtor_typeParameters;
                    } else if (_source354.is_Call) {
                      RAST._IExpr _6843___mcc_h3467 = _source354.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6844___mcc_h3468 = _source354.dtor_arguments;
                    } else if (_source354.is_Select) {
                      RAST._IExpr _6845___mcc_h3471 = _source354.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6846___mcc_h3472 = _source354.dtor_name;
                    } else if (_source354.is_MemberSelect) {
                      RAST._IExpr _6847___mcc_h3475 = _source354.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6848___mcc_h3476 = _source354.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6849___mcc_h3479 = _source354.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6850___mcc_h3480 = _source354.dtor_retType;
                      RAST._IExpr _6851___mcc_h3481 = _source354.dtor_body;
                    }
                  } else {
                  }
                } else if (_source353.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6852___mcc_h3485 = _source353.dtor_op2;
                  RAST._IExpr _6853___mcc_h3486 = _source353.dtor_left;
                  RAST._IExpr _6854___mcc_h3487 = _source353.dtor_right;
                  DAST.Format._IBinaryOpFormat _6855___mcc_h3488 = _source353.dtor_format2;
                } else if (_source353.is_TypeAscription) {
                  RAST._IExpr _6856___mcc_h3493 = _source353.dtor_left;
                  RAST._IType _6857___mcc_h3494 = _source353.dtor_tpe;
                } else if (_source353.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6858___mcc_h3497 = _source353.dtor_value;
                } else if (_source353.is_LiteralBool) {
                  bool _6859___mcc_h3499 = _source353.dtor_bvalue;
                } else if (_source353.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6860___mcc_h3501 = _source353.dtor_value;
                  bool _6861___mcc_h3502 = _source353.dtor_binary;
                } else if (_source353.is_DeclareVar) {
                  RAST._IDeclareType _6862___mcc_h3505 = _source353.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6863___mcc_h3506 = _source353.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6864___mcc_h3507 = _source353.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6865___mcc_h3508 = _source353.dtor_optRhs;
                } else if (_source353.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6866___mcc_h3513 = _source353.dtor_names;
                  RAST._IExpr _6867___mcc_h3514 = _source353.dtor_rhs;
                } else if (_source353.is_IfExpr) {
                  RAST._IExpr _6868___mcc_h3517 = _source353.dtor_cond;
                  RAST._IExpr _6869___mcc_h3518 = _source353.dtor_thn;
                  RAST._IExpr _6870___mcc_h3519 = _source353.dtor_els;
                } else if (_source353.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6871___mcc_h3523 = _source353.dtor_optCond;
                  RAST._IExpr _6872___mcc_h3524 = _source353.dtor_underlying;
                } else if (_source353.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6873___mcc_h3527 = _source353.dtor_name;
                  RAST._IExpr _6874___mcc_h3528 = _source353.dtor_range;
                  RAST._IExpr _6875___mcc_h3529 = _source353.dtor_body;
                } else if (_source353.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6876___mcc_h3533 = _source353.dtor_lbl;
                  RAST._IExpr _6877___mcc_h3534 = _source353.dtor_underlying;
                } else if (_source353.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6878___mcc_h3537 = _source353.dtor_optLbl;
                } else if (_source353.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6879___mcc_h3539 = _source353.dtor_optLbl;
                } else if (_source353.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _6880___mcc_h3541 = _source353.dtor_optExpr;
                } else if (_source353.is_CallType) {
                  RAST._IExpr _6881___mcc_h3543 = _source353.dtor_obj;
                  Dafny.ISequence<RAST._IType> _6882___mcc_h3544 = _source353.dtor_typeParameters;
                } else if (_source353.is_Call) {
                  RAST._IExpr _6883___mcc_h3547 = _source353.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _6884___mcc_h3548 = _source353.dtor_arguments;
                } else if (_source353.is_Select) {
                  RAST._IExpr _6885___mcc_h3551 = _source353.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6886___mcc_h3552 = _source353.dtor_name;
                } else if (_source353.is_MemberSelect) {
                  RAST._IExpr _6887___mcc_h3555 = _source353.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _6888___mcc_h3556 = _source353.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _6889___mcc_h3559 = _source353.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _6890___mcc_h3560 = _source353.dtor_retType;
                  RAST._IExpr _6891___mcc_h3561 = _source353.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6775_field));
              if (_6774_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1833;
              DCOMP._IOwnership _out1834;
              (this).FromOwned(r, expectedOwnership, out _out1833, out _out1834);
              r = _out1833;
              resultingOwnership = _out1834;
              readIdents = _6783_recIdents;
            }
            return ;
          }
        } else if (_source324.is_SeqUpdate) {
          DAST._IExpression _6892___mcc_h119 = _source324.dtor_expr;
          DAST._IExpression _6893___mcc_h120 = _source324.dtor_indexExpr;
          DAST._IExpression _6894___mcc_h121 = _source324.dtor_value;
          DAST._IType _6895_fieldType = _5052___mcc_h58;
          bool _6896_isDatatype = _5051___mcc_h57;
          bool _6897_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _6898_field = _5049___mcc_h55;
          DAST._IExpression _6899_on = _5048___mcc_h54;
          {
            if (_6896_isDatatype) {
              RAST._IExpr _6900_onExpr;
              DCOMP._IOwnership _6901_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6902_recIdents;
              RAST._IExpr _out1835;
              DCOMP._IOwnership _out1836;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1837;
              (this).GenExpr(_6899_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1835, out _out1836, out _out1837);
              _6900_onExpr = _out1835;
              _6901_onOwned = _out1836;
              _6902_recIdents = _out1837;
              r = ((_6900_onExpr).Sel(DCOMP.__default.escapeName(_6898_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _6903_typ;
              RAST._IType _out1838;
              _out1838 = (this).GenType(_6895_fieldType, DCOMP.GenTypeContext.@default());
              _6903_typ = _out1838;
              RAST._IExpr _out1839;
              DCOMP._IOwnership _out1840;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1839, out _out1840);
              r = _out1839;
              resultingOwnership = _out1840;
              readIdents = _6902_recIdents;
            } else {
              RAST._IExpr _6904_onExpr;
              DCOMP._IOwnership _6905_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6906_recIdents;
              RAST._IExpr _out1841;
              DCOMP._IOwnership _out1842;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1843;
              (this).GenExpr(_6899_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1841, out _out1842, out _out1843);
              _6904_onExpr = _out1841;
              _6905_onOwned = _out1842;
              _6906_recIdents = _out1843;
              r = _6904_onExpr;
              if (!object.Equals(_6904_onExpr, RAST.__default.self)) {
                RAST._IExpr _source355 = _6904_onExpr;
                if (_source355.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _6907___mcc_h3565 = _source355.dtor_content;
                } else if (_source355.is_ExprFromType) {
                  RAST._IType _6908___mcc_h3567 = _source355.dtor_tpe;
                } else if (_source355.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _6909___mcc_h3569 = _source355.dtor_name;
                } else if (_source355.is_Match) {
                  RAST._IExpr _6910___mcc_h3571 = _source355.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _6911___mcc_h3572 = _source355.dtor_cases;
                } else if (_source355.is_StmtExpr) {
                  RAST._IExpr _6912___mcc_h3575 = _source355.dtor_stmt;
                  RAST._IExpr _6913___mcc_h3576 = _source355.dtor_rhs;
                } else if (_source355.is_Block) {
                  RAST._IExpr _6914___mcc_h3579 = _source355.dtor_underlying;
                } else if (_source355.is_StructBuild) {
                  RAST._IExpr _6915___mcc_h3581 = _source355.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _6916___mcc_h3582 = _source355.dtor_assignments;
                } else if (_source355.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _6917___mcc_h3585 = _source355.dtor_arguments;
                } else if (_source355.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6918___mcc_h3587 = _source355.dtor_op1;
                  RAST._IExpr _6919___mcc_h3588 = _source355.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _6920___mcc_h3589 = _source355.dtor_format;
                  if (object.Equals(_6918___mcc_h3587, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source356 = _6919___mcc_h3588;
                    if (_source356.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _6921___mcc_h3593 = _source356.dtor_content;
                    } else if (_source356.is_ExprFromType) {
                      RAST._IType _6922___mcc_h3595 = _source356.dtor_tpe;
                    } else if (_source356.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _6923___mcc_h3597 = _source356.dtor_name;
                      if (object.Equals(_6923___mcc_h3597, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source356.is_Match) {
                      RAST._IExpr _6924___mcc_h3599 = _source356.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _6925___mcc_h3600 = _source356.dtor_cases;
                    } else if (_source356.is_StmtExpr) {
                      RAST._IExpr _6926___mcc_h3603 = _source356.dtor_stmt;
                      RAST._IExpr _6927___mcc_h3604 = _source356.dtor_rhs;
                    } else if (_source356.is_Block) {
                      RAST._IExpr _6928___mcc_h3607 = _source356.dtor_underlying;
                    } else if (_source356.is_StructBuild) {
                      RAST._IExpr _6929___mcc_h3609 = _source356.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _6930___mcc_h3610 = _source356.dtor_assignments;
                    } else if (_source356.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _6931___mcc_h3613 = _source356.dtor_arguments;
                    } else if (_source356.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6932___mcc_h3615 = _source356.dtor_op1;
                      RAST._IExpr _6933___mcc_h3616 = _source356.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _6934___mcc_h3617 = _source356.dtor_format;
                    } else if (_source356.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _6935___mcc_h3621 = _source356.dtor_op2;
                      RAST._IExpr _6936___mcc_h3622 = _source356.dtor_left;
                      RAST._IExpr _6937___mcc_h3623 = _source356.dtor_right;
                      DAST.Format._IBinaryOpFormat _6938___mcc_h3624 = _source356.dtor_format2;
                    } else if (_source356.is_TypeAscription) {
                      RAST._IExpr _6939___mcc_h3629 = _source356.dtor_left;
                      RAST._IType _6940___mcc_h3630 = _source356.dtor_tpe;
                    } else if (_source356.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _6941___mcc_h3633 = _source356.dtor_value;
                    } else if (_source356.is_LiteralBool) {
                      bool _6942___mcc_h3635 = _source356.dtor_bvalue;
                    } else if (_source356.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _6943___mcc_h3637 = _source356.dtor_value;
                      bool _6944___mcc_h3638 = _source356.dtor_binary;
                    } else if (_source356.is_DeclareVar) {
                      RAST._IDeclareType _6945___mcc_h3641 = _source356.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _6946___mcc_h3642 = _source356.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _6947___mcc_h3643 = _source356.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _6948___mcc_h3644 = _source356.dtor_optRhs;
                    } else if (_source356.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _6949___mcc_h3649 = _source356.dtor_names;
                      RAST._IExpr _6950___mcc_h3650 = _source356.dtor_rhs;
                    } else if (_source356.is_IfExpr) {
                      RAST._IExpr _6951___mcc_h3653 = _source356.dtor_cond;
                      RAST._IExpr _6952___mcc_h3654 = _source356.dtor_thn;
                      RAST._IExpr _6953___mcc_h3655 = _source356.dtor_els;
                    } else if (_source356.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _6954___mcc_h3659 = _source356.dtor_optCond;
                      RAST._IExpr _6955___mcc_h3660 = _source356.dtor_underlying;
                    } else if (_source356.is_For) {
                      Dafny.ISequence<Dafny.Rune> _6956___mcc_h3663 = _source356.dtor_name;
                      RAST._IExpr _6957___mcc_h3664 = _source356.dtor_range;
                      RAST._IExpr _6958___mcc_h3665 = _source356.dtor_body;
                    } else if (_source356.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _6959___mcc_h3669 = _source356.dtor_lbl;
                      RAST._IExpr _6960___mcc_h3670 = _source356.dtor_underlying;
                    } else if (_source356.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6961___mcc_h3673 = _source356.dtor_optLbl;
                    } else if (_source356.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6962___mcc_h3675 = _source356.dtor_optLbl;
                    } else if (_source356.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _6963___mcc_h3677 = _source356.dtor_optExpr;
                    } else if (_source356.is_CallType) {
                      RAST._IExpr _6964___mcc_h3679 = _source356.dtor_obj;
                      Dafny.ISequence<RAST._IType> _6965___mcc_h3680 = _source356.dtor_typeParameters;
                    } else if (_source356.is_Call) {
                      RAST._IExpr _6966___mcc_h3683 = _source356.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _6967___mcc_h3684 = _source356.dtor_arguments;
                    } else if (_source356.is_Select) {
                      RAST._IExpr _6968___mcc_h3687 = _source356.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6969___mcc_h3688 = _source356.dtor_name;
                    } else if (_source356.is_MemberSelect) {
                      RAST._IExpr _6970___mcc_h3691 = _source356.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _6971___mcc_h3692 = _source356.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _6972___mcc_h3695 = _source356.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _6973___mcc_h3696 = _source356.dtor_retType;
                      RAST._IExpr _6974___mcc_h3697 = _source356.dtor_body;
                    }
                  } else {
                  }
                } else if (_source355.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _6975___mcc_h3701 = _source355.dtor_op2;
                  RAST._IExpr _6976___mcc_h3702 = _source355.dtor_left;
                  RAST._IExpr _6977___mcc_h3703 = _source355.dtor_right;
                  DAST.Format._IBinaryOpFormat _6978___mcc_h3704 = _source355.dtor_format2;
                } else if (_source355.is_TypeAscription) {
                  RAST._IExpr _6979___mcc_h3709 = _source355.dtor_left;
                  RAST._IType _6980___mcc_h3710 = _source355.dtor_tpe;
                } else if (_source355.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _6981___mcc_h3713 = _source355.dtor_value;
                } else if (_source355.is_LiteralBool) {
                  bool _6982___mcc_h3715 = _source355.dtor_bvalue;
                } else if (_source355.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _6983___mcc_h3717 = _source355.dtor_value;
                  bool _6984___mcc_h3718 = _source355.dtor_binary;
                } else if (_source355.is_DeclareVar) {
                  RAST._IDeclareType _6985___mcc_h3721 = _source355.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _6986___mcc_h3722 = _source355.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _6987___mcc_h3723 = _source355.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _6988___mcc_h3724 = _source355.dtor_optRhs;
                } else if (_source355.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _6989___mcc_h3729 = _source355.dtor_names;
                  RAST._IExpr _6990___mcc_h3730 = _source355.dtor_rhs;
                } else if (_source355.is_IfExpr) {
                  RAST._IExpr _6991___mcc_h3733 = _source355.dtor_cond;
                  RAST._IExpr _6992___mcc_h3734 = _source355.dtor_thn;
                  RAST._IExpr _6993___mcc_h3735 = _source355.dtor_els;
                } else if (_source355.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _6994___mcc_h3739 = _source355.dtor_optCond;
                  RAST._IExpr _6995___mcc_h3740 = _source355.dtor_underlying;
                } else if (_source355.is_For) {
                  Dafny.ISequence<Dafny.Rune> _6996___mcc_h3743 = _source355.dtor_name;
                  RAST._IExpr _6997___mcc_h3744 = _source355.dtor_range;
                  RAST._IExpr _6998___mcc_h3745 = _source355.dtor_body;
                } else if (_source355.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _6999___mcc_h3749 = _source355.dtor_lbl;
                  RAST._IExpr _7000___mcc_h3750 = _source355.dtor_underlying;
                } else if (_source355.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7001___mcc_h3753 = _source355.dtor_optLbl;
                } else if (_source355.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7002___mcc_h3755 = _source355.dtor_optLbl;
                } else if (_source355.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7003___mcc_h3757 = _source355.dtor_optExpr;
                } else if (_source355.is_CallType) {
                  RAST._IExpr _7004___mcc_h3759 = _source355.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7005___mcc_h3760 = _source355.dtor_typeParameters;
                } else if (_source355.is_Call) {
                  RAST._IExpr _7006___mcc_h3763 = _source355.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7007___mcc_h3764 = _source355.dtor_arguments;
                } else if (_source355.is_Select) {
                  RAST._IExpr _7008___mcc_h3767 = _source355.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7009___mcc_h3768 = _source355.dtor_name;
                } else if (_source355.is_MemberSelect) {
                  RAST._IExpr _7010___mcc_h3771 = _source355.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7011___mcc_h3772 = _source355.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7012___mcc_h3775 = _source355.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7013___mcc_h3776 = _source355.dtor_retType;
                  RAST._IExpr _7014___mcc_h3777 = _source355.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_6898_field));
              if (_6897_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1844;
              DCOMP._IOwnership _out1845;
              (this).FromOwned(r, expectedOwnership, out _out1844, out _out1845);
              r = _out1844;
              resultingOwnership = _out1845;
              readIdents = _6906_recIdents;
            }
            return ;
          }
        } else if (_source324.is_MapUpdate) {
          DAST._IExpression _7015___mcc_h125 = _source324.dtor_expr;
          DAST._IExpression _7016___mcc_h126 = _source324.dtor_indexExpr;
          DAST._IExpression _7017___mcc_h127 = _source324.dtor_value;
          DAST._IType _7018_fieldType = _5052___mcc_h58;
          bool _7019_isDatatype = _5051___mcc_h57;
          bool _7020_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7021_field = _5049___mcc_h55;
          DAST._IExpression _7022_on = _5048___mcc_h54;
          {
            if (_7019_isDatatype) {
              RAST._IExpr _7023_onExpr;
              DCOMP._IOwnership _7024_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7025_recIdents;
              RAST._IExpr _out1846;
              DCOMP._IOwnership _out1847;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1848;
              (this).GenExpr(_7022_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1846, out _out1847, out _out1848);
              _7023_onExpr = _out1846;
              _7024_onOwned = _out1847;
              _7025_recIdents = _out1848;
              r = ((_7023_onExpr).Sel(DCOMP.__default.escapeName(_7021_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7026_typ;
              RAST._IType _out1849;
              _out1849 = (this).GenType(_7018_fieldType, DCOMP.GenTypeContext.@default());
              _7026_typ = _out1849;
              RAST._IExpr _out1850;
              DCOMP._IOwnership _out1851;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1850, out _out1851);
              r = _out1850;
              resultingOwnership = _out1851;
              readIdents = _7025_recIdents;
            } else {
              RAST._IExpr _7027_onExpr;
              DCOMP._IOwnership _7028_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7029_recIdents;
              RAST._IExpr _out1852;
              DCOMP._IOwnership _out1853;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1854;
              (this).GenExpr(_7022_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1852, out _out1853, out _out1854);
              _7027_onExpr = _out1852;
              _7028_onOwned = _out1853;
              _7029_recIdents = _out1854;
              r = _7027_onExpr;
              if (!object.Equals(_7027_onExpr, RAST.__default.self)) {
                RAST._IExpr _source357 = _7027_onExpr;
                if (_source357.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7030___mcc_h3781 = _source357.dtor_content;
                } else if (_source357.is_ExprFromType) {
                  RAST._IType _7031___mcc_h3783 = _source357.dtor_tpe;
                } else if (_source357.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7032___mcc_h3785 = _source357.dtor_name;
                } else if (_source357.is_Match) {
                  RAST._IExpr _7033___mcc_h3787 = _source357.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7034___mcc_h3788 = _source357.dtor_cases;
                } else if (_source357.is_StmtExpr) {
                  RAST._IExpr _7035___mcc_h3791 = _source357.dtor_stmt;
                  RAST._IExpr _7036___mcc_h3792 = _source357.dtor_rhs;
                } else if (_source357.is_Block) {
                  RAST._IExpr _7037___mcc_h3795 = _source357.dtor_underlying;
                } else if (_source357.is_StructBuild) {
                  RAST._IExpr _7038___mcc_h3797 = _source357.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7039___mcc_h3798 = _source357.dtor_assignments;
                } else if (_source357.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7040___mcc_h3801 = _source357.dtor_arguments;
                } else if (_source357.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7041___mcc_h3803 = _source357.dtor_op1;
                  RAST._IExpr _7042___mcc_h3804 = _source357.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7043___mcc_h3805 = _source357.dtor_format;
                  if (object.Equals(_7041___mcc_h3803, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source358 = _7042___mcc_h3804;
                    if (_source358.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7044___mcc_h3809 = _source358.dtor_content;
                    } else if (_source358.is_ExprFromType) {
                      RAST._IType _7045___mcc_h3811 = _source358.dtor_tpe;
                    } else if (_source358.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7046___mcc_h3813 = _source358.dtor_name;
                      if (object.Equals(_7046___mcc_h3813, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source358.is_Match) {
                      RAST._IExpr _7047___mcc_h3815 = _source358.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7048___mcc_h3816 = _source358.dtor_cases;
                    } else if (_source358.is_StmtExpr) {
                      RAST._IExpr _7049___mcc_h3819 = _source358.dtor_stmt;
                      RAST._IExpr _7050___mcc_h3820 = _source358.dtor_rhs;
                    } else if (_source358.is_Block) {
                      RAST._IExpr _7051___mcc_h3823 = _source358.dtor_underlying;
                    } else if (_source358.is_StructBuild) {
                      RAST._IExpr _7052___mcc_h3825 = _source358.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7053___mcc_h3826 = _source358.dtor_assignments;
                    } else if (_source358.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7054___mcc_h3829 = _source358.dtor_arguments;
                    } else if (_source358.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7055___mcc_h3831 = _source358.dtor_op1;
                      RAST._IExpr _7056___mcc_h3832 = _source358.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7057___mcc_h3833 = _source358.dtor_format;
                    } else if (_source358.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7058___mcc_h3837 = _source358.dtor_op2;
                      RAST._IExpr _7059___mcc_h3838 = _source358.dtor_left;
                      RAST._IExpr _7060___mcc_h3839 = _source358.dtor_right;
                      DAST.Format._IBinaryOpFormat _7061___mcc_h3840 = _source358.dtor_format2;
                    } else if (_source358.is_TypeAscription) {
                      RAST._IExpr _7062___mcc_h3845 = _source358.dtor_left;
                      RAST._IType _7063___mcc_h3846 = _source358.dtor_tpe;
                    } else if (_source358.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7064___mcc_h3849 = _source358.dtor_value;
                    } else if (_source358.is_LiteralBool) {
                      bool _7065___mcc_h3851 = _source358.dtor_bvalue;
                    } else if (_source358.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7066___mcc_h3853 = _source358.dtor_value;
                      bool _7067___mcc_h3854 = _source358.dtor_binary;
                    } else if (_source358.is_DeclareVar) {
                      RAST._IDeclareType _7068___mcc_h3857 = _source358.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7069___mcc_h3858 = _source358.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7070___mcc_h3859 = _source358.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7071___mcc_h3860 = _source358.dtor_optRhs;
                    } else if (_source358.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7072___mcc_h3865 = _source358.dtor_names;
                      RAST._IExpr _7073___mcc_h3866 = _source358.dtor_rhs;
                    } else if (_source358.is_IfExpr) {
                      RAST._IExpr _7074___mcc_h3869 = _source358.dtor_cond;
                      RAST._IExpr _7075___mcc_h3870 = _source358.dtor_thn;
                      RAST._IExpr _7076___mcc_h3871 = _source358.dtor_els;
                    } else if (_source358.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7077___mcc_h3875 = _source358.dtor_optCond;
                      RAST._IExpr _7078___mcc_h3876 = _source358.dtor_underlying;
                    } else if (_source358.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7079___mcc_h3879 = _source358.dtor_name;
                      RAST._IExpr _7080___mcc_h3880 = _source358.dtor_range;
                      RAST._IExpr _7081___mcc_h3881 = _source358.dtor_body;
                    } else if (_source358.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7082___mcc_h3885 = _source358.dtor_lbl;
                      RAST._IExpr _7083___mcc_h3886 = _source358.dtor_underlying;
                    } else if (_source358.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7084___mcc_h3889 = _source358.dtor_optLbl;
                    } else if (_source358.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7085___mcc_h3891 = _source358.dtor_optLbl;
                    } else if (_source358.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7086___mcc_h3893 = _source358.dtor_optExpr;
                    } else if (_source358.is_CallType) {
                      RAST._IExpr _7087___mcc_h3895 = _source358.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7088___mcc_h3896 = _source358.dtor_typeParameters;
                    } else if (_source358.is_Call) {
                      RAST._IExpr _7089___mcc_h3899 = _source358.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7090___mcc_h3900 = _source358.dtor_arguments;
                    } else if (_source358.is_Select) {
                      RAST._IExpr _7091___mcc_h3903 = _source358.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7092___mcc_h3904 = _source358.dtor_name;
                    } else if (_source358.is_MemberSelect) {
                      RAST._IExpr _7093___mcc_h3907 = _source358.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7094___mcc_h3908 = _source358.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7095___mcc_h3911 = _source358.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7096___mcc_h3912 = _source358.dtor_retType;
                      RAST._IExpr _7097___mcc_h3913 = _source358.dtor_body;
                    }
                  } else {
                  }
                } else if (_source357.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7098___mcc_h3917 = _source357.dtor_op2;
                  RAST._IExpr _7099___mcc_h3918 = _source357.dtor_left;
                  RAST._IExpr _7100___mcc_h3919 = _source357.dtor_right;
                  DAST.Format._IBinaryOpFormat _7101___mcc_h3920 = _source357.dtor_format2;
                } else if (_source357.is_TypeAscription) {
                  RAST._IExpr _7102___mcc_h3925 = _source357.dtor_left;
                  RAST._IType _7103___mcc_h3926 = _source357.dtor_tpe;
                } else if (_source357.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7104___mcc_h3929 = _source357.dtor_value;
                } else if (_source357.is_LiteralBool) {
                  bool _7105___mcc_h3931 = _source357.dtor_bvalue;
                } else if (_source357.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7106___mcc_h3933 = _source357.dtor_value;
                  bool _7107___mcc_h3934 = _source357.dtor_binary;
                } else if (_source357.is_DeclareVar) {
                  RAST._IDeclareType _7108___mcc_h3937 = _source357.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7109___mcc_h3938 = _source357.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7110___mcc_h3939 = _source357.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7111___mcc_h3940 = _source357.dtor_optRhs;
                } else if (_source357.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7112___mcc_h3945 = _source357.dtor_names;
                  RAST._IExpr _7113___mcc_h3946 = _source357.dtor_rhs;
                } else if (_source357.is_IfExpr) {
                  RAST._IExpr _7114___mcc_h3949 = _source357.dtor_cond;
                  RAST._IExpr _7115___mcc_h3950 = _source357.dtor_thn;
                  RAST._IExpr _7116___mcc_h3951 = _source357.dtor_els;
                } else if (_source357.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7117___mcc_h3955 = _source357.dtor_optCond;
                  RAST._IExpr _7118___mcc_h3956 = _source357.dtor_underlying;
                } else if (_source357.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7119___mcc_h3959 = _source357.dtor_name;
                  RAST._IExpr _7120___mcc_h3960 = _source357.dtor_range;
                  RAST._IExpr _7121___mcc_h3961 = _source357.dtor_body;
                } else if (_source357.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7122___mcc_h3965 = _source357.dtor_lbl;
                  RAST._IExpr _7123___mcc_h3966 = _source357.dtor_underlying;
                } else if (_source357.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7124___mcc_h3969 = _source357.dtor_optLbl;
                } else if (_source357.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7125___mcc_h3971 = _source357.dtor_optLbl;
                } else if (_source357.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7126___mcc_h3973 = _source357.dtor_optExpr;
                } else if (_source357.is_CallType) {
                  RAST._IExpr _7127___mcc_h3975 = _source357.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7128___mcc_h3976 = _source357.dtor_typeParameters;
                } else if (_source357.is_Call) {
                  RAST._IExpr _7129___mcc_h3979 = _source357.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7130___mcc_h3980 = _source357.dtor_arguments;
                } else if (_source357.is_Select) {
                  RAST._IExpr _7131___mcc_h3983 = _source357.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7132___mcc_h3984 = _source357.dtor_name;
                } else if (_source357.is_MemberSelect) {
                  RAST._IExpr _7133___mcc_h3987 = _source357.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7134___mcc_h3988 = _source357.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7135___mcc_h3991 = _source357.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7136___mcc_h3992 = _source357.dtor_retType;
                  RAST._IExpr _7137___mcc_h3993 = _source357.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7021_field));
              if (_7020_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1855;
              DCOMP._IOwnership _out1856;
              (this).FromOwned(r, expectedOwnership, out _out1855, out _out1856);
              r = _out1855;
              resultingOwnership = _out1856;
              readIdents = _7029_recIdents;
            }
            return ;
          }
        } else if (_source324.is_SetBuilder) {
          DAST._IType _7138___mcc_h131 = _source324.dtor_elemType;
          DAST._IType _7139_fieldType = _5052___mcc_h58;
          bool _7140_isDatatype = _5051___mcc_h57;
          bool _7141_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7142_field = _5049___mcc_h55;
          DAST._IExpression _7143_on = _5048___mcc_h54;
          {
            if (_7140_isDatatype) {
              RAST._IExpr _7144_onExpr;
              DCOMP._IOwnership _7145_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7146_recIdents;
              RAST._IExpr _out1857;
              DCOMP._IOwnership _out1858;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1859;
              (this).GenExpr(_7143_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1857, out _out1858, out _out1859);
              _7144_onExpr = _out1857;
              _7145_onOwned = _out1858;
              _7146_recIdents = _out1859;
              r = ((_7144_onExpr).Sel(DCOMP.__default.escapeName(_7142_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7147_typ;
              RAST._IType _out1860;
              _out1860 = (this).GenType(_7139_fieldType, DCOMP.GenTypeContext.@default());
              _7147_typ = _out1860;
              RAST._IExpr _out1861;
              DCOMP._IOwnership _out1862;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1861, out _out1862);
              r = _out1861;
              resultingOwnership = _out1862;
              readIdents = _7146_recIdents;
            } else {
              RAST._IExpr _7148_onExpr;
              DCOMP._IOwnership _7149_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7150_recIdents;
              RAST._IExpr _out1863;
              DCOMP._IOwnership _out1864;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1865;
              (this).GenExpr(_7143_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1863, out _out1864, out _out1865);
              _7148_onExpr = _out1863;
              _7149_onOwned = _out1864;
              _7150_recIdents = _out1865;
              r = _7148_onExpr;
              if (!object.Equals(_7148_onExpr, RAST.__default.self)) {
                RAST._IExpr _source359 = _7148_onExpr;
                if (_source359.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7151___mcc_h3997 = _source359.dtor_content;
                } else if (_source359.is_ExprFromType) {
                  RAST._IType _7152___mcc_h3999 = _source359.dtor_tpe;
                } else if (_source359.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7153___mcc_h4001 = _source359.dtor_name;
                } else if (_source359.is_Match) {
                  RAST._IExpr _7154___mcc_h4003 = _source359.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7155___mcc_h4004 = _source359.dtor_cases;
                } else if (_source359.is_StmtExpr) {
                  RAST._IExpr _7156___mcc_h4007 = _source359.dtor_stmt;
                  RAST._IExpr _7157___mcc_h4008 = _source359.dtor_rhs;
                } else if (_source359.is_Block) {
                  RAST._IExpr _7158___mcc_h4011 = _source359.dtor_underlying;
                } else if (_source359.is_StructBuild) {
                  RAST._IExpr _7159___mcc_h4013 = _source359.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7160___mcc_h4014 = _source359.dtor_assignments;
                } else if (_source359.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7161___mcc_h4017 = _source359.dtor_arguments;
                } else if (_source359.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7162___mcc_h4019 = _source359.dtor_op1;
                  RAST._IExpr _7163___mcc_h4020 = _source359.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7164___mcc_h4021 = _source359.dtor_format;
                  if (object.Equals(_7162___mcc_h4019, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source360 = _7163___mcc_h4020;
                    if (_source360.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7165___mcc_h4025 = _source360.dtor_content;
                    } else if (_source360.is_ExprFromType) {
                      RAST._IType _7166___mcc_h4027 = _source360.dtor_tpe;
                    } else if (_source360.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7167___mcc_h4029 = _source360.dtor_name;
                      if (object.Equals(_7167___mcc_h4029, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source360.is_Match) {
                      RAST._IExpr _7168___mcc_h4031 = _source360.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7169___mcc_h4032 = _source360.dtor_cases;
                    } else if (_source360.is_StmtExpr) {
                      RAST._IExpr _7170___mcc_h4035 = _source360.dtor_stmt;
                      RAST._IExpr _7171___mcc_h4036 = _source360.dtor_rhs;
                    } else if (_source360.is_Block) {
                      RAST._IExpr _7172___mcc_h4039 = _source360.dtor_underlying;
                    } else if (_source360.is_StructBuild) {
                      RAST._IExpr _7173___mcc_h4041 = _source360.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7174___mcc_h4042 = _source360.dtor_assignments;
                    } else if (_source360.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7175___mcc_h4045 = _source360.dtor_arguments;
                    } else if (_source360.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7176___mcc_h4047 = _source360.dtor_op1;
                      RAST._IExpr _7177___mcc_h4048 = _source360.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7178___mcc_h4049 = _source360.dtor_format;
                    } else if (_source360.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7179___mcc_h4053 = _source360.dtor_op2;
                      RAST._IExpr _7180___mcc_h4054 = _source360.dtor_left;
                      RAST._IExpr _7181___mcc_h4055 = _source360.dtor_right;
                      DAST.Format._IBinaryOpFormat _7182___mcc_h4056 = _source360.dtor_format2;
                    } else if (_source360.is_TypeAscription) {
                      RAST._IExpr _7183___mcc_h4061 = _source360.dtor_left;
                      RAST._IType _7184___mcc_h4062 = _source360.dtor_tpe;
                    } else if (_source360.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7185___mcc_h4065 = _source360.dtor_value;
                    } else if (_source360.is_LiteralBool) {
                      bool _7186___mcc_h4067 = _source360.dtor_bvalue;
                    } else if (_source360.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7187___mcc_h4069 = _source360.dtor_value;
                      bool _7188___mcc_h4070 = _source360.dtor_binary;
                    } else if (_source360.is_DeclareVar) {
                      RAST._IDeclareType _7189___mcc_h4073 = _source360.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7190___mcc_h4074 = _source360.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7191___mcc_h4075 = _source360.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7192___mcc_h4076 = _source360.dtor_optRhs;
                    } else if (_source360.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7193___mcc_h4081 = _source360.dtor_names;
                      RAST._IExpr _7194___mcc_h4082 = _source360.dtor_rhs;
                    } else if (_source360.is_IfExpr) {
                      RAST._IExpr _7195___mcc_h4085 = _source360.dtor_cond;
                      RAST._IExpr _7196___mcc_h4086 = _source360.dtor_thn;
                      RAST._IExpr _7197___mcc_h4087 = _source360.dtor_els;
                    } else if (_source360.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7198___mcc_h4091 = _source360.dtor_optCond;
                      RAST._IExpr _7199___mcc_h4092 = _source360.dtor_underlying;
                    } else if (_source360.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7200___mcc_h4095 = _source360.dtor_name;
                      RAST._IExpr _7201___mcc_h4096 = _source360.dtor_range;
                      RAST._IExpr _7202___mcc_h4097 = _source360.dtor_body;
                    } else if (_source360.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7203___mcc_h4101 = _source360.dtor_lbl;
                      RAST._IExpr _7204___mcc_h4102 = _source360.dtor_underlying;
                    } else if (_source360.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7205___mcc_h4105 = _source360.dtor_optLbl;
                    } else if (_source360.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7206___mcc_h4107 = _source360.dtor_optLbl;
                    } else if (_source360.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7207___mcc_h4109 = _source360.dtor_optExpr;
                    } else if (_source360.is_CallType) {
                      RAST._IExpr _7208___mcc_h4111 = _source360.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7209___mcc_h4112 = _source360.dtor_typeParameters;
                    } else if (_source360.is_Call) {
                      RAST._IExpr _7210___mcc_h4115 = _source360.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7211___mcc_h4116 = _source360.dtor_arguments;
                    } else if (_source360.is_Select) {
                      RAST._IExpr _7212___mcc_h4119 = _source360.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7213___mcc_h4120 = _source360.dtor_name;
                    } else if (_source360.is_MemberSelect) {
                      RAST._IExpr _7214___mcc_h4123 = _source360.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7215___mcc_h4124 = _source360.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7216___mcc_h4127 = _source360.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7217___mcc_h4128 = _source360.dtor_retType;
                      RAST._IExpr _7218___mcc_h4129 = _source360.dtor_body;
                    }
                  } else {
                  }
                } else if (_source359.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7219___mcc_h4133 = _source359.dtor_op2;
                  RAST._IExpr _7220___mcc_h4134 = _source359.dtor_left;
                  RAST._IExpr _7221___mcc_h4135 = _source359.dtor_right;
                  DAST.Format._IBinaryOpFormat _7222___mcc_h4136 = _source359.dtor_format2;
                } else if (_source359.is_TypeAscription) {
                  RAST._IExpr _7223___mcc_h4141 = _source359.dtor_left;
                  RAST._IType _7224___mcc_h4142 = _source359.dtor_tpe;
                } else if (_source359.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7225___mcc_h4145 = _source359.dtor_value;
                } else if (_source359.is_LiteralBool) {
                  bool _7226___mcc_h4147 = _source359.dtor_bvalue;
                } else if (_source359.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7227___mcc_h4149 = _source359.dtor_value;
                  bool _7228___mcc_h4150 = _source359.dtor_binary;
                } else if (_source359.is_DeclareVar) {
                  RAST._IDeclareType _7229___mcc_h4153 = _source359.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7230___mcc_h4154 = _source359.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7231___mcc_h4155 = _source359.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7232___mcc_h4156 = _source359.dtor_optRhs;
                } else if (_source359.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7233___mcc_h4161 = _source359.dtor_names;
                  RAST._IExpr _7234___mcc_h4162 = _source359.dtor_rhs;
                } else if (_source359.is_IfExpr) {
                  RAST._IExpr _7235___mcc_h4165 = _source359.dtor_cond;
                  RAST._IExpr _7236___mcc_h4166 = _source359.dtor_thn;
                  RAST._IExpr _7237___mcc_h4167 = _source359.dtor_els;
                } else if (_source359.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7238___mcc_h4171 = _source359.dtor_optCond;
                  RAST._IExpr _7239___mcc_h4172 = _source359.dtor_underlying;
                } else if (_source359.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7240___mcc_h4175 = _source359.dtor_name;
                  RAST._IExpr _7241___mcc_h4176 = _source359.dtor_range;
                  RAST._IExpr _7242___mcc_h4177 = _source359.dtor_body;
                } else if (_source359.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7243___mcc_h4181 = _source359.dtor_lbl;
                  RAST._IExpr _7244___mcc_h4182 = _source359.dtor_underlying;
                } else if (_source359.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7245___mcc_h4185 = _source359.dtor_optLbl;
                } else if (_source359.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7246___mcc_h4187 = _source359.dtor_optLbl;
                } else if (_source359.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7247___mcc_h4189 = _source359.dtor_optExpr;
                } else if (_source359.is_CallType) {
                  RAST._IExpr _7248___mcc_h4191 = _source359.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7249___mcc_h4192 = _source359.dtor_typeParameters;
                } else if (_source359.is_Call) {
                  RAST._IExpr _7250___mcc_h4195 = _source359.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7251___mcc_h4196 = _source359.dtor_arguments;
                } else if (_source359.is_Select) {
                  RAST._IExpr _7252___mcc_h4199 = _source359.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7253___mcc_h4200 = _source359.dtor_name;
                } else if (_source359.is_MemberSelect) {
                  RAST._IExpr _7254___mcc_h4203 = _source359.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7255___mcc_h4204 = _source359.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7256___mcc_h4207 = _source359.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7257___mcc_h4208 = _source359.dtor_retType;
                  RAST._IExpr _7258___mcc_h4209 = _source359.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7142_field));
              if (_7141_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1866;
              DCOMP._IOwnership _out1867;
              (this).FromOwned(r, expectedOwnership, out _out1866, out _out1867);
              r = _out1866;
              resultingOwnership = _out1867;
              readIdents = _7150_recIdents;
            }
            return ;
          }
        } else if (_source324.is_ToMultiset) {
          DAST._IExpression _7259___mcc_h133 = _source324.dtor_ToMultiset_i_a0;
          DAST._IType _7260_fieldType = _5052___mcc_h58;
          bool _7261_isDatatype = _5051___mcc_h57;
          bool _7262_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7263_field = _5049___mcc_h55;
          DAST._IExpression _7264_on = _5048___mcc_h54;
          {
            if (_7261_isDatatype) {
              RAST._IExpr _7265_onExpr;
              DCOMP._IOwnership _7266_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7267_recIdents;
              RAST._IExpr _out1868;
              DCOMP._IOwnership _out1869;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1870;
              (this).GenExpr(_7264_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1868, out _out1869, out _out1870);
              _7265_onExpr = _out1868;
              _7266_onOwned = _out1869;
              _7267_recIdents = _out1870;
              r = ((_7265_onExpr).Sel(DCOMP.__default.escapeName(_7263_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7268_typ;
              RAST._IType _out1871;
              _out1871 = (this).GenType(_7260_fieldType, DCOMP.GenTypeContext.@default());
              _7268_typ = _out1871;
              RAST._IExpr _out1872;
              DCOMP._IOwnership _out1873;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1872, out _out1873);
              r = _out1872;
              resultingOwnership = _out1873;
              readIdents = _7267_recIdents;
            } else {
              RAST._IExpr _7269_onExpr;
              DCOMP._IOwnership _7270_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7271_recIdents;
              RAST._IExpr _out1874;
              DCOMP._IOwnership _out1875;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1876;
              (this).GenExpr(_7264_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1874, out _out1875, out _out1876);
              _7269_onExpr = _out1874;
              _7270_onOwned = _out1875;
              _7271_recIdents = _out1876;
              r = _7269_onExpr;
              if (!object.Equals(_7269_onExpr, RAST.__default.self)) {
                RAST._IExpr _source361 = _7269_onExpr;
                if (_source361.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7272___mcc_h4213 = _source361.dtor_content;
                } else if (_source361.is_ExprFromType) {
                  RAST._IType _7273___mcc_h4215 = _source361.dtor_tpe;
                } else if (_source361.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7274___mcc_h4217 = _source361.dtor_name;
                } else if (_source361.is_Match) {
                  RAST._IExpr _7275___mcc_h4219 = _source361.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7276___mcc_h4220 = _source361.dtor_cases;
                } else if (_source361.is_StmtExpr) {
                  RAST._IExpr _7277___mcc_h4223 = _source361.dtor_stmt;
                  RAST._IExpr _7278___mcc_h4224 = _source361.dtor_rhs;
                } else if (_source361.is_Block) {
                  RAST._IExpr _7279___mcc_h4227 = _source361.dtor_underlying;
                } else if (_source361.is_StructBuild) {
                  RAST._IExpr _7280___mcc_h4229 = _source361.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7281___mcc_h4230 = _source361.dtor_assignments;
                } else if (_source361.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7282___mcc_h4233 = _source361.dtor_arguments;
                } else if (_source361.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7283___mcc_h4235 = _source361.dtor_op1;
                  RAST._IExpr _7284___mcc_h4236 = _source361.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7285___mcc_h4237 = _source361.dtor_format;
                  if (object.Equals(_7283___mcc_h4235, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source362 = _7284___mcc_h4236;
                    if (_source362.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7286___mcc_h4241 = _source362.dtor_content;
                    } else if (_source362.is_ExprFromType) {
                      RAST._IType _7287___mcc_h4243 = _source362.dtor_tpe;
                    } else if (_source362.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7288___mcc_h4245 = _source362.dtor_name;
                      if (object.Equals(_7288___mcc_h4245, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source362.is_Match) {
                      RAST._IExpr _7289___mcc_h4247 = _source362.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7290___mcc_h4248 = _source362.dtor_cases;
                    } else if (_source362.is_StmtExpr) {
                      RAST._IExpr _7291___mcc_h4251 = _source362.dtor_stmt;
                      RAST._IExpr _7292___mcc_h4252 = _source362.dtor_rhs;
                    } else if (_source362.is_Block) {
                      RAST._IExpr _7293___mcc_h4255 = _source362.dtor_underlying;
                    } else if (_source362.is_StructBuild) {
                      RAST._IExpr _7294___mcc_h4257 = _source362.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7295___mcc_h4258 = _source362.dtor_assignments;
                    } else if (_source362.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7296___mcc_h4261 = _source362.dtor_arguments;
                    } else if (_source362.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7297___mcc_h4263 = _source362.dtor_op1;
                      RAST._IExpr _7298___mcc_h4264 = _source362.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7299___mcc_h4265 = _source362.dtor_format;
                    } else if (_source362.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7300___mcc_h4269 = _source362.dtor_op2;
                      RAST._IExpr _7301___mcc_h4270 = _source362.dtor_left;
                      RAST._IExpr _7302___mcc_h4271 = _source362.dtor_right;
                      DAST.Format._IBinaryOpFormat _7303___mcc_h4272 = _source362.dtor_format2;
                    } else if (_source362.is_TypeAscription) {
                      RAST._IExpr _7304___mcc_h4277 = _source362.dtor_left;
                      RAST._IType _7305___mcc_h4278 = _source362.dtor_tpe;
                    } else if (_source362.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7306___mcc_h4281 = _source362.dtor_value;
                    } else if (_source362.is_LiteralBool) {
                      bool _7307___mcc_h4283 = _source362.dtor_bvalue;
                    } else if (_source362.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7308___mcc_h4285 = _source362.dtor_value;
                      bool _7309___mcc_h4286 = _source362.dtor_binary;
                    } else if (_source362.is_DeclareVar) {
                      RAST._IDeclareType _7310___mcc_h4289 = _source362.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7311___mcc_h4290 = _source362.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7312___mcc_h4291 = _source362.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7313___mcc_h4292 = _source362.dtor_optRhs;
                    } else if (_source362.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7314___mcc_h4297 = _source362.dtor_names;
                      RAST._IExpr _7315___mcc_h4298 = _source362.dtor_rhs;
                    } else if (_source362.is_IfExpr) {
                      RAST._IExpr _7316___mcc_h4301 = _source362.dtor_cond;
                      RAST._IExpr _7317___mcc_h4302 = _source362.dtor_thn;
                      RAST._IExpr _7318___mcc_h4303 = _source362.dtor_els;
                    } else if (_source362.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7319___mcc_h4307 = _source362.dtor_optCond;
                      RAST._IExpr _7320___mcc_h4308 = _source362.dtor_underlying;
                    } else if (_source362.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7321___mcc_h4311 = _source362.dtor_name;
                      RAST._IExpr _7322___mcc_h4312 = _source362.dtor_range;
                      RAST._IExpr _7323___mcc_h4313 = _source362.dtor_body;
                    } else if (_source362.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7324___mcc_h4317 = _source362.dtor_lbl;
                      RAST._IExpr _7325___mcc_h4318 = _source362.dtor_underlying;
                    } else if (_source362.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7326___mcc_h4321 = _source362.dtor_optLbl;
                    } else if (_source362.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7327___mcc_h4323 = _source362.dtor_optLbl;
                    } else if (_source362.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7328___mcc_h4325 = _source362.dtor_optExpr;
                    } else if (_source362.is_CallType) {
                      RAST._IExpr _7329___mcc_h4327 = _source362.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7330___mcc_h4328 = _source362.dtor_typeParameters;
                    } else if (_source362.is_Call) {
                      RAST._IExpr _7331___mcc_h4331 = _source362.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7332___mcc_h4332 = _source362.dtor_arguments;
                    } else if (_source362.is_Select) {
                      RAST._IExpr _7333___mcc_h4335 = _source362.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7334___mcc_h4336 = _source362.dtor_name;
                    } else if (_source362.is_MemberSelect) {
                      RAST._IExpr _7335___mcc_h4339 = _source362.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7336___mcc_h4340 = _source362.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7337___mcc_h4343 = _source362.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7338___mcc_h4344 = _source362.dtor_retType;
                      RAST._IExpr _7339___mcc_h4345 = _source362.dtor_body;
                    }
                  } else {
                  }
                } else if (_source361.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7340___mcc_h4349 = _source361.dtor_op2;
                  RAST._IExpr _7341___mcc_h4350 = _source361.dtor_left;
                  RAST._IExpr _7342___mcc_h4351 = _source361.dtor_right;
                  DAST.Format._IBinaryOpFormat _7343___mcc_h4352 = _source361.dtor_format2;
                } else if (_source361.is_TypeAscription) {
                  RAST._IExpr _7344___mcc_h4357 = _source361.dtor_left;
                  RAST._IType _7345___mcc_h4358 = _source361.dtor_tpe;
                } else if (_source361.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7346___mcc_h4361 = _source361.dtor_value;
                } else if (_source361.is_LiteralBool) {
                  bool _7347___mcc_h4363 = _source361.dtor_bvalue;
                } else if (_source361.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7348___mcc_h4365 = _source361.dtor_value;
                  bool _7349___mcc_h4366 = _source361.dtor_binary;
                } else if (_source361.is_DeclareVar) {
                  RAST._IDeclareType _7350___mcc_h4369 = _source361.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7351___mcc_h4370 = _source361.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7352___mcc_h4371 = _source361.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7353___mcc_h4372 = _source361.dtor_optRhs;
                } else if (_source361.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7354___mcc_h4377 = _source361.dtor_names;
                  RAST._IExpr _7355___mcc_h4378 = _source361.dtor_rhs;
                } else if (_source361.is_IfExpr) {
                  RAST._IExpr _7356___mcc_h4381 = _source361.dtor_cond;
                  RAST._IExpr _7357___mcc_h4382 = _source361.dtor_thn;
                  RAST._IExpr _7358___mcc_h4383 = _source361.dtor_els;
                } else if (_source361.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7359___mcc_h4387 = _source361.dtor_optCond;
                  RAST._IExpr _7360___mcc_h4388 = _source361.dtor_underlying;
                } else if (_source361.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7361___mcc_h4391 = _source361.dtor_name;
                  RAST._IExpr _7362___mcc_h4392 = _source361.dtor_range;
                  RAST._IExpr _7363___mcc_h4393 = _source361.dtor_body;
                } else if (_source361.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7364___mcc_h4397 = _source361.dtor_lbl;
                  RAST._IExpr _7365___mcc_h4398 = _source361.dtor_underlying;
                } else if (_source361.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7366___mcc_h4401 = _source361.dtor_optLbl;
                } else if (_source361.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7367___mcc_h4403 = _source361.dtor_optLbl;
                } else if (_source361.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7368___mcc_h4405 = _source361.dtor_optExpr;
                } else if (_source361.is_CallType) {
                  RAST._IExpr _7369___mcc_h4407 = _source361.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7370___mcc_h4408 = _source361.dtor_typeParameters;
                } else if (_source361.is_Call) {
                  RAST._IExpr _7371___mcc_h4411 = _source361.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7372___mcc_h4412 = _source361.dtor_arguments;
                } else if (_source361.is_Select) {
                  RAST._IExpr _7373___mcc_h4415 = _source361.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7374___mcc_h4416 = _source361.dtor_name;
                } else if (_source361.is_MemberSelect) {
                  RAST._IExpr _7375___mcc_h4419 = _source361.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7376___mcc_h4420 = _source361.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7377___mcc_h4423 = _source361.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7378___mcc_h4424 = _source361.dtor_retType;
                  RAST._IExpr _7379___mcc_h4425 = _source361.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7263_field));
              if (_7262_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1877;
              DCOMP._IOwnership _out1878;
              (this).FromOwned(r, expectedOwnership, out _out1877, out _out1878);
              r = _out1877;
              resultingOwnership = _out1878;
              readIdents = _7271_recIdents;
            }
            return ;
          }
        } else if (_source324.is_This) {
          DAST._IType _7380_fieldType = _5052___mcc_h58;
          bool _7381_isDatatype = _5051___mcc_h57;
          bool _7382_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7383_field = _5049___mcc_h55;
          DAST._IExpression _7384_on = _5048___mcc_h54;
          {
            if (_7381_isDatatype) {
              RAST._IExpr _7385_onExpr;
              DCOMP._IOwnership _7386_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7387_recIdents;
              RAST._IExpr _out1879;
              DCOMP._IOwnership _out1880;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1881;
              (this).GenExpr(_7384_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1879, out _out1880, out _out1881);
              _7385_onExpr = _out1879;
              _7386_onOwned = _out1880;
              _7387_recIdents = _out1881;
              r = ((_7385_onExpr).Sel(DCOMP.__default.escapeName(_7383_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7388_typ;
              RAST._IType _out1882;
              _out1882 = (this).GenType(_7380_fieldType, DCOMP.GenTypeContext.@default());
              _7388_typ = _out1882;
              RAST._IExpr _out1883;
              DCOMP._IOwnership _out1884;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1883, out _out1884);
              r = _out1883;
              resultingOwnership = _out1884;
              readIdents = _7387_recIdents;
            } else {
              RAST._IExpr _7389_onExpr;
              DCOMP._IOwnership _7390_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7391_recIdents;
              RAST._IExpr _out1885;
              DCOMP._IOwnership _out1886;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1887;
              (this).GenExpr(_7384_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1885, out _out1886, out _out1887);
              _7389_onExpr = _out1885;
              _7390_onOwned = _out1886;
              _7391_recIdents = _out1887;
              r = _7389_onExpr;
              if (!object.Equals(_7389_onExpr, RAST.__default.self)) {
                RAST._IExpr _source363 = _7389_onExpr;
                if (_source363.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7392___mcc_h4429 = _source363.dtor_content;
                } else if (_source363.is_ExprFromType) {
                  RAST._IType _7393___mcc_h4431 = _source363.dtor_tpe;
                } else if (_source363.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7394___mcc_h4433 = _source363.dtor_name;
                } else if (_source363.is_Match) {
                  RAST._IExpr _7395___mcc_h4435 = _source363.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7396___mcc_h4436 = _source363.dtor_cases;
                } else if (_source363.is_StmtExpr) {
                  RAST._IExpr _7397___mcc_h4439 = _source363.dtor_stmt;
                  RAST._IExpr _7398___mcc_h4440 = _source363.dtor_rhs;
                } else if (_source363.is_Block) {
                  RAST._IExpr _7399___mcc_h4443 = _source363.dtor_underlying;
                } else if (_source363.is_StructBuild) {
                  RAST._IExpr _7400___mcc_h4445 = _source363.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7401___mcc_h4446 = _source363.dtor_assignments;
                } else if (_source363.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7402___mcc_h4449 = _source363.dtor_arguments;
                } else if (_source363.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7403___mcc_h4451 = _source363.dtor_op1;
                  RAST._IExpr _7404___mcc_h4452 = _source363.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7405___mcc_h4453 = _source363.dtor_format;
                  if (object.Equals(_7403___mcc_h4451, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source364 = _7404___mcc_h4452;
                    if (_source364.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7406___mcc_h4457 = _source364.dtor_content;
                    } else if (_source364.is_ExprFromType) {
                      RAST._IType _7407___mcc_h4459 = _source364.dtor_tpe;
                    } else if (_source364.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7408___mcc_h4461 = _source364.dtor_name;
                      if (object.Equals(_7408___mcc_h4461, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source364.is_Match) {
                      RAST._IExpr _7409___mcc_h4463 = _source364.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7410___mcc_h4464 = _source364.dtor_cases;
                    } else if (_source364.is_StmtExpr) {
                      RAST._IExpr _7411___mcc_h4467 = _source364.dtor_stmt;
                      RAST._IExpr _7412___mcc_h4468 = _source364.dtor_rhs;
                    } else if (_source364.is_Block) {
                      RAST._IExpr _7413___mcc_h4471 = _source364.dtor_underlying;
                    } else if (_source364.is_StructBuild) {
                      RAST._IExpr _7414___mcc_h4473 = _source364.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7415___mcc_h4474 = _source364.dtor_assignments;
                    } else if (_source364.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7416___mcc_h4477 = _source364.dtor_arguments;
                    } else if (_source364.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7417___mcc_h4479 = _source364.dtor_op1;
                      RAST._IExpr _7418___mcc_h4480 = _source364.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7419___mcc_h4481 = _source364.dtor_format;
                    } else if (_source364.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7420___mcc_h4485 = _source364.dtor_op2;
                      RAST._IExpr _7421___mcc_h4486 = _source364.dtor_left;
                      RAST._IExpr _7422___mcc_h4487 = _source364.dtor_right;
                      DAST.Format._IBinaryOpFormat _7423___mcc_h4488 = _source364.dtor_format2;
                    } else if (_source364.is_TypeAscription) {
                      RAST._IExpr _7424___mcc_h4493 = _source364.dtor_left;
                      RAST._IType _7425___mcc_h4494 = _source364.dtor_tpe;
                    } else if (_source364.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7426___mcc_h4497 = _source364.dtor_value;
                    } else if (_source364.is_LiteralBool) {
                      bool _7427___mcc_h4499 = _source364.dtor_bvalue;
                    } else if (_source364.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7428___mcc_h4501 = _source364.dtor_value;
                      bool _7429___mcc_h4502 = _source364.dtor_binary;
                    } else if (_source364.is_DeclareVar) {
                      RAST._IDeclareType _7430___mcc_h4505 = _source364.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7431___mcc_h4506 = _source364.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7432___mcc_h4507 = _source364.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7433___mcc_h4508 = _source364.dtor_optRhs;
                    } else if (_source364.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7434___mcc_h4513 = _source364.dtor_names;
                      RAST._IExpr _7435___mcc_h4514 = _source364.dtor_rhs;
                    } else if (_source364.is_IfExpr) {
                      RAST._IExpr _7436___mcc_h4517 = _source364.dtor_cond;
                      RAST._IExpr _7437___mcc_h4518 = _source364.dtor_thn;
                      RAST._IExpr _7438___mcc_h4519 = _source364.dtor_els;
                    } else if (_source364.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7439___mcc_h4523 = _source364.dtor_optCond;
                      RAST._IExpr _7440___mcc_h4524 = _source364.dtor_underlying;
                    } else if (_source364.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7441___mcc_h4527 = _source364.dtor_name;
                      RAST._IExpr _7442___mcc_h4528 = _source364.dtor_range;
                      RAST._IExpr _7443___mcc_h4529 = _source364.dtor_body;
                    } else if (_source364.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7444___mcc_h4533 = _source364.dtor_lbl;
                      RAST._IExpr _7445___mcc_h4534 = _source364.dtor_underlying;
                    } else if (_source364.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7446___mcc_h4537 = _source364.dtor_optLbl;
                    } else if (_source364.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7447___mcc_h4539 = _source364.dtor_optLbl;
                    } else if (_source364.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7448___mcc_h4541 = _source364.dtor_optExpr;
                    } else if (_source364.is_CallType) {
                      RAST._IExpr _7449___mcc_h4543 = _source364.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7450___mcc_h4544 = _source364.dtor_typeParameters;
                    } else if (_source364.is_Call) {
                      RAST._IExpr _7451___mcc_h4547 = _source364.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7452___mcc_h4548 = _source364.dtor_arguments;
                    } else if (_source364.is_Select) {
                      RAST._IExpr _7453___mcc_h4551 = _source364.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7454___mcc_h4552 = _source364.dtor_name;
                    } else if (_source364.is_MemberSelect) {
                      RAST._IExpr _7455___mcc_h4555 = _source364.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7456___mcc_h4556 = _source364.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7457___mcc_h4559 = _source364.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7458___mcc_h4560 = _source364.dtor_retType;
                      RAST._IExpr _7459___mcc_h4561 = _source364.dtor_body;
                    }
                  } else {
                  }
                } else if (_source363.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7460___mcc_h4565 = _source363.dtor_op2;
                  RAST._IExpr _7461___mcc_h4566 = _source363.dtor_left;
                  RAST._IExpr _7462___mcc_h4567 = _source363.dtor_right;
                  DAST.Format._IBinaryOpFormat _7463___mcc_h4568 = _source363.dtor_format2;
                } else if (_source363.is_TypeAscription) {
                  RAST._IExpr _7464___mcc_h4573 = _source363.dtor_left;
                  RAST._IType _7465___mcc_h4574 = _source363.dtor_tpe;
                } else if (_source363.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7466___mcc_h4577 = _source363.dtor_value;
                } else if (_source363.is_LiteralBool) {
                  bool _7467___mcc_h4579 = _source363.dtor_bvalue;
                } else if (_source363.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7468___mcc_h4581 = _source363.dtor_value;
                  bool _7469___mcc_h4582 = _source363.dtor_binary;
                } else if (_source363.is_DeclareVar) {
                  RAST._IDeclareType _7470___mcc_h4585 = _source363.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7471___mcc_h4586 = _source363.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7472___mcc_h4587 = _source363.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7473___mcc_h4588 = _source363.dtor_optRhs;
                } else if (_source363.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7474___mcc_h4593 = _source363.dtor_names;
                  RAST._IExpr _7475___mcc_h4594 = _source363.dtor_rhs;
                } else if (_source363.is_IfExpr) {
                  RAST._IExpr _7476___mcc_h4597 = _source363.dtor_cond;
                  RAST._IExpr _7477___mcc_h4598 = _source363.dtor_thn;
                  RAST._IExpr _7478___mcc_h4599 = _source363.dtor_els;
                } else if (_source363.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7479___mcc_h4603 = _source363.dtor_optCond;
                  RAST._IExpr _7480___mcc_h4604 = _source363.dtor_underlying;
                } else if (_source363.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7481___mcc_h4607 = _source363.dtor_name;
                  RAST._IExpr _7482___mcc_h4608 = _source363.dtor_range;
                  RAST._IExpr _7483___mcc_h4609 = _source363.dtor_body;
                } else if (_source363.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7484___mcc_h4613 = _source363.dtor_lbl;
                  RAST._IExpr _7485___mcc_h4614 = _source363.dtor_underlying;
                } else if (_source363.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7486___mcc_h4617 = _source363.dtor_optLbl;
                } else if (_source363.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7487___mcc_h4619 = _source363.dtor_optLbl;
                } else if (_source363.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7488___mcc_h4621 = _source363.dtor_optExpr;
                } else if (_source363.is_CallType) {
                  RAST._IExpr _7489___mcc_h4623 = _source363.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7490___mcc_h4624 = _source363.dtor_typeParameters;
                } else if (_source363.is_Call) {
                  RAST._IExpr _7491___mcc_h4627 = _source363.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7492___mcc_h4628 = _source363.dtor_arguments;
                } else if (_source363.is_Select) {
                  RAST._IExpr _7493___mcc_h4631 = _source363.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7494___mcc_h4632 = _source363.dtor_name;
                } else if (_source363.is_MemberSelect) {
                  RAST._IExpr _7495___mcc_h4635 = _source363.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7496___mcc_h4636 = _source363.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7497___mcc_h4639 = _source363.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7498___mcc_h4640 = _source363.dtor_retType;
                  RAST._IExpr _7499___mcc_h4641 = _source363.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7383_field));
              if (_7382_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1888;
              DCOMP._IOwnership _out1889;
              (this).FromOwned(r, expectedOwnership, out _out1888, out _out1889);
              r = _out1888;
              resultingOwnership = _out1889;
              readIdents = _7391_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Ite) {
          DAST._IExpression _7500___mcc_h135 = _source324.dtor_cond;
          DAST._IExpression _7501___mcc_h136 = _source324.dtor_thn;
          DAST._IExpression _7502___mcc_h137 = _source324.dtor_els;
          DAST._IType _7503_fieldType = _5052___mcc_h58;
          bool _7504_isDatatype = _5051___mcc_h57;
          bool _7505_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7506_field = _5049___mcc_h55;
          DAST._IExpression _7507_on = _5048___mcc_h54;
          {
            if (_7504_isDatatype) {
              RAST._IExpr _7508_onExpr;
              DCOMP._IOwnership _7509_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7510_recIdents;
              RAST._IExpr _out1890;
              DCOMP._IOwnership _out1891;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1892;
              (this).GenExpr(_7507_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1890, out _out1891, out _out1892);
              _7508_onExpr = _out1890;
              _7509_onOwned = _out1891;
              _7510_recIdents = _out1892;
              r = ((_7508_onExpr).Sel(DCOMP.__default.escapeName(_7506_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7511_typ;
              RAST._IType _out1893;
              _out1893 = (this).GenType(_7503_fieldType, DCOMP.GenTypeContext.@default());
              _7511_typ = _out1893;
              RAST._IExpr _out1894;
              DCOMP._IOwnership _out1895;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1894, out _out1895);
              r = _out1894;
              resultingOwnership = _out1895;
              readIdents = _7510_recIdents;
            } else {
              RAST._IExpr _7512_onExpr;
              DCOMP._IOwnership _7513_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7514_recIdents;
              RAST._IExpr _out1896;
              DCOMP._IOwnership _out1897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1898;
              (this).GenExpr(_7507_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1896, out _out1897, out _out1898);
              _7512_onExpr = _out1896;
              _7513_onOwned = _out1897;
              _7514_recIdents = _out1898;
              r = _7512_onExpr;
              if (!object.Equals(_7512_onExpr, RAST.__default.self)) {
                RAST._IExpr _source365 = _7512_onExpr;
                if (_source365.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7515___mcc_h4645 = _source365.dtor_content;
                } else if (_source365.is_ExprFromType) {
                  RAST._IType _7516___mcc_h4647 = _source365.dtor_tpe;
                } else if (_source365.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7517___mcc_h4649 = _source365.dtor_name;
                } else if (_source365.is_Match) {
                  RAST._IExpr _7518___mcc_h4651 = _source365.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7519___mcc_h4652 = _source365.dtor_cases;
                } else if (_source365.is_StmtExpr) {
                  RAST._IExpr _7520___mcc_h4655 = _source365.dtor_stmt;
                  RAST._IExpr _7521___mcc_h4656 = _source365.dtor_rhs;
                } else if (_source365.is_Block) {
                  RAST._IExpr _7522___mcc_h4659 = _source365.dtor_underlying;
                } else if (_source365.is_StructBuild) {
                  RAST._IExpr _7523___mcc_h4661 = _source365.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7524___mcc_h4662 = _source365.dtor_assignments;
                } else if (_source365.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7525___mcc_h4665 = _source365.dtor_arguments;
                } else if (_source365.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7526___mcc_h4667 = _source365.dtor_op1;
                  RAST._IExpr _7527___mcc_h4668 = _source365.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7528___mcc_h4669 = _source365.dtor_format;
                  if (object.Equals(_7526___mcc_h4667, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source366 = _7527___mcc_h4668;
                    if (_source366.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7529___mcc_h4673 = _source366.dtor_content;
                    } else if (_source366.is_ExprFromType) {
                      RAST._IType _7530___mcc_h4675 = _source366.dtor_tpe;
                    } else if (_source366.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7531___mcc_h4677 = _source366.dtor_name;
                      if (object.Equals(_7531___mcc_h4677, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source366.is_Match) {
                      RAST._IExpr _7532___mcc_h4679 = _source366.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7533___mcc_h4680 = _source366.dtor_cases;
                    } else if (_source366.is_StmtExpr) {
                      RAST._IExpr _7534___mcc_h4683 = _source366.dtor_stmt;
                      RAST._IExpr _7535___mcc_h4684 = _source366.dtor_rhs;
                    } else if (_source366.is_Block) {
                      RAST._IExpr _7536___mcc_h4687 = _source366.dtor_underlying;
                    } else if (_source366.is_StructBuild) {
                      RAST._IExpr _7537___mcc_h4689 = _source366.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7538___mcc_h4690 = _source366.dtor_assignments;
                    } else if (_source366.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7539___mcc_h4693 = _source366.dtor_arguments;
                    } else if (_source366.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7540___mcc_h4695 = _source366.dtor_op1;
                      RAST._IExpr _7541___mcc_h4696 = _source366.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7542___mcc_h4697 = _source366.dtor_format;
                    } else if (_source366.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7543___mcc_h4701 = _source366.dtor_op2;
                      RAST._IExpr _7544___mcc_h4702 = _source366.dtor_left;
                      RAST._IExpr _7545___mcc_h4703 = _source366.dtor_right;
                      DAST.Format._IBinaryOpFormat _7546___mcc_h4704 = _source366.dtor_format2;
                    } else if (_source366.is_TypeAscription) {
                      RAST._IExpr _7547___mcc_h4709 = _source366.dtor_left;
                      RAST._IType _7548___mcc_h4710 = _source366.dtor_tpe;
                    } else if (_source366.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7549___mcc_h4713 = _source366.dtor_value;
                    } else if (_source366.is_LiteralBool) {
                      bool _7550___mcc_h4715 = _source366.dtor_bvalue;
                    } else if (_source366.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7551___mcc_h4717 = _source366.dtor_value;
                      bool _7552___mcc_h4718 = _source366.dtor_binary;
                    } else if (_source366.is_DeclareVar) {
                      RAST._IDeclareType _7553___mcc_h4721 = _source366.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7554___mcc_h4722 = _source366.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7555___mcc_h4723 = _source366.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7556___mcc_h4724 = _source366.dtor_optRhs;
                    } else if (_source366.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7557___mcc_h4729 = _source366.dtor_names;
                      RAST._IExpr _7558___mcc_h4730 = _source366.dtor_rhs;
                    } else if (_source366.is_IfExpr) {
                      RAST._IExpr _7559___mcc_h4733 = _source366.dtor_cond;
                      RAST._IExpr _7560___mcc_h4734 = _source366.dtor_thn;
                      RAST._IExpr _7561___mcc_h4735 = _source366.dtor_els;
                    } else if (_source366.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7562___mcc_h4739 = _source366.dtor_optCond;
                      RAST._IExpr _7563___mcc_h4740 = _source366.dtor_underlying;
                    } else if (_source366.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7564___mcc_h4743 = _source366.dtor_name;
                      RAST._IExpr _7565___mcc_h4744 = _source366.dtor_range;
                      RAST._IExpr _7566___mcc_h4745 = _source366.dtor_body;
                    } else if (_source366.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7567___mcc_h4749 = _source366.dtor_lbl;
                      RAST._IExpr _7568___mcc_h4750 = _source366.dtor_underlying;
                    } else if (_source366.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7569___mcc_h4753 = _source366.dtor_optLbl;
                    } else if (_source366.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7570___mcc_h4755 = _source366.dtor_optLbl;
                    } else if (_source366.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7571___mcc_h4757 = _source366.dtor_optExpr;
                    } else if (_source366.is_CallType) {
                      RAST._IExpr _7572___mcc_h4759 = _source366.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7573___mcc_h4760 = _source366.dtor_typeParameters;
                    } else if (_source366.is_Call) {
                      RAST._IExpr _7574___mcc_h4763 = _source366.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7575___mcc_h4764 = _source366.dtor_arguments;
                    } else if (_source366.is_Select) {
                      RAST._IExpr _7576___mcc_h4767 = _source366.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7577___mcc_h4768 = _source366.dtor_name;
                    } else if (_source366.is_MemberSelect) {
                      RAST._IExpr _7578___mcc_h4771 = _source366.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7579___mcc_h4772 = _source366.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7580___mcc_h4775 = _source366.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7581___mcc_h4776 = _source366.dtor_retType;
                      RAST._IExpr _7582___mcc_h4777 = _source366.dtor_body;
                    }
                  } else {
                  }
                } else if (_source365.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7583___mcc_h4781 = _source365.dtor_op2;
                  RAST._IExpr _7584___mcc_h4782 = _source365.dtor_left;
                  RAST._IExpr _7585___mcc_h4783 = _source365.dtor_right;
                  DAST.Format._IBinaryOpFormat _7586___mcc_h4784 = _source365.dtor_format2;
                } else if (_source365.is_TypeAscription) {
                  RAST._IExpr _7587___mcc_h4789 = _source365.dtor_left;
                  RAST._IType _7588___mcc_h4790 = _source365.dtor_tpe;
                } else if (_source365.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7589___mcc_h4793 = _source365.dtor_value;
                } else if (_source365.is_LiteralBool) {
                  bool _7590___mcc_h4795 = _source365.dtor_bvalue;
                } else if (_source365.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7591___mcc_h4797 = _source365.dtor_value;
                  bool _7592___mcc_h4798 = _source365.dtor_binary;
                } else if (_source365.is_DeclareVar) {
                  RAST._IDeclareType _7593___mcc_h4801 = _source365.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7594___mcc_h4802 = _source365.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7595___mcc_h4803 = _source365.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7596___mcc_h4804 = _source365.dtor_optRhs;
                } else if (_source365.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7597___mcc_h4809 = _source365.dtor_names;
                  RAST._IExpr _7598___mcc_h4810 = _source365.dtor_rhs;
                } else if (_source365.is_IfExpr) {
                  RAST._IExpr _7599___mcc_h4813 = _source365.dtor_cond;
                  RAST._IExpr _7600___mcc_h4814 = _source365.dtor_thn;
                  RAST._IExpr _7601___mcc_h4815 = _source365.dtor_els;
                } else if (_source365.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7602___mcc_h4819 = _source365.dtor_optCond;
                  RAST._IExpr _7603___mcc_h4820 = _source365.dtor_underlying;
                } else if (_source365.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7604___mcc_h4823 = _source365.dtor_name;
                  RAST._IExpr _7605___mcc_h4824 = _source365.dtor_range;
                  RAST._IExpr _7606___mcc_h4825 = _source365.dtor_body;
                } else if (_source365.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7607___mcc_h4829 = _source365.dtor_lbl;
                  RAST._IExpr _7608___mcc_h4830 = _source365.dtor_underlying;
                } else if (_source365.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7609___mcc_h4833 = _source365.dtor_optLbl;
                } else if (_source365.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7610___mcc_h4835 = _source365.dtor_optLbl;
                } else if (_source365.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7611___mcc_h4837 = _source365.dtor_optExpr;
                } else if (_source365.is_CallType) {
                  RAST._IExpr _7612___mcc_h4839 = _source365.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7613___mcc_h4840 = _source365.dtor_typeParameters;
                } else if (_source365.is_Call) {
                  RAST._IExpr _7614___mcc_h4843 = _source365.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7615___mcc_h4844 = _source365.dtor_arguments;
                } else if (_source365.is_Select) {
                  RAST._IExpr _7616___mcc_h4847 = _source365.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7617___mcc_h4848 = _source365.dtor_name;
                } else if (_source365.is_MemberSelect) {
                  RAST._IExpr _7618___mcc_h4851 = _source365.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7619___mcc_h4852 = _source365.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7620___mcc_h4855 = _source365.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7621___mcc_h4856 = _source365.dtor_retType;
                  RAST._IExpr _7622___mcc_h4857 = _source365.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7506_field));
              if (_7505_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1899;
              DCOMP._IOwnership _out1900;
              (this).FromOwned(r, expectedOwnership, out _out1899, out _out1900);
              r = _out1899;
              resultingOwnership = _out1900;
              readIdents = _7514_recIdents;
            }
            return ;
          }
        } else if (_source324.is_UnOp) {
          DAST._IUnaryOp _7623___mcc_h141 = _source324.dtor_unOp;
          DAST._IExpression _7624___mcc_h142 = _source324.dtor_expr;
          DAST.Format._IUnaryOpFormat _7625___mcc_h143 = _source324.dtor_format1;
          DAST._IType _7626_fieldType = _5052___mcc_h58;
          bool _7627_isDatatype = _5051___mcc_h57;
          bool _7628_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7629_field = _5049___mcc_h55;
          DAST._IExpression _7630_on = _5048___mcc_h54;
          {
            if (_7627_isDatatype) {
              RAST._IExpr _7631_onExpr;
              DCOMP._IOwnership _7632_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7633_recIdents;
              RAST._IExpr _out1901;
              DCOMP._IOwnership _out1902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1903;
              (this).GenExpr(_7630_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1901, out _out1902, out _out1903);
              _7631_onExpr = _out1901;
              _7632_onOwned = _out1902;
              _7633_recIdents = _out1903;
              r = ((_7631_onExpr).Sel(DCOMP.__default.escapeName(_7629_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7634_typ;
              RAST._IType _out1904;
              _out1904 = (this).GenType(_7626_fieldType, DCOMP.GenTypeContext.@default());
              _7634_typ = _out1904;
              RAST._IExpr _out1905;
              DCOMP._IOwnership _out1906;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1905, out _out1906);
              r = _out1905;
              resultingOwnership = _out1906;
              readIdents = _7633_recIdents;
            } else {
              RAST._IExpr _7635_onExpr;
              DCOMP._IOwnership _7636_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7637_recIdents;
              RAST._IExpr _out1907;
              DCOMP._IOwnership _out1908;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1909;
              (this).GenExpr(_7630_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1907, out _out1908, out _out1909);
              _7635_onExpr = _out1907;
              _7636_onOwned = _out1908;
              _7637_recIdents = _out1909;
              r = _7635_onExpr;
              if (!object.Equals(_7635_onExpr, RAST.__default.self)) {
                RAST._IExpr _source367 = _7635_onExpr;
                if (_source367.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7638___mcc_h4861 = _source367.dtor_content;
                } else if (_source367.is_ExprFromType) {
                  RAST._IType _7639___mcc_h4863 = _source367.dtor_tpe;
                } else if (_source367.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7640___mcc_h4865 = _source367.dtor_name;
                } else if (_source367.is_Match) {
                  RAST._IExpr _7641___mcc_h4867 = _source367.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7642___mcc_h4868 = _source367.dtor_cases;
                } else if (_source367.is_StmtExpr) {
                  RAST._IExpr _7643___mcc_h4871 = _source367.dtor_stmt;
                  RAST._IExpr _7644___mcc_h4872 = _source367.dtor_rhs;
                } else if (_source367.is_Block) {
                  RAST._IExpr _7645___mcc_h4875 = _source367.dtor_underlying;
                } else if (_source367.is_StructBuild) {
                  RAST._IExpr _7646___mcc_h4877 = _source367.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7647___mcc_h4878 = _source367.dtor_assignments;
                } else if (_source367.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7648___mcc_h4881 = _source367.dtor_arguments;
                } else if (_source367.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7649___mcc_h4883 = _source367.dtor_op1;
                  RAST._IExpr _7650___mcc_h4884 = _source367.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7651___mcc_h4885 = _source367.dtor_format;
                  if (object.Equals(_7649___mcc_h4883, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source368 = _7650___mcc_h4884;
                    if (_source368.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7652___mcc_h4889 = _source368.dtor_content;
                    } else if (_source368.is_ExprFromType) {
                      RAST._IType _7653___mcc_h4891 = _source368.dtor_tpe;
                    } else if (_source368.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7654___mcc_h4893 = _source368.dtor_name;
                      if (object.Equals(_7654___mcc_h4893, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source368.is_Match) {
                      RAST._IExpr _7655___mcc_h4895 = _source368.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7656___mcc_h4896 = _source368.dtor_cases;
                    } else if (_source368.is_StmtExpr) {
                      RAST._IExpr _7657___mcc_h4899 = _source368.dtor_stmt;
                      RAST._IExpr _7658___mcc_h4900 = _source368.dtor_rhs;
                    } else if (_source368.is_Block) {
                      RAST._IExpr _7659___mcc_h4903 = _source368.dtor_underlying;
                    } else if (_source368.is_StructBuild) {
                      RAST._IExpr _7660___mcc_h4905 = _source368.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7661___mcc_h4906 = _source368.dtor_assignments;
                    } else if (_source368.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7662___mcc_h4909 = _source368.dtor_arguments;
                    } else if (_source368.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7663___mcc_h4911 = _source368.dtor_op1;
                      RAST._IExpr _7664___mcc_h4912 = _source368.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7665___mcc_h4913 = _source368.dtor_format;
                    } else if (_source368.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7666___mcc_h4917 = _source368.dtor_op2;
                      RAST._IExpr _7667___mcc_h4918 = _source368.dtor_left;
                      RAST._IExpr _7668___mcc_h4919 = _source368.dtor_right;
                      DAST.Format._IBinaryOpFormat _7669___mcc_h4920 = _source368.dtor_format2;
                    } else if (_source368.is_TypeAscription) {
                      RAST._IExpr _7670___mcc_h4925 = _source368.dtor_left;
                      RAST._IType _7671___mcc_h4926 = _source368.dtor_tpe;
                    } else if (_source368.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7672___mcc_h4929 = _source368.dtor_value;
                    } else if (_source368.is_LiteralBool) {
                      bool _7673___mcc_h4931 = _source368.dtor_bvalue;
                    } else if (_source368.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7674___mcc_h4933 = _source368.dtor_value;
                      bool _7675___mcc_h4934 = _source368.dtor_binary;
                    } else if (_source368.is_DeclareVar) {
                      RAST._IDeclareType _7676___mcc_h4937 = _source368.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7677___mcc_h4938 = _source368.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7678___mcc_h4939 = _source368.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7679___mcc_h4940 = _source368.dtor_optRhs;
                    } else if (_source368.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7680___mcc_h4945 = _source368.dtor_names;
                      RAST._IExpr _7681___mcc_h4946 = _source368.dtor_rhs;
                    } else if (_source368.is_IfExpr) {
                      RAST._IExpr _7682___mcc_h4949 = _source368.dtor_cond;
                      RAST._IExpr _7683___mcc_h4950 = _source368.dtor_thn;
                      RAST._IExpr _7684___mcc_h4951 = _source368.dtor_els;
                    } else if (_source368.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7685___mcc_h4955 = _source368.dtor_optCond;
                      RAST._IExpr _7686___mcc_h4956 = _source368.dtor_underlying;
                    } else if (_source368.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7687___mcc_h4959 = _source368.dtor_name;
                      RAST._IExpr _7688___mcc_h4960 = _source368.dtor_range;
                      RAST._IExpr _7689___mcc_h4961 = _source368.dtor_body;
                    } else if (_source368.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7690___mcc_h4965 = _source368.dtor_lbl;
                      RAST._IExpr _7691___mcc_h4966 = _source368.dtor_underlying;
                    } else if (_source368.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7692___mcc_h4969 = _source368.dtor_optLbl;
                    } else if (_source368.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7693___mcc_h4971 = _source368.dtor_optLbl;
                    } else if (_source368.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7694___mcc_h4973 = _source368.dtor_optExpr;
                    } else if (_source368.is_CallType) {
                      RAST._IExpr _7695___mcc_h4975 = _source368.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7696___mcc_h4976 = _source368.dtor_typeParameters;
                    } else if (_source368.is_Call) {
                      RAST._IExpr _7697___mcc_h4979 = _source368.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7698___mcc_h4980 = _source368.dtor_arguments;
                    } else if (_source368.is_Select) {
                      RAST._IExpr _7699___mcc_h4983 = _source368.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7700___mcc_h4984 = _source368.dtor_name;
                    } else if (_source368.is_MemberSelect) {
                      RAST._IExpr _7701___mcc_h4987 = _source368.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7702___mcc_h4988 = _source368.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7703___mcc_h4991 = _source368.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7704___mcc_h4992 = _source368.dtor_retType;
                      RAST._IExpr _7705___mcc_h4993 = _source368.dtor_body;
                    }
                  } else {
                  }
                } else if (_source367.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7706___mcc_h4997 = _source367.dtor_op2;
                  RAST._IExpr _7707___mcc_h4998 = _source367.dtor_left;
                  RAST._IExpr _7708___mcc_h4999 = _source367.dtor_right;
                  DAST.Format._IBinaryOpFormat _7709___mcc_h5000 = _source367.dtor_format2;
                } else if (_source367.is_TypeAscription) {
                  RAST._IExpr _7710___mcc_h5005 = _source367.dtor_left;
                  RAST._IType _7711___mcc_h5006 = _source367.dtor_tpe;
                } else if (_source367.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7712___mcc_h5009 = _source367.dtor_value;
                } else if (_source367.is_LiteralBool) {
                  bool _7713___mcc_h5011 = _source367.dtor_bvalue;
                } else if (_source367.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7714___mcc_h5013 = _source367.dtor_value;
                  bool _7715___mcc_h5014 = _source367.dtor_binary;
                } else if (_source367.is_DeclareVar) {
                  RAST._IDeclareType _7716___mcc_h5017 = _source367.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7717___mcc_h5018 = _source367.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7718___mcc_h5019 = _source367.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7719___mcc_h5020 = _source367.dtor_optRhs;
                } else if (_source367.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7720___mcc_h5025 = _source367.dtor_names;
                  RAST._IExpr _7721___mcc_h5026 = _source367.dtor_rhs;
                } else if (_source367.is_IfExpr) {
                  RAST._IExpr _7722___mcc_h5029 = _source367.dtor_cond;
                  RAST._IExpr _7723___mcc_h5030 = _source367.dtor_thn;
                  RAST._IExpr _7724___mcc_h5031 = _source367.dtor_els;
                } else if (_source367.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7725___mcc_h5035 = _source367.dtor_optCond;
                  RAST._IExpr _7726___mcc_h5036 = _source367.dtor_underlying;
                } else if (_source367.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7727___mcc_h5039 = _source367.dtor_name;
                  RAST._IExpr _7728___mcc_h5040 = _source367.dtor_range;
                  RAST._IExpr _7729___mcc_h5041 = _source367.dtor_body;
                } else if (_source367.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7730___mcc_h5045 = _source367.dtor_lbl;
                  RAST._IExpr _7731___mcc_h5046 = _source367.dtor_underlying;
                } else if (_source367.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7732___mcc_h5049 = _source367.dtor_optLbl;
                } else if (_source367.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7733___mcc_h5051 = _source367.dtor_optLbl;
                } else if (_source367.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7734___mcc_h5053 = _source367.dtor_optExpr;
                } else if (_source367.is_CallType) {
                  RAST._IExpr _7735___mcc_h5055 = _source367.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7736___mcc_h5056 = _source367.dtor_typeParameters;
                } else if (_source367.is_Call) {
                  RAST._IExpr _7737___mcc_h5059 = _source367.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7738___mcc_h5060 = _source367.dtor_arguments;
                } else if (_source367.is_Select) {
                  RAST._IExpr _7739___mcc_h5063 = _source367.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7740___mcc_h5064 = _source367.dtor_name;
                } else if (_source367.is_MemberSelect) {
                  RAST._IExpr _7741___mcc_h5067 = _source367.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7742___mcc_h5068 = _source367.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7743___mcc_h5071 = _source367.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7744___mcc_h5072 = _source367.dtor_retType;
                  RAST._IExpr _7745___mcc_h5073 = _source367.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7629_field));
              if (_7628_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1910;
              DCOMP._IOwnership _out1911;
              (this).FromOwned(r, expectedOwnership, out _out1910, out _out1911);
              r = _out1910;
              resultingOwnership = _out1911;
              readIdents = _7637_recIdents;
            }
            return ;
          }
        } else if (_source324.is_BinOp) {
          DAST._IBinOp _7746___mcc_h147 = _source324.dtor_op;
          DAST._IExpression _7747___mcc_h148 = _source324.dtor_left;
          DAST._IExpression _7748___mcc_h149 = _source324.dtor_right;
          DAST.Format._IBinaryOpFormat _7749___mcc_h150 = _source324.dtor_format2;
          DAST._IType _7750_fieldType = _5052___mcc_h58;
          bool _7751_isDatatype = _5051___mcc_h57;
          bool _7752_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7753_field = _5049___mcc_h55;
          DAST._IExpression _7754_on = _5048___mcc_h54;
          {
            if (_7751_isDatatype) {
              RAST._IExpr _7755_onExpr;
              DCOMP._IOwnership _7756_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7757_recIdents;
              RAST._IExpr _out1912;
              DCOMP._IOwnership _out1913;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1914;
              (this).GenExpr(_7754_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1912, out _out1913, out _out1914);
              _7755_onExpr = _out1912;
              _7756_onOwned = _out1913;
              _7757_recIdents = _out1914;
              r = ((_7755_onExpr).Sel(DCOMP.__default.escapeName(_7753_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7758_typ;
              RAST._IType _out1915;
              _out1915 = (this).GenType(_7750_fieldType, DCOMP.GenTypeContext.@default());
              _7758_typ = _out1915;
              RAST._IExpr _out1916;
              DCOMP._IOwnership _out1917;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1916, out _out1917);
              r = _out1916;
              resultingOwnership = _out1917;
              readIdents = _7757_recIdents;
            } else {
              RAST._IExpr _7759_onExpr;
              DCOMP._IOwnership _7760_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7761_recIdents;
              RAST._IExpr _out1918;
              DCOMP._IOwnership _out1919;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1920;
              (this).GenExpr(_7754_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1918, out _out1919, out _out1920);
              _7759_onExpr = _out1918;
              _7760_onOwned = _out1919;
              _7761_recIdents = _out1920;
              r = _7759_onExpr;
              if (!object.Equals(_7759_onExpr, RAST.__default.self)) {
                RAST._IExpr _source369 = _7759_onExpr;
                if (_source369.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7762___mcc_h5077 = _source369.dtor_content;
                } else if (_source369.is_ExprFromType) {
                  RAST._IType _7763___mcc_h5079 = _source369.dtor_tpe;
                } else if (_source369.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7764___mcc_h5081 = _source369.dtor_name;
                } else if (_source369.is_Match) {
                  RAST._IExpr _7765___mcc_h5083 = _source369.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7766___mcc_h5084 = _source369.dtor_cases;
                } else if (_source369.is_StmtExpr) {
                  RAST._IExpr _7767___mcc_h5087 = _source369.dtor_stmt;
                  RAST._IExpr _7768___mcc_h5088 = _source369.dtor_rhs;
                } else if (_source369.is_Block) {
                  RAST._IExpr _7769___mcc_h5091 = _source369.dtor_underlying;
                } else if (_source369.is_StructBuild) {
                  RAST._IExpr _7770___mcc_h5093 = _source369.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7771___mcc_h5094 = _source369.dtor_assignments;
                } else if (_source369.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7772___mcc_h5097 = _source369.dtor_arguments;
                } else if (_source369.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7773___mcc_h5099 = _source369.dtor_op1;
                  RAST._IExpr _7774___mcc_h5100 = _source369.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7775___mcc_h5101 = _source369.dtor_format;
                  if (object.Equals(_7773___mcc_h5099, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source370 = _7774___mcc_h5100;
                    if (_source370.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7776___mcc_h5105 = _source370.dtor_content;
                    } else if (_source370.is_ExprFromType) {
                      RAST._IType _7777___mcc_h5107 = _source370.dtor_tpe;
                    } else if (_source370.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7778___mcc_h5109 = _source370.dtor_name;
                      if (object.Equals(_7778___mcc_h5109, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source370.is_Match) {
                      RAST._IExpr _7779___mcc_h5111 = _source370.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7780___mcc_h5112 = _source370.dtor_cases;
                    } else if (_source370.is_StmtExpr) {
                      RAST._IExpr _7781___mcc_h5115 = _source370.dtor_stmt;
                      RAST._IExpr _7782___mcc_h5116 = _source370.dtor_rhs;
                    } else if (_source370.is_Block) {
                      RAST._IExpr _7783___mcc_h5119 = _source370.dtor_underlying;
                    } else if (_source370.is_StructBuild) {
                      RAST._IExpr _7784___mcc_h5121 = _source370.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7785___mcc_h5122 = _source370.dtor_assignments;
                    } else if (_source370.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7786___mcc_h5125 = _source370.dtor_arguments;
                    } else if (_source370.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7787___mcc_h5127 = _source370.dtor_op1;
                      RAST._IExpr _7788___mcc_h5128 = _source370.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7789___mcc_h5129 = _source370.dtor_format;
                    } else if (_source370.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7790___mcc_h5133 = _source370.dtor_op2;
                      RAST._IExpr _7791___mcc_h5134 = _source370.dtor_left;
                      RAST._IExpr _7792___mcc_h5135 = _source370.dtor_right;
                      DAST.Format._IBinaryOpFormat _7793___mcc_h5136 = _source370.dtor_format2;
                    } else if (_source370.is_TypeAscription) {
                      RAST._IExpr _7794___mcc_h5141 = _source370.dtor_left;
                      RAST._IType _7795___mcc_h5142 = _source370.dtor_tpe;
                    } else if (_source370.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7796___mcc_h5145 = _source370.dtor_value;
                    } else if (_source370.is_LiteralBool) {
                      bool _7797___mcc_h5147 = _source370.dtor_bvalue;
                    } else if (_source370.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7798___mcc_h5149 = _source370.dtor_value;
                      bool _7799___mcc_h5150 = _source370.dtor_binary;
                    } else if (_source370.is_DeclareVar) {
                      RAST._IDeclareType _7800___mcc_h5153 = _source370.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7801___mcc_h5154 = _source370.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7802___mcc_h5155 = _source370.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7803___mcc_h5156 = _source370.dtor_optRhs;
                    } else if (_source370.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7804___mcc_h5161 = _source370.dtor_names;
                      RAST._IExpr _7805___mcc_h5162 = _source370.dtor_rhs;
                    } else if (_source370.is_IfExpr) {
                      RAST._IExpr _7806___mcc_h5165 = _source370.dtor_cond;
                      RAST._IExpr _7807___mcc_h5166 = _source370.dtor_thn;
                      RAST._IExpr _7808___mcc_h5167 = _source370.dtor_els;
                    } else if (_source370.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7809___mcc_h5171 = _source370.dtor_optCond;
                      RAST._IExpr _7810___mcc_h5172 = _source370.dtor_underlying;
                    } else if (_source370.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7811___mcc_h5175 = _source370.dtor_name;
                      RAST._IExpr _7812___mcc_h5176 = _source370.dtor_range;
                      RAST._IExpr _7813___mcc_h5177 = _source370.dtor_body;
                    } else if (_source370.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7814___mcc_h5181 = _source370.dtor_lbl;
                      RAST._IExpr _7815___mcc_h5182 = _source370.dtor_underlying;
                    } else if (_source370.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7816___mcc_h5185 = _source370.dtor_optLbl;
                    } else if (_source370.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7817___mcc_h5187 = _source370.dtor_optLbl;
                    } else if (_source370.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7818___mcc_h5189 = _source370.dtor_optExpr;
                    } else if (_source370.is_CallType) {
                      RAST._IExpr _7819___mcc_h5191 = _source370.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7820___mcc_h5192 = _source370.dtor_typeParameters;
                    } else if (_source370.is_Call) {
                      RAST._IExpr _7821___mcc_h5195 = _source370.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7822___mcc_h5196 = _source370.dtor_arguments;
                    } else if (_source370.is_Select) {
                      RAST._IExpr _7823___mcc_h5199 = _source370.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7824___mcc_h5200 = _source370.dtor_name;
                    } else if (_source370.is_MemberSelect) {
                      RAST._IExpr _7825___mcc_h5203 = _source370.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7826___mcc_h5204 = _source370.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7827___mcc_h5207 = _source370.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7828___mcc_h5208 = _source370.dtor_retType;
                      RAST._IExpr _7829___mcc_h5209 = _source370.dtor_body;
                    }
                  } else {
                  }
                } else if (_source369.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7830___mcc_h5213 = _source369.dtor_op2;
                  RAST._IExpr _7831___mcc_h5214 = _source369.dtor_left;
                  RAST._IExpr _7832___mcc_h5215 = _source369.dtor_right;
                  DAST.Format._IBinaryOpFormat _7833___mcc_h5216 = _source369.dtor_format2;
                } else if (_source369.is_TypeAscription) {
                  RAST._IExpr _7834___mcc_h5221 = _source369.dtor_left;
                  RAST._IType _7835___mcc_h5222 = _source369.dtor_tpe;
                } else if (_source369.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7836___mcc_h5225 = _source369.dtor_value;
                } else if (_source369.is_LiteralBool) {
                  bool _7837___mcc_h5227 = _source369.dtor_bvalue;
                } else if (_source369.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7838___mcc_h5229 = _source369.dtor_value;
                  bool _7839___mcc_h5230 = _source369.dtor_binary;
                } else if (_source369.is_DeclareVar) {
                  RAST._IDeclareType _7840___mcc_h5233 = _source369.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7841___mcc_h5234 = _source369.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7842___mcc_h5235 = _source369.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7843___mcc_h5236 = _source369.dtor_optRhs;
                } else if (_source369.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7844___mcc_h5241 = _source369.dtor_names;
                  RAST._IExpr _7845___mcc_h5242 = _source369.dtor_rhs;
                } else if (_source369.is_IfExpr) {
                  RAST._IExpr _7846___mcc_h5245 = _source369.dtor_cond;
                  RAST._IExpr _7847___mcc_h5246 = _source369.dtor_thn;
                  RAST._IExpr _7848___mcc_h5247 = _source369.dtor_els;
                } else if (_source369.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7849___mcc_h5251 = _source369.dtor_optCond;
                  RAST._IExpr _7850___mcc_h5252 = _source369.dtor_underlying;
                } else if (_source369.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7851___mcc_h5255 = _source369.dtor_name;
                  RAST._IExpr _7852___mcc_h5256 = _source369.dtor_range;
                  RAST._IExpr _7853___mcc_h5257 = _source369.dtor_body;
                } else if (_source369.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7854___mcc_h5261 = _source369.dtor_lbl;
                  RAST._IExpr _7855___mcc_h5262 = _source369.dtor_underlying;
                } else if (_source369.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7856___mcc_h5265 = _source369.dtor_optLbl;
                } else if (_source369.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7857___mcc_h5267 = _source369.dtor_optLbl;
                } else if (_source369.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7858___mcc_h5269 = _source369.dtor_optExpr;
                } else if (_source369.is_CallType) {
                  RAST._IExpr _7859___mcc_h5271 = _source369.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7860___mcc_h5272 = _source369.dtor_typeParameters;
                } else if (_source369.is_Call) {
                  RAST._IExpr _7861___mcc_h5275 = _source369.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7862___mcc_h5276 = _source369.dtor_arguments;
                } else if (_source369.is_Select) {
                  RAST._IExpr _7863___mcc_h5279 = _source369.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7864___mcc_h5280 = _source369.dtor_name;
                } else if (_source369.is_MemberSelect) {
                  RAST._IExpr _7865___mcc_h5283 = _source369.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7866___mcc_h5284 = _source369.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7867___mcc_h5287 = _source369.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7868___mcc_h5288 = _source369.dtor_retType;
                  RAST._IExpr _7869___mcc_h5289 = _source369.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7753_field));
              if (_7752_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1921;
              DCOMP._IOwnership _out1922;
              (this).FromOwned(r, expectedOwnership, out _out1921, out _out1922);
              r = _out1921;
              resultingOwnership = _out1922;
              readIdents = _7761_recIdents;
            }
            return ;
          }
        } else if (_source324.is_ArrayLen) {
          DAST._IExpression _7870___mcc_h155 = _source324.dtor_expr;
          DAST._IType _7871___mcc_h156 = _source324.dtor_exprType;
          BigInteger _7872___mcc_h157 = _source324.dtor_dim;
          bool _7873___mcc_h158 = _source324.dtor_native;
          DAST._IType _7874_fieldType = _5052___mcc_h58;
          bool _7875_isDatatype = _5051___mcc_h57;
          bool _7876_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7877_field = _5049___mcc_h55;
          DAST._IExpression _7878_on = _5048___mcc_h54;
          {
            if (_7875_isDatatype) {
              RAST._IExpr _7879_onExpr;
              DCOMP._IOwnership _7880_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7881_recIdents;
              RAST._IExpr _out1923;
              DCOMP._IOwnership _out1924;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1925;
              (this).GenExpr(_7878_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1923, out _out1924, out _out1925);
              _7879_onExpr = _out1923;
              _7880_onOwned = _out1924;
              _7881_recIdents = _out1925;
              r = ((_7879_onExpr).Sel(DCOMP.__default.escapeName(_7877_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _7882_typ;
              RAST._IType _out1926;
              _out1926 = (this).GenType(_7874_fieldType, DCOMP.GenTypeContext.@default());
              _7882_typ = _out1926;
              RAST._IExpr _out1927;
              DCOMP._IOwnership _out1928;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1927, out _out1928);
              r = _out1927;
              resultingOwnership = _out1928;
              readIdents = _7881_recIdents;
            } else {
              RAST._IExpr _7883_onExpr;
              DCOMP._IOwnership _7884_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7885_recIdents;
              RAST._IExpr _out1929;
              DCOMP._IOwnership _out1930;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1931;
              (this).GenExpr(_7878_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1929, out _out1930, out _out1931);
              _7883_onExpr = _out1929;
              _7884_onOwned = _out1930;
              _7885_recIdents = _out1931;
              r = _7883_onExpr;
              if (!object.Equals(_7883_onExpr, RAST.__default.self)) {
                RAST._IExpr _source371 = _7883_onExpr;
                if (_source371.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _7886___mcc_h5293 = _source371.dtor_content;
                } else if (_source371.is_ExprFromType) {
                  RAST._IType _7887___mcc_h5295 = _source371.dtor_tpe;
                } else if (_source371.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _7888___mcc_h5297 = _source371.dtor_name;
                } else if (_source371.is_Match) {
                  RAST._IExpr _7889___mcc_h5299 = _source371.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _7890___mcc_h5300 = _source371.dtor_cases;
                } else if (_source371.is_StmtExpr) {
                  RAST._IExpr _7891___mcc_h5303 = _source371.dtor_stmt;
                  RAST._IExpr _7892___mcc_h5304 = _source371.dtor_rhs;
                } else if (_source371.is_Block) {
                  RAST._IExpr _7893___mcc_h5307 = _source371.dtor_underlying;
                } else if (_source371.is_StructBuild) {
                  RAST._IExpr _7894___mcc_h5309 = _source371.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _7895___mcc_h5310 = _source371.dtor_assignments;
                } else if (_source371.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _7896___mcc_h5313 = _source371.dtor_arguments;
                } else if (_source371.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7897___mcc_h5315 = _source371.dtor_op1;
                  RAST._IExpr _7898___mcc_h5316 = _source371.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _7899___mcc_h5317 = _source371.dtor_format;
                  if (object.Equals(_7897___mcc_h5315, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source372 = _7898___mcc_h5316;
                    if (_source372.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _7900___mcc_h5321 = _source372.dtor_content;
                    } else if (_source372.is_ExprFromType) {
                      RAST._IType _7901___mcc_h5323 = _source372.dtor_tpe;
                    } else if (_source372.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _7902___mcc_h5325 = _source372.dtor_name;
                      if (object.Equals(_7902___mcc_h5325, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source372.is_Match) {
                      RAST._IExpr _7903___mcc_h5327 = _source372.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _7904___mcc_h5328 = _source372.dtor_cases;
                    } else if (_source372.is_StmtExpr) {
                      RAST._IExpr _7905___mcc_h5331 = _source372.dtor_stmt;
                      RAST._IExpr _7906___mcc_h5332 = _source372.dtor_rhs;
                    } else if (_source372.is_Block) {
                      RAST._IExpr _7907___mcc_h5335 = _source372.dtor_underlying;
                    } else if (_source372.is_StructBuild) {
                      RAST._IExpr _7908___mcc_h5337 = _source372.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _7909___mcc_h5338 = _source372.dtor_assignments;
                    } else if (_source372.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _7910___mcc_h5341 = _source372.dtor_arguments;
                    } else if (_source372.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7911___mcc_h5343 = _source372.dtor_op1;
                      RAST._IExpr _7912___mcc_h5344 = _source372.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _7913___mcc_h5345 = _source372.dtor_format;
                    } else if (_source372.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _7914___mcc_h5349 = _source372.dtor_op2;
                      RAST._IExpr _7915___mcc_h5350 = _source372.dtor_left;
                      RAST._IExpr _7916___mcc_h5351 = _source372.dtor_right;
                      DAST.Format._IBinaryOpFormat _7917___mcc_h5352 = _source372.dtor_format2;
                    } else if (_source372.is_TypeAscription) {
                      RAST._IExpr _7918___mcc_h5357 = _source372.dtor_left;
                      RAST._IType _7919___mcc_h5358 = _source372.dtor_tpe;
                    } else if (_source372.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _7920___mcc_h5361 = _source372.dtor_value;
                    } else if (_source372.is_LiteralBool) {
                      bool _7921___mcc_h5363 = _source372.dtor_bvalue;
                    } else if (_source372.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _7922___mcc_h5365 = _source372.dtor_value;
                      bool _7923___mcc_h5366 = _source372.dtor_binary;
                    } else if (_source372.is_DeclareVar) {
                      RAST._IDeclareType _7924___mcc_h5369 = _source372.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _7925___mcc_h5370 = _source372.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _7926___mcc_h5371 = _source372.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _7927___mcc_h5372 = _source372.dtor_optRhs;
                    } else if (_source372.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _7928___mcc_h5377 = _source372.dtor_names;
                      RAST._IExpr _7929___mcc_h5378 = _source372.dtor_rhs;
                    } else if (_source372.is_IfExpr) {
                      RAST._IExpr _7930___mcc_h5381 = _source372.dtor_cond;
                      RAST._IExpr _7931___mcc_h5382 = _source372.dtor_thn;
                      RAST._IExpr _7932___mcc_h5383 = _source372.dtor_els;
                    } else if (_source372.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _7933___mcc_h5387 = _source372.dtor_optCond;
                      RAST._IExpr _7934___mcc_h5388 = _source372.dtor_underlying;
                    } else if (_source372.is_For) {
                      Dafny.ISequence<Dafny.Rune> _7935___mcc_h5391 = _source372.dtor_name;
                      RAST._IExpr _7936___mcc_h5392 = _source372.dtor_range;
                      RAST._IExpr _7937___mcc_h5393 = _source372.dtor_body;
                    } else if (_source372.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _7938___mcc_h5397 = _source372.dtor_lbl;
                      RAST._IExpr _7939___mcc_h5398 = _source372.dtor_underlying;
                    } else if (_source372.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7940___mcc_h5401 = _source372.dtor_optLbl;
                    } else if (_source372.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7941___mcc_h5403 = _source372.dtor_optLbl;
                    } else if (_source372.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _7942___mcc_h5405 = _source372.dtor_optExpr;
                    } else if (_source372.is_CallType) {
                      RAST._IExpr _7943___mcc_h5407 = _source372.dtor_obj;
                      Dafny.ISequence<RAST._IType> _7944___mcc_h5408 = _source372.dtor_typeParameters;
                    } else if (_source372.is_Call) {
                      RAST._IExpr _7945___mcc_h5411 = _source372.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _7946___mcc_h5412 = _source372.dtor_arguments;
                    } else if (_source372.is_Select) {
                      RAST._IExpr _7947___mcc_h5415 = _source372.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7948___mcc_h5416 = _source372.dtor_name;
                    } else if (_source372.is_MemberSelect) {
                      RAST._IExpr _7949___mcc_h5419 = _source372.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _7950___mcc_h5420 = _source372.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _7951___mcc_h5423 = _source372.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _7952___mcc_h5424 = _source372.dtor_retType;
                      RAST._IExpr _7953___mcc_h5425 = _source372.dtor_body;
                    }
                  } else {
                  }
                } else if (_source371.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _7954___mcc_h5429 = _source371.dtor_op2;
                  RAST._IExpr _7955___mcc_h5430 = _source371.dtor_left;
                  RAST._IExpr _7956___mcc_h5431 = _source371.dtor_right;
                  DAST.Format._IBinaryOpFormat _7957___mcc_h5432 = _source371.dtor_format2;
                } else if (_source371.is_TypeAscription) {
                  RAST._IExpr _7958___mcc_h5437 = _source371.dtor_left;
                  RAST._IType _7959___mcc_h5438 = _source371.dtor_tpe;
                } else if (_source371.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _7960___mcc_h5441 = _source371.dtor_value;
                } else if (_source371.is_LiteralBool) {
                  bool _7961___mcc_h5443 = _source371.dtor_bvalue;
                } else if (_source371.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _7962___mcc_h5445 = _source371.dtor_value;
                  bool _7963___mcc_h5446 = _source371.dtor_binary;
                } else if (_source371.is_DeclareVar) {
                  RAST._IDeclareType _7964___mcc_h5449 = _source371.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _7965___mcc_h5450 = _source371.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _7966___mcc_h5451 = _source371.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _7967___mcc_h5452 = _source371.dtor_optRhs;
                } else if (_source371.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _7968___mcc_h5457 = _source371.dtor_names;
                  RAST._IExpr _7969___mcc_h5458 = _source371.dtor_rhs;
                } else if (_source371.is_IfExpr) {
                  RAST._IExpr _7970___mcc_h5461 = _source371.dtor_cond;
                  RAST._IExpr _7971___mcc_h5462 = _source371.dtor_thn;
                  RAST._IExpr _7972___mcc_h5463 = _source371.dtor_els;
                } else if (_source371.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _7973___mcc_h5467 = _source371.dtor_optCond;
                  RAST._IExpr _7974___mcc_h5468 = _source371.dtor_underlying;
                } else if (_source371.is_For) {
                  Dafny.ISequence<Dafny.Rune> _7975___mcc_h5471 = _source371.dtor_name;
                  RAST._IExpr _7976___mcc_h5472 = _source371.dtor_range;
                  RAST._IExpr _7977___mcc_h5473 = _source371.dtor_body;
                } else if (_source371.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _7978___mcc_h5477 = _source371.dtor_lbl;
                  RAST._IExpr _7979___mcc_h5478 = _source371.dtor_underlying;
                } else if (_source371.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7980___mcc_h5481 = _source371.dtor_optLbl;
                } else if (_source371.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7981___mcc_h5483 = _source371.dtor_optLbl;
                } else if (_source371.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _7982___mcc_h5485 = _source371.dtor_optExpr;
                } else if (_source371.is_CallType) {
                  RAST._IExpr _7983___mcc_h5487 = _source371.dtor_obj;
                  Dafny.ISequence<RAST._IType> _7984___mcc_h5488 = _source371.dtor_typeParameters;
                } else if (_source371.is_Call) {
                  RAST._IExpr _7985___mcc_h5491 = _source371.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _7986___mcc_h5492 = _source371.dtor_arguments;
                } else if (_source371.is_Select) {
                  RAST._IExpr _7987___mcc_h5495 = _source371.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7988___mcc_h5496 = _source371.dtor_name;
                } else if (_source371.is_MemberSelect) {
                  RAST._IExpr _7989___mcc_h5499 = _source371.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _7990___mcc_h5500 = _source371.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _7991___mcc_h5503 = _source371.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _7992___mcc_h5504 = _source371.dtor_retType;
                  RAST._IExpr _7993___mcc_h5505 = _source371.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7877_field));
              if (_7876_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1932;
              DCOMP._IOwnership _out1933;
              (this).FromOwned(r, expectedOwnership, out _out1932, out _out1933);
              r = _out1932;
              resultingOwnership = _out1933;
              readIdents = _7885_recIdents;
            }
            return ;
          }
        } else if (_source324.is_MapKeys) {
          DAST._IExpression _7994___mcc_h163 = _source324.dtor_expr;
          DAST._IType _7995_fieldType = _5052___mcc_h58;
          bool _7996_isDatatype = _5051___mcc_h57;
          bool _7997_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _7998_field = _5049___mcc_h55;
          DAST._IExpression _7999_on = _5048___mcc_h54;
          {
            if (_7996_isDatatype) {
              RAST._IExpr _8000_onExpr;
              DCOMP._IOwnership _8001_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8002_recIdents;
              RAST._IExpr _out1934;
              DCOMP._IOwnership _out1935;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1936;
              (this).GenExpr(_7999_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1934, out _out1935, out _out1936);
              _8000_onExpr = _out1934;
              _8001_onOwned = _out1935;
              _8002_recIdents = _out1936;
              r = ((_8000_onExpr).Sel(DCOMP.__default.escapeName(_7998_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8003_typ;
              RAST._IType _out1937;
              _out1937 = (this).GenType(_7995_fieldType, DCOMP.GenTypeContext.@default());
              _8003_typ = _out1937;
              RAST._IExpr _out1938;
              DCOMP._IOwnership _out1939;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1938, out _out1939);
              r = _out1938;
              resultingOwnership = _out1939;
              readIdents = _8002_recIdents;
            } else {
              RAST._IExpr _8004_onExpr;
              DCOMP._IOwnership _8005_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8006_recIdents;
              RAST._IExpr _out1940;
              DCOMP._IOwnership _out1941;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1942;
              (this).GenExpr(_7999_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1940, out _out1941, out _out1942);
              _8004_onExpr = _out1940;
              _8005_onOwned = _out1941;
              _8006_recIdents = _out1942;
              r = _8004_onExpr;
              if (!object.Equals(_8004_onExpr, RAST.__default.self)) {
                RAST._IExpr _source373 = _8004_onExpr;
                if (_source373.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8007___mcc_h5509 = _source373.dtor_content;
                } else if (_source373.is_ExprFromType) {
                  RAST._IType _8008___mcc_h5511 = _source373.dtor_tpe;
                } else if (_source373.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8009___mcc_h5513 = _source373.dtor_name;
                } else if (_source373.is_Match) {
                  RAST._IExpr _8010___mcc_h5515 = _source373.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8011___mcc_h5516 = _source373.dtor_cases;
                } else if (_source373.is_StmtExpr) {
                  RAST._IExpr _8012___mcc_h5519 = _source373.dtor_stmt;
                  RAST._IExpr _8013___mcc_h5520 = _source373.dtor_rhs;
                } else if (_source373.is_Block) {
                  RAST._IExpr _8014___mcc_h5523 = _source373.dtor_underlying;
                } else if (_source373.is_StructBuild) {
                  RAST._IExpr _8015___mcc_h5525 = _source373.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8016___mcc_h5526 = _source373.dtor_assignments;
                } else if (_source373.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8017___mcc_h5529 = _source373.dtor_arguments;
                } else if (_source373.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8018___mcc_h5531 = _source373.dtor_op1;
                  RAST._IExpr _8019___mcc_h5532 = _source373.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8020___mcc_h5533 = _source373.dtor_format;
                  if (object.Equals(_8018___mcc_h5531, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source374 = _8019___mcc_h5532;
                    if (_source374.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8021___mcc_h5537 = _source374.dtor_content;
                    } else if (_source374.is_ExprFromType) {
                      RAST._IType _8022___mcc_h5539 = _source374.dtor_tpe;
                    } else if (_source374.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8023___mcc_h5541 = _source374.dtor_name;
                      if (object.Equals(_8023___mcc_h5541, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source374.is_Match) {
                      RAST._IExpr _8024___mcc_h5543 = _source374.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8025___mcc_h5544 = _source374.dtor_cases;
                    } else if (_source374.is_StmtExpr) {
                      RAST._IExpr _8026___mcc_h5547 = _source374.dtor_stmt;
                      RAST._IExpr _8027___mcc_h5548 = _source374.dtor_rhs;
                    } else if (_source374.is_Block) {
                      RAST._IExpr _8028___mcc_h5551 = _source374.dtor_underlying;
                    } else if (_source374.is_StructBuild) {
                      RAST._IExpr _8029___mcc_h5553 = _source374.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8030___mcc_h5554 = _source374.dtor_assignments;
                    } else if (_source374.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8031___mcc_h5557 = _source374.dtor_arguments;
                    } else if (_source374.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8032___mcc_h5559 = _source374.dtor_op1;
                      RAST._IExpr _8033___mcc_h5560 = _source374.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8034___mcc_h5561 = _source374.dtor_format;
                    } else if (_source374.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8035___mcc_h5565 = _source374.dtor_op2;
                      RAST._IExpr _8036___mcc_h5566 = _source374.dtor_left;
                      RAST._IExpr _8037___mcc_h5567 = _source374.dtor_right;
                      DAST.Format._IBinaryOpFormat _8038___mcc_h5568 = _source374.dtor_format2;
                    } else if (_source374.is_TypeAscription) {
                      RAST._IExpr _8039___mcc_h5573 = _source374.dtor_left;
                      RAST._IType _8040___mcc_h5574 = _source374.dtor_tpe;
                    } else if (_source374.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8041___mcc_h5577 = _source374.dtor_value;
                    } else if (_source374.is_LiteralBool) {
                      bool _8042___mcc_h5579 = _source374.dtor_bvalue;
                    } else if (_source374.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8043___mcc_h5581 = _source374.dtor_value;
                      bool _8044___mcc_h5582 = _source374.dtor_binary;
                    } else if (_source374.is_DeclareVar) {
                      RAST._IDeclareType _8045___mcc_h5585 = _source374.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8046___mcc_h5586 = _source374.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8047___mcc_h5587 = _source374.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8048___mcc_h5588 = _source374.dtor_optRhs;
                    } else if (_source374.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8049___mcc_h5593 = _source374.dtor_names;
                      RAST._IExpr _8050___mcc_h5594 = _source374.dtor_rhs;
                    } else if (_source374.is_IfExpr) {
                      RAST._IExpr _8051___mcc_h5597 = _source374.dtor_cond;
                      RAST._IExpr _8052___mcc_h5598 = _source374.dtor_thn;
                      RAST._IExpr _8053___mcc_h5599 = _source374.dtor_els;
                    } else if (_source374.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8054___mcc_h5603 = _source374.dtor_optCond;
                      RAST._IExpr _8055___mcc_h5604 = _source374.dtor_underlying;
                    } else if (_source374.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8056___mcc_h5607 = _source374.dtor_name;
                      RAST._IExpr _8057___mcc_h5608 = _source374.dtor_range;
                      RAST._IExpr _8058___mcc_h5609 = _source374.dtor_body;
                    } else if (_source374.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8059___mcc_h5613 = _source374.dtor_lbl;
                      RAST._IExpr _8060___mcc_h5614 = _source374.dtor_underlying;
                    } else if (_source374.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8061___mcc_h5617 = _source374.dtor_optLbl;
                    } else if (_source374.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8062___mcc_h5619 = _source374.dtor_optLbl;
                    } else if (_source374.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8063___mcc_h5621 = _source374.dtor_optExpr;
                    } else if (_source374.is_CallType) {
                      RAST._IExpr _8064___mcc_h5623 = _source374.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8065___mcc_h5624 = _source374.dtor_typeParameters;
                    } else if (_source374.is_Call) {
                      RAST._IExpr _8066___mcc_h5627 = _source374.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8067___mcc_h5628 = _source374.dtor_arguments;
                    } else if (_source374.is_Select) {
                      RAST._IExpr _8068___mcc_h5631 = _source374.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8069___mcc_h5632 = _source374.dtor_name;
                    } else if (_source374.is_MemberSelect) {
                      RAST._IExpr _8070___mcc_h5635 = _source374.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8071___mcc_h5636 = _source374.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8072___mcc_h5639 = _source374.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8073___mcc_h5640 = _source374.dtor_retType;
                      RAST._IExpr _8074___mcc_h5641 = _source374.dtor_body;
                    }
                  } else {
                  }
                } else if (_source373.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8075___mcc_h5645 = _source373.dtor_op2;
                  RAST._IExpr _8076___mcc_h5646 = _source373.dtor_left;
                  RAST._IExpr _8077___mcc_h5647 = _source373.dtor_right;
                  DAST.Format._IBinaryOpFormat _8078___mcc_h5648 = _source373.dtor_format2;
                } else if (_source373.is_TypeAscription) {
                  RAST._IExpr _8079___mcc_h5653 = _source373.dtor_left;
                  RAST._IType _8080___mcc_h5654 = _source373.dtor_tpe;
                } else if (_source373.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8081___mcc_h5657 = _source373.dtor_value;
                } else if (_source373.is_LiteralBool) {
                  bool _8082___mcc_h5659 = _source373.dtor_bvalue;
                } else if (_source373.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8083___mcc_h5661 = _source373.dtor_value;
                  bool _8084___mcc_h5662 = _source373.dtor_binary;
                } else if (_source373.is_DeclareVar) {
                  RAST._IDeclareType _8085___mcc_h5665 = _source373.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8086___mcc_h5666 = _source373.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8087___mcc_h5667 = _source373.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8088___mcc_h5668 = _source373.dtor_optRhs;
                } else if (_source373.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8089___mcc_h5673 = _source373.dtor_names;
                  RAST._IExpr _8090___mcc_h5674 = _source373.dtor_rhs;
                } else if (_source373.is_IfExpr) {
                  RAST._IExpr _8091___mcc_h5677 = _source373.dtor_cond;
                  RAST._IExpr _8092___mcc_h5678 = _source373.dtor_thn;
                  RAST._IExpr _8093___mcc_h5679 = _source373.dtor_els;
                } else if (_source373.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8094___mcc_h5683 = _source373.dtor_optCond;
                  RAST._IExpr _8095___mcc_h5684 = _source373.dtor_underlying;
                } else if (_source373.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8096___mcc_h5687 = _source373.dtor_name;
                  RAST._IExpr _8097___mcc_h5688 = _source373.dtor_range;
                  RAST._IExpr _8098___mcc_h5689 = _source373.dtor_body;
                } else if (_source373.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8099___mcc_h5693 = _source373.dtor_lbl;
                  RAST._IExpr _8100___mcc_h5694 = _source373.dtor_underlying;
                } else if (_source373.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8101___mcc_h5697 = _source373.dtor_optLbl;
                } else if (_source373.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8102___mcc_h5699 = _source373.dtor_optLbl;
                } else if (_source373.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8103___mcc_h5701 = _source373.dtor_optExpr;
                } else if (_source373.is_CallType) {
                  RAST._IExpr _8104___mcc_h5703 = _source373.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8105___mcc_h5704 = _source373.dtor_typeParameters;
                } else if (_source373.is_Call) {
                  RAST._IExpr _8106___mcc_h5707 = _source373.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8107___mcc_h5708 = _source373.dtor_arguments;
                } else if (_source373.is_Select) {
                  RAST._IExpr _8108___mcc_h5711 = _source373.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8109___mcc_h5712 = _source373.dtor_name;
                } else if (_source373.is_MemberSelect) {
                  RAST._IExpr _8110___mcc_h5715 = _source373.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8111___mcc_h5716 = _source373.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8112___mcc_h5719 = _source373.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8113___mcc_h5720 = _source373.dtor_retType;
                  RAST._IExpr _8114___mcc_h5721 = _source373.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_7998_field));
              if (_7997_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1943;
              DCOMP._IOwnership _out1944;
              (this).FromOwned(r, expectedOwnership, out _out1943, out _out1944);
              r = _out1943;
              resultingOwnership = _out1944;
              readIdents = _8006_recIdents;
            }
            return ;
          }
        } else if (_source324.is_MapValues) {
          DAST._IExpression _8115___mcc_h165 = _source324.dtor_expr;
          DAST._IType _8116_fieldType = _5052___mcc_h58;
          bool _8117_isDatatype = _5051___mcc_h57;
          bool _8118_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _8119_field = _5049___mcc_h55;
          DAST._IExpression _8120_on = _5048___mcc_h54;
          {
            if (_8117_isDatatype) {
              RAST._IExpr _8121_onExpr;
              DCOMP._IOwnership _8122_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8123_recIdents;
              RAST._IExpr _out1945;
              DCOMP._IOwnership _out1946;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1947;
              (this).GenExpr(_8120_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1945, out _out1946, out _out1947);
              _8121_onExpr = _out1945;
              _8122_onOwned = _out1946;
              _8123_recIdents = _out1947;
              r = ((_8121_onExpr).Sel(DCOMP.__default.escapeName(_8119_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8124_typ;
              RAST._IType _out1948;
              _out1948 = (this).GenType(_8116_fieldType, DCOMP.GenTypeContext.@default());
              _8124_typ = _out1948;
              RAST._IExpr _out1949;
              DCOMP._IOwnership _out1950;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1949, out _out1950);
              r = _out1949;
              resultingOwnership = _out1950;
              readIdents = _8123_recIdents;
            } else {
              RAST._IExpr _8125_onExpr;
              DCOMP._IOwnership _8126_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8127_recIdents;
              RAST._IExpr _out1951;
              DCOMP._IOwnership _out1952;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1953;
              (this).GenExpr(_8120_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1951, out _out1952, out _out1953);
              _8125_onExpr = _out1951;
              _8126_onOwned = _out1952;
              _8127_recIdents = _out1953;
              r = _8125_onExpr;
              if (!object.Equals(_8125_onExpr, RAST.__default.self)) {
                RAST._IExpr _source375 = _8125_onExpr;
                if (_source375.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8128___mcc_h5725 = _source375.dtor_content;
                } else if (_source375.is_ExprFromType) {
                  RAST._IType _8129___mcc_h5727 = _source375.dtor_tpe;
                } else if (_source375.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8130___mcc_h5729 = _source375.dtor_name;
                } else if (_source375.is_Match) {
                  RAST._IExpr _8131___mcc_h5731 = _source375.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8132___mcc_h5732 = _source375.dtor_cases;
                } else if (_source375.is_StmtExpr) {
                  RAST._IExpr _8133___mcc_h5735 = _source375.dtor_stmt;
                  RAST._IExpr _8134___mcc_h5736 = _source375.dtor_rhs;
                } else if (_source375.is_Block) {
                  RAST._IExpr _8135___mcc_h5739 = _source375.dtor_underlying;
                } else if (_source375.is_StructBuild) {
                  RAST._IExpr _8136___mcc_h5741 = _source375.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8137___mcc_h5742 = _source375.dtor_assignments;
                } else if (_source375.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8138___mcc_h5745 = _source375.dtor_arguments;
                } else if (_source375.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8139___mcc_h5747 = _source375.dtor_op1;
                  RAST._IExpr _8140___mcc_h5748 = _source375.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8141___mcc_h5749 = _source375.dtor_format;
                  if (object.Equals(_8139___mcc_h5747, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source376 = _8140___mcc_h5748;
                    if (_source376.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8142___mcc_h5753 = _source376.dtor_content;
                    } else if (_source376.is_ExprFromType) {
                      RAST._IType _8143___mcc_h5755 = _source376.dtor_tpe;
                    } else if (_source376.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8144___mcc_h5757 = _source376.dtor_name;
                      if (object.Equals(_8144___mcc_h5757, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source376.is_Match) {
                      RAST._IExpr _8145___mcc_h5759 = _source376.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8146___mcc_h5760 = _source376.dtor_cases;
                    } else if (_source376.is_StmtExpr) {
                      RAST._IExpr _8147___mcc_h5763 = _source376.dtor_stmt;
                      RAST._IExpr _8148___mcc_h5764 = _source376.dtor_rhs;
                    } else if (_source376.is_Block) {
                      RAST._IExpr _8149___mcc_h5767 = _source376.dtor_underlying;
                    } else if (_source376.is_StructBuild) {
                      RAST._IExpr _8150___mcc_h5769 = _source376.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8151___mcc_h5770 = _source376.dtor_assignments;
                    } else if (_source376.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8152___mcc_h5773 = _source376.dtor_arguments;
                    } else if (_source376.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8153___mcc_h5775 = _source376.dtor_op1;
                      RAST._IExpr _8154___mcc_h5776 = _source376.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8155___mcc_h5777 = _source376.dtor_format;
                    } else if (_source376.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8156___mcc_h5781 = _source376.dtor_op2;
                      RAST._IExpr _8157___mcc_h5782 = _source376.dtor_left;
                      RAST._IExpr _8158___mcc_h5783 = _source376.dtor_right;
                      DAST.Format._IBinaryOpFormat _8159___mcc_h5784 = _source376.dtor_format2;
                    } else if (_source376.is_TypeAscription) {
                      RAST._IExpr _8160___mcc_h5789 = _source376.dtor_left;
                      RAST._IType _8161___mcc_h5790 = _source376.dtor_tpe;
                    } else if (_source376.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8162___mcc_h5793 = _source376.dtor_value;
                    } else if (_source376.is_LiteralBool) {
                      bool _8163___mcc_h5795 = _source376.dtor_bvalue;
                    } else if (_source376.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8164___mcc_h5797 = _source376.dtor_value;
                      bool _8165___mcc_h5798 = _source376.dtor_binary;
                    } else if (_source376.is_DeclareVar) {
                      RAST._IDeclareType _8166___mcc_h5801 = _source376.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8167___mcc_h5802 = _source376.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8168___mcc_h5803 = _source376.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8169___mcc_h5804 = _source376.dtor_optRhs;
                    } else if (_source376.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8170___mcc_h5809 = _source376.dtor_names;
                      RAST._IExpr _8171___mcc_h5810 = _source376.dtor_rhs;
                    } else if (_source376.is_IfExpr) {
                      RAST._IExpr _8172___mcc_h5813 = _source376.dtor_cond;
                      RAST._IExpr _8173___mcc_h5814 = _source376.dtor_thn;
                      RAST._IExpr _8174___mcc_h5815 = _source376.dtor_els;
                    } else if (_source376.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8175___mcc_h5819 = _source376.dtor_optCond;
                      RAST._IExpr _8176___mcc_h5820 = _source376.dtor_underlying;
                    } else if (_source376.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8177___mcc_h5823 = _source376.dtor_name;
                      RAST._IExpr _8178___mcc_h5824 = _source376.dtor_range;
                      RAST._IExpr _8179___mcc_h5825 = _source376.dtor_body;
                    } else if (_source376.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8180___mcc_h5829 = _source376.dtor_lbl;
                      RAST._IExpr _8181___mcc_h5830 = _source376.dtor_underlying;
                    } else if (_source376.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8182___mcc_h5833 = _source376.dtor_optLbl;
                    } else if (_source376.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8183___mcc_h5835 = _source376.dtor_optLbl;
                    } else if (_source376.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8184___mcc_h5837 = _source376.dtor_optExpr;
                    } else if (_source376.is_CallType) {
                      RAST._IExpr _8185___mcc_h5839 = _source376.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8186___mcc_h5840 = _source376.dtor_typeParameters;
                    } else if (_source376.is_Call) {
                      RAST._IExpr _8187___mcc_h5843 = _source376.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8188___mcc_h5844 = _source376.dtor_arguments;
                    } else if (_source376.is_Select) {
                      RAST._IExpr _8189___mcc_h5847 = _source376.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8190___mcc_h5848 = _source376.dtor_name;
                    } else if (_source376.is_MemberSelect) {
                      RAST._IExpr _8191___mcc_h5851 = _source376.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8192___mcc_h5852 = _source376.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8193___mcc_h5855 = _source376.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8194___mcc_h5856 = _source376.dtor_retType;
                      RAST._IExpr _8195___mcc_h5857 = _source376.dtor_body;
                    }
                  } else {
                  }
                } else if (_source375.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8196___mcc_h5861 = _source375.dtor_op2;
                  RAST._IExpr _8197___mcc_h5862 = _source375.dtor_left;
                  RAST._IExpr _8198___mcc_h5863 = _source375.dtor_right;
                  DAST.Format._IBinaryOpFormat _8199___mcc_h5864 = _source375.dtor_format2;
                } else if (_source375.is_TypeAscription) {
                  RAST._IExpr _8200___mcc_h5869 = _source375.dtor_left;
                  RAST._IType _8201___mcc_h5870 = _source375.dtor_tpe;
                } else if (_source375.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8202___mcc_h5873 = _source375.dtor_value;
                } else if (_source375.is_LiteralBool) {
                  bool _8203___mcc_h5875 = _source375.dtor_bvalue;
                } else if (_source375.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8204___mcc_h5877 = _source375.dtor_value;
                  bool _8205___mcc_h5878 = _source375.dtor_binary;
                } else if (_source375.is_DeclareVar) {
                  RAST._IDeclareType _8206___mcc_h5881 = _source375.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8207___mcc_h5882 = _source375.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8208___mcc_h5883 = _source375.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8209___mcc_h5884 = _source375.dtor_optRhs;
                } else if (_source375.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8210___mcc_h5889 = _source375.dtor_names;
                  RAST._IExpr _8211___mcc_h5890 = _source375.dtor_rhs;
                } else if (_source375.is_IfExpr) {
                  RAST._IExpr _8212___mcc_h5893 = _source375.dtor_cond;
                  RAST._IExpr _8213___mcc_h5894 = _source375.dtor_thn;
                  RAST._IExpr _8214___mcc_h5895 = _source375.dtor_els;
                } else if (_source375.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8215___mcc_h5899 = _source375.dtor_optCond;
                  RAST._IExpr _8216___mcc_h5900 = _source375.dtor_underlying;
                } else if (_source375.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8217___mcc_h5903 = _source375.dtor_name;
                  RAST._IExpr _8218___mcc_h5904 = _source375.dtor_range;
                  RAST._IExpr _8219___mcc_h5905 = _source375.dtor_body;
                } else if (_source375.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8220___mcc_h5909 = _source375.dtor_lbl;
                  RAST._IExpr _8221___mcc_h5910 = _source375.dtor_underlying;
                } else if (_source375.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8222___mcc_h5913 = _source375.dtor_optLbl;
                } else if (_source375.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8223___mcc_h5915 = _source375.dtor_optLbl;
                } else if (_source375.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8224___mcc_h5917 = _source375.dtor_optExpr;
                } else if (_source375.is_CallType) {
                  RAST._IExpr _8225___mcc_h5919 = _source375.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8226___mcc_h5920 = _source375.dtor_typeParameters;
                } else if (_source375.is_Call) {
                  RAST._IExpr _8227___mcc_h5923 = _source375.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8228___mcc_h5924 = _source375.dtor_arguments;
                } else if (_source375.is_Select) {
                  RAST._IExpr _8229___mcc_h5927 = _source375.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8230___mcc_h5928 = _source375.dtor_name;
                } else if (_source375.is_MemberSelect) {
                  RAST._IExpr _8231___mcc_h5931 = _source375.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8232___mcc_h5932 = _source375.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8233___mcc_h5935 = _source375.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8234___mcc_h5936 = _source375.dtor_retType;
                  RAST._IExpr _8235___mcc_h5937 = _source375.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8119_field));
              if (_8118_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1954;
              DCOMP._IOwnership _out1955;
              (this).FromOwned(r, expectedOwnership, out _out1954, out _out1955);
              r = _out1954;
              resultingOwnership = _out1955;
              readIdents = _8127_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Select) {
          DAST._IExpression _8236___mcc_h167 = _source324.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _8237___mcc_h168 = _source324.dtor_field;
          bool _8238___mcc_h169 = _source324.dtor_isConstant;
          bool _8239___mcc_h170 = _source324.dtor_onDatatype;
          DAST._IType _8240___mcc_h171 = _source324.dtor_fieldType;
          DAST._IType _8241_fieldType = _5052___mcc_h58;
          bool _8242_isDatatype = _5051___mcc_h57;
          bool _8243_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _8244_field = _5049___mcc_h55;
          DAST._IExpression _8245_on = _5048___mcc_h54;
          {
            if (_8242_isDatatype) {
              RAST._IExpr _8246_onExpr;
              DCOMP._IOwnership _8247_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8248_recIdents;
              RAST._IExpr _out1956;
              DCOMP._IOwnership _out1957;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1958;
              (this).GenExpr(_8245_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1956, out _out1957, out _out1958);
              _8246_onExpr = _out1956;
              _8247_onOwned = _out1957;
              _8248_recIdents = _out1958;
              r = ((_8246_onExpr).Sel(DCOMP.__default.escapeName(_8244_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8249_typ;
              RAST._IType _out1959;
              _out1959 = (this).GenType(_8241_fieldType, DCOMP.GenTypeContext.@default());
              _8249_typ = _out1959;
              RAST._IExpr _out1960;
              DCOMP._IOwnership _out1961;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1960, out _out1961);
              r = _out1960;
              resultingOwnership = _out1961;
              readIdents = _8248_recIdents;
            } else {
              RAST._IExpr _8250_onExpr;
              DCOMP._IOwnership _8251_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8252_recIdents;
              RAST._IExpr _out1962;
              DCOMP._IOwnership _out1963;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1964;
              (this).GenExpr(_8245_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1962, out _out1963, out _out1964);
              _8250_onExpr = _out1962;
              _8251_onOwned = _out1963;
              _8252_recIdents = _out1964;
              r = _8250_onExpr;
              if (!object.Equals(_8250_onExpr, RAST.__default.self)) {
                RAST._IExpr _source377 = _8250_onExpr;
                if (_source377.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8253___mcc_h5941 = _source377.dtor_content;
                } else if (_source377.is_ExprFromType) {
                  RAST._IType _8254___mcc_h5943 = _source377.dtor_tpe;
                } else if (_source377.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8255___mcc_h5945 = _source377.dtor_name;
                } else if (_source377.is_Match) {
                  RAST._IExpr _8256___mcc_h5947 = _source377.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8257___mcc_h5948 = _source377.dtor_cases;
                } else if (_source377.is_StmtExpr) {
                  RAST._IExpr _8258___mcc_h5951 = _source377.dtor_stmt;
                  RAST._IExpr _8259___mcc_h5952 = _source377.dtor_rhs;
                } else if (_source377.is_Block) {
                  RAST._IExpr _8260___mcc_h5955 = _source377.dtor_underlying;
                } else if (_source377.is_StructBuild) {
                  RAST._IExpr _8261___mcc_h5957 = _source377.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8262___mcc_h5958 = _source377.dtor_assignments;
                } else if (_source377.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8263___mcc_h5961 = _source377.dtor_arguments;
                } else if (_source377.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8264___mcc_h5963 = _source377.dtor_op1;
                  RAST._IExpr _8265___mcc_h5964 = _source377.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8266___mcc_h5965 = _source377.dtor_format;
                  if (object.Equals(_8264___mcc_h5963, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source378 = _8265___mcc_h5964;
                    if (_source378.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8267___mcc_h5969 = _source378.dtor_content;
                    } else if (_source378.is_ExprFromType) {
                      RAST._IType _8268___mcc_h5971 = _source378.dtor_tpe;
                    } else if (_source378.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8269___mcc_h5973 = _source378.dtor_name;
                      if (object.Equals(_8269___mcc_h5973, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source378.is_Match) {
                      RAST._IExpr _8270___mcc_h5975 = _source378.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8271___mcc_h5976 = _source378.dtor_cases;
                    } else if (_source378.is_StmtExpr) {
                      RAST._IExpr _8272___mcc_h5979 = _source378.dtor_stmt;
                      RAST._IExpr _8273___mcc_h5980 = _source378.dtor_rhs;
                    } else if (_source378.is_Block) {
                      RAST._IExpr _8274___mcc_h5983 = _source378.dtor_underlying;
                    } else if (_source378.is_StructBuild) {
                      RAST._IExpr _8275___mcc_h5985 = _source378.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8276___mcc_h5986 = _source378.dtor_assignments;
                    } else if (_source378.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8277___mcc_h5989 = _source378.dtor_arguments;
                    } else if (_source378.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8278___mcc_h5991 = _source378.dtor_op1;
                      RAST._IExpr _8279___mcc_h5992 = _source378.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8280___mcc_h5993 = _source378.dtor_format;
                    } else if (_source378.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8281___mcc_h5997 = _source378.dtor_op2;
                      RAST._IExpr _8282___mcc_h5998 = _source378.dtor_left;
                      RAST._IExpr _8283___mcc_h5999 = _source378.dtor_right;
                      DAST.Format._IBinaryOpFormat _8284___mcc_h6000 = _source378.dtor_format2;
                    } else if (_source378.is_TypeAscription) {
                      RAST._IExpr _8285___mcc_h6005 = _source378.dtor_left;
                      RAST._IType _8286___mcc_h6006 = _source378.dtor_tpe;
                    } else if (_source378.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8287___mcc_h6009 = _source378.dtor_value;
                    } else if (_source378.is_LiteralBool) {
                      bool _8288___mcc_h6011 = _source378.dtor_bvalue;
                    } else if (_source378.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8289___mcc_h6013 = _source378.dtor_value;
                      bool _8290___mcc_h6014 = _source378.dtor_binary;
                    } else if (_source378.is_DeclareVar) {
                      RAST._IDeclareType _8291___mcc_h6017 = _source378.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8292___mcc_h6018 = _source378.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8293___mcc_h6019 = _source378.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8294___mcc_h6020 = _source378.dtor_optRhs;
                    } else if (_source378.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8295___mcc_h6025 = _source378.dtor_names;
                      RAST._IExpr _8296___mcc_h6026 = _source378.dtor_rhs;
                    } else if (_source378.is_IfExpr) {
                      RAST._IExpr _8297___mcc_h6029 = _source378.dtor_cond;
                      RAST._IExpr _8298___mcc_h6030 = _source378.dtor_thn;
                      RAST._IExpr _8299___mcc_h6031 = _source378.dtor_els;
                    } else if (_source378.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8300___mcc_h6035 = _source378.dtor_optCond;
                      RAST._IExpr _8301___mcc_h6036 = _source378.dtor_underlying;
                    } else if (_source378.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8302___mcc_h6039 = _source378.dtor_name;
                      RAST._IExpr _8303___mcc_h6040 = _source378.dtor_range;
                      RAST._IExpr _8304___mcc_h6041 = _source378.dtor_body;
                    } else if (_source378.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8305___mcc_h6045 = _source378.dtor_lbl;
                      RAST._IExpr _8306___mcc_h6046 = _source378.dtor_underlying;
                    } else if (_source378.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8307___mcc_h6049 = _source378.dtor_optLbl;
                    } else if (_source378.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8308___mcc_h6051 = _source378.dtor_optLbl;
                    } else if (_source378.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8309___mcc_h6053 = _source378.dtor_optExpr;
                    } else if (_source378.is_CallType) {
                      RAST._IExpr _8310___mcc_h6055 = _source378.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8311___mcc_h6056 = _source378.dtor_typeParameters;
                    } else if (_source378.is_Call) {
                      RAST._IExpr _8312___mcc_h6059 = _source378.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8313___mcc_h6060 = _source378.dtor_arguments;
                    } else if (_source378.is_Select) {
                      RAST._IExpr _8314___mcc_h6063 = _source378.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8315___mcc_h6064 = _source378.dtor_name;
                    } else if (_source378.is_MemberSelect) {
                      RAST._IExpr _8316___mcc_h6067 = _source378.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8317___mcc_h6068 = _source378.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8318___mcc_h6071 = _source378.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8319___mcc_h6072 = _source378.dtor_retType;
                      RAST._IExpr _8320___mcc_h6073 = _source378.dtor_body;
                    }
                  } else {
                  }
                } else if (_source377.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8321___mcc_h6077 = _source377.dtor_op2;
                  RAST._IExpr _8322___mcc_h6078 = _source377.dtor_left;
                  RAST._IExpr _8323___mcc_h6079 = _source377.dtor_right;
                  DAST.Format._IBinaryOpFormat _8324___mcc_h6080 = _source377.dtor_format2;
                } else if (_source377.is_TypeAscription) {
                  RAST._IExpr _8325___mcc_h6085 = _source377.dtor_left;
                  RAST._IType _8326___mcc_h6086 = _source377.dtor_tpe;
                } else if (_source377.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8327___mcc_h6089 = _source377.dtor_value;
                } else if (_source377.is_LiteralBool) {
                  bool _8328___mcc_h6091 = _source377.dtor_bvalue;
                } else if (_source377.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8329___mcc_h6093 = _source377.dtor_value;
                  bool _8330___mcc_h6094 = _source377.dtor_binary;
                } else if (_source377.is_DeclareVar) {
                  RAST._IDeclareType _8331___mcc_h6097 = _source377.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8332___mcc_h6098 = _source377.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8333___mcc_h6099 = _source377.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8334___mcc_h6100 = _source377.dtor_optRhs;
                } else if (_source377.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8335___mcc_h6105 = _source377.dtor_names;
                  RAST._IExpr _8336___mcc_h6106 = _source377.dtor_rhs;
                } else if (_source377.is_IfExpr) {
                  RAST._IExpr _8337___mcc_h6109 = _source377.dtor_cond;
                  RAST._IExpr _8338___mcc_h6110 = _source377.dtor_thn;
                  RAST._IExpr _8339___mcc_h6111 = _source377.dtor_els;
                } else if (_source377.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8340___mcc_h6115 = _source377.dtor_optCond;
                  RAST._IExpr _8341___mcc_h6116 = _source377.dtor_underlying;
                } else if (_source377.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8342___mcc_h6119 = _source377.dtor_name;
                  RAST._IExpr _8343___mcc_h6120 = _source377.dtor_range;
                  RAST._IExpr _8344___mcc_h6121 = _source377.dtor_body;
                } else if (_source377.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8345___mcc_h6125 = _source377.dtor_lbl;
                  RAST._IExpr _8346___mcc_h6126 = _source377.dtor_underlying;
                } else if (_source377.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8347___mcc_h6129 = _source377.dtor_optLbl;
                } else if (_source377.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8348___mcc_h6131 = _source377.dtor_optLbl;
                } else if (_source377.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8349___mcc_h6133 = _source377.dtor_optExpr;
                } else if (_source377.is_CallType) {
                  RAST._IExpr _8350___mcc_h6135 = _source377.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8351___mcc_h6136 = _source377.dtor_typeParameters;
                } else if (_source377.is_Call) {
                  RAST._IExpr _8352___mcc_h6139 = _source377.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8353___mcc_h6140 = _source377.dtor_arguments;
                } else if (_source377.is_Select) {
                  RAST._IExpr _8354___mcc_h6143 = _source377.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8355___mcc_h6144 = _source377.dtor_name;
                } else if (_source377.is_MemberSelect) {
                  RAST._IExpr _8356___mcc_h6147 = _source377.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8357___mcc_h6148 = _source377.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8358___mcc_h6151 = _source377.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8359___mcc_h6152 = _source377.dtor_retType;
                  RAST._IExpr _8360___mcc_h6153 = _source377.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8244_field));
              if (_8243_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1965;
              DCOMP._IOwnership _out1966;
              (this).FromOwned(r, expectedOwnership, out _out1965, out _out1966);
              r = _out1965;
              resultingOwnership = _out1966;
              readIdents = _8252_recIdents;
            }
            return ;
          }
        } else if (_source324.is_SelectFn) {
          DAST._IExpression _8361___mcc_h177 = _source324.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _8362___mcc_h178 = _source324.dtor_field;
          bool _8363___mcc_h179 = _source324.dtor_onDatatype;
          bool _8364___mcc_h180 = _source324.dtor_isStatic;
          BigInteger _8365___mcc_h181 = _source324.dtor_arity;
          DAST._IType _8366_fieldType = _5052___mcc_h58;
          bool _8367_isDatatype = _5051___mcc_h57;
          bool _8368_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _8369_field = _5049___mcc_h55;
          DAST._IExpression _8370_on = _5048___mcc_h54;
          {
            if (_8367_isDatatype) {
              RAST._IExpr _8371_onExpr;
              DCOMP._IOwnership _8372_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8373_recIdents;
              RAST._IExpr _out1967;
              DCOMP._IOwnership _out1968;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1969;
              (this).GenExpr(_8370_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1967, out _out1968, out _out1969);
              _8371_onExpr = _out1967;
              _8372_onOwned = _out1968;
              _8373_recIdents = _out1969;
              r = ((_8371_onExpr).Sel(DCOMP.__default.escapeName(_8369_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8374_typ;
              RAST._IType _out1970;
              _out1970 = (this).GenType(_8366_fieldType, DCOMP.GenTypeContext.@default());
              _8374_typ = _out1970;
              RAST._IExpr _out1971;
              DCOMP._IOwnership _out1972;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1971, out _out1972);
              r = _out1971;
              resultingOwnership = _out1972;
              readIdents = _8373_recIdents;
            } else {
              RAST._IExpr _8375_onExpr;
              DCOMP._IOwnership _8376_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8377_recIdents;
              RAST._IExpr _out1973;
              DCOMP._IOwnership _out1974;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1975;
              (this).GenExpr(_8370_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1973, out _out1974, out _out1975);
              _8375_onExpr = _out1973;
              _8376_onOwned = _out1974;
              _8377_recIdents = _out1975;
              r = _8375_onExpr;
              if (!object.Equals(_8375_onExpr, RAST.__default.self)) {
                RAST._IExpr _source379 = _8375_onExpr;
                if (_source379.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8378___mcc_h6157 = _source379.dtor_content;
                } else if (_source379.is_ExprFromType) {
                  RAST._IType _8379___mcc_h6159 = _source379.dtor_tpe;
                } else if (_source379.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8380___mcc_h6161 = _source379.dtor_name;
                } else if (_source379.is_Match) {
                  RAST._IExpr _8381___mcc_h6163 = _source379.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8382___mcc_h6164 = _source379.dtor_cases;
                } else if (_source379.is_StmtExpr) {
                  RAST._IExpr _8383___mcc_h6167 = _source379.dtor_stmt;
                  RAST._IExpr _8384___mcc_h6168 = _source379.dtor_rhs;
                } else if (_source379.is_Block) {
                  RAST._IExpr _8385___mcc_h6171 = _source379.dtor_underlying;
                } else if (_source379.is_StructBuild) {
                  RAST._IExpr _8386___mcc_h6173 = _source379.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8387___mcc_h6174 = _source379.dtor_assignments;
                } else if (_source379.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8388___mcc_h6177 = _source379.dtor_arguments;
                } else if (_source379.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8389___mcc_h6179 = _source379.dtor_op1;
                  RAST._IExpr _8390___mcc_h6180 = _source379.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8391___mcc_h6181 = _source379.dtor_format;
                  if (object.Equals(_8389___mcc_h6179, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source380 = _8390___mcc_h6180;
                    if (_source380.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8392___mcc_h6185 = _source380.dtor_content;
                    } else if (_source380.is_ExprFromType) {
                      RAST._IType _8393___mcc_h6187 = _source380.dtor_tpe;
                    } else if (_source380.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8394___mcc_h6189 = _source380.dtor_name;
                      if (object.Equals(_8394___mcc_h6189, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source380.is_Match) {
                      RAST._IExpr _8395___mcc_h6191 = _source380.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8396___mcc_h6192 = _source380.dtor_cases;
                    } else if (_source380.is_StmtExpr) {
                      RAST._IExpr _8397___mcc_h6195 = _source380.dtor_stmt;
                      RAST._IExpr _8398___mcc_h6196 = _source380.dtor_rhs;
                    } else if (_source380.is_Block) {
                      RAST._IExpr _8399___mcc_h6199 = _source380.dtor_underlying;
                    } else if (_source380.is_StructBuild) {
                      RAST._IExpr _8400___mcc_h6201 = _source380.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8401___mcc_h6202 = _source380.dtor_assignments;
                    } else if (_source380.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8402___mcc_h6205 = _source380.dtor_arguments;
                    } else if (_source380.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8403___mcc_h6207 = _source380.dtor_op1;
                      RAST._IExpr _8404___mcc_h6208 = _source380.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8405___mcc_h6209 = _source380.dtor_format;
                    } else if (_source380.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8406___mcc_h6213 = _source380.dtor_op2;
                      RAST._IExpr _8407___mcc_h6214 = _source380.dtor_left;
                      RAST._IExpr _8408___mcc_h6215 = _source380.dtor_right;
                      DAST.Format._IBinaryOpFormat _8409___mcc_h6216 = _source380.dtor_format2;
                    } else if (_source380.is_TypeAscription) {
                      RAST._IExpr _8410___mcc_h6221 = _source380.dtor_left;
                      RAST._IType _8411___mcc_h6222 = _source380.dtor_tpe;
                    } else if (_source380.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8412___mcc_h6225 = _source380.dtor_value;
                    } else if (_source380.is_LiteralBool) {
                      bool _8413___mcc_h6227 = _source380.dtor_bvalue;
                    } else if (_source380.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8414___mcc_h6229 = _source380.dtor_value;
                      bool _8415___mcc_h6230 = _source380.dtor_binary;
                    } else if (_source380.is_DeclareVar) {
                      RAST._IDeclareType _8416___mcc_h6233 = _source380.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8417___mcc_h6234 = _source380.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8418___mcc_h6235 = _source380.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8419___mcc_h6236 = _source380.dtor_optRhs;
                    } else if (_source380.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8420___mcc_h6241 = _source380.dtor_names;
                      RAST._IExpr _8421___mcc_h6242 = _source380.dtor_rhs;
                    } else if (_source380.is_IfExpr) {
                      RAST._IExpr _8422___mcc_h6245 = _source380.dtor_cond;
                      RAST._IExpr _8423___mcc_h6246 = _source380.dtor_thn;
                      RAST._IExpr _8424___mcc_h6247 = _source380.dtor_els;
                    } else if (_source380.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8425___mcc_h6251 = _source380.dtor_optCond;
                      RAST._IExpr _8426___mcc_h6252 = _source380.dtor_underlying;
                    } else if (_source380.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8427___mcc_h6255 = _source380.dtor_name;
                      RAST._IExpr _8428___mcc_h6256 = _source380.dtor_range;
                      RAST._IExpr _8429___mcc_h6257 = _source380.dtor_body;
                    } else if (_source380.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8430___mcc_h6261 = _source380.dtor_lbl;
                      RAST._IExpr _8431___mcc_h6262 = _source380.dtor_underlying;
                    } else if (_source380.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8432___mcc_h6265 = _source380.dtor_optLbl;
                    } else if (_source380.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8433___mcc_h6267 = _source380.dtor_optLbl;
                    } else if (_source380.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8434___mcc_h6269 = _source380.dtor_optExpr;
                    } else if (_source380.is_CallType) {
                      RAST._IExpr _8435___mcc_h6271 = _source380.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8436___mcc_h6272 = _source380.dtor_typeParameters;
                    } else if (_source380.is_Call) {
                      RAST._IExpr _8437___mcc_h6275 = _source380.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8438___mcc_h6276 = _source380.dtor_arguments;
                    } else if (_source380.is_Select) {
                      RAST._IExpr _8439___mcc_h6279 = _source380.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8440___mcc_h6280 = _source380.dtor_name;
                    } else if (_source380.is_MemberSelect) {
                      RAST._IExpr _8441___mcc_h6283 = _source380.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8442___mcc_h6284 = _source380.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8443___mcc_h6287 = _source380.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8444___mcc_h6288 = _source380.dtor_retType;
                      RAST._IExpr _8445___mcc_h6289 = _source380.dtor_body;
                    }
                  } else {
                  }
                } else if (_source379.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8446___mcc_h6293 = _source379.dtor_op2;
                  RAST._IExpr _8447___mcc_h6294 = _source379.dtor_left;
                  RAST._IExpr _8448___mcc_h6295 = _source379.dtor_right;
                  DAST.Format._IBinaryOpFormat _8449___mcc_h6296 = _source379.dtor_format2;
                } else if (_source379.is_TypeAscription) {
                  RAST._IExpr _8450___mcc_h6301 = _source379.dtor_left;
                  RAST._IType _8451___mcc_h6302 = _source379.dtor_tpe;
                } else if (_source379.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8452___mcc_h6305 = _source379.dtor_value;
                } else if (_source379.is_LiteralBool) {
                  bool _8453___mcc_h6307 = _source379.dtor_bvalue;
                } else if (_source379.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8454___mcc_h6309 = _source379.dtor_value;
                  bool _8455___mcc_h6310 = _source379.dtor_binary;
                } else if (_source379.is_DeclareVar) {
                  RAST._IDeclareType _8456___mcc_h6313 = _source379.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8457___mcc_h6314 = _source379.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8458___mcc_h6315 = _source379.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8459___mcc_h6316 = _source379.dtor_optRhs;
                } else if (_source379.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8460___mcc_h6321 = _source379.dtor_names;
                  RAST._IExpr _8461___mcc_h6322 = _source379.dtor_rhs;
                } else if (_source379.is_IfExpr) {
                  RAST._IExpr _8462___mcc_h6325 = _source379.dtor_cond;
                  RAST._IExpr _8463___mcc_h6326 = _source379.dtor_thn;
                  RAST._IExpr _8464___mcc_h6327 = _source379.dtor_els;
                } else if (_source379.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8465___mcc_h6331 = _source379.dtor_optCond;
                  RAST._IExpr _8466___mcc_h6332 = _source379.dtor_underlying;
                } else if (_source379.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8467___mcc_h6335 = _source379.dtor_name;
                  RAST._IExpr _8468___mcc_h6336 = _source379.dtor_range;
                  RAST._IExpr _8469___mcc_h6337 = _source379.dtor_body;
                } else if (_source379.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8470___mcc_h6341 = _source379.dtor_lbl;
                  RAST._IExpr _8471___mcc_h6342 = _source379.dtor_underlying;
                } else if (_source379.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8472___mcc_h6345 = _source379.dtor_optLbl;
                } else if (_source379.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8473___mcc_h6347 = _source379.dtor_optLbl;
                } else if (_source379.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8474___mcc_h6349 = _source379.dtor_optExpr;
                } else if (_source379.is_CallType) {
                  RAST._IExpr _8475___mcc_h6351 = _source379.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8476___mcc_h6352 = _source379.dtor_typeParameters;
                } else if (_source379.is_Call) {
                  RAST._IExpr _8477___mcc_h6355 = _source379.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8478___mcc_h6356 = _source379.dtor_arguments;
                } else if (_source379.is_Select) {
                  RAST._IExpr _8479___mcc_h6359 = _source379.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8480___mcc_h6360 = _source379.dtor_name;
                } else if (_source379.is_MemberSelect) {
                  RAST._IExpr _8481___mcc_h6363 = _source379.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8482___mcc_h6364 = _source379.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8483___mcc_h6367 = _source379.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8484___mcc_h6368 = _source379.dtor_retType;
                  RAST._IExpr _8485___mcc_h6369 = _source379.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8369_field));
              if (_8368_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1976;
              DCOMP._IOwnership _out1977;
              (this).FromOwned(r, expectedOwnership, out _out1976, out _out1977);
              r = _out1976;
              resultingOwnership = _out1977;
              readIdents = _8377_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Index) {
          DAST._IExpression _8486___mcc_h187 = _source324.dtor_expr;
          DAST._ICollKind _8487___mcc_h188 = _source324.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _8488___mcc_h189 = _source324.dtor_indices;
          DAST._IType _8489_fieldType = _5052___mcc_h58;
          bool _8490_isDatatype = _5051___mcc_h57;
          bool _8491_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _8492_field = _5049___mcc_h55;
          DAST._IExpression _8493_on = _5048___mcc_h54;
          {
            if (_8490_isDatatype) {
              RAST._IExpr _8494_onExpr;
              DCOMP._IOwnership _8495_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8496_recIdents;
              RAST._IExpr _out1978;
              DCOMP._IOwnership _out1979;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1980;
              (this).GenExpr(_8493_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1978, out _out1979, out _out1980);
              _8494_onExpr = _out1978;
              _8495_onOwned = _out1979;
              _8496_recIdents = _out1980;
              r = ((_8494_onExpr).Sel(DCOMP.__default.escapeName(_8492_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8497_typ;
              RAST._IType _out1981;
              _out1981 = (this).GenType(_8489_fieldType, DCOMP.GenTypeContext.@default());
              _8497_typ = _out1981;
              RAST._IExpr _out1982;
              DCOMP._IOwnership _out1983;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1982, out _out1983);
              r = _out1982;
              resultingOwnership = _out1983;
              readIdents = _8496_recIdents;
            } else {
              RAST._IExpr _8498_onExpr;
              DCOMP._IOwnership _8499_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8500_recIdents;
              RAST._IExpr _out1984;
              DCOMP._IOwnership _out1985;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1986;
              (this).GenExpr(_8493_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1984, out _out1985, out _out1986);
              _8498_onExpr = _out1984;
              _8499_onOwned = _out1985;
              _8500_recIdents = _out1986;
              r = _8498_onExpr;
              if (!object.Equals(_8498_onExpr, RAST.__default.self)) {
                RAST._IExpr _source381 = _8498_onExpr;
                if (_source381.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8501___mcc_h6373 = _source381.dtor_content;
                } else if (_source381.is_ExprFromType) {
                  RAST._IType _8502___mcc_h6375 = _source381.dtor_tpe;
                } else if (_source381.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8503___mcc_h6377 = _source381.dtor_name;
                } else if (_source381.is_Match) {
                  RAST._IExpr _8504___mcc_h6379 = _source381.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8505___mcc_h6380 = _source381.dtor_cases;
                } else if (_source381.is_StmtExpr) {
                  RAST._IExpr _8506___mcc_h6383 = _source381.dtor_stmt;
                  RAST._IExpr _8507___mcc_h6384 = _source381.dtor_rhs;
                } else if (_source381.is_Block) {
                  RAST._IExpr _8508___mcc_h6387 = _source381.dtor_underlying;
                } else if (_source381.is_StructBuild) {
                  RAST._IExpr _8509___mcc_h6389 = _source381.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8510___mcc_h6390 = _source381.dtor_assignments;
                } else if (_source381.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8511___mcc_h6393 = _source381.dtor_arguments;
                } else if (_source381.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8512___mcc_h6395 = _source381.dtor_op1;
                  RAST._IExpr _8513___mcc_h6396 = _source381.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8514___mcc_h6397 = _source381.dtor_format;
                  if (object.Equals(_8512___mcc_h6395, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source382 = _8513___mcc_h6396;
                    if (_source382.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8515___mcc_h6401 = _source382.dtor_content;
                    } else if (_source382.is_ExprFromType) {
                      RAST._IType _8516___mcc_h6403 = _source382.dtor_tpe;
                    } else if (_source382.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8517___mcc_h6405 = _source382.dtor_name;
                      if (object.Equals(_8517___mcc_h6405, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source382.is_Match) {
                      RAST._IExpr _8518___mcc_h6407 = _source382.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8519___mcc_h6408 = _source382.dtor_cases;
                    } else if (_source382.is_StmtExpr) {
                      RAST._IExpr _8520___mcc_h6411 = _source382.dtor_stmt;
                      RAST._IExpr _8521___mcc_h6412 = _source382.dtor_rhs;
                    } else if (_source382.is_Block) {
                      RAST._IExpr _8522___mcc_h6415 = _source382.dtor_underlying;
                    } else if (_source382.is_StructBuild) {
                      RAST._IExpr _8523___mcc_h6417 = _source382.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8524___mcc_h6418 = _source382.dtor_assignments;
                    } else if (_source382.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8525___mcc_h6421 = _source382.dtor_arguments;
                    } else if (_source382.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8526___mcc_h6423 = _source382.dtor_op1;
                      RAST._IExpr _8527___mcc_h6424 = _source382.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8528___mcc_h6425 = _source382.dtor_format;
                    } else if (_source382.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8529___mcc_h6429 = _source382.dtor_op2;
                      RAST._IExpr _8530___mcc_h6430 = _source382.dtor_left;
                      RAST._IExpr _8531___mcc_h6431 = _source382.dtor_right;
                      DAST.Format._IBinaryOpFormat _8532___mcc_h6432 = _source382.dtor_format2;
                    } else if (_source382.is_TypeAscription) {
                      RAST._IExpr _8533___mcc_h6437 = _source382.dtor_left;
                      RAST._IType _8534___mcc_h6438 = _source382.dtor_tpe;
                    } else if (_source382.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8535___mcc_h6441 = _source382.dtor_value;
                    } else if (_source382.is_LiteralBool) {
                      bool _8536___mcc_h6443 = _source382.dtor_bvalue;
                    } else if (_source382.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8537___mcc_h6445 = _source382.dtor_value;
                      bool _8538___mcc_h6446 = _source382.dtor_binary;
                    } else if (_source382.is_DeclareVar) {
                      RAST._IDeclareType _8539___mcc_h6449 = _source382.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8540___mcc_h6450 = _source382.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8541___mcc_h6451 = _source382.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8542___mcc_h6452 = _source382.dtor_optRhs;
                    } else if (_source382.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8543___mcc_h6457 = _source382.dtor_names;
                      RAST._IExpr _8544___mcc_h6458 = _source382.dtor_rhs;
                    } else if (_source382.is_IfExpr) {
                      RAST._IExpr _8545___mcc_h6461 = _source382.dtor_cond;
                      RAST._IExpr _8546___mcc_h6462 = _source382.dtor_thn;
                      RAST._IExpr _8547___mcc_h6463 = _source382.dtor_els;
                    } else if (_source382.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8548___mcc_h6467 = _source382.dtor_optCond;
                      RAST._IExpr _8549___mcc_h6468 = _source382.dtor_underlying;
                    } else if (_source382.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8550___mcc_h6471 = _source382.dtor_name;
                      RAST._IExpr _8551___mcc_h6472 = _source382.dtor_range;
                      RAST._IExpr _8552___mcc_h6473 = _source382.dtor_body;
                    } else if (_source382.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8553___mcc_h6477 = _source382.dtor_lbl;
                      RAST._IExpr _8554___mcc_h6478 = _source382.dtor_underlying;
                    } else if (_source382.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8555___mcc_h6481 = _source382.dtor_optLbl;
                    } else if (_source382.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8556___mcc_h6483 = _source382.dtor_optLbl;
                    } else if (_source382.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8557___mcc_h6485 = _source382.dtor_optExpr;
                    } else if (_source382.is_CallType) {
                      RAST._IExpr _8558___mcc_h6487 = _source382.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8559___mcc_h6488 = _source382.dtor_typeParameters;
                    } else if (_source382.is_Call) {
                      RAST._IExpr _8560___mcc_h6491 = _source382.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8561___mcc_h6492 = _source382.dtor_arguments;
                    } else if (_source382.is_Select) {
                      RAST._IExpr _8562___mcc_h6495 = _source382.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8563___mcc_h6496 = _source382.dtor_name;
                    } else if (_source382.is_MemberSelect) {
                      RAST._IExpr _8564___mcc_h6499 = _source382.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8565___mcc_h6500 = _source382.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8566___mcc_h6503 = _source382.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8567___mcc_h6504 = _source382.dtor_retType;
                      RAST._IExpr _8568___mcc_h6505 = _source382.dtor_body;
                    }
                  } else {
                  }
                } else if (_source381.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8569___mcc_h6509 = _source381.dtor_op2;
                  RAST._IExpr _8570___mcc_h6510 = _source381.dtor_left;
                  RAST._IExpr _8571___mcc_h6511 = _source381.dtor_right;
                  DAST.Format._IBinaryOpFormat _8572___mcc_h6512 = _source381.dtor_format2;
                } else if (_source381.is_TypeAscription) {
                  RAST._IExpr _8573___mcc_h6517 = _source381.dtor_left;
                  RAST._IType _8574___mcc_h6518 = _source381.dtor_tpe;
                } else if (_source381.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8575___mcc_h6521 = _source381.dtor_value;
                } else if (_source381.is_LiteralBool) {
                  bool _8576___mcc_h6523 = _source381.dtor_bvalue;
                } else if (_source381.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8577___mcc_h6525 = _source381.dtor_value;
                  bool _8578___mcc_h6526 = _source381.dtor_binary;
                } else if (_source381.is_DeclareVar) {
                  RAST._IDeclareType _8579___mcc_h6529 = _source381.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8580___mcc_h6530 = _source381.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8581___mcc_h6531 = _source381.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8582___mcc_h6532 = _source381.dtor_optRhs;
                } else if (_source381.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8583___mcc_h6537 = _source381.dtor_names;
                  RAST._IExpr _8584___mcc_h6538 = _source381.dtor_rhs;
                } else if (_source381.is_IfExpr) {
                  RAST._IExpr _8585___mcc_h6541 = _source381.dtor_cond;
                  RAST._IExpr _8586___mcc_h6542 = _source381.dtor_thn;
                  RAST._IExpr _8587___mcc_h6543 = _source381.dtor_els;
                } else if (_source381.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8588___mcc_h6547 = _source381.dtor_optCond;
                  RAST._IExpr _8589___mcc_h6548 = _source381.dtor_underlying;
                } else if (_source381.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8590___mcc_h6551 = _source381.dtor_name;
                  RAST._IExpr _8591___mcc_h6552 = _source381.dtor_range;
                  RAST._IExpr _8592___mcc_h6553 = _source381.dtor_body;
                } else if (_source381.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8593___mcc_h6557 = _source381.dtor_lbl;
                  RAST._IExpr _8594___mcc_h6558 = _source381.dtor_underlying;
                } else if (_source381.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8595___mcc_h6561 = _source381.dtor_optLbl;
                } else if (_source381.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8596___mcc_h6563 = _source381.dtor_optLbl;
                } else if (_source381.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8597___mcc_h6565 = _source381.dtor_optExpr;
                } else if (_source381.is_CallType) {
                  RAST._IExpr _8598___mcc_h6567 = _source381.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8599___mcc_h6568 = _source381.dtor_typeParameters;
                } else if (_source381.is_Call) {
                  RAST._IExpr _8600___mcc_h6571 = _source381.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8601___mcc_h6572 = _source381.dtor_arguments;
                } else if (_source381.is_Select) {
                  RAST._IExpr _8602___mcc_h6575 = _source381.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8603___mcc_h6576 = _source381.dtor_name;
                } else if (_source381.is_MemberSelect) {
                  RAST._IExpr _8604___mcc_h6579 = _source381.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8605___mcc_h6580 = _source381.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8606___mcc_h6583 = _source381.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8607___mcc_h6584 = _source381.dtor_retType;
                  RAST._IExpr _8608___mcc_h6585 = _source381.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8492_field));
              if (_8491_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1987;
              DCOMP._IOwnership _out1988;
              (this).FromOwned(r, expectedOwnership, out _out1987, out _out1988);
              r = _out1987;
              resultingOwnership = _out1988;
              readIdents = _8500_recIdents;
            }
            return ;
          }
        } else if (_source324.is_IndexRange) {
          DAST._IExpression _8609___mcc_h193 = _source324.dtor_expr;
          bool _8610___mcc_h194 = _source324.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _8611___mcc_h195 = _source324.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _8612___mcc_h196 = _source324.dtor_high;
          DAST._IType _8613_fieldType = _5052___mcc_h58;
          bool _8614_isDatatype = _5051___mcc_h57;
          bool _8615_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _8616_field = _5049___mcc_h55;
          DAST._IExpression _8617_on = _5048___mcc_h54;
          {
            if (_8614_isDatatype) {
              RAST._IExpr _8618_onExpr;
              DCOMP._IOwnership _8619_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8620_recIdents;
              RAST._IExpr _out1989;
              DCOMP._IOwnership _out1990;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1991;
              (this).GenExpr(_8617_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1989, out _out1990, out _out1991);
              _8618_onExpr = _out1989;
              _8619_onOwned = _out1990;
              _8620_recIdents = _out1991;
              r = ((_8618_onExpr).Sel(DCOMP.__default.escapeName(_8616_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8621_typ;
              RAST._IType _out1992;
              _out1992 = (this).GenType(_8613_fieldType, DCOMP.GenTypeContext.@default());
              _8621_typ = _out1992;
              RAST._IExpr _out1993;
              DCOMP._IOwnership _out1994;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out1993, out _out1994);
              r = _out1993;
              resultingOwnership = _out1994;
              readIdents = _8620_recIdents;
            } else {
              RAST._IExpr _8622_onExpr;
              DCOMP._IOwnership _8623_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8624_recIdents;
              RAST._IExpr _out1995;
              DCOMP._IOwnership _out1996;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1997;
              (this).GenExpr(_8617_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out1995, out _out1996, out _out1997);
              _8622_onExpr = _out1995;
              _8623_onOwned = _out1996;
              _8624_recIdents = _out1997;
              r = _8622_onExpr;
              if (!object.Equals(_8622_onExpr, RAST.__default.self)) {
                RAST._IExpr _source383 = _8622_onExpr;
                if (_source383.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8625___mcc_h6589 = _source383.dtor_content;
                } else if (_source383.is_ExprFromType) {
                  RAST._IType _8626___mcc_h6591 = _source383.dtor_tpe;
                } else if (_source383.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8627___mcc_h6593 = _source383.dtor_name;
                } else if (_source383.is_Match) {
                  RAST._IExpr _8628___mcc_h6595 = _source383.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8629___mcc_h6596 = _source383.dtor_cases;
                } else if (_source383.is_StmtExpr) {
                  RAST._IExpr _8630___mcc_h6599 = _source383.dtor_stmt;
                  RAST._IExpr _8631___mcc_h6600 = _source383.dtor_rhs;
                } else if (_source383.is_Block) {
                  RAST._IExpr _8632___mcc_h6603 = _source383.dtor_underlying;
                } else if (_source383.is_StructBuild) {
                  RAST._IExpr _8633___mcc_h6605 = _source383.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8634___mcc_h6606 = _source383.dtor_assignments;
                } else if (_source383.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8635___mcc_h6609 = _source383.dtor_arguments;
                } else if (_source383.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8636___mcc_h6611 = _source383.dtor_op1;
                  RAST._IExpr _8637___mcc_h6612 = _source383.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8638___mcc_h6613 = _source383.dtor_format;
                  if (object.Equals(_8636___mcc_h6611, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source384 = _8637___mcc_h6612;
                    if (_source384.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8639___mcc_h6617 = _source384.dtor_content;
                    } else if (_source384.is_ExprFromType) {
                      RAST._IType _8640___mcc_h6619 = _source384.dtor_tpe;
                    } else if (_source384.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8641___mcc_h6621 = _source384.dtor_name;
                      if (object.Equals(_8641___mcc_h6621, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source384.is_Match) {
                      RAST._IExpr _8642___mcc_h6623 = _source384.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8643___mcc_h6624 = _source384.dtor_cases;
                    } else if (_source384.is_StmtExpr) {
                      RAST._IExpr _8644___mcc_h6627 = _source384.dtor_stmt;
                      RAST._IExpr _8645___mcc_h6628 = _source384.dtor_rhs;
                    } else if (_source384.is_Block) {
                      RAST._IExpr _8646___mcc_h6631 = _source384.dtor_underlying;
                    } else if (_source384.is_StructBuild) {
                      RAST._IExpr _8647___mcc_h6633 = _source384.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8648___mcc_h6634 = _source384.dtor_assignments;
                    } else if (_source384.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8649___mcc_h6637 = _source384.dtor_arguments;
                    } else if (_source384.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8650___mcc_h6639 = _source384.dtor_op1;
                      RAST._IExpr _8651___mcc_h6640 = _source384.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8652___mcc_h6641 = _source384.dtor_format;
                    } else if (_source384.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8653___mcc_h6645 = _source384.dtor_op2;
                      RAST._IExpr _8654___mcc_h6646 = _source384.dtor_left;
                      RAST._IExpr _8655___mcc_h6647 = _source384.dtor_right;
                      DAST.Format._IBinaryOpFormat _8656___mcc_h6648 = _source384.dtor_format2;
                    } else if (_source384.is_TypeAscription) {
                      RAST._IExpr _8657___mcc_h6653 = _source384.dtor_left;
                      RAST._IType _8658___mcc_h6654 = _source384.dtor_tpe;
                    } else if (_source384.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8659___mcc_h6657 = _source384.dtor_value;
                    } else if (_source384.is_LiteralBool) {
                      bool _8660___mcc_h6659 = _source384.dtor_bvalue;
                    } else if (_source384.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8661___mcc_h6661 = _source384.dtor_value;
                      bool _8662___mcc_h6662 = _source384.dtor_binary;
                    } else if (_source384.is_DeclareVar) {
                      RAST._IDeclareType _8663___mcc_h6665 = _source384.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8664___mcc_h6666 = _source384.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8665___mcc_h6667 = _source384.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8666___mcc_h6668 = _source384.dtor_optRhs;
                    } else if (_source384.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8667___mcc_h6673 = _source384.dtor_names;
                      RAST._IExpr _8668___mcc_h6674 = _source384.dtor_rhs;
                    } else if (_source384.is_IfExpr) {
                      RAST._IExpr _8669___mcc_h6677 = _source384.dtor_cond;
                      RAST._IExpr _8670___mcc_h6678 = _source384.dtor_thn;
                      RAST._IExpr _8671___mcc_h6679 = _source384.dtor_els;
                    } else if (_source384.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8672___mcc_h6683 = _source384.dtor_optCond;
                      RAST._IExpr _8673___mcc_h6684 = _source384.dtor_underlying;
                    } else if (_source384.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8674___mcc_h6687 = _source384.dtor_name;
                      RAST._IExpr _8675___mcc_h6688 = _source384.dtor_range;
                      RAST._IExpr _8676___mcc_h6689 = _source384.dtor_body;
                    } else if (_source384.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8677___mcc_h6693 = _source384.dtor_lbl;
                      RAST._IExpr _8678___mcc_h6694 = _source384.dtor_underlying;
                    } else if (_source384.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8679___mcc_h6697 = _source384.dtor_optLbl;
                    } else if (_source384.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8680___mcc_h6699 = _source384.dtor_optLbl;
                    } else if (_source384.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8681___mcc_h6701 = _source384.dtor_optExpr;
                    } else if (_source384.is_CallType) {
                      RAST._IExpr _8682___mcc_h6703 = _source384.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8683___mcc_h6704 = _source384.dtor_typeParameters;
                    } else if (_source384.is_Call) {
                      RAST._IExpr _8684___mcc_h6707 = _source384.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8685___mcc_h6708 = _source384.dtor_arguments;
                    } else if (_source384.is_Select) {
                      RAST._IExpr _8686___mcc_h6711 = _source384.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8687___mcc_h6712 = _source384.dtor_name;
                    } else if (_source384.is_MemberSelect) {
                      RAST._IExpr _8688___mcc_h6715 = _source384.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8689___mcc_h6716 = _source384.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8690___mcc_h6719 = _source384.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8691___mcc_h6720 = _source384.dtor_retType;
                      RAST._IExpr _8692___mcc_h6721 = _source384.dtor_body;
                    }
                  } else {
                  }
                } else if (_source383.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8693___mcc_h6725 = _source383.dtor_op2;
                  RAST._IExpr _8694___mcc_h6726 = _source383.dtor_left;
                  RAST._IExpr _8695___mcc_h6727 = _source383.dtor_right;
                  DAST.Format._IBinaryOpFormat _8696___mcc_h6728 = _source383.dtor_format2;
                } else if (_source383.is_TypeAscription) {
                  RAST._IExpr _8697___mcc_h6733 = _source383.dtor_left;
                  RAST._IType _8698___mcc_h6734 = _source383.dtor_tpe;
                } else if (_source383.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8699___mcc_h6737 = _source383.dtor_value;
                } else if (_source383.is_LiteralBool) {
                  bool _8700___mcc_h6739 = _source383.dtor_bvalue;
                } else if (_source383.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8701___mcc_h6741 = _source383.dtor_value;
                  bool _8702___mcc_h6742 = _source383.dtor_binary;
                } else if (_source383.is_DeclareVar) {
                  RAST._IDeclareType _8703___mcc_h6745 = _source383.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8704___mcc_h6746 = _source383.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8705___mcc_h6747 = _source383.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8706___mcc_h6748 = _source383.dtor_optRhs;
                } else if (_source383.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8707___mcc_h6753 = _source383.dtor_names;
                  RAST._IExpr _8708___mcc_h6754 = _source383.dtor_rhs;
                } else if (_source383.is_IfExpr) {
                  RAST._IExpr _8709___mcc_h6757 = _source383.dtor_cond;
                  RAST._IExpr _8710___mcc_h6758 = _source383.dtor_thn;
                  RAST._IExpr _8711___mcc_h6759 = _source383.dtor_els;
                } else if (_source383.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8712___mcc_h6763 = _source383.dtor_optCond;
                  RAST._IExpr _8713___mcc_h6764 = _source383.dtor_underlying;
                } else if (_source383.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8714___mcc_h6767 = _source383.dtor_name;
                  RAST._IExpr _8715___mcc_h6768 = _source383.dtor_range;
                  RAST._IExpr _8716___mcc_h6769 = _source383.dtor_body;
                } else if (_source383.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8717___mcc_h6773 = _source383.dtor_lbl;
                  RAST._IExpr _8718___mcc_h6774 = _source383.dtor_underlying;
                } else if (_source383.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8719___mcc_h6777 = _source383.dtor_optLbl;
                } else if (_source383.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8720___mcc_h6779 = _source383.dtor_optLbl;
                } else if (_source383.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8721___mcc_h6781 = _source383.dtor_optExpr;
                } else if (_source383.is_CallType) {
                  RAST._IExpr _8722___mcc_h6783 = _source383.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8723___mcc_h6784 = _source383.dtor_typeParameters;
                } else if (_source383.is_Call) {
                  RAST._IExpr _8724___mcc_h6787 = _source383.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8725___mcc_h6788 = _source383.dtor_arguments;
                } else if (_source383.is_Select) {
                  RAST._IExpr _8726___mcc_h6791 = _source383.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8727___mcc_h6792 = _source383.dtor_name;
                } else if (_source383.is_MemberSelect) {
                  RAST._IExpr _8728___mcc_h6795 = _source383.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8729___mcc_h6796 = _source383.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8730___mcc_h6799 = _source383.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8731___mcc_h6800 = _source383.dtor_retType;
                  RAST._IExpr _8732___mcc_h6801 = _source383.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8616_field));
              if (_8615_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out1998;
              DCOMP._IOwnership _out1999;
              (this).FromOwned(r, expectedOwnership, out _out1998, out _out1999);
              r = _out1998;
              resultingOwnership = _out1999;
              readIdents = _8624_recIdents;
            }
            return ;
          }
        } else if (_source324.is_TupleSelect) {
          DAST._IExpression _8733___mcc_h201 = _source324.dtor_expr;
          BigInteger _8734___mcc_h202 = _source324.dtor_index;
          DAST._IType _8735___mcc_h203 = _source324.dtor_fieldType;
          DAST._IType _8736_fieldType = _5052___mcc_h58;
          bool _8737_isDatatype = _5051___mcc_h57;
          bool _8738_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _8739_field = _5049___mcc_h55;
          DAST._IExpression _8740_on = _5048___mcc_h54;
          {
            if (_8737_isDatatype) {
              RAST._IExpr _8741_onExpr;
              DCOMP._IOwnership _8742_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8743_recIdents;
              RAST._IExpr _out2000;
              DCOMP._IOwnership _out2001;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2002;
              (this).GenExpr(_8740_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2000, out _out2001, out _out2002);
              _8741_onExpr = _out2000;
              _8742_onOwned = _out2001;
              _8743_recIdents = _out2002;
              r = ((_8741_onExpr).Sel(DCOMP.__default.escapeName(_8739_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8744_typ;
              RAST._IType _out2003;
              _out2003 = (this).GenType(_8736_fieldType, DCOMP.GenTypeContext.@default());
              _8744_typ = _out2003;
              RAST._IExpr _out2004;
              DCOMP._IOwnership _out2005;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2004, out _out2005);
              r = _out2004;
              resultingOwnership = _out2005;
              readIdents = _8743_recIdents;
            } else {
              RAST._IExpr _8745_onExpr;
              DCOMP._IOwnership _8746_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8747_recIdents;
              RAST._IExpr _out2006;
              DCOMP._IOwnership _out2007;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2008;
              (this).GenExpr(_8740_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2006, out _out2007, out _out2008);
              _8745_onExpr = _out2006;
              _8746_onOwned = _out2007;
              _8747_recIdents = _out2008;
              r = _8745_onExpr;
              if (!object.Equals(_8745_onExpr, RAST.__default.self)) {
                RAST._IExpr _source385 = _8745_onExpr;
                if (_source385.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8748___mcc_h6805 = _source385.dtor_content;
                } else if (_source385.is_ExprFromType) {
                  RAST._IType _8749___mcc_h6807 = _source385.dtor_tpe;
                } else if (_source385.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8750___mcc_h6809 = _source385.dtor_name;
                } else if (_source385.is_Match) {
                  RAST._IExpr _8751___mcc_h6811 = _source385.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8752___mcc_h6812 = _source385.dtor_cases;
                } else if (_source385.is_StmtExpr) {
                  RAST._IExpr _8753___mcc_h6815 = _source385.dtor_stmt;
                  RAST._IExpr _8754___mcc_h6816 = _source385.dtor_rhs;
                } else if (_source385.is_Block) {
                  RAST._IExpr _8755___mcc_h6819 = _source385.dtor_underlying;
                } else if (_source385.is_StructBuild) {
                  RAST._IExpr _8756___mcc_h6821 = _source385.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8757___mcc_h6822 = _source385.dtor_assignments;
                } else if (_source385.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8758___mcc_h6825 = _source385.dtor_arguments;
                } else if (_source385.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8759___mcc_h6827 = _source385.dtor_op1;
                  RAST._IExpr _8760___mcc_h6828 = _source385.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8761___mcc_h6829 = _source385.dtor_format;
                  if (object.Equals(_8759___mcc_h6827, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source386 = _8760___mcc_h6828;
                    if (_source386.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8762___mcc_h6833 = _source386.dtor_content;
                    } else if (_source386.is_ExprFromType) {
                      RAST._IType _8763___mcc_h6835 = _source386.dtor_tpe;
                    } else if (_source386.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8764___mcc_h6837 = _source386.dtor_name;
                      if (object.Equals(_8764___mcc_h6837, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source386.is_Match) {
                      RAST._IExpr _8765___mcc_h6839 = _source386.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8766___mcc_h6840 = _source386.dtor_cases;
                    } else if (_source386.is_StmtExpr) {
                      RAST._IExpr _8767___mcc_h6843 = _source386.dtor_stmt;
                      RAST._IExpr _8768___mcc_h6844 = _source386.dtor_rhs;
                    } else if (_source386.is_Block) {
                      RAST._IExpr _8769___mcc_h6847 = _source386.dtor_underlying;
                    } else if (_source386.is_StructBuild) {
                      RAST._IExpr _8770___mcc_h6849 = _source386.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8771___mcc_h6850 = _source386.dtor_assignments;
                    } else if (_source386.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8772___mcc_h6853 = _source386.dtor_arguments;
                    } else if (_source386.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8773___mcc_h6855 = _source386.dtor_op1;
                      RAST._IExpr _8774___mcc_h6856 = _source386.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8775___mcc_h6857 = _source386.dtor_format;
                    } else if (_source386.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8776___mcc_h6861 = _source386.dtor_op2;
                      RAST._IExpr _8777___mcc_h6862 = _source386.dtor_left;
                      RAST._IExpr _8778___mcc_h6863 = _source386.dtor_right;
                      DAST.Format._IBinaryOpFormat _8779___mcc_h6864 = _source386.dtor_format2;
                    } else if (_source386.is_TypeAscription) {
                      RAST._IExpr _8780___mcc_h6869 = _source386.dtor_left;
                      RAST._IType _8781___mcc_h6870 = _source386.dtor_tpe;
                    } else if (_source386.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8782___mcc_h6873 = _source386.dtor_value;
                    } else if (_source386.is_LiteralBool) {
                      bool _8783___mcc_h6875 = _source386.dtor_bvalue;
                    } else if (_source386.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8784___mcc_h6877 = _source386.dtor_value;
                      bool _8785___mcc_h6878 = _source386.dtor_binary;
                    } else if (_source386.is_DeclareVar) {
                      RAST._IDeclareType _8786___mcc_h6881 = _source386.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8787___mcc_h6882 = _source386.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8788___mcc_h6883 = _source386.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8789___mcc_h6884 = _source386.dtor_optRhs;
                    } else if (_source386.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8790___mcc_h6889 = _source386.dtor_names;
                      RAST._IExpr _8791___mcc_h6890 = _source386.dtor_rhs;
                    } else if (_source386.is_IfExpr) {
                      RAST._IExpr _8792___mcc_h6893 = _source386.dtor_cond;
                      RAST._IExpr _8793___mcc_h6894 = _source386.dtor_thn;
                      RAST._IExpr _8794___mcc_h6895 = _source386.dtor_els;
                    } else if (_source386.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8795___mcc_h6899 = _source386.dtor_optCond;
                      RAST._IExpr _8796___mcc_h6900 = _source386.dtor_underlying;
                    } else if (_source386.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8797___mcc_h6903 = _source386.dtor_name;
                      RAST._IExpr _8798___mcc_h6904 = _source386.dtor_range;
                      RAST._IExpr _8799___mcc_h6905 = _source386.dtor_body;
                    } else if (_source386.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8800___mcc_h6909 = _source386.dtor_lbl;
                      RAST._IExpr _8801___mcc_h6910 = _source386.dtor_underlying;
                    } else if (_source386.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8802___mcc_h6913 = _source386.dtor_optLbl;
                    } else if (_source386.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8803___mcc_h6915 = _source386.dtor_optLbl;
                    } else if (_source386.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8804___mcc_h6917 = _source386.dtor_optExpr;
                    } else if (_source386.is_CallType) {
                      RAST._IExpr _8805___mcc_h6919 = _source386.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8806___mcc_h6920 = _source386.dtor_typeParameters;
                    } else if (_source386.is_Call) {
                      RAST._IExpr _8807___mcc_h6923 = _source386.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8808___mcc_h6924 = _source386.dtor_arguments;
                    } else if (_source386.is_Select) {
                      RAST._IExpr _8809___mcc_h6927 = _source386.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8810___mcc_h6928 = _source386.dtor_name;
                    } else if (_source386.is_MemberSelect) {
                      RAST._IExpr _8811___mcc_h6931 = _source386.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8812___mcc_h6932 = _source386.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8813___mcc_h6935 = _source386.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8814___mcc_h6936 = _source386.dtor_retType;
                      RAST._IExpr _8815___mcc_h6937 = _source386.dtor_body;
                    }
                  } else {
                  }
                } else if (_source385.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8816___mcc_h6941 = _source385.dtor_op2;
                  RAST._IExpr _8817___mcc_h6942 = _source385.dtor_left;
                  RAST._IExpr _8818___mcc_h6943 = _source385.dtor_right;
                  DAST.Format._IBinaryOpFormat _8819___mcc_h6944 = _source385.dtor_format2;
                } else if (_source385.is_TypeAscription) {
                  RAST._IExpr _8820___mcc_h6949 = _source385.dtor_left;
                  RAST._IType _8821___mcc_h6950 = _source385.dtor_tpe;
                } else if (_source385.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8822___mcc_h6953 = _source385.dtor_value;
                } else if (_source385.is_LiteralBool) {
                  bool _8823___mcc_h6955 = _source385.dtor_bvalue;
                } else if (_source385.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8824___mcc_h6957 = _source385.dtor_value;
                  bool _8825___mcc_h6958 = _source385.dtor_binary;
                } else if (_source385.is_DeclareVar) {
                  RAST._IDeclareType _8826___mcc_h6961 = _source385.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8827___mcc_h6962 = _source385.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8828___mcc_h6963 = _source385.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8829___mcc_h6964 = _source385.dtor_optRhs;
                } else if (_source385.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8830___mcc_h6969 = _source385.dtor_names;
                  RAST._IExpr _8831___mcc_h6970 = _source385.dtor_rhs;
                } else if (_source385.is_IfExpr) {
                  RAST._IExpr _8832___mcc_h6973 = _source385.dtor_cond;
                  RAST._IExpr _8833___mcc_h6974 = _source385.dtor_thn;
                  RAST._IExpr _8834___mcc_h6975 = _source385.dtor_els;
                } else if (_source385.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8835___mcc_h6979 = _source385.dtor_optCond;
                  RAST._IExpr _8836___mcc_h6980 = _source385.dtor_underlying;
                } else if (_source385.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8837___mcc_h6983 = _source385.dtor_name;
                  RAST._IExpr _8838___mcc_h6984 = _source385.dtor_range;
                  RAST._IExpr _8839___mcc_h6985 = _source385.dtor_body;
                } else if (_source385.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8840___mcc_h6989 = _source385.dtor_lbl;
                  RAST._IExpr _8841___mcc_h6990 = _source385.dtor_underlying;
                } else if (_source385.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8842___mcc_h6993 = _source385.dtor_optLbl;
                } else if (_source385.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8843___mcc_h6995 = _source385.dtor_optLbl;
                } else if (_source385.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8844___mcc_h6997 = _source385.dtor_optExpr;
                } else if (_source385.is_CallType) {
                  RAST._IExpr _8845___mcc_h6999 = _source385.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8846___mcc_h7000 = _source385.dtor_typeParameters;
                } else if (_source385.is_Call) {
                  RAST._IExpr _8847___mcc_h7003 = _source385.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8848___mcc_h7004 = _source385.dtor_arguments;
                } else if (_source385.is_Select) {
                  RAST._IExpr _8849___mcc_h7007 = _source385.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8850___mcc_h7008 = _source385.dtor_name;
                } else if (_source385.is_MemberSelect) {
                  RAST._IExpr _8851___mcc_h7011 = _source385.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8852___mcc_h7012 = _source385.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8853___mcc_h7015 = _source385.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8854___mcc_h7016 = _source385.dtor_retType;
                  RAST._IExpr _8855___mcc_h7017 = _source385.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8739_field));
              if (_8738_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2009;
              DCOMP._IOwnership _out2010;
              (this).FromOwned(r, expectedOwnership, out _out2009, out _out2010);
              r = _out2009;
              resultingOwnership = _out2010;
              readIdents = _8747_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Call) {
          DAST._IExpression _8856___mcc_h207 = _source324.dtor_on;
          DAST._ICallName _8857___mcc_h208 = _source324.dtor_callName;
          Dafny.ISequence<DAST._IType> _8858___mcc_h209 = _source324.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _8859___mcc_h210 = _source324.dtor_args;
          DAST._IType _8860_fieldType = _5052___mcc_h58;
          bool _8861_isDatatype = _5051___mcc_h57;
          bool _8862_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _8863_field = _5049___mcc_h55;
          DAST._IExpression _8864_on = _5048___mcc_h54;
          {
            if (_8861_isDatatype) {
              RAST._IExpr _8865_onExpr;
              DCOMP._IOwnership _8866_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8867_recIdents;
              RAST._IExpr _out2011;
              DCOMP._IOwnership _out2012;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2013;
              (this).GenExpr(_8864_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2011, out _out2012, out _out2013);
              _8865_onExpr = _out2011;
              _8866_onOwned = _out2012;
              _8867_recIdents = _out2013;
              r = ((_8865_onExpr).Sel(DCOMP.__default.escapeName(_8863_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8868_typ;
              RAST._IType _out2014;
              _out2014 = (this).GenType(_8860_fieldType, DCOMP.GenTypeContext.@default());
              _8868_typ = _out2014;
              RAST._IExpr _out2015;
              DCOMP._IOwnership _out2016;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2015, out _out2016);
              r = _out2015;
              resultingOwnership = _out2016;
              readIdents = _8867_recIdents;
            } else {
              RAST._IExpr _8869_onExpr;
              DCOMP._IOwnership _8870_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8871_recIdents;
              RAST._IExpr _out2017;
              DCOMP._IOwnership _out2018;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2019;
              (this).GenExpr(_8864_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2017, out _out2018, out _out2019);
              _8869_onExpr = _out2017;
              _8870_onOwned = _out2018;
              _8871_recIdents = _out2019;
              r = _8869_onExpr;
              if (!object.Equals(_8869_onExpr, RAST.__default.self)) {
                RAST._IExpr _source387 = _8869_onExpr;
                if (_source387.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8872___mcc_h7021 = _source387.dtor_content;
                } else if (_source387.is_ExprFromType) {
                  RAST._IType _8873___mcc_h7023 = _source387.dtor_tpe;
                } else if (_source387.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8874___mcc_h7025 = _source387.dtor_name;
                } else if (_source387.is_Match) {
                  RAST._IExpr _8875___mcc_h7027 = _source387.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8876___mcc_h7028 = _source387.dtor_cases;
                } else if (_source387.is_StmtExpr) {
                  RAST._IExpr _8877___mcc_h7031 = _source387.dtor_stmt;
                  RAST._IExpr _8878___mcc_h7032 = _source387.dtor_rhs;
                } else if (_source387.is_Block) {
                  RAST._IExpr _8879___mcc_h7035 = _source387.dtor_underlying;
                } else if (_source387.is_StructBuild) {
                  RAST._IExpr _8880___mcc_h7037 = _source387.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _8881___mcc_h7038 = _source387.dtor_assignments;
                } else if (_source387.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _8882___mcc_h7041 = _source387.dtor_arguments;
                } else if (_source387.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8883___mcc_h7043 = _source387.dtor_op1;
                  RAST._IExpr _8884___mcc_h7044 = _source387.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _8885___mcc_h7045 = _source387.dtor_format;
                  if (object.Equals(_8883___mcc_h7043, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source388 = _8884___mcc_h7044;
                    if (_source388.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _8886___mcc_h7049 = _source388.dtor_content;
                    } else if (_source388.is_ExprFromType) {
                      RAST._IType _8887___mcc_h7051 = _source388.dtor_tpe;
                    } else if (_source388.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _8888___mcc_h7053 = _source388.dtor_name;
                      if (object.Equals(_8888___mcc_h7053, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source388.is_Match) {
                      RAST._IExpr _8889___mcc_h7055 = _source388.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _8890___mcc_h7056 = _source388.dtor_cases;
                    } else if (_source388.is_StmtExpr) {
                      RAST._IExpr _8891___mcc_h7059 = _source388.dtor_stmt;
                      RAST._IExpr _8892___mcc_h7060 = _source388.dtor_rhs;
                    } else if (_source388.is_Block) {
                      RAST._IExpr _8893___mcc_h7063 = _source388.dtor_underlying;
                    } else if (_source388.is_StructBuild) {
                      RAST._IExpr _8894___mcc_h7065 = _source388.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _8895___mcc_h7066 = _source388.dtor_assignments;
                    } else if (_source388.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _8896___mcc_h7069 = _source388.dtor_arguments;
                    } else if (_source388.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8897___mcc_h7071 = _source388.dtor_op1;
                      RAST._IExpr _8898___mcc_h7072 = _source388.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _8899___mcc_h7073 = _source388.dtor_format;
                    } else if (_source388.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _8900___mcc_h7077 = _source388.dtor_op2;
                      RAST._IExpr _8901___mcc_h7078 = _source388.dtor_left;
                      RAST._IExpr _8902___mcc_h7079 = _source388.dtor_right;
                      DAST.Format._IBinaryOpFormat _8903___mcc_h7080 = _source388.dtor_format2;
                    } else if (_source388.is_TypeAscription) {
                      RAST._IExpr _8904___mcc_h7085 = _source388.dtor_left;
                      RAST._IType _8905___mcc_h7086 = _source388.dtor_tpe;
                    } else if (_source388.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _8906___mcc_h7089 = _source388.dtor_value;
                    } else if (_source388.is_LiteralBool) {
                      bool _8907___mcc_h7091 = _source388.dtor_bvalue;
                    } else if (_source388.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _8908___mcc_h7093 = _source388.dtor_value;
                      bool _8909___mcc_h7094 = _source388.dtor_binary;
                    } else if (_source388.is_DeclareVar) {
                      RAST._IDeclareType _8910___mcc_h7097 = _source388.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _8911___mcc_h7098 = _source388.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _8912___mcc_h7099 = _source388.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _8913___mcc_h7100 = _source388.dtor_optRhs;
                    } else if (_source388.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _8914___mcc_h7105 = _source388.dtor_names;
                      RAST._IExpr _8915___mcc_h7106 = _source388.dtor_rhs;
                    } else if (_source388.is_IfExpr) {
                      RAST._IExpr _8916___mcc_h7109 = _source388.dtor_cond;
                      RAST._IExpr _8917___mcc_h7110 = _source388.dtor_thn;
                      RAST._IExpr _8918___mcc_h7111 = _source388.dtor_els;
                    } else if (_source388.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _8919___mcc_h7115 = _source388.dtor_optCond;
                      RAST._IExpr _8920___mcc_h7116 = _source388.dtor_underlying;
                    } else if (_source388.is_For) {
                      Dafny.ISequence<Dafny.Rune> _8921___mcc_h7119 = _source388.dtor_name;
                      RAST._IExpr _8922___mcc_h7120 = _source388.dtor_range;
                      RAST._IExpr _8923___mcc_h7121 = _source388.dtor_body;
                    } else if (_source388.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _8924___mcc_h7125 = _source388.dtor_lbl;
                      RAST._IExpr _8925___mcc_h7126 = _source388.dtor_underlying;
                    } else if (_source388.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8926___mcc_h7129 = _source388.dtor_optLbl;
                    } else if (_source388.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8927___mcc_h7131 = _source388.dtor_optLbl;
                    } else if (_source388.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _8928___mcc_h7133 = _source388.dtor_optExpr;
                    } else if (_source388.is_CallType) {
                      RAST._IExpr _8929___mcc_h7135 = _source388.dtor_obj;
                      Dafny.ISequence<RAST._IType> _8930___mcc_h7136 = _source388.dtor_typeParameters;
                    } else if (_source388.is_Call) {
                      RAST._IExpr _8931___mcc_h7139 = _source388.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _8932___mcc_h7140 = _source388.dtor_arguments;
                    } else if (_source388.is_Select) {
                      RAST._IExpr _8933___mcc_h7143 = _source388.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8934___mcc_h7144 = _source388.dtor_name;
                    } else if (_source388.is_MemberSelect) {
                      RAST._IExpr _8935___mcc_h7147 = _source388.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _8936___mcc_h7148 = _source388.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _8937___mcc_h7151 = _source388.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _8938___mcc_h7152 = _source388.dtor_retType;
                      RAST._IExpr _8939___mcc_h7153 = _source388.dtor_body;
                    }
                  } else {
                  }
                } else if (_source387.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _8940___mcc_h7157 = _source387.dtor_op2;
                  RAST._IExpr _8941___mcc_h7158 = _source387.dtor_left;
                  RAST._IExpr _8942___mcc_h7159 = _source387.dtor_right;
                  DAST.Format._IBinaryOpFormat _8943___mcc_h7160 = _source387.dtor_format2;
                } else if (_source387.is_TypeAscription) {
                  RAST._IExpr _8944___mcc_h7165 = _source387.dtor_left;
                  RAST._IType _8945___mcc_h7166 = _source387.dtor_tpe;
                } else if (_source387.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _8946___mcc_h7169 = _source387.dtor_value;
                } else if (_source387.is_LiteralBool) {
                  bool _8947___mcc_h7171 = _source387.dtor_bvalue;
                } else if (_source387.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _8948___mcc_h7173 = _source387.dtor_value;
                  bool _8949___mcc_h7174 = _source387.dtor_binary;
                } else if (_source387.is_DeclareVar) {
                  RAST._IDeclareType _8950___mcc_h7177 = _source387.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _8951___mcc_h7178 = _source387.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _8952___mcc_h7179 = _source387.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _8953___mcc_h7180 = _source387.dtor_optRhs;
                } else if (_source387.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _8954___mcc_h7185 = _source387.dtor_names;
                  RAST._IExpr _8955___mcc_h7186 = _source387.dtor_rhs;
                } else if (_source387.is_IfExpr) {
                  RAST._IExpr _8956___mcc_h7189 = _source387.dtor_cond;
                  RAST._IExpr _8957___mcc_h7190 = _source387.dtor_thn;
                  RAST._IExpr _8958___mcc_h7191 = _source387.dtor_els;
                } else if (_source387.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _8959___mcc_h7195 = _source387.dtor_optCond;
                  RAST._IExpr _8960___mcc_h7196 = _source387.dtor_underlying;
                } else if (_source387.is_For) {
                  Dafny.ISequence<Dafny.Rune> _8961___mcc_h7199 = _source387.dtor_name;
                  RAST._IExpr _8962___mcc_h7200 = _source387.dtor_range;
                  RAST._IExpr _8963___mcc_h7201 = _source387.dtor_body;
                } else if (_source387.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _8964___mcc_h7205 = _source387.dtor_lbl;
                  RAST._IExpr _8965___mcc_h7206 = _source387.dtor_underlying;
                } else if (_source387.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8966___mcc_h7209 = _source387.dtor_optLbl;
                } else if (_source387.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _8967___mcc_h7211 = _source387.dtor_optLbl;
                } else if (_source387.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _8968___mcc_h7213 = _source387.dtor_optExpr;
                } else if (_source387.is_CallType) {
                  RAST._IExpr _8969___mcc_h7215 = _source387.dtor_obj;
                  Dafny.ISequence<RAST._IType> _8970___mcc_h7216 = _source387.dtor_typeParameters;
                } else if (_source387.is_Call) {
                  RAST._IExpr _8971___mcc_h7219 = _source387.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _8972___mcc_h7220 = _source387.dtor_arguments;
                } else if (_source387.is_Select) {
                  RAST._IExpr _8973___mcc_h7223 = _source387.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8974___mcc_h7224 = _source387.dtor_name;
                } else if (_source387.is_MemberSelect) {
                  RAST._IExpr _8975___mcc_h7227 = _source387.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _8976___mcc_h7228 = _source387.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _8977___mcc_h7231 = _source387.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _8978___mcc_h7232 = _source387.dtor_retType;
                  RAST._IExpr _8979___mcc_h7233 = _source387.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8863_field));
              if (_8862_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2020;
              DCOMP._IOwnership _out2021;
              (this).FromOwned(r, expectedOwnership, out _out2020, out _out2021);
              r = _out2020;
              resultingOwnership = _out2021;
              readIdents = _8871_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _8980___mcc_h215 = _source324.dtor_params;
          DAST._IType _8981___mcc_h216 = _source324.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _8982___mcc_h217 = _source324.dtor_body;
          DAST._IType _8983_fieldType = _5052___mcc_h58;
          bool _8984_isDatatype = _5051___mcc_h57;
          bool _8985_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _8986_field = _5049___mcc_h55;
          DAST._IExpression _8987_on = _5048___mcc_h54;
          {
            if (_8984_isDatatype) {
              RAST._IExpr _8988_onExpr;
              DCOMP._IOwnership _8989_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8990_recIdents;
              RAST._IExpr _out2022;
              DCOMP._IOwnership _out2023;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2024;
              (this).GenExpr(_8987_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2022, out _out2023, out _out2024);
              _8988_onExpr = _out2022;
              _8989_onOwned = _out2023;
              _8990_recIdents = _out2024;
              r = ((_8988_onExpr).Sel(DCOMP.__default.escapeName(_8986_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _8991_typ;
              RAST._IType _out2025;
              _out2025 = (this).GenType(_8983_fieldType, DCOMP.GenTypeContext.@default());
              _8991_typ = _out2025;
              RAST._IExpr _out2026;
              DCOMP._IOwnership _out2027;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2026, out _out2027);
              r = _out2026;
              resultingOwnership = _out2027;
              readIdents = _8990_recIdents;
            } else {
              RAST._IExpr _8992_onExpr;
              DCOMP._IOwnership _8993_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8994_recIdents;
              RAST._IExpr _out2028;
              DCOMP._IOwnership _out2029;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2030;
              (this).GenExpr(_8987_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2028, out _out2029, out _out2030);
              _8992_onExpr = _out2028;
              _8993_onOwned = _out2029;
              _8994_recIdents = _out2030;
              r = _8992_onExpr;
              if (!object.Equals(_8992_onExpr, RAST.__default.self)) {
                RAST._IExpr _source389 = _8992_onExpr;
                if (_source389.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _8995___mcc_h7237 = _source389.dtor_content;
                } else if (_source389.is_ExprFromType) {
                  RAST._IType _8996___mcc_h7239 = _source389.dtor_tpe;
                } else if (_source389.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _8997___mcc_h7241 = _source389.dtor_name;
                } else if (_source389.is_Match) {
                  RAST._IExpr _8998___mcc_h7243 = _source389.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _8999___mcc_h7244 = _source389.dtor_cases;
                } else if (_source389.is_StmtExpr) {
                  RAST._IExpr _9000___mcc_h7247 = _source389.dtor_stmt;
                  RAST._IExpr _9001___mcc_h7248 = _source389.dtor_rhs;
                } else if (_source389.is_Block) {
                  RAST._IExpr _9002___mcc_h7251 = _source389.dtor_underlying;
                } else if (_source389.is_StructBuild) {
                  RAST._IExpr _9003___mcc_h7253 = _source389.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9004___mcc_h7254 = _source389.dtor_assignments;
                } else if (_source389.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9005___mcc_h7257 = _source389.dtor_arguments;
                } else if (_source389.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9006___mcc_h7259 = _source389.dtor_op1;
                  RAST._IExpr _9007___mcc_h7260 = _source389.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9008___mcc_h7261 = _source389.dtor_format;
                  if (object.Equals(_9006___mcc_h7259, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source390 = _9007___mcc_h7260;
                    if (_source390.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9009___mcc_h7265 = _source390.dtor_content;
                    } else if (_source390.is_ExprFromType) {
                      RAST._IType _9010___mcc_h7267 = _source390.dtor_tpe;
                    } else if (_source390.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9011___mcc_h7269 = _source390.dtor_name;
                      if (object.Equals(_9011___mcc_h7269, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source390.is_Match) {
                      RAST._IExpr _9012___mcc_h7271 = _source390.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9013___mcc_h7272 = _source390.dtor_cases;
                    } else if (_source390.is_StmtExpr) {
                      RAST._IExpr _9014___mcc_h7275 = _source390.dtor_stmt;
                      RAST._IExpr _9015___mcc_h7276 = _source390.dtor_rhs;
                    } else if (_source390.is_Block) {
                      RAST._IExpr _9016___mcc_h7279 = _source390.dtor_underlying;
                    } else if (_source390.is_StructBuild) {
                      RAST._IExpr _9017___mcc_h7281 = _source390.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9018___mcc_h7282 = _source390.dtor_assignments;
                    } else if (_source390.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9019___mcc_h7285 = _source390.dtor_arguments;
                    } else if (_source390.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9020___mcc_h7287 = _source390.dtor_op1;
                      RAST._IExpr _9021___mcc_h7288 = _source390.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9022___mcc_h7289 = _source390.dtor_format;
                    } else if (_source390.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9023___mcc_h7293 = _source390.dtor_op2;
                      RAST._IExpr _9024___mcc_h7294 = _source390.dtor_left;
                      RAST._IExpr _9025___mcc_h7295 = _source390.dtor_right;
                      DAST.Format._IBinaryOpFormat _9026___mcc_h7296 = _source390.dtor_format2;
                    } else if (_source390.is_TypeAscription) {
                      RAST._IExpr _9027___mcc_h7301 = _source390.dtor_left;
                      RAST._IType _9028___mcc_h7302 = _source390.dtor_tpe;
                    } else if (_source390.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9029___mcc_h7305 = _source390.dtor_value;
                    } else if (_source390.is_LiteralBool) {
                      bool _9030___mcc_h7307 = _source390.dtor_bvalue;
                    } else if (_source390.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9031___mcc_h7309 = _source390.dtor_value;
                      bool _9032___mcc_h7310 = _source390.dtor_binary;
                    } else if (_source390.is_DeclareVar) {
                      RAST._IDeclareType _9033___mcc_h7313 = _source390.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9034___mcc_h7314 = _source390.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9035___mcc_h7315 = _source390.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9036___mcc_h7316 = _source390.dtor_optRhs;
                    } else if (_source390.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9037___mcc_h7321 = _source390.dtor_names;
                      RAST._IExpr _9038___mcc_h7322 = _source390.dtor_rhs;
                    } else if (_source390.is_IfExpr) {
                      RAST._IExpr _9039___mcc_h7325 = _source390.dtor_cond;
                      RAST._IExpr _9040___mcc_h7326 = _source390.dtor_thn;
                      RAST._IExpr _9041___mcc_h7327 = _source390.dtor_els;
                    } else if (_source390.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9042___mcc_h7331 = _source390.dtor_optCond;
                      RAST._IExpr _9043___mcc_h7332 = _source390.dtor_underlying;
                    } else if (_source390.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9044___mcc_h7335 = _source390.dtor_name;
                      RAST._IExpr _9045___mcc_h7336 = _source390.dtor_range;
                      RAST._IExpr _9046___mcc_h7337 = _source390.dtor_body;
                    } else if (_source390.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9047___mcc_h7341 = _source390.dtor_lbl;
                      RAST._IExpr _9048___mcc_h7342 = _source390.dtor_underlying;
                    } else if (_source390.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9049___mcc_h7345 = _source390.dtor_optLbl;
                    } else if (_source390.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9050___mcc_h7347 = _source390.dtor_optLbl;
                    } else if (_source390.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9051___mcc_h7349 = _source390.dtor_optExpr;
                    } else if (_source390.is_CallType) {
                      RAST._IExpr _9052___mcc_h7351 = _source390.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9053___mcc_h7352 = _source390.dtor_typeParameters;
                    } else if (_source390.is_Call) {
                      RAST._IExpr _9054___mcc_h7355 = _source390.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9055___mcc_h7356 = _source390.dtor_arguments;
                    } else if (_source390.is_Select) {
                      RAST._IExpr _9056___mcc_h7359 = _source390.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9057___mcc_h7360 = _source390.dtor_name;
                    } else if (_source390.is_MemberSelect) {
                      RAST._IExpr _9058___mcc_h7363 = _source390.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9059___mcc_h7364 = _source390.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9060___mcc_h7367 = _source390.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9061___mcc_h7368 = _source390.dtor_retType;
                      RAST._IExpr _9062___mcc_h7369 = _source390.dtor_body;
                    }
                  } else {
                  }
                } else if (_source389.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9063___mcc_h7373 = _source389.dtor_op2;
                  RAST._IExpr _9064___mcc_h7374 = _source389.dtor_left;
                  RAST._IExpr _9065___mcc_h7375 = _source389.dtor_right;
                  DAST.Format._IBinaryOpFormat _9066___mcc_h7376 = _source389.dtor_format2;
                } else if (_source389.is_TypeAscription) {
                  RAST._IExpr _9067___mcc_h7381 = _source389.dtor_left;
                  RAST._IType _9068___mcc_h7382 = _source389.dtor_tpe;
                } else if (_source389.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9069___mcc_h7385 = _source389.dtor_value;
                } else if (_source389.is_LiteralBool) {
                  bool _9070___mcc_h7387 = _source389.dtor_bvalue;
                } else if (_source389.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9071___mcc_h7389 = _source389.dtor_value;
                  bool _9072___mcc_h7390 = _source389.dtor_binary;
                } else if (_source389.is_DeclareVar) {
                  RAST._IDeclareType _9073___mcc_h7393 = _source389.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9074___mcc_h7394 = _source389.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9075___mcc_h7395 = _source389.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9076___mcc_h7396 = _source389.dtor_optRhs;
                } else if (_source389.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9077___mcc_h7401 = _source389.dtor_names;
                  RAST._IExpr _9078___mcc_h7402 = _source389.dtor_rhs;
                } else if (_source389.is_IfExpr) {
                  RAST._IExpr _9079___mcc_h7405 = _source389.dtor_cond;
                  RAST._IExpr _9080___mcc_h7406 = _source389.dtor_thn;
                  RAST._IExpr _9081___mcc_h7407 = _source389.dtor_els;
                } else if (_source389.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9082___mcc_h7411 = _source389.dtor_optCond;
                  RAST._IExpr _9083___mcc_h7412 = _source389.dtor_underlying;
                } else if (_source389.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9084___mcc_h7415 = _source389.dtor_name;
                  RAST._IExpr _9085___mcc_h7416 = _source389.dtor_range;
                  RAST._IExpr _9086___mcc_h7417 = _source389.dtor_body;
                } else if (_source389.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9087___mcc_h7421 = _source389.dtor_lbl;
                  RAST._IExpr _9088___mcc_h7422 = _source389.dtor_underlying;
                } else if (_source389.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9089___mcc_h7425 = _source389.dtor_optLbl;
                } else if (_source389.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9090___mcc_h7427 = _source389.dtor_optLbl;
                } else if (_source389.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9091___mcc_h7429 = _source389.dtor_optExpr;
                } else if (_source389.is_CallType) {
                  RAST._IExpr _9092___mcc_h7431 = _source389.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9093___mcc_h7432 = _source389.dtor_typeParameters;
                } else if (_source389.is_Call) {
                  RAST._IExpr _9094___mcc_h7435 = _source389.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9095___mcc_h7436 = _source389.dtor_arguments;
                } else if (_source389.is_Select) {
                  RAST._IExpr _9096___mcc_h7439 = _source389.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9097___mcc_h7440 = _source389.dtor_name;
                } else if (_source389.is_MemberSelect) {
                  RAST._IExpr _9098___mcc_h7443 = _source389.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9099___mcc_h7444 = _source389.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9100___mcc_h7447 = _source389.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9101___mcc_h7448 = _source389.dtor_retType;
                  RAST._IExpr _9102___mcc_h7449 = _source389.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_8986_field));
              if (_8985_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2031;
              DCOMP._IOwnership _out2032;
              (this).FromOwned(r, expectedOwnership, out _out2031, out _out2032);
              r = _out2031;
              resultingOwnership = _out2032;
              readIdents = _8994_recIdents;
            }
            return ;
          }
        } else if (_source324.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9103___mcc_h221 = _source324.dtor_values;
          DAST._IType _9104___mcc_h222 = _source324.dtor_retType;
          DAST._IExpression _9105___mcc_h223 = _source324.dtor_expr;
          DAST._IType _9106_fieldType = _5052___mcc_h58;
          bool _9107_isDatatype = _5051___mcc_h57;
          bool _9108_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _9109_field = _5049___mcc_h55;
          DAST._IExpression _9110_on = _5048___mcc_h54;
          {
            if (_9107_isDatatype) {
              RAST._IExpr _9111_onExpr;
              DCOMP._IOwnership _9112_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9113_recIdents;
              RAST._IExpr _out2033;
              DCOMP._IOwnership _out2034;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2035;
              (this).GenExpr(_9110_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2033, out _out2034, out _out2035);
              _9111_onExpr = _out2033;
              _9112_onOwned = _out2034;
              _9113_recIdents = _out2035;
              r = ((_9111_onExpr).Sel(DCOMP.__default.escapeName(_9109_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9114_typ;
              RAST._IType _out2036;
              _out2036 = (this).GenType(_9106_fieldType, DCOMP.GenTypeContext.@default());
              _9114_typ = _out2036;
              RAST._IExpr _out2037;
              DCOMP._IOwnership _out2038;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2037, out _out2038);
              r = _out2037;
              resultingOwnership = _out2038;
              readIdents = _9113_recIdents;
            } else {
              RAST._IExpr _9115_onExpr;
              DCOMP._IOwnership _9116_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9117_recIdents;
              RAST._IExpr _out2039;
              DCOMP._IOwnership _out2040;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2041;
              (this).GenExpr(_9110_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2039, out _out2040, out _out2041);
              _9115_onExpr = _out2039;
              _9116_onOwned = _out2040;
              _9117_recIdents = _out2041;
              r = _9115_onExpr;
              if (!object.Equals(_9115_onExpr, RAST.__default.self)) {
                RAST._IExpr _source391 = _9115_onExpr;
                if (_source391.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9118___mcc_h7453 = _source391.dtor_content;
                } else if (_source391.is_ExprFromType) {
                  RAST._IType _9119___mcc_h7455 = _source391.dtor_tpe;
                } else if (_source391.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9120___mcc_h7457 = _source391.dtor_name;
                } else if (_source391.is_Match) {
                  RAST._IExpr _9121___mcc_h7459 = _source391.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9122___mcc_h7460 = _source391.dtor_cases;
                } else if (_source391.is_StmtExpr) {
                  RAST._IExpr _9123___mcc_h7463 = _source391.dtor_stmt;
                  RAST._IExpr _9124___mcc_h7464 = _source391.dtor_rhs;
                } else if (_source391.is_Block) {
                  RAST._IExpr _9125___mcc_h7467 = _source391.dtor_underlying;
                } else if (_source391.is_StructBuild) {
                  RAST._IExpr _9126___mcc_h7469 = _source391.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9127___mcc_h7470 = _source391.dtor_assignments;
                } else if (_source391.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9128___mcc_h7473 = _source391.dtor_arguments;
                } else if (_source391.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9129___mcc_h7475 = _source391.dtor_op1;
                  RAST._IExpr _9130___mcc_h7476 = _source391.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9131___mcc_h7477 = _source391.dtor_format;
                  if (object.Equals(_9129___mcc_h7475, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source392 = _9130___mcc_h7476;
                    if (_source392.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9132___mcc_h7481 = _source392.dtor_content;
                    } else if (_source392.is_ExprFromType) {
                      RAST._IType _9133___mcc_h7483 = _source392.dtor_tpe;
                    } else if (_source392.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9134___mcc_h7485 = _source392.dtor_name;
                      if (object.Equals(_9134___mcc_h7485, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source392.is_Match) {
                      RAST._IExpr _9135___mcc_h7487 = _source392.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9136___mcc_h7488 = _source392.dtor_cases;
                    } else if (_source392.is_StmtExpr) {
                      RAST._IExpr _9137___mcc_h7491 = _source392.dtor_stmt;
                      RAST._IExpr _9138___mcc_h7492 = _source392.dtor_rhs;
                    } else if (_source392.is_Block) {
                      RAST._IExpr _9139___mcc_h7495 = _source392.dtor_underlying;
                    } else if (_source392.is_StructBuild) {
                      RAST._IExpr _9140___mcc_h7497 = _source392.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9141___mcc_h7498 = _source392.dtor_assignments;
                    } else if (_source392.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9142___mcc_h7501 = _source392.dtor_arguments;
                    } else if (_source392.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9143___mcc_h7503 = _source392.dtor_op1;
                      RAST._IExpr _9144___mcc_h7504 = _source392.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9145___mcc_h7505 = _source392.dtor_format;
                    } else if (_source392.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9146___mcc_h7509 = _source392.dtor_op2;
                      RAST._IExpr _9147___mcc_h7510 = _source392.dtor_left;
                      RAST._IExpr _9148___mcc_h7511 = _source392.dtor_right;
                      DAST.Format._IBinaryOpFormat _9149___mcc_h7512 = _source392.dtor_format2;
                    } else if (_source392.is_TypeAscription) {
                      RAST._IExpr _9150___mcc_h7517 = _source392.dtor_left;
                      RAST._IType _9151___mcc_h7518 = _source392.dtor_tpe;
                    } else if (_source392.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9152___mcc_h7521 = _source392.dtor_value;
                    } else if (_source392.is_LiteralBool) {
                      bool _9153___mcc_h7523 = _source392.dtor_bvalue;
                    } else if (_source392.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9154___mcc_h7525 = _source392.dtor_value;
                      bool _9155___mcc_h7526 = _source392.dtor_binary;
                    } else if (_source392.is_DeclareVar) {
                      RAST._IDeclareType _9156___mcc_h7529 = _source392.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9157___mcc_h7530 = _source392.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9158___mcc_h7531 = _source392.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9159___mcc_h7532 = _source392.dtor_optRhs;
                    } else if (_source392.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9160___mcc_h7537 = _source392.dtor_names;
                      RAST._IExpr _9161___mcc_h7538 = _source392.dtor_rhs;
                    } else if (_source392.is_IfExpr) {
                      RAST._IExpr _9162___mcc_h7541 = _source392.dtor_cond;
                      RAST._IExpr _9163___mcc_h7542 = _source392.dtor_thn;
                      RAST._IExpr _9164___mcc_h7543 = _source392.dtor_els;
                    } else if (_source392.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9165___mcc_h7547 = _source392.dtor_optCond;
                      RAST._IExpr _9166___mcc_h7548 = _source392.dtor_underlying;
                    } else if (_source392.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9167___mcc_h7551 = _source392.dtor_name;
                      RAST._IExpr _9168___mcc_h7552 = _source392.dtor_range;
                      RAST._IExpr _9169___mcc_h7553 = _source392.dtor_body;
                    } else if (_source392.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9170___mcc_h7557 = _source392.dtor_lbl;
                      RAST._IExpr _9171___mcc_h7558 = _source392.dtor_underlying;
                    } else if (_source392.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9172___mcc_h7561 = _source392.dtor_optLbl;
                    } else if (_source392.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9173___mcc_h7563 = _source392.dtor_optLbl;
                    } else if (_source392.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9174___mcc_h7565 = _source392.dtor_optExpr;
                    } else if (_source392.is_CallType) {
                      RAST._IExpr _9175___mcc_h7567 = _source392.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9176___mcc_h7568 = _source392.dtor_typeParameters;
                    } else if (_source392.is_Call) {
                      RAST._IExpr _9177___mcc_h7571 = _source392.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9178___mcc_h7572 = _source392.dtor_arguments;
                    } else if (_source392.is_Select) {
                      RAST._IExpr _9179___mcc_h7575 = _source392.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9180___mcc_h7576 = _source392.dtor_name;
                    } else if (_source392.is_MemberSelect) {
                      RAST._IExpr _9181___mcc_h7579 = _source392.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9182___mcc_h7580 = _source392.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9183___mcc_h7583 = _source392.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9184___mcc_h7584 = _source392.dtor_retType;
                      RAST._IExpr _9185___mcc_h7585 = _source392.dtor_body;
                    }
                  } else {
                  }
                } else if (_source391.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9186___mcc_h7589 = _source391.dtor_op2;
                  RAST._IExpr _9187___mcc_h7590 = _source391.dtor_left;
                  RAST._IExpr _9188___mcc_h7591 = _source391.dtor_right;
                  DAST.Format._IBinaryOpFormat _9189___mcc_h7592 = _source391.dtor_format2;
                } else if (_source391.is_TypeAscription) {
                  RAST._IExpr _9190___mcc_h7597 = _source391.dtor_left;
                  RAST._IType _9191___mcc_h7598 = _source391.dtor_tpe;
                } else if (_source391.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9192___mcc_h7601 = _source391.dtor_value;
                } else if (_source391.is_LiteralBool) {
                  bool _9193___mcc_h7603 = _source391.dtor_bvalue;
                } else if (_source391.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9194___mcc_h7605 = _source391.dtor_value;
                  bool _9195___mcc_h7606 = _source391.dtor_binary;
                } else if (_source391.is_DeclareVar) {
                  RAST._IDeclareType _9196___mcc_h7609 = _source391.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9197___mcc_h7610 = _source391.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9198___mcc_h7611 = _source391.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9199___mcc_h7612 = _source391.dtor_optRhs;
                } else if (_source391.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9200___mcc_h7617 = _source391.dtor_names;
                  RAST._IExpr _9201___mcc_h7618 = _source391.dtor_rhs;
                } else if (_source391.is_IfExpr) {
                  RAST._IExpr _9202___mcc_h7621 = _source391.dtor_cond;
                  RAST._IExpr _9203___mcc_h7622 = _source391.dtor_thn;
                  RAST._IExpr _9204___mcc_h7623 = _source391.dtor_els;
                } else if (_source391.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9205___mcc_h7627 = _source391.dtor_optCond;
                  RAST._IExpr _9206___mcc_h7628 = _source391.dtor_underlying;
                } else if (_source391.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9207___mcc_h7631 = _source391.dtor_name;
                  RAST._IExpr _9208___mcc_h7632 = _source391.dtor_range;
                  RAST._IExpr _9209___mcc_h7633 = _source391.dtor_body;
                } else if (_source391.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9210___mcc_h7637 = _source391.dtor_lbl;
                  RAST._IExpr _9211___mcc_h7638 = _source391.dtor_underlying;
                } else if (_source391.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9212___mcc_h7641 = _source391.dtor_optLbl;
                } else if (_source391.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9213___mcc_h7643 = _source391.dtor_optLbl;
                } else if (_source391.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9214___mcc_h7645 = _source391.dtor_optExpr;
                } else if (_source391.is_CallType) {
                  RAST._IExpr _9215___mcc_h7647 = _source391.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9216___mcc_h7648 = _source391.dtor_typeParameters;
                } else if (_source391.is_Call) {
                  RAST._IExpr _9217___mcc_h7651 = _source391.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9218___mcc_h7652 = _source391.dtor_arguments;
                } else if (_source391.is_Select) {
                  RAST._IExpr _9219___mcc_h7655 = _source391.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9220___mcc_h7656 = _source391.dtor_name;
                } else if (_source391.is_MemberSelect) {
                  RAST._IExpr _9221___mcc_h7659 = _source391.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9222___mcc_h7660 = _source391.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9223___mcc_h7663 = _source391.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9224___mcc_h7664 = _source391.dtor_retType;
                  RAST._IExpr _9225___mcc_h7665 = _source391.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9109_field));
              if (_9108_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2042;
              DCOMP._IOwnership _out2043;
              (this).FromOwned(r, expectedOwnership, out _out2042, out _out2043);
              r = _out2042;
              resultingOwnership = _out2043;
              readIdents = _9117_recIdents;
            }
            return ;
          }
        } else if (_source324.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _9226___mcc_h227 = _source324.dtor_name;
          DAST._IType _9227___mcc_h228 = _source324.dtor_typ;
          DAST._IExpression _9228___mcc_h229 = _source324.dtor_value;
          DAST._IExpression _9229___mcc_h230 = _source324.dtor_iifeBody;
          DAST._IType _9230_fieldType = _5052___mcc_h58;
          bool _9231_isDatatype = _5051___mcc_h57;
          bool _9232_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _9233_field = _5049___mcc_h55;
          DAST._IExpression _9234_on = _5048___mcc_h54;
          {
            if (_9231_isDatatype) {
              RAST._IExpr _9235_onExpr;
              DCOMP._IOwnership _9236_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9237_recIdents;
              RAST._IExpr _out2044;
              DCOMP._IOwnership _out2045;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2046;
              (this).GenExpr(_9234_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2044, out _out2045, out _out2046);
              _9235_onExpr = _out2044;
              _9236_onOwned = _out2045;
              _9237_recIdents = _out2046;
              r = ((_9235_onExpr).Sel(DCOMP.__default.escapeName(_9233_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9238_typ;
              RAST._IType _out2047;
              _out2047 = (this).GenType(_9230_fieldType, DCOMP.GenTypeContext.@default());
              _9238_typ = _out2047;
              RAST._IExpr _out2048;
              DCOMP._IOwnership _out2049;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2048, out _out2049);
              r = _out2048;
              resultingOwnership = _out2049;
              readIdents = _9237_recIdents;
            } else {
              RAST._IExpr _9239_onExpr;
              DCOMP._IOwnership _9240_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9241_recIdents;
              RAST._IExpr _out2050;
              DCOMP._IOwnership _out2051;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2052;
              (this).GenExpr(_9234_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2050, out _out2051, out _out2052);
              _9239_onExpr = _out2050;
              _9240_onOwned = _out2051;
              _9241_recIdents = _out2052;
              r = _9239_onExpr;
              if (!object.Equals(_9239_onExpr, RAST.__default.self)) {
                RAST._IExpr _source393 = _9239_onExpr;
                if (_source393.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9242___mcc_h7669 = _source393.dtor_content;
                } else if (_source393.is_ExprFromType) {
                  RAST._IType _9243___mcc_h7671 = _source393.dtor_tpe;
                } else if (_source393.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9244___mcc_h7673 = _source393.dtor_name;
                } else if (_source393.is_Match) {
                  RAST._IExpr _9245___mcc_h7675 = _source393.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9246___mcc_h7676 = _source393.dtor_cases;
                } else if (_source393.is_StmtExpr) {
                  RAST._IExpr _9247___mcc_h7679 = _source393.dtor_stmt;
                  RAST._IExpr _9248___mcc_h7680 = _source393.dtor_rhs;
                } else if (_source393.is_Block) {
                  RAST._IExpr _9249___mcc_h7683 = _source393.dtor_underlying;
                } else if (_source393.is_StructBuild) {
                  RAST._IExpr _9250___mcc_h7685 = _source393.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9251___mcc_h7686 = _source393.dtor_assignments;
                } else if (_source393.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9252___mcc_h7689 = _source393.dtor_arguments;
                } else if (_source393.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9253___mcc_h7691 = _source393.dtor_op1;
                  RAST._IExpr _9254___mcc_h7692 = _source393.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9255___mcc_h7693 = _source393.dtor_format;
                  if (object.Equals(_9253___mcc_h7691, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source394 = _9254___mcc_h7692;
                    if (_source394.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9256___mcc_h7697 = _source394.dtor_content;
                    } else if (_source394.is_ExprFromType) {
                      RAST._IType _9257___mcc_h7699 = _source394.dtor_tpe;
                    } else if (_source394.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9258___mcc_h7701 = _source394.dtor_name;
                      if (object.Equals(_9258___mcc_h7701, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source394.is_Match) {
                      RAST._IExpr _9259___mcc_h7703 = _source394.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9260___mcc_h7704 = _source394.dtor_cases;
                    } else if (_source394.is_StmtExpr) {
                      RAST._IExpr _9261___mcc_h7707 = _source394.dtor_stmt;
                      RAST._IExpr _9262___mcc_h7708 = _source394.dtor_rhs;
                    } else if (_source394.is_Block) {
                      RAST._IExpr _9263___mcc_h7711 = _source394.dtor_underlying;
                    } else if (_source394.is_StructBuild) {
                      RAST._IExpr _9264___mcc_h7713 = _source394.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9265___mcc_h7714 = _source394.dtor_assignments;
                    } else if (_source394.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9266___mcc_h7717 = _source394.dtor_arguments;
                    } else if (_source394.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9267___mcc_h7719 = _source394.dtor_op1;
                      RAST._IExpr _9268___mcc_h7720 = _source394.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9269___mcc_h7721 = _source394.dtor_format;
                    } else if (_source394.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9270___mcc_h7725 = _source394.dtor_op2;
                      RAST._IExpr _9271___mcc_h7726 = _source394.dtor_left;
                      RAST._IExpr _9272___mcc_h7727 = _source394.dtor_right;
                      DAST.Format._IBinaryOpFormat _9273___mcc_h7728 = _source394.dtor_format2;
                    } else if (_source394.is_TypeAscription) {
                      RAST._IExpr _9274___mcc_h7733 = _source394.dtor_left;
                      RAST._IType _9275___mcc_h7734 = _source394.dtor_tpe;
                    } else if (_source394.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9276___mcc_h7737 = _source394.dtor_value;
                    } else if (_source394.is_LiteralBool) {
                      bool _9277___mcc_h7739 = _source394.dtor_bvalue;
                    } else if (_source394.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9278___mcc_h7741 = _source394.dtor_value;
                      bool _9279___mcc_h7742 = _source394.dtor_binary;
                    } else if (_source394.is_DeclareVar) {
                      RAST._IDeclareType _9280___mcc_h7745 = _source394.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9281___mcc_h7746 = _source394.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9282___mcc_h7747 = _source394.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9283___mcc_h7748 = _source394.dtor_optRhs;
                    } else if (_source394.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9284___mcc_h7753 = _source394.dtor_names;
                      RAST._IExpr _9285___mcc_h7754 = _source394.dtor_rhs;
                    } else if (_source394.is_IfExpr) {
                      RAST._IExpr _9286___mcc_h7757 = _source394.dtor_cond;
                      RAST._IExpr _9287___mcc_h7758 = _source394.dtor_thn;
                      RAST._IExpr _9288___mcc_h7759 = _source394.dtor_els;
                    } else if (_source394.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9289___mcc_h7763 = _source394.dtor_optCond;
                      RAST._IExpr _9290___mcc_h7764 = _source394.dtor_underlying;
                    } else if (_source394.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9291___mcc_h7767 = _source394.dtor_name;
                      RAST._IExpr _9292___mcc_h7768 = _source394.dtor_range;
                      RAST._IExpr _9293___mcc_h7769 = _source394.dtor_body;
                    } else if (_source394.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9294___mcc_h7773 = _source394.dtor_lbl;
                      RAST._IExpr _9295___mcc_h7774 = _source394.dtor_underlying;
                    } else if (_source394.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9296___mcc_h7777 = _source394.dtor_optLbl;
                    } else if (_source394.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9297___mcc_h7779 = _source394.dtor_optLbl;
                    } else if (_source394.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9298___mcc_h7781 = _source394.dtor_optExpr;
                    } else if (_source394.is_CallType) {
                      RAST._IExpr _9299___mcc_h7783 = _source394.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9300___mcc_h7784 = _source394.dtor_typeParameters;
                    } else if (_source394.is_Call) {
                      RAST._IExpr _9301___mcc_h7787 = _source394.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9302___mcc_h7788 = _source394.dtor_arguments;
                    } else if (_source394.is_Select) {
                      RAST._IExpr _9303___mcc_h7791 = _source394.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9304___mcc_h7792 = _source394.dtor_name;
                    } else if (_source394.is_MemberSelect) {
                      RAST._IExpr _9305___mcc_h7795 = _source394.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9306___mcc_h7796 = _source394.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9307___mcc_h7799 = _source394.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9308___mcc_h7800 = _source394.dtor_retType;
                      RAST._IExpr _9309___mcc_h7801 = _source394.dtor_body;
                    }
                  } else {
                  }
                } else if (_source393.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9310___mcc_h7805 = _source393.dtor_op2;
                  RAST._IExpr _9311___mcc_h7806 = _source393.dtor_left;
                  RAST._IExpr _9312___mcc_h7807 = _source393.dtor_right;
                  DAST.Format._IBinaryOpFormat _9313___mcc_h7808 = _source393.dtor_format2;
                } else if (_source393.is_TypeAscription) {
                  RAST._IExpr _9314___mcc_h7813 = _source393.dtor_left;
                  RAST._IType _9315___mcc_h7814 = _source393.dtor_tpe;
                } else if (_source393.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9316___mcc_h7817 = _source393.dtor_value;
                } else if (_source393.is_LiteralBool) {
                  bool _9317___mcc_h7819 = _source393.dtor_bvalue;
                } else if (_source393.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9318___mcc_h7821 = _source393.dtor_value;
                  bool _9319___mcc_h7822 = _source393.dtor_binary;
                } else if (_source393.is_DeclareVar) {
                  RAST._IDeclareType _9320___mcc_h7825 = _source393.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9321___mcc_h7826 = _source393.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9322___mcc_h7827 = _source393.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9323___mcc_h7828 = _source393.dtor_optRhs;
                } else if (_source393.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9324___mcc_h7833 = _source393.dtor_names;
                  RAST._IExpr _9325___mcc_h7834 = _source393.dtor_rhs;
                } else if (_source393.is_IfExpr) {
                  RAST._IExpr _9326___mcc_h7837 = _source393.dtor_cond;
                  RAST._IExpr _9327___mcc_h7838 = _source393.dtor_thn;
                  RAST._IExpr _9328___mcc_h7839 = _source393.dtor_els;
                } else if (_source393.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9329___mcc_h7843 = _source393.dtor_optCond;
                  RAST._IExpr _9330___mcc_h7844 = _source393.dtor_underlying;
                } else if (_source393.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9331___mcc_h7847 = _source393.dtor_name;
                  RAST._IExpr _9332___mcc_h7848 = _source393.dtor_range;
                  RAST._IExpr _9333___mcc_h7849 = _source393.dtor_body;
                } else if (_source393.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9334___mcc_h7853 = _source393.dtor_lbl;
                  RAST._IExpr _9335___mcc_h7854 = _source393.dtor_underlying;
                } else if (_source393.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9336___mcc_h7857 = _source393.dtor_optLbl;
                } else if (_source393.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9337___mcc_h7859 = _source393.dtor_optLbl;
                } else if (_source393.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9338___mcc_h7861 = _source393.dtor_optExpr;
                } else if (_source393.is_CallType) {
                  RAST._IExpr _9339___mcc_h7863 = _source393.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9340___mcc_h7864 = _source393.dtor_typeParameters;
                } else if (_source393.is_Call) {
                  RAST._IExpr _9341___mcc_h7867 = _source393.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9342___mcc_h7868 = _source393.dtor_arguments;
                } else if (_source393.is_Select) {
                  RAST._IExpr _9343___mcc_h7871 = _source393.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9344___mcc_h7872 = _source393.dtor_name;
                } else if (_source393.is_MemberSelect) {
                  RAST._IExpr _9345___mcc_h7875 = _source393.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9346___mcc_h7876 = _source393.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9347___mcc_h7879 = _source393.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9348___mcc_h7880 = _source393.dtor_retType;
                  RAST._IExpr _9349___mcc_h7881 = _source393.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9233_field));
              if (_9232_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2053;
              DCOMP._IOwnership _out2054;
              (this).FromOwned(r, expectedOwnership, out _out2053, out _out2054);
              r = _out2053;
              resultingOwnership = _out2054;
              readIdents = _9241_recIdents;
            }
            return ;
          }
        } else if (_source324.is_Apply) {
          DAST._IExpression _9350___mcc_h235 = _source324.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _9351___mcc_h236 = _source324.dtor_args;
          DAST._IType _9352_fieldType = _5052___mcc_h58;
          bool _9353_isDatatype = _5051___mcc_h57;
          bool _9354_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _9355_field = _5049___mcc_h55;
          DAST._IExpression _9356_on = _5048___mcc_h54;
          {
            if (_9353_isDatatype) {
              RAST._IExpr _9357_onExpr;
              DCOMP._IOwnership _9358_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9359_recIdents;
              RAST._IExpr _out2055;
              DCOMP._IOwnership _out2056;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2057;
              (this).GenExpr(_9356_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2055, out _out2056, out _out2057);
              _9357_onExpr = _out2055;
              _9358_onOwned = _out2056;
              _9359_recIdents = _out2057;
              r = ((_9357_onExpr).Sel(DCOMP.__default.escapeName(_9355_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9360_typ;
              RAST._IType _out2058;
              _out2058 = (this).GenType(_9352_fieldType, DCOMP.GenTypeContext.@default());
              _9360_typ = _out2058;
              RAST._IExpr _out2059;
              DCOMP._IOwnership _out2060;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2059, out _out2060);
              r = _out2059;
              resultingOwnership = _out2060;
              readIdents = _9359_recIdents;
            } else {
              RAST._IExpr _9361_onExpr;
              DCOMP._IOwnership _9362_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9363_recIdents;
              RAST._IExpr _out2061;
              DCOMP._IOwnership _out2062;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2063;
              (this).GenExpr(_9356_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2061, out _out2062, out _out2063);
              _9361_onExpr = _out2061;
              _9362_onOwned = _out2062;
              _9363_recIdents = _out2063;
              r = _9361_onExpr;
              if (!object.Equals(_9361_onExpr, RAST.__default.self)) {
                RAST._IExpr _source395 = _9361_onExpr;
                if (_source395.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9364___mcc_h7885 = _source395.dtor_content;
                } else if (_source395.is_ExprFromType) {
                  RAST._IType _9365___mcc_h7887 = _source395.dtor_tpe;
                } else if (_source395.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9366___mcc_h7889 = _source395.dtor_name;
                } else if (_source395.is_Match) {
                  RAST._IExpr _9367___mcc_h7891 = _source395.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9368___mcc_h7892 = _source395.dtor_cases;
                } else if (_source395.is_StmtExpr) {
                  RAST._IExpr _9369___mcc_h7895 = _source395.dtor_stmt;
                  RAST._IExpr _9370___mcc_h7896 = _source395.dtor_rhs;
                } else if (_source395.is_Block) {
                  RAST._IExpr _9371___mcc_h7899 = _source395.dtor_underlying;
                } else if (_source395.is_StructBuild) {
                  RAST._IExpr _9372___mcc_h7901 = _source395.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9373___mcc_h7902 = _source395.dtor_assignments;
                } else if (_source395.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9374___mcc_h7905 = _source395.dtor_arguments;
                } else if (_source395.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9375___mcc_h7907 = _source395.dtor_op1;
                  RAST._IExpr _9376___mcc_h7908 = _source395.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9377___mcc_h7909 = _source395.dtor_format;
                  if (object.Equals(_9375___mcc_h7907, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source396 = _9376___mcc_h7908;
                    if (_source396.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9378___mcc_h7913 = _source396.dtor_content;
                    } else if (_source396.is_ExprFromType) {
                      RAST._IType _9379___mcc_h7915 = _source396.dtor_tpe;
                    } else if (_source396.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9380___mcc_h7917 = _source396.dtor_name;
                      if (object.Equals(_9380___mcc_h7917, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source396.is_Match) {
                      RAST._IExpr _9381___mcc_h7919 = _source396.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9382___mcc_h7920 = _source396.dtor_cases;
                    } else if (_source396.is_StmtExpr) {
                      RAST._IExpr _9383___mcc_h7923 = _source396.dtor_stmt;
                      RAST._IExpr _9384___mcc_h7924 = _source396.dtor_rhs;
                    } else if (_source396.is_Block) {
                      RAST._IExpr _9385___mcc_h7927 = _source396.dtor_underlying;
                    } else if (_source396.is_StructBuild) {
                      RAST._IExpr _9386___mcc_h7929 = _source396.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9387___mcc_h7930 = _source396.dtor_assignments;
                    } else if (_source396.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9388___mcc_h7933 = _source396.dtor_arguments;
                    } else if (_source396.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9389___mcc_h7935 = _source396.dtor_op1;
                      RAST._IExpr _9390___mcc_h7936 = _source396.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9391___mcc_h7937 = _source396.dtor_format;
                    } else if (_source396.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9392___mcc_h7941 = _source396.dtor_op2;
                      RAST._IExpr _9393___mcc_h7942 = _source396.dtor_left;
                      RAST._IExpr _9394___mcc_h7943 = _source396.dtor_right;
                      DAST.Format._IBinaryOpFormat _9395___mcc_h7944 = _source396.dtor_format2;
                    } else if (_source396.is_TypeAscription) {
                      RAST._IExpr _9396___mcc_h7949 = _source396.dtor_left;
                      RAST._IType _9397___mcc_h7950 = _source396.dtor_tpe;
                    } else if (_source396.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9398___mcc_h7953 = _source396.dtor_value;
                    } else if (_source396.is_LiteralBool) {
                      bool _9399___mcc_h7955 = _source396.dtor_bvalue;
                    } else if (_source396.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9400___mcc_h7957 = _source396.dtor_value;
                      bool _9401___mcc_h7958 = _source396.dtor_binary;
                    } else if (_source396.is_DeclareVar) {
                      RAST._IDeclareType _9402___mcc_h7961 = _source396.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9403___mcc_h7962 = _source396.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9404___mcc_h7963 = _source396.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9405___mcc_h7964 = _source396.dtor_optRhs;
                    } else if (_source396.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9406___mcc_h7969 = _source396.dtor_names;
                      RAST._IExpr _9407___mcc_h7970 = _source396.dtor_rhs;
                    } else if (_source396.is_IfExpr) {
                      RAST._IExpr _9408___mcc_h7973 = _source396.dtor_cond;
                      RAST._IExpr _9409___mcc_h7974 = _source396.dtor_thn;
                      RAST._IExpr _9410___mcc_h7975 = _source396.dtor_els;
                    } else if (_source396.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9411___mcc_h7979 = _source396.dtor_optCond;
                      RAST._IExpr _9412___mcc_h7980 = _source396.dtor_underlying;
                    } else if (_source396.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9413___mcc_h7983 = _source396.dtor_name;
                      RAST._IExpr _9414___mcc_h7984 = _source396.dtor_range;
                      RAST._IExpr _9415___mcc_h7985 = _source396.dtor_body;
                    } else if (_source396.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9416___mcc_h7989 = _source396.dtor_lbl;
                      RAST._IExpr _9417___mcc_h7990 = _source396.dtor_underlying;
                    } else if (_source396.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9418___mcc_h7993 = _source396.dtor_optLbl;
                    } else if (_source396.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9419___mcc_h7995 = _source396.dtor_optLbl;
                    } else if (_source396.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9420___mcc_h7997 = _source396.dtor_optExpr;
                    } else if (_source396.is_CallType) {
                      RAST._IExpr _9421___mcc_h7999 = _source396.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9422___mcc_h8000 = _source396.dtor_typeParameters;
                    } else if (_source396.is_Call) {
                      RAST._IExpr _9423___mcc_h8003 = _source396.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9424___mcc_h8004 = _source396.dtor_arguments;
                    } else if (_source396.is_Select) {
                      RAST._IExpr _9425___mcc_h8007 = _source396.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9426___mcc_h8008 = _source396.dtor_name;
                    } else if (_source396.is_MemberSelect) {
                      RAST._IExpr _9427___mcc_h8011 = _source396.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9428___mcc_h8012 = _source396.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9429___mcc_h8015 = _source396.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9430___mcc_h8016 = _source396.dtor_retType;
                      RAST._IExpr _9431___mcc_h8017 = _source396.dtor_body;
                    }
                  } else {
                  }
                } else if (_source395.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9432___mcc_h8021 = _source395.dtor_op2;
                  RAST._IExpr _9433___mcc_h8022 = _source395.dtor_left;
                  RAST._IExpr _9434___mcc_h8023 = _source395.dtor_right;
                  DAST.Format._IBinaryOpFormat _9435___mcc_h8024 = _source395.dtor_format2;
                } else if (_source395.is_TypeAscription) {
                  RAST._IExpr _9436___mcc_h8029 = _source395.dtor_left;
                  RAST._IType _9437___mcc_h8030 = _source395.dtor_tpe;
                } else if (_source395.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9438___mcc_h8033 = _source395.dtor_value;
                } else if (_source395.is_LiteralBool) {
                  bool _9439___mcc_h8035 = _source395.dtor_bvalue;
                } else if (_source395.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9440___mcc_h8037 = _source395.dtor_value;
                  bool _9441___mcc_h8038 = _source395.dtor_binary;
                } else if (_source395.is_DeclareVar) {
                  RAST._IDeclareType _9442___mcc_h8041 = _source395.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9443___mcc_h8042 = _source395.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9444___mcc_h8043 = _source395.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9445___mcc_h8044 = _source395.dtor_optRhs;
                } else if (_source395.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9446___mcc_h8049 = _source395.dtor_names;
                  RAST._IExpr _9447___mcc_h8050 = _source395.dtor_rhs;
                } else if (_source395.is_IfExpr) {
                  RAST._IExpr _9448___mcc_h8053 = _source395.dtor_cond;
                  RAST._IExpr _9449___mcc_h8054 = _source395.dtor_thn;
                  RAST._IExpr _9450___mcc_h8055 = _source395.dtor_els;
                } else if (_source395.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9451___mcc_h8059 = _source395.dtor_optCond;
                  RAST._IExpr _9452___mcc_h8060 = _source395.dtor_underlying;
                } else if (_source395.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9453___mcc_h8063 = _source395.dtor_name;
                  RAST._IExpr _9454___mcc_h8064 = _source395.dtor_range;
                  RAST._IExpr _9455___mcc_h8065 = _source395.dtor_body;
                } else if (_source395.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9456___mcc_h8069 = _source395.dtor_lbl;
                  RAST._IExpr _9457___mcc_h8070 = _source395.dtor_underlying;
                } else if (_source395.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9458___mcc_h8073 = _source395.dtor_optLbl;
                } else if (_source395.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9459___mcc_h8075 = _source395.dtor_optLbl;
                } else if (_source395.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9460___mcc_h8077 = _source395.dtor_optExpr;
                } else if (_source395.is_CallType) {
                  RAST._IExpr _9461___mcc_h8079 = _source395.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9462___mcc_h8080 = _source395.dtor_typeParameters;
                } else if (_source395.is_Call) {
                  RAST._IExpr _9463___mcc_h8083 = _source395.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9464___mcc_h8084 = _source395.dtor_arguments;
                } else if (_source395.is_Select) {
                  RAST._IExpr _9465___mcc_h8087 = _source395.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9466___mcc_h8088 = _source395.dtor_name;
                } else if (_source395.is_MemberSelect) {
                  RAST._IExpr _9467___mcc_h8091 = _source395.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9468___mcc_h8092 = _source395.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9469___mcc_h8095 = _source395.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9470___mcc_h8096 = _source395.dtor_retType;
                  RAST._IExpr _9471___mcc_h8097 = _source395.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9355_field));
              if (_9354_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2064;
              DCOMP._IOwnership _out2065;
              (this).FromOwned(r, expectedOwnership, out _out2064, out _out2065);
              r = _out2064;
              resultingOwnership = _out2065;
              readIdents = _9363_recIdents;
            }
            return ;
          }
        } else if (_source324.is_TypeTest) {
          DAST._IExpression _9472___mcc_h239 = _source324.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9473___mcc_h240 = _source324.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _9474___mcc_h241 = _source324.dtor_variant;
          DAST._IType _9475_fieldType = _5052___mcc_h58;
          bool _9476_isDatatype = _5051___mcc_h57;
          bool _9477_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _9478_field = _5049___mcc_h55;
          DAST._IExpression _9479_on = _5048___mcc_h54;
          {
            if (_9476_isDatatype) {
              RAST._IExpr _9480_onExpr;
              DCOMP._IOwnership _9481_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9482_recIdents;
              RAST._IExpr _out2066;
              DCOMP._IOwnership _out2067;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2068;
              (this).GenExpr(_9479_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2066, out _out2067, out _out2068);
              _9480_onExpr = _out2066;
              _9481_onOwned = _out2067;
              _9482_recIdents = _out2068;
              r = ((_9480_onExpr).Sel(DCOMP.__default.escapeName(_9478_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9483_typ;
              RAST._IType _out2069;
              _out2069 = (this).GenType(_9475_fieldType, DCOMP.GenTypeContext.@default());
              _9483_typ = _out2069;
              RAST._IExpr _out2070;
              DCOMP._IOwnership _out2071;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2070, out _out2071);
              r = _out2070;
              resultingOwnership = _out2071;
              readIdents = _9482_recIdents;
            } else {
              RAST._IExpr _9484_onExpr;
              DCOMP._IOwnership _9485_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9486_recIdents;
              RAST._IExpr _out2072;
              DCOMP._IOwnership _out2073;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2074;
              (this).GenExpr(_9479_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2072, out _out2073, out _out2074);
              _9484_onExpr = _out2072;
              _9485_onOwned = _out2073;
              _9486_recIdents = _out2074;
              r = _9484_onExpr;
              if (!object.Equals(_9484_onExpr, RAST.__default.self)) {
                RAST._IExpr _source397 = _9484_onExpr;
                if (_source397.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9487___mcc_h8101 = _source397.dtor_content;
                } else if (_source397.is_ExprFromType) {
                  RAST._IType _9488___mcc_h8103 = _source397.dtor_tpe;
                } else if (_source397.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9489___mcc_h8105 = _source397.dtor_name;
                } else if (_source397.is_Match) {
                  RAST._IExpr _9490___mcc_h8107 = _source397.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9491___mcc_h8108 = _source397.dtor_cases;
                } else if (_source397.is_StmtExpr) {
                  RAST._IExpr _9492___mcc_h8111 = _source397.dtor_stmt;
                  RAST._IExpr _9493___mcc_h8112 = _source397.dtor_rhs;
                } else if (_source397.is_Block) {
                  RAST._IExpr _9494___mcc_h8115 = _source397.dtor_underlying;
                } else if (_source397.is_StructBuild) {
                  RAST._IExpr _9495___mcc_h8117 = _source397.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9496___mcc_h8118 = _source397.dtor_assignments;
                } else if (_source397.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9497___mcc_h8121 = _source397.dtor_arguments;
                } else if (_source397.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9498___mcc_h8123 = _source397.dtor_op1;
                  RAST._IExpr _9499___mcc_h8124 = _source397.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9500___mcc_h8125 = _source397.dtor_format;
                  if (object.Equals(_9498___mcc_h8123, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source398 = _9499___mcc_h8124;
                    if (_source398.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9501___mcc_h8129 = _source398.dtor_content;
                    } else if (_source398.is_ExprFromType) {
                      RAST._IType _9502___mcc_h8131 = _source398.dtor_tpe;
                    } else if (_source398.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9503___mcc_h8133 = _source398.dtor_name;
                      if (object.Equals(_9503___mcc_h8133, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source398.is_Match) {
                      RAST._IExpr _9504___mcc_h8135 = _source398.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9505___mcc_h8136 = _source398.dtor_cases;
                    } else if (_source398.is_StmtExpr) {
                      RAST._IExpr _9506___mcc_h8139 = _source398.dtor_stmt;
                      RAST._IExpr _9507___mcc_h8140 = _source398.dtor_rhs;
                    } else if (_source398.is_Block) {
                      RAST._IExpr _9508___mcc_h8143 = _source398.dtor_underlying;
                    } else if (_source398.is_StructBuild) {
                      RAST._IExpr _9509___mcc_h8145 = _source398.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9510___mcc_h8146 = _source398.dtor_assignments;
                    } else if (_source398.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9511___mcc_h8149 = _source398.dtor_arguments;
                    } else if (_source398.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9512___mcc_h8151 = _source398.dtor_op1;
                      RAST._IExpr _9513___mcc_h8152 = _source398.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9514___mcc_h8153 = _source398.dtor_format;
                    } else if (_source398.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9515___mcc_h8157 = _source398.dtor_op2;
                      RAST._IExpr _9516___mcc_h8158 = _source398.dtor_left;
                      RAST._IExpr _9517___mcc_h8159 = _source398.dtor_right;
                      DAST.Format._IBinaryOpFormat _9518___mcc_h8160 = _source398.dtor_format2;
                    } else if (_source398.is_TypeAscription) {
                      RAST._IExpr _9519___mcc_h8165 = _source398.dtor_left;
                      RAST._IType _9520___mcc_h8166 = _source398.dtor_tpe;
                    } else if (_source398.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9521___mcc_h8169 = _source398.dtor_value;
                    } else if (_source398.is_LiteralBool) {
                      bool _9522___mcc_h8171 = _source398.dtor_bvalue;
                    } else if (_source398.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9523___mcc_h8173 = _source398.dtor_value;
                      bool _9524___mcc_h8174 = _source398.dtor_binary;
                    } else if (_source398.is_DeclareVar) {
                      RAST._IDeclareType _9525___mcc_h8177 = _source398.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9526___mcc_h8178 = _source398.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9527___mcc_h8179 = _source398.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9528___mcc_h8180 = _source398.dtor_optRhs;
                    } else if (_source398.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9529___mcc_h8185 = _source398.dtor_names;
                      RAST._IExpr _9530___mcc_h8186 = _source398.dtor_rhs;
                    } else if (_source398.is_IfExpr) {
                      RAST._IExpr _9531___mcc_h8189 = _source398.dtor_cond;
                      RAST._IExpr _9532___mcc_h8190 = _source398.dtor_thn;
                      RAST._IExpr _9533___mcc_h8191 = _source398.dtor_els;
                    } else if (_source398.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9534___mcc_h8195 = _source398.dtor_optCond;
                      RAST._IExpr _9535___mcc_h8196 = _source398.dtor_underlying;
                    } else if (_source398.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9536___mcc_h8199 = _source398.dtor_name;
                      RAST._IExpr _9537___mcc_h8200 = _source398.dtor_range;
                      RAST._IExpr _9538___mcc_h8201 = _source398.dtor_body;
                    } else if (_source398.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9539___mcc_h8205 = _source398.dtor_lbl;
                      RAST._IExpr _9540___mcc_h8206 = _source398.dtor_underlying;
                    } else if (_source398.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9541___mcc_h8209 = _source398.dtor_optLbl;
                    } else if (_source398.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9542___mcc_h8211 = _source398.dtor_optLbl;
                    } else if (_source398.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9543___mcc_h8213 = _source398.dtor_optExpr;
                    } else if (_source398.is_CallType) {
                      RAST._IExpr _9544___mcc_h8215 = _source398.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9545___mcc_h8216 = _source398.dtor_typeParameters;
                    } else if (_source398.is_Call) {
                      RAST._IExpr _9546___mcc_h8219 = _source398.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9547___mcc_h8220 = _source398.dtor_arguments;
                    } else if (_source398.is_Select) {
                      RAST._IExpr _9548___mcc_h8223 = _source398.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9549___mcc_h8224 = _source398.dtor_name;
                    } else if (_source398.is_MemberSelect) {
                      RAST._IExpr _9550___mcc_h8227 = _source398.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9551___mcc_h8228 = _source398.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9552___mcc_h8231 = _source398.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9553___mcc_h8232 = _source398.dtor_retType;
                      RAST._IExpr _9554___mcc_h8233 = _source398.dtor_body;
                    }
                  } else {
                  }
                } else if (_source397.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9555___mcc_h8237 = _source397.dtor_op2;
                  RAST._IExpr _9556___mcc_h8238 = _source397.dtor_left;
                  RAST._IExpr _9557___mcc_h8239 = _source397.dtor_right;
                  DAST.Format._IBinaryOpFormat _9558___mcc_h8240 = _source397.dtor_format2;
                } else if (_source397.is_TypeAscription) {
                  RAST._IExpr _9559___mcc_h8245 = _source397.dtor_left;
                  RAST._IType _9560___mcc_h8246 = _source397.dtor_tpe;
                } else if (_source397.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9561___mcc_h8249 = _source397.dtor_value;
                } else if (_source397.is_LiteralBool) {
                  bool _9562___mcc_h8251 = _source397.dtor_bvalue;
                } else if (_source397.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9563___mcc_h8253 = _source397.dtor_value;
                  bool _9564___mcc_h8254 = _source397.dtor_binary;
                } else if (_source397.is_DeclareVar) {
                  RAST._IDeclareType _9565___mcc_h8257 = _source397.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9566___mcc_h8258 = _source397.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9567___mcc_h8259 = _source397.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9568___mcc_h8260 = _source397.dtor_optRhs;
                } else if (_source397.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9569___mcc_h8265 = _source397.dtor_names;
                  RAST._IExpr _9570___mcc_h8266 = _source397.dtor_rhs;
                } else if (_source397.is_IfExpr) {
                  RAST._IExpr _9571___mcc_h8269 = _source397.dtor_cond;
                  RAST._IExpr _9572___mcc_h8270 = _source397.dtor_thn;
                  RAST._IExpr _9573___mcc_h8271 = _source397.dtor_els;
                } else if (_source397.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9574___mcc_h8275 = _source397.dtor_optCond;
                  RAST._IExpr _9575___mcc_h8276 = _source397.dtor_underlying;
                } else if (_source397.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9576___mcc_h8279 = _source397.dtor_name;
                  RAST._IExpr _9577___mcc_h8280 = _source397.dtor_range;
                  RAST._IExpr _9578___mcc_h8281 = _source397.dtor_body;
                } else if (_source397.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9579___mcc_h8285 = _source397.dtor_lbl;
                  RAST._IExpr _9580___mcc_h8286 = _source397.dtor_underlying;
                } else if (_source397.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9581___mcc_h8289 = _source397.dtor_optLbl;
                } else if (_source397.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9582___mcc_h8291 = _source397.dtor_optLbl;
                } else if (_source397.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9583___mcc_h8293 = _source397.dtor_optExpr;
                } else if (_source397.is_CallType) {
                  RAST._IExpr _9584___mcc_h8295 = _source397.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9585___mcc_h8296 = _source397.dtor_typeParameters;
                } else if (_source397.is_Call) {
                  RAST._IExpr _9586___mcc_h8299 = _source397.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9587___mcc_h8300 = _source397.dtor_arguments;
                } else if (_source397.is_Select) {
                  RAST._IExpr _9588___mcc_h8303 = _source397.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9589___mcc_h8304 = _source397.dtor_name;
                } else if (_source397.is_MemberSelect) {
                  RAST._IExpr _9590___mcc_h8307 = _source397.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9591___mcc_h8308 = _source397.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9592___mcc_h8311 = _source397.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9593___mcc_h8312 = _source397.dtor_retType;
                  RAST._IExpr _9594___mcc_h8313 = _source397.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9478_field));
              if (_9477_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2075;
              DCOMP._IOwnership _out2076;
              (this).FromOwned(r, expectedOwnership, out _out2075, out _out2076);
              r = _out2075;
              resultingOwnership = _out2076;
              readIdents = _9486_recIdents;
            }
            return ;
          }
        } else if (_source324.is_InitializationValue) {
          DAST._IType _9595___mcc_h245 = _source324.dtor_typ;
          DAST._IType _9596_fieldType = _5052___mcc_h58;
          bool _9597_isDatatype = _5051___mcc_h57;
          bool _9598_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _9599_field = _5049___mcc_h55;
          DAST._IExpression _9600_on = _5048___mcc_h54;
          {
            if (_9597_isDatatype) {
              RAST._IExpr _9601_onExpr;
              DCOMP._IOwnership _9602_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9603_recIdents;
              RAST._IExpr _out2077;
              DCOMP._IOwnership _out2078;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2079;
              (this).GenExpr(_9600_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2077, out _out2078, out _out2079);
              _9601_onExpr = _out2077;
              _9602_onOwned = _out2078;
              _9603_recIdents = _out2079;
              r = ((_9601_onExpr).Sel(DCOMP.__default.escapeName(_9599_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9604_typ;
              RAST._IType _out2080;
              _out2080 = (this).GenType(_9596_fieldType, DCOMP.GenTypeContext.@default());
              _9604_typ = _out2080;
              RAST._IExpr _out2081;
              DCOMP._IOwnership _out2082;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2081, out _out2082);
              r = _out2081;
              resultingOwnership = _out2082;
              readIdents = _9603_recIdents;
            } else {
              RAST._IExpr _9605_onExpr;
              DCOMP._IOwnership _9606_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9607_recIdents;
              RAST._IExpr _out2083;
              DCOMP._IOwnership _out2084;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2085;
              (this).GenExpr(_9600_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2083, out _out2084, out _out2085);
              _9605_onExpr = _out2083;
              _9606_onOwned = _out2084;
              _9607_recIdents = _out2085;
              r = _9605_onExpr;
              if (!object.Equals(_9605_onExpr, RAST.__default.self)) {
                RAST._IExpr _source399 = _9605_onExpr;
                if (_source399.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9608___mcc_h8317 = _source399.dtor_content;
                } else if (_source399.is_ExprFromType) {
                  RAST._IType _9609___mcc_h8319 = _source399.dtor_tpe;
                } else if (_source399.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9610___mcc_h8321 = _source399.dtor_name;
                } else if (_source399.is_Match) {
                  RAST._IExpr _9611___mcc_h8323 = _source399.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9612___mcc_h8324 = _source399.dtor_cases;
                } else if (_source399.is_StmtExpr) {
                  RAST._IExpr _9613___mcc_h8327 = _source399.dtor_stmt;
                  RAST._IExpr _9614___mcc_h8328 = _source399.dtor_rhs;
                } else if (_source399.is_Block) {
                  RAST._IExpr _9615___mcc_h8331 = _source399.dtor_underlying;
                } else if (_source399.is_StructBuild) {
                  RAST._IExpr _9616___mcc_h8333 = _source399.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9617___mcc_h8334 = _source399.dtor_assignments;
                } else if (_source399.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9618___mcc_h8337 = _source399.dtor_arguments;
                } else if (_source399.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9619___mcc_h8339 = _source399.dtor_op1;
                  RAST._IExpr _9620___mcc_h8340 = _source399.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9621___mcc_h8341 = _source399.dtor_format;
                  if (object.Equals(_9619___mcc_h8339, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source400 = _9620___mcc_h8340;
                    if (_source400.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9622___mcc_h8345 = _source400.dtor_content;
                    } else if (_source400.is_ExprFromType) {
                      RAST._IType _9623___mcc_h8347 = _source400.dtor_tpe;
                    } else if (_source400.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9624___mcc_h8349 = _source400.dtor_name;
                      if (object.Equals(_9624___mcc_h8349, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source400.is_Match) {
                      RAST._IExpr _9625___mcc_h8351 = _source400.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9626___mcc_h8352 = _source400.dtor_cases;
                    } else if (_source400.is_StmtExpr) {
                      RAST._IExpr _9627___mcc_h8355 = _source400.dtor_stmt;
                      RAST._IExpr _9628___mcc_h8356 = _source400.dtor_rhs;
                    } else if (_source400.is_Block) {
                      RAST._IExpr _9629___mcc_h8359 = _source400.dtor_underlying;
                    } else if (_source400.is_StructBuild) {
                      RAST._IExpr _9630___mcc_h8361 = _source400.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9631___mcc_h8362 = _source400.dtor_assignments;
                    } else if (_source400.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9632___mcc_h8365 = _source400.dtor_arguments;
                    } else if (_source400.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9633___mcc_h8367 = _source400.dtor_op1;
                      RAST._IExpr _9634___mcc_h8368 = _source400.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9635___mcc_h8369 = _source400.dtor_format;
                    } else if (_source400.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9636___mcc_h8373 = _source400.dtor_op2;
                      RAST._IExpr _9637___mcc_h8374 = _source400.dtor_left;
                      RAST._IExpr _9638___mcc_h8375 = _source400.dtor_right;
                      DAST.Format._IBinaryOpFormat _9639___mcc_h8376 = _source400.dtor_format2;
                    } else if (_source400.is_TypeAscription) {
                      RAST._IExpr _9640___mcc_h8381 = _source400.dtor_left;
                      RAST._IType _9641___mcc_h8382 = _source400.dtor_tpe;
                    } else if (_source400.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9642___mcc_h8385 = _source400.dtor_value;
                    } else if (_source400.is_LiteralBool) {
                      bool _9643___mcc_h8387 = _source400.dtor_bvalue;
                    } else if (_source400.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9644___mcc_h8389 = _source400.dtor_value;
                      bool _9645___mcc_h8390 = _source400.dtor_binary;
                    } else if (_source400.is_DeclareVar) {
                      RAST._IDeclareType _9646___mcc_h8393 = _source400.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9647___mcc_h8394 = _source400.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9648___mcc_h8395 = _source400.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9649___mcc_h8396 = _source400.dtor_optRhs;
                    } else if (_source400.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9650___mcc_h8401 = _source400.dtor_names;
                      RAST._IExpr _9651___mcc_h8402 = _source400.dtor_rhs;
                    } else if (_source400.is_IfExpr) {
                      RAST._IExpr _9652___mcc_h8405 = _source400.dtor_cond;
                      RAST._IExpr _9653___mcc_h8406 = _source400.dtor_thn;
                      RAST._IExpr _9654___mcc_h8407 = _source400.dtor_els;
                    } else if (_source400.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9655___mcc_h8411 = _source400.dtor_optCond;
                      RAST._IExpr _9656___mcc_h8412 = _source400.dtor_underlying;
                    } else if (_source400.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9657___mcc_h8415 = _source400.dtor_name;
                      RAST._IExpr _9658___mcc_h8416 = _source400.dtor_range;
                      RAST._IExpr _9659___mcc_h8417 = _source400.dtor_body;
                    } else if (_source400.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9660___mcc_h8421 = _source400.dtor_lbl;
                      RAST._IExpr _9661___mcc_h8422 = _source400.dtor_underlying;
                    } else if (_source400.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9662___mcc_h8425 = _source400.dtor_optLbl;
                    } else if (_source400.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9663___mcc_h8427 = _source400.dtor_optLbl;
                    } else if (_source400.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9664___mcc_h8429 = _source400.dtor_optExpr;
                    } else if (_source400.is_CallType) {
                      RAST._IExpr _9665___mcc_h8431 = _source400.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9666___mcc_h8432 = _source400.dtor_typeParameters;
                    } else if (_source400.is_Call) {
                      RAST._IExpr _9667___mcc_h8435 = _source400.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9668___mcc_h8436 = _source400.dtor_arguments;
                    } else if (_source400.is_Select) {
                      RAST._IExpr _9669___mcc_h8439 = _source400.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9670___mcc_h8440 = _source400.dtor_name;
                    } else if (_source400.is_MemberSelect) {
                      RAST._IExpr _9671___mcc_h8443 = _source400.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9672___mcc_h8444 = _source400.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9673___mcc_h8447 = _source400.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9674___mcc_h8448 = _source400.dtor_retType;
                      RAST._IExpr _9675___mcc_h8449 = _source400.dtor_body;
                    }
                  } else {
                  }
                } else if (_source399.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9676___mcc_h8453 = _source399.dtor_op2;
                  RAST._IExpr _9677___mcc_h8454 = _source399.dtor_left;
                  RAST._IExpr _9678___mcc_h8455 = _source399.dtor_right;
                  DAST.Format._IBinaryOpFormat _9679___mcc_h8456 = _source399.dtor_format2;
                } else if (_source399.is_TypeAscription) {
                  RAST._IExpr _9680___mcc_h8461 = _source399.dtor_left;
                  RAST._IType _9681___mcc_h8462 = _source399.dtor_tpe;
                } else if (_source399.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9682___mcc_h8465 = _source399.dtor_value;
                } else if (_source399.is_LiteralBool) {
                  bool _9683___mcc_h8467 = _source399.dtor_bvalue;
                } else if (_source399.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9684___mcc_h8469 = _source399.dtor_value;
                  bool _9685___mcc_h8470 = _source399.dtor_binary;
                } else if (_source399.is_DeclareVar) {
                  RAST._IDeclareType _9686___mcc_h8473 = _source399.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9687___mcc_h8474 = _source399.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9688___mcc_h8475 = _source399.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9689___mcc_h8476 = _source399.dtor_optRhs;
                } else if (_source399.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9690___mcc_h8481 = _source399.dtor_names;
                  RAST._IExpr _9691___mcc_h8482 = _source399.dtor_rhs;
                } else if (_source399.is_IfExpr) {
                  RAST._IExpr _9692___mcc_h8485 = _source399.dtor_cond;
                  RAST._IExpr _9693___mcc_h8486 = _source399.dtor_thn;
                  RAST._IExpr _9694___mcc_h8487 = _source399.dtor_els;
                } else if (_source399.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9695___mcc_h8491 = _source399.dtor_optCond;
                  RAST._IExpr _9696___mcc_h8492 = _source399.dtor_underlying;
                } else if (_source399.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9697___mcc_h8495 = _source399.dtor_name;
                  RAST._IExpr _9698___mcc_h8496 = _source399.dtor_range;
                  RAST._IExpr _9699___mcc_h8497 = _source399.dtor_body;
                } else if (_source399.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9700___mcc_h8501 = _source399.dtor_lbl;
                  RAST._IExpr _9701___mcc_h8502 = _source399.dtor_underlying;
                } else if (_source399.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9702___mcc_h8505 = _source399.dtor_optLbl;
                } else if (_source399.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9703___mcc_h8507 = _source399.dtor_optLbl;
                } else if (_source399.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9704___mcc_h8509 = _source399.dtor_optExpr;
                } else if (_source399.is_CallType) {
                  RAST._IExpr _9705___mcc_h8511 = _source399.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9706___mcc_h8512 = _source399.dtor_typeParameters;
                } else if (_source399.is_Call) {
                  RAST._IExpr _9707___mcc_h8515 = _source399.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9708___mcc_h8516 = _source399.dtor_arguments;
                } else if (_source399.is_Select) {
                  RAST._IExpr _9709___mcc_h8519 = _source399.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9710___mcc_h8520 = _source399.dtor_name;
                } else if (_source399.is_MemberSelect) {
                  RAST._IExpr _9711___mcc_h8523 = _source399.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9712___mcc_h8524 = _source399.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9713___mcc_h8527 = _source399.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9714___mcc_h8528 = _source399.dtor_retType;
                  RAST._IExpr _9715___mcc_h8529 = _source399.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9599_field));
              if (_9598_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2086;
              DCOMP._IOwnership _out2087;
              (this).FromOwned(r, expectedOwnership, out _out2086, out _out2087);
              r = _out2086;
              resultingOwnership = _out2087;
              readIdents = _9607_recIdents;
            }
            return ;
          }
        } else if (_source324.is_BoolBoundedPool) {
          DAST._IType _9716_fieldType = _5052___mcc_h58;
          bool _9717_isDatatype = _5051___mcc_h57;
          bool _9718_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _9719_field = _5049___mcc_h55;
          DAST._IExpression _9720_on = _5048___mcc_h54;
          {
            if (_9717_isDatatype) {
              RAST._IExpr _9721_onExpr;
              DCOMP._IOwnership _9722_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9723_recIdents;
              RAST._IExpr _out2088;
              DCOMP._IOwnership _out2089;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2090;
              (this).GenExpr(_9720_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2088, out _out2089, out _out2090);
              _9721_onExpr = _out2088;
              _9722_onOwned = _out2089;
              _9723_recIdents = _out2090;
              r = ((_9721_onExpr).Sel(DCOMP.__default.escapeName(_9719_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9724_typ;
              RAST._IType _out2091;
              _out2091 = (this).GenType(_9716_fieldType, DCOMP.GenTypeContext.@default());
              _9724_typ = _out2091;
              RAST._IExpr _out2092;
              DCOMP._IOwnership _out2093;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2092, out _out2093);
              r = _out2092;
              resultingOwnership = _out2093;
              readIdents = _9723_recIdents;
            } else {
              RAST._IExpr _9725_onExpr;
              DCOMP._IOwnership _9726_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9727_recIdents;
              RAST._IExpr _out2094;
              DCOMP._IOwnership _out2095;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2096;
              (this).GenExpr(_9720_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2094, out _out2095, out _out2096);
              _9725_onExpr = _out2094;
              _9726_onOwned = _out2095;
              _9727_recIdents = _out2096;
              r = _9725_onExpr;
              if (!object.Equals(_9725_onExpr, RAST.__default.self)) {
                RAST._IExpr _source401 = _9725_onExpr;
                if (_source401.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9728___mcc_h8533 = _source401.dtor_content;
                } else if (_source401.is_ExprFromType) {
                  RAST._IType _9729___mcc_h8535 = _source401.dtor_tpe;
                } else if (_source401.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9730___mcc_h8537 = _source401.dtor_name;
                } else if (_source401.is_Match) {
                  RAST._IExpr _9731___mcc_h8539 = _source401.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9732___mcc_h8540 = _source401.dtor_cases;
                } else if (_source401.is_StmtExpr) {
                  RAST._IExpr _9733___mcc_h8543 = _source401.dtor_stmt;
                  RAST._IExpr _9734___mcc_h8544 = _source401.dtor_rhs;
                } else if (_source401.is_Block) {
                  RAST._IExpr _9735___mcc_h8547 = _source401.dtor_underlying;
                } else if (_source401.is_StructBuild) {
                  RAST._IExpr _9736___mcc_h8549 = _source401.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9737___mcc_h8550 = _source401.dtor_assignments;
                } else if (_source401.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9738___mcc_h8553 = _source401.dtor_arguments;
                } else if (_source401.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9739___mcc_h8555 = _source401.dtor_op1;
                  RAST._IExpr _9740___mcc_h8556 = _source401.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9741___mcc_h8557 = _source401.dtor_format;
                  if (object.Equals(_9739___mcc_h8555, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source402 = _9740___mcc_h8556;
                    if (_source402.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9742___mcc_h8561 = _source402.dtor_content;
                    } else if (_source402.is_ExprFromType) {
                      RAST._IType _9743___mcc_h8563 = _source402.dtor_tpe;
                    } else if (_source402.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9744___mcc_h8565 = _source402.dtor_name;
                      if (object.Equals(_9744___mcc_h8565, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source402.is_Match) {
                      RAST._IExpr _9745___mcc_h8567 = _source402.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9746___mcc_h8568 = _source402.dtor_cases;
                    } else if (_source402.is_StmtExpr) {
                      RAST._IExpr _9747___mcc_h8571 = _source402.dtor_stmt;
                      RAST._IExpr _9748___mcc_h8572 = _source402.dtor_rhs;
                    } else if (_source402.is_Block) {
                      RAST._IExpr _9749___mcc_h8575 = _source402.dtor_underlying;
                    } else if (_source402.is_StructBuild) {
                      RAST._IExpr _9750___mcc_h8577 = _source402.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9751___mcc_h8578 = _source402.dtor_assignments;
                    } else if (_source402.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9752___mcc_h8581 = _source402.dtor_arguments;
                    } else if (_source402.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9753___mcc_h8583 = _source402.dtor_op1;
                      RAST._IExpr _9754___mcc_h8584 = _source402.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9755___mcc_h8585 = _source402.dtor_format;
                    } else if (_source402.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9756___mcc_h8589 = _source402.dtor_op2;
                      RAST._IExpr _9757___mcc_h8590 = _source402.dtor_left;
                      RAST._IExpr _9758___mcc_h8591 = _source402.dtor_right;
                      DAST.Format._IBinaryOpFormat _9759___mcc_h8592 = _source402.dtor_format2;
                    } else if (_source402.is_TypeAscription) {
                      RAST._IExpr _9760___mcc_h8597 = _source402.dtor_left;
                      RAST._IType _9761___mcc_h8598 = _source402.dtor_tpe;
                    } else if (_source402.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9762___mcc_h8601 = _source402.dtor_value;
                    } else if (_source402.is_LiteralBool) {
                      bool _9763___mcc_h8603 = _source402.dtor_bvalue;
                    } else if (_source402.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9764___mcc_h8605 = _source402.dtor_value;
                      bool _9765___mcc_h8606 = _source402.dtor_binary;
                    } else if (_source402.is_DeclareVar) {
                      RAST._IDeclareType _9766___mcc_h8609 = _source402.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9767___mcc_h8610 = _source402.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9768___mcc_h8611 = _source402.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9769___mcc_h8612 = _source402.dtor_optRhs;
                    } else if (_source402.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9770___mcc_h8617 = _source402.dtor_names;
                      RAST._IExpr _9771___mcc_h8618 = _source402.dtor_rhs;
                    } else if (_source402.is_IfExpr) {
                      RAST._IExpr _9772___mcc_h8621 = _source402.dtor_cond;
                      RAST._IExpr _9773___mcc_h8622 = _source402.dtor_thn;
                      RAST._IExpr _9774___mcc_h8623 = _source402.dtor_els;
                    } else if (_source402.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9775___mcc_h8627 = _source402.dtor_optCond;
                      RAST._IExpr _9776___mcc_h8628 = _source402.dtor_underlying;
                    } else if (_source402.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9777___mcc_h8631 = _source402.dtor_name;
                      RAST._IExpr _9778___mcc_h8632 = _source402.dtor_range;
                      RAST._IExpr _9779___mcc_h8633 = _source402.dtor_body;
                    } else if (_source402.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9780___mcc_h8637 = _source402.dtor_lbl;
                      RAST._IExpr _9781___mcc_h8638 = _source402.dtor_underlying;
                    } else if (_source402.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9782___mcc_h8641 = _source402.dtor_optLbl;
                    } else if (_source402.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9783___mcc_h8643 = _source402.dtor_optLbl;
                    } else if (_source402.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9784___mcc_h8645 = _source402.dtor_optExpr;
                    } else if (_source402.is_CallType) {
                      RAST._IExpr _9785___mcc_h8647 = _source402.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9786___mcc_h8648 = _source402.dtor_typeParameters;
                    } else if (_source402.is_Call) {
                      RAST._IExpr _9787___mcc_h8651 = _source402.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9788___mcc_h8652 = _source402.dtor_arguments;
                    } else if (_source402.is_Select) {
                      RAST._IExpr _9789___mcc_h8655 = _source402.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9790___mcc_h8656 = _source402.dtor_name;
                    } else if (_source402.is_MemberSelect) {
                      RAST._IExpr _9791___mcc_h8659 = _source402.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9792___mcc_h8660 = _source402.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9793___mcc_h8663 = _source402.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9794___mcc_h8664 = _source402.dtor_retType;
                      RAST._IExpr _9795___mcc_h8665 = _source402.dtor_body;
                    }
                  } else {
                  }
                } else if (_source401.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9796___mcc_h8669 = _source401.dtor_op2;
                  RAST._IExpr _9797___mcc_h8670 = _source401.dtor_left;
                  RAST._IExpr _9798___mcc_h8671 = _source401.dtor_right;
                  DAST.Format._IBinaryOpFormat _9799___mcc_h8672 = _source401.dtor_format2;
                } else if (_source401.is_TypeAscription) {
                  RAST._IExpr _9800___mcc_h8677 = _source401.dtor_left;
                  RAST._IType _9801___mcc_h8678 = _source401.dtor_tpe;
                } else if (_source401.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9802___mcc_h8681 = _source401.dtor_value;
                } else if (_source401.is_LiteralBool) {
                  bool _9803___mcc_h8683 = _source401.dtor_bvalue;
                } else if (_source401.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9804___mcc_h8685 = _source401.dtor_value;
                  bool _9805___mcc_h8686 = _source401.dtor_binary;
                } else if (_source401.is_DeclareVar) {
                  RAST._IDeclareType _9806___mcc_h8689 = _source401.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9807___mcc_h8690 = _source401.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9808___mcc_h8691 = _source401.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9809___mcc_h8692 = _source401.dtor_optRhs;
                } else if (_source401.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9810___mcc_h8697 = _source401.dtor_names;
                  RAST._IExpr _9811___mcc_h8698 = _source401.dtor_rhs;
                } else if (_source401.is_IfExpr) {
                  RAST._IExpr _9812___mcc_h8701 = _source401.dtor_cond;
                  RAST._IExpr _9813___mcc_h8702 = _source401.dtor_thn;
                  RAST._IExpr _9814___mcc_h8703 = _source401.dtor_els;
                } else if (_source401.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9815___mcc_h8707 = _source401.dtor_optCond;
                  RAST._IExpr _9816___mcc_h8708 = _source401.dtor_underlying;
                } else if (_source401.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9817___mcc_h8711 = _source401.dtor_name;
                  RAST._IExpr _9818___mcc_h8712 = _source401.dtor_range;
                  RAST._IExpr _9819___mcc_h8713 = _source401.dtor_body;
                } else if (_source401.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9820___mcc_h8717 = _source401.dtor_lbl;
                  RAST._IExpr _9821___mcc_h8718 = _source401.dtor_underlying;
                } else if (_source401.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9822___mcc_h8721 = _source401.dtor_optLbl;
                } else if (_source401.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9823___mcc_h8723 = _source401.dtor_optLbl;
                } else if (_source401.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9824___mcc_h8725 = _source401.dtor_optExpr;
                } else if (_source401.is_CallType) {
                  RAST._IExpr _9825___mcc_h8727 = _source401.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9826___mcc_h8728 = _source401.dtor_typeParameters;
                } else if (_source401.is_Call) {
                  RAST._IExpr _9827___mcc_h8731 = _source401.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9828___mcc_h8732 = _source401.dtor_arguments;
                } else if (_source401.is_Select) {
                  RAST._IExpr _9829___mcc_h8735 = _source401.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9830___mcc_h8736 = _source401.dtor_name;
                } else if (_source401.is_MemberSelect) {
                  RAST._IExpr _9831___mcc_h8739 = _source401.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9832___mcc_h8740 = _source401.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9833___mcc_h8743 = _source401.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9834___mcc_h8744 = _source401.dtor_retType;
                  RAST._IExpr _9835___mcc_h8745 = _source401.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9719_field));
              if (_9718_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2097;
              DCOMP._IOwnership _out2098;
              (this).FromOwned(r, expectedOwnership, out _out2097, out _out2098);
              r = _out2097;
              resultingOwnership = _out2098;
              readIdents = _9727_recIdents;
            }
            return ;
          }
        } else if (_source324.is_SetBoundedPool) {
          DAST._IExpression _9836___mcc_h247 = _source324.dtor_of;
          DAST._IType _9837_fieldType = _5052___mcc_h58;
          bool _9838_isDatatype = _5051___mcc_h57;
          bool _9839_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _9840_field = _5049___mcc_h55;
          DAST._IExpression _9841_on = _5048___mcc_h54;
          {
            if (_9838_isDatatype) {
              RAST._IExpr _9842_onExpr;
              DCOMP._IOwnership _9843_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9844_recIdents;
              RAST._IExpr _out2099;
              DCOMP._IOwnership _out2100;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2101;
              (this).GenExpr(_9841_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2099, out _out2100, out _out2101);
              _9842_onExpr = _out2099;
              _9843_onOwned = _out2100;
              _9844_recIdents = _out2101;
              r = ((_9842_onExpr).Sel(DCOMP.__default.escapeName(_9840_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9845_typ;
              RAST._IType _out2102;
              _out2102 = (this).GenType(_9837_fieldType, DCOMP.GenTypeContext.@default());
              _9845_typ = _out2102;
              RAST._IExpr _out2103;
              DCOMP._IOwnership _out2104;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2103, out _out2104);
              r = _out2103;
              resultingOwnership = _out2104;
              readIdents = _9844_recIdents;
            } else {
              RAST._IExpr _9846_onExpr;
              DCOMP._IOwnership _9847_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9848_recIdents;
              RAST._IExpr _out2105;
              DCOMP._IOwnership _out2106;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2107;
              (this).GenExpr(_9841_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2105, out _out2106, out _out2107);
              _9846_onExpr = _out2105;
              _9847_onOwned = _out2106;
              _9848_recIdents = _out2107;
              r = _9846_onExpr;
              if (!object.Equals(_9846_onExpr, RAST.__default.self)) {
                RAST._IExpr _source403 = _9846_onExpr;
                if (_source403.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9849___mcc_h8749 = _source403.dtor_content;
                } else if (_source403.is_ExprFromType) {
                  RAST._IType _9850___mcc_h8751 = _source403.dtor_tpe;
                } else if (_source403.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9851___mcc_h8753 = _source403.dtor_name;
                } else if (_source403.is_Match) {
                  RAST._IExpr _9852___mcc_h8755 = _source403.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9853___mcc_h8756 = _source403.dtor_cases;
                } else if (_source403.is_StmtExpr) {
                  RAST._IExpr _9854___mcc_h8759 = _source403.dtor_stmt;
                  RAST._IExpr _9855___mcc_h8760 = _source403.dtor_rhs;
                } else if (_source403.is_Block) {
                  RAST._IExpr _9856___mcc_h8763 = _source403.dtor_underlying;
                } else if (_source403.is_StructBuild) {
                  RAST._IExpr _9857___mcc_h8765 = _source403.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9858___mcc_h8766 = _source403.dtor_assignments;
                } else if (_source403.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9859___mcc_h8769 = _source403.dtor_arguments;
                } else if (_source403.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9860___mcc_h8771 = _source403.dtor_op1;
                  RAST._IExpr _9861___mcc_h8772 = _source403.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9862___mcc_h8773 = _source403.dtor_format;
                  if (object.Equals(_9860___mcc_h8771, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source404 = _9861___mcc_h8772;
                    if (_source404.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9863___mcc_h8777 = _source404.dtor_content;
                    } else if (_source404.is_ExprFromType) {
                      RAST._IType _9864___mcc_h8779 = _source404.dtor_tpe;
                    } else if (_source404.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9865___mcc_h8781 = _source404.dtor_name;
                      if (object.Equals(_9865___mcc_h8781, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source404.is_Match) {
                      RAST._IExpr _9866___mcc_h8783 = _source404.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9867___mcc_h8784 = _source404.dtor_cases;
                    } else if (_source404.is_StmtExpr) {
                      RAST._IExpr _9868___mcc_h8787 = _source404.dtor_stmt;
                      RAST._IExpr _9869___mcc_h8788 = _source404.dtor_rhs;
                    } else if (_source404.is_Block) {
                      RAST._IExpr _9870___mcc_h8791 = _source404.dtor_underlying;
                    } else if (_source404.is_StructBuild) {
                      RAST._IExpr _9871___mcc_h8793 = _source404.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9872___mcc_h8794 = _source404.dtor_assignments;
                    } else if (_source404.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9873___mcc_h8797 = _source404.dtor_arguments;
                    } else if (_source404.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9874___mcc_h8799 = _source404.dtor_op1;
                      RAST._IExpr _9875___mcc_h8800 = _source404.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9876___mcc_h8801 = _source404.dtor_format;
                    } else if (_source404.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9877___mcc_h8805 = _source404.dtor_op2;
                      RAST._IExpr _9878___mcc_h8806 = _source404.dtor_left;
                      RAST._IExpr _9879___mcc_h8807 = _source404.dtor_right;
                      DAST.Format._IBinaryOpFormat _9880___mcc_h8808 = _source404.dtor_format2;
                    } else if (_source404.is_TypeAscription) {
                      RAST._IExpr _9881___mcc_h8813 = _source404.dtor_left;
                      RAST._IType _9882___mcc_h8814 = _source404.dtor_tpe;
                    } else if (_source404.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _9883___mcc_h8817 = _source404.dtor_value;
                    } else if (_source404.is_LiteralBool) {
                      bool _9884___mcc_h8819 = _source404.dtor_bvalue;
                    } else if (_source404.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _9885___mcc_h8821 = _source404.dtor_value;
                      bool _9886___mcc_h8822 = _source404.dtor_binary;
                    } else if (_source404.is_DeclareVar) {
                      RAST._IDeclareType _9887___mcc_h8825 = _source404.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _9888___mcc_h8826 = _source404.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _9889___mcc_h8827 = _source404.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _9890___mcc_h8828 = _source404.dtor_optRhs;
                    } else if (_source404.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _9891___mcc_h8833 = _source404.dtor_names;
                      RAST._IExpr _9892___mcc_h8834 = _source404.dtor_rhs;
                    } else if (_source404.is_IfExpr) {
                      RAST._IExpr _9893___mcc_h8837 = _source404.dtor_cond;
                      RAST._IExpr _9894___mcc_h8838 = _source404.dtor_thn;
                      RAST._IExpr _9895___mcc_h8839 = _source404.dtor_els;
                    } else if (_source404.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _9896___mcc_h8843 = _source404.dtor_optCond;
                      RAST._IExpr _9897___mcc_h8844 = _source404.dtor_underlying;
                    } else if (_source404.is_For) {
                      Dafny.ISequence<Dafny.Rune> _9898___mcc_h8847 = _source404.dtor_name;
                      RAST._IExpr _9899___mcc_h8848 = _source404.dtor_range;
                      RAST._IExpr _9900___mcc_h8849 = _source404.dtor_body;
                    } else if (_source404.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _9901___mcc_h8853 = _source404.dtor_lbl;
                      RAST._IExpr _9902___mcc_h8854 = _source404.dtor_underlying;
                    } else if (_source404.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9903___mcc_h8857 = _source404.dtor_optLbl;
                    } else if (_source404.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9904___mcc_h8859 = _source404.dtor_optLbl;
                    } else if (_source404.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _9905___mcc_h8861 = _source404.dtor_optExpr;
                    } else if (_source404.is_CallType) {
                      RAST._IExpr _9906___mcc_h8863 = _source404.dtor_obj;
                      Dafny.ISequence<RAST._IType> _9907___mcc_h8864 = _source404.dtor_typeParameters;
                    } else if (_source404.is_Call) {
                      RAST._IExpr _9908___mcc_h8867 = _source404.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _9909___mcc_h8868 = _source404.dtor_arguments;
                    } else if (_source404.is_Select) {
                      RAST._IExpr _9910___mcc_h8871 = _source404.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9911___mcc_h8872 = _source404.dtor_name;
                    } else if (_source404.is_MemberSelect) {
                      RAST._IExpr _9912___mcc_h8875 = _source404.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _9913___mcc_h8876 = _source404.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _9914___mcc_h8879 = _source404.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _9915___mcc_h8880 = _source404.dtor_retType;
                      RAST._IExpr _9916___mcc_h8881 = _source404.dtor_body;
                    }
                  } else {
                  }
                } else if (_source403.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9917___mcc_h8885 = _source403.dtor_op2;
                  RAST._IExpr _9918___mcc_h8886 = _source403.dtor_left;
                  RAST._IExpr _9919___mcc_h8887 = _source403.dtor_right;
                  DAST.Format._IBinaryOpFormat _9920___mcc_h8888 = _source403.dtor_format2;
                } else if (_source403.is_TypeAscription) {
                  RAST._IExpr _9921___mcc_h8893 = _source403.dtor_left;
                  RAST._IType _9922___mcc_h8894 = _source403.dtor_tpe;
                } else if (_source403.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _9923___mcc_h8897 = _source403.dtor_value;
                } else if (_source403.is_LiteralBool) {
                  bool _9924___mcc_h8899 = _source403.dtor_bvalue;
                } else if (_source403.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _9925___mcc_h8901 = _source403.dtor_value;
                  bool _9926___mcc_h8902 = _source403.dtor_binary;
                } else if (_source403.is_DeclareVar) {
                  RAST._IDeclareType _9927___mcc_h8905 = _source403.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _9928___mcc_h8906 = _source403.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _9929___mcc_h8907 = _source403.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _9930___mcc_h8908 = _source403.dtor_optRhs;
                } else if (_source403.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _9931___mcc_h8913 = _source403.dtor_names;
                  RAST._IExpr _9932___mcc_h8914 = _source403.dtor_rhs;
                } else if (_source403.is_IfExpr) {
                  RAST._IExpr _9933___mcc_h8917 = _source403.dtor_cond;
                  RAST._IExpr _9934___mcc_h8918 = _source403.dtor_thn;
                  RAST._IExpr _9935___mcc_h8919 = _source403.dtor_els;
                } else if (_source403.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _9936___mcc_h8923 = _source403.dtor_optCond;
                  RAST._IExpr _9937___mcc_h8924 = _source403.dtor_underlying;
                } else if (_source403.is_For) {
                  Dafny.ISequence<Dafny.Rune> _9938___mcc_h8927 = _source403.dtor_name;
                  RAST._IExpr _9939___mcc_h8928 = _source403.dtor_range;
                  RAST._IExpr _9940___mcc_h8929 = _source403.dtor_body;
                } else if (_source403.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _9941___mcc_h8933 = _source403.dtor_lbl;
                  RAST._IExpr _9942___mcc_h8934 = _source403.dtor_underlying;
                } else if (_source403.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9943___mcc_h8937 = _source403.dtor_optLbl;
                } else if (_source403.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _9944___mcc_h8939 = _source403.dtor_optLbl;
                } else if (_source403.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _9945___mcc_h8941 = _source403.dtor_optExpr;
                } else if (_source403.is_CallType) {
                  RAST._IExpr _9946___mcc_h8943 = _source403.dtor_obj;
                  Dafny.ISequence<RAST._IType> _9947___mcc_h8944 = _source403.dtor_typeParameters;
                } else if (_source403.is_Call) {
                  RAST._IExpr _9948___mcc_h8947 = _source403.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _9949___mcc_h8948 = _source403.dtor_arguments;
                } else if (_source403.is_Select) {
                  RAST._IExpr _9950___mcc_h8951 = _source403.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9951___mcc_h8952 = _source403.dtor_name;
                } else if (_source403.is_MemberSelect) {
                  RAST._IExpr _9952___mcc_h8955 = _source403.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _9953___mcc_h8956 = _source403.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _9954___mcc_h8959 = _source403.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _9955___mcc_h8960 = _source403.dtor_retType;
                  RAST._IExpr _9956___mcc_h8961 = _source403.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9840_field));
              if (_9839_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2108;
              DCOMP._IOwnership _out2109;
              (this).FromOwned(r, expectedOwnership, out _out2108, out _out2109);
              r = _out2108;
              resultingOwnership = _out2109;
              readIdents = _9848_recIdents;
            }
            return ;
          }
        } else if (_source324.is_MapBoundedPool) {
          DAST._IExpression _9957___mcc_h249 = _source324.dtor_of;
          DAST._IType _9958_fieldType = _5052___mcc_h58;
          bool _9959_isDatatype = _5051___mcc_h57;
          bool _9960_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _9961_field = _5049___mcc_h55;
          DAST._IExpression _9962_on = _5048___mcc_h54;
          {
            if (_9959_isDatatype) {
              RAST._IExpr _9963_onExpr;
              DCOMP._IOwnership _9964_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9965_recIdents;
              RAST._IExpr _out2110;
              DCOMP._IOwnership _out2111;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2112;
              (this).GenExpr(_9962_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2110, out _out2111, out _out2112);
              _9963_onExpr = _out2110;
              _9964_onOwned = _out2111;
              _9965_recIdents = _out2112;
              r = ((_9963_onExpr).Sel(DCOMP.__default.escapeName(_9961_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _9966_typ;
              RAST._IType _out2113;
              _out2113 = (this).GenType(_9958_fieldType, DCOMP.GenTypeContext.@default());
              _9966_typ = _out2113;
              RAST._IExpr _out2114;
              DCOMP._IOwnership _out2115;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2114, out _out2115);
              r = _out2114;
              resultingOwnership = _out2115;
              readIdents = _9965_recIdents;
            } else {
              RAST._IExpr _9967_onExpr;
              DCOMP._IOwnership _9968_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9969_recIdents;
              RAST._IExpr _out2116;
              DCOMP._IOwnership _out2117;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2118;
              (this).GenExpr(_9962_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2116, out _out2117, out _out2118);
              _9967_onExpr = _out2116;
              _9968_onOwned = _out2117;
              _9969_recIdents = _out2118;
              r = _9967_onExpr;
              if (!object.Equals(_9967_onExpr, RAST.__default.self)) {
                RAST._IExpr _source405 = _9967_onExpr;
                if (_source405.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _9970___mcc_h8965 = _source405.dtor_content;
                } else if (_source405.is_ExprFromType) {
                  RAST._IType _9971___mcc_h8967 = _source405.dtor_tpe;
                } else if (_source405.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _9972___mcc_h8969 = _source405.dtor_name;
                } else if (_source405.is_Match) {
                  RAST._IExpr _9973___mcc_h8971 = _source405.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _9974___mcc_h8972 = _source405.dtor_cases;
                } else if (_source405.is_StmtExpr) {
                  RAST._IExpr _9975___mcc_h8975 = _source405.dtor_stmt;
                  RAST._IExpr _9976___mcc_h8976 = _source405.dtor_rhs;
                } else if (_source405.is_Block) {
                  RAST._IExpr _9977___mcc_h8979 = _source405.dtor_underlying;
                } else if (_source405.is_StructBuild) {
                  RAST._IExpr _9978___mcc_h8981 = _source405.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _9979___mcc_h8982 = _source405.dtor_assignments;
                } else if (_source405.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _9980___mcc_h8985 = _source405.dtor_arguments;
                } else if (_source405.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _9981___mcc_h8987 = _source405.dtor_op1;
                  RAST._IExpr _9982___mcc_h8988 = _source405.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _9983___mcc_h8989 = _source405.dtor_format;
                  if (object.Equals(_9981___mcc_h8987, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source406 = _9982___mcc_h8988;
                    if (_source406.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _9984___mcc_h8993 = _source406.dtor_content;
                    } else if (_source406.is_ExprFromType) {
                      RAST._IType _9985___mcc_h8995 = _source406.dtor_tpe;
                    } else if (_source406.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _9986___mcc_h8997 = _source406.dtor_name;
                      if (object.Equals(_9986___mcc_h8997, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source406.is_Match) {
                      RAST._IExpr _9987___mcc_h8999 = _source406.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _9988___mcc_h9000 = _source406.dtor_cases;
                    } else if (_source406.is_StmtExpr) {
                      RAST._IExpr _9989___mcc_h9003 = _source406.dtor_stmt;
                      RAST._IExpr _9990___mcc_h9004 = _source406.dtor_rhs;
                    } else if (_source406.is_Block) {
                      RAST._IExpr _9991___mcc_h9007 = _source406.dtor_underlying;
                    } else if (_source406.is_StructBuild) {
                      RAST._IExpr _9992___mcc_h9009 = _source406.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _9993___mcc_h9010 = _source406.dtor_assignments;
                    } else if (_source406.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _9994___mcc_h9013 = _source406.dtor_arguments;
                    } else if (_source406.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9995___mcc_h9015 = _source406.dtor_op1;
                      RAST._IExpr _9996___mcc_h9016 = _source406.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _9997___mcc_h9017 = _source406.dtor_format;
                    } else if (_source406.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _9998___mcc_h9021 = _source406.dtor_op2;
                      RAST._IExpr _9999___mcc_h9022 = _source406.dtor_left;
                      RAST._IExpr _10000___mcc_h9023 = _source406.dtor_right;
                      DAST.Format._IBinaryOpFormat _10001___mcc_h9024 = _source406.dtor_format2;
                    } else if (_source406.is_TypeAscription) {
                      RAST._IExpr _10002___mcc_h9029 = _source406.dtor_left;
                      RAST._IType _10003___mcc_h9030 = _source406.dtor_tpe;
                    } else if (_source406.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10004___mcc_h9033 = _source406.dtor_value;
                    } else if (_source406.is_LiteralBool) {
                      bool _10005___mcc_h9035 = _source406.dtor_bvalue;
                    } else if (_source406.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10006___mcc_h9037 = _source406.dtor_value;
                      bool _10007___mcc_h9038 = _source406.dtor_binary;
                    } else if (_source406.is_DeclareVar) {
                      RAST._IDeclareType _10008___mcc_h9041 = _source406.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10009___mcc_h9042 = _source406.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10010___mcc_h9043 = _source406.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10011___mcc_h9044 = _source406.dtor_optRhs;
                    } else if (_source406.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10012___mcc_h9049 = _source406.dtor_names;
                      RAST._IExpr _10013___mcc_h9050 = _source406.dtor_rhs;
                    } else if (_source406.is_IfExpr) {
                      RAST._IExpr _10014___mcc_h9053 = _source406.dtor_cond;
                      RAST._IExpr _10015___mcc_h9054 = _source406.dtor_thn;
                      RAST._IExpr _10016___mcc_h9055 = _source406.dtor_els;
                    } else if (_source406.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10017___mcc_h9059 = _source406.dtor_optCond;
                      RAST._IExpr _10018___mcc_h9060 = _source406.dtor_underlying;
                    } else if (_source406.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10019___mcc_h9063 = _source406.dtor_name;
                      RAST._IExpr _10020___mcc_h9064 = _source406.dtor_range;
                      RAST._IExpr _10021___mcc_h9065 = _source406.dtor_body;
                    } else if (_source406.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10022___mcc_h9069 = _source406.dtor_lbl;
                      RAST._IExpr _10023___mcc_h9070 = _source406.dtor_underlying;
                    } else if (_source406.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10024___mcc_h9073 = _source406.dtor_optLbl;
                    } else if (_source406.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10025___mcc_h9075 = _source406.dtor_optLbl;
                    } else if (_source406.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10026___mcc_h9077 = _source406.dtor_optExpr;
                    } else if (_source406.is_CallType) {
                      RAST._IExpr _10027___mcc_h9079 = _source406.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10028___mcc_h9080 = _source406.dtor_typeParameters;
                    } else if (_source406.is_Call) {
                      RAST._IExpr _10029___mcc_h9083 = _source406.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10030___mcc_h9084 = _source406.dtor_arguments;
                    } else if (_source406.is_Select) {
                      RAST._IExpr _10031___mcc_h9087 = _source406.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10032___mcc_h9088 = _source406.dtor_name;
                    } else if (_source406.is_MemberSelect) {
                      RAST._IExpr _10033___mcc_h9091 = _source406.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10034___mcc_h9092 = _source406.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10035___mcc_h9095 = _source406.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10036___mcc_h9096 = _source406.dtor_retType;
                      RAST._IExpr _10037___mcc_h9097 = _source406.dtor_body;
                    }
                  } else {
                  }
                } else if (_source405.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10038___mcc_h9101 = _source405.dtor_op2;
                  RAST._IExpr _10039___mcc_h9102 = _source405.dtor_left;
                  RAST._IExpr _10040___mcc_h9103 = _source405.dtor_right;
                  DAST.Format._IBinaryOpFormat _10041___mcc_h9104 = _source405.dtor_format2;
                } else if (_source405.is_TypeAscription) {
                  RAST._IExpr _10042___mcc_h9109 = _source405.dtor_left;
                  RAST._IType _10043___mcc_h9110 = _source405.dtor_tpe;
                } else if (_source405.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10044___mcc_h9113 = _source405.dtor_value;
                } else if (_source405.is_LiteralBool) {
                  bool _10045___mcc_h9115 = _source405.dtor_bvalue;
                } else if (_source405.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10046___mcc_h9117 = _source405.dtor_value;
                  bool _10047___mcc_h9118 = _source405.dtor_binary;
                } else if (_source405.is_DeclareVar) {
                  RAST._IDeclareType _10048___mcc_h9121 = _source405.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10049___mcc_h9122 = _source405.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10050___mcc_h9123 = _source405.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10051___mcc_h9124 = _source405.dtor_optRhs;
                } else if (_source405.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10052___mcc_h9129 = _source405.dtor_names;
                  RAST._IExpr _10053___mcc_h9130 = _source405.dtor_rhs;
                } else if (_source405.is_IfExpr) {
                  RAST._IExpr _10054___mcc_h9133 = _source405.dtor_cond;
                  RAST._IExpr _10055___mcc_h9134 = _source405.dtor_thn;
                  RAST._IExpr _10056___mcc_h9135 = _source405.dtor_els;
                } else if (_source405.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10057___mcc_h9139 = _source405.dtor_optCond;
                  RAST._IExpr _10058___mcc_h9140 = _source405.dtor_underlying;
                } else if (_source405.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10059___mcc_h9143 = _source405.dtor_name;
                  RAST._IExpr _10060___mcc_h9144 = _source405.dtor_range;
                  RAST._IExpr _10061___mcc_h9145 = _source405.dtor_body;
                } else if (_source405.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10062___mcc_h9149 = _source405.dtor_lbl;
                  RAST._IExpr _10063___mcc_h9150 = _source405.dtor_underlying;
                } else if (_source405.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10064___mcc_h9153 = _source405.dtor_optLbl;
                } else if (_source405.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10065___mcc_h9155 = _source405.dtor_optLbl;
                } else if (_source405.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10066___mcc_h9157 = _source405.dtor_optExpr;
                } else if (_source405.is_CallType) {
                  RAST._IExpr _10067___mcc_h9159 = _source405.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10068___mcc_h9160 = _source405.dtor_typeParameters;
                } else if (_source405.is_Call) {
                  RAST._IExpr _10069___mcc_h9163 = _source405.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10070___mcc_h9164 = _source405.dtor_arguments;
                } else if (_source405.is_Select) {
                  RAST._IExpr _10071___mcc_h9167 = _source405.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10072___mcc_h9168 = _source405.dtor_name;
                } else if (_source405.is_MemberSelect) {
                  RAST._IExpr _10073___mcc_h9171 = _source405.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10074___mcc_h9172 = _source405.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10075___mcc_h9175 = _source405.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10076___mcc_h9176 = _source405.dtor_retType;
                  RAST._IExpr _10077___mcc_h9177 = _source405.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_9961_field));
              if (_9960_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2119;
              DCOMP._IOwnership _out2120;
              (this).FromOwned(r, expectedOwnership, out _out2119, out _out2120);
              r = _out2119;
              resultingOwnership = _out2120;
              readIdents = _9969_recIdents;
            }
            return ;
          }
        } else if (_source324.is_SeqBoundedPool) {
          DAST._IExpression _10078___mcc_h251 = _source324.dtor_of;
          bool _10079___mcc_h252 = _source324.dtor_includeDuplicates;
          DAST._IType _10080_fieldType = _5052___mcc_h58;
          bool _10081_isDatatype = _5051___mcc_h57;
          bool _10082_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _10083_field = _5049___mcc_h55;
          DAST._IExpression _10084_on = _5048___mcc_h54;
          {
            if (_10081_isDatatype) {
              RAST._IExpr _10085_onExpr;
              DCOMP._IOwnership _10086_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10087_recIdents;
              RAST._IExpr _out2121;
              DCOMP._IOwnership _out2122;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2123;
              (this).GenExpr(_10084_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2121, out _out2122, out _out2123);
              _10085_onExpr = _out2121;
              _10086_onOwned = _out2122;
              _10087_recIdents = _out2123;
              r = ((_10085_onExpr).Sel(DCOMP.__default.escapeName(_10083_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _10088_typ;
              RAST._IType _out2124;
              _out2124 = (this).GenType(_10080_fieldType, DCOMP.GenTypeContext.@default());
              _10088_typ = _out2124;
              RAST._IExpr _out2125;
              DCOMP._IOwnership _out2126;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2125, out _out2126);
              r = _out2125;
              resultingOwnership = _out2126;
              readIdents = _10087_recIdents;
            } else {
              RAST._IExpr _10089_onExpr;
              DCOMP._IOwnership _10090_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10091_recIdents;
              RAST._IExpr _out2127;
              DCOMP._IOwnership _out2128;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2129;
              (this).GenExpr(_10084_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2127, out _out2128, out _out2129);
              _10089_onExpr = _out2127;
              _10090_onOwned = _out2128;
              _10091_recIdents = _out2129;
              r = _10089_onExpr;
              if (!object.Equals(_10089_onExpr, RAST.__default.self)) {
                RAST._IExpr _source407 = _10089_onExpr;
                if (_source407.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _10092___mcc_h9181 = _source407.dtor_content;
                } else if (_source407.is_ExprFromType) {
                  RAST._IType _10093___mcc_h9183 = _source407.dtor_tpe;
                } else if (_source407.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _10094___mcc_h9185 = _source407.dtor_name;
                } else if (_source407.is_Match) {
                  RAST._IExpr _10095___mcc_h9187 = _source407.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _10096___mcc_h9188 = _source407.dtor_cases;
                } else if (_source407.is_StmtExpr) {
                  RAST._IExpr _10097___mcc_h9191 = _source407.dtor_stmt;
                  RAST._IExpr _10098___mcc_h9192 = _source407.dtor_rhs;
                } else if (_source407.is_Block) {
                  RAST._IExpr _10099___mcc_h9195 = _source407.dtor_underlying;
                } else if (_source407.is_StructBuild) {
                  RAST._IExpr _10100___mcc_h9197 = _source407.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _10101___mcc_h9198 = _source407.dtor_assignments;
                } else if (_source407.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _10102___mcc_h9201 = _source407.dtor_arguments;
                } else if (_source407.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10103___mcc_h9203 = _source407.dtor_op1;
                  RAST._IExpr _10104___mcc_h9204 = _source407.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _10105___mcc_h9205 = _source407.dtor_format;
                  if (object.Equals(_10103___mcc_h9203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source408 = _10104___mcc_h9204;
                    if (_source408.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _10106___mcc_h9209 = _source408.dtor_content;
                    } else if (_source408.is_ExprFromType) {
                      RAST._IType _10107___mcc_h9211 = _source408.dtor_tpe;
                    } else if (_source408.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _10108___mcc_h9213 = _source408.dtor_name;
                      if (object.Equals(_10108___mcc_h9213, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source408.is_Match) {
                      RAST._IExpr _10109___mcc_h9215 = _source408.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _10110___mcc_h9216 = _source408.dtor_cases;
                    } else if (_source408.is_StmtExpr) {
                      RAST._IExpr _10111___mcc_h9219 = _source408.dtor_stmt;
                      RAST._IExpr _10112___mcc_h9220 = _source408.dtor_rhs;
                    } else if (_source408.is_Block) {
                      RAST._IExpr _10113___mcc_h9223 = _source408.dtor_underlying;
                    } else if (_source408.is_StructBuild) {
                      RAST._IExpr _10114___mcc_h9225 = _source408.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _10115___mcc_h9226 = _source408.dtor_assignments;
                    } else if (_source408.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _10116___mcc_h9229 = _source408.dtor_arguments;
                    } else if (_source408.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10117___mcc_h9231 = _source408.dtor_op1;
                      RAST._IExpr _10118___mcc_h9232 = _source408.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _10119___mcc_h9233 = _source408.dtor_format;
                    } else if (_source408.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10120___mcc_h9237 = _source408.dtor_op2;
                      RAST._IExpr _10121___mcc_h9238 = _source408.dtor_left;
                      RAST._IExpr _10122___mcc_h9239 = _source408.dtor_right;
                      DAST.Format._IBinaryOpFormat _10123___mcc_h9240 = _source408.dtor_format2;
                    } else if (_source408.is_TypeAscription) {
                      RAST._IExpr _10124___mcc_h9245 = _source408.dtor_left;
                      RAST._IType _10125___mcc_h9246 = _source408.dtor_tpe;
                    } else if (_source408.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10126___mcc_h9249 = _source408.dtor_value;
                    } else if (_source408.is_LiteralBool) {
                      bool _10127___mcc_h9251 = _source408.dtor_bvalue;
                    } else if (_source408.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10128___mcc_h9253 = _source408.dtor_value;
                      bool _10129___mcc_h9254 = _source408.dtor_binary;
                    } else if (_source408.is_DeclareVar) {
                      RAST._IDeclareType _10130___mcc_h9257 = _source408.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10131___mcc_h9258 = _source408.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10132___mcc_h9259 = _source408.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10133___mcc_h9260 = _source408.dtor_optRhs;
                    } else if (_source408.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10134___mcc_h9265 = _source408.dtor_names;
                      RAST._IExpr _10135___mcc_h9266 = _source408.dtor_rhs;
                    } else if (_source408.is_IfExpr) {
                      RAST._IExpr _10136___mcc_h9269 = _source408.dtor_cond;
                      RAST._IExpr _10137___mcc_h9270 = _source408.dtor_thn;
                      RAST._IExpr _10138___mcc_h9271 = _source408.dtor_els;
                    } else if (_source408.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10139___mcc_h9275 = _source408.dtor_optCond;
                      RAST._IExpr _10140___mcc_h9276 = _source408.dtor_underlying;
                    } else if (_source408.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10141___mcc_h9279 = _source408.dtor_name;
                      RAST._IExpr _10142___mcc_h9280 = _source408.dtor_range;
                      RAST._IExpr _10143___mcc_h9281 = _source408.dtor_body;
                    } else if (_source408.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10144___mcc_h9285 = _source408.dtor_lbl;
                      RAST._IExpr _10145___mcc_h9286 = _source408.dtor_underlying;
                    } else if (_source408.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10146___mcc_h9289 = _source408.dtor_optLbl;
                    } else if (_source408.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10147___mcc_h9291 = _source408.dtor_optLbl;
                    } else if (_source408.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10148___mcc_h9293 = _source408.dtor_optExpr;
                    } else if (_source408.is_CallType) {
                      RAST._IExpr _10149___mcc_h9295 = _source408.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10150___mcc_h9296 = _source408.dtor_typeParameters;
                    } else if (_source408.is_Call) {
                      RAST._IExpr _10151___mcc_h9299 = _source408.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10152___mcc_h9300 = _source408.dtor_arguments;
                    } else if (_source408.is_Select) {
                      RAST._IExpr _10153___mcc_h9303 = _source408.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10154___mcc_h9304 = _source408.dtor_name;
                    } else if (_source408.is_MemberSelect) {
                      RAST._IExpr _10155___mcc_h9307 = _source408.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10156___mcc_h9308 = _source408.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10157___mcc_h9311 = _source408.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10158___mcc_h9312 = _source408.dtor_retType;
                      RAST._IExpr _10159___mcc_h9313 = _source408.dtor_body;
                    }
                  } else {
                  }
                } else if (_source407.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10160___mcc_h9317 = _source407.dtor_op2;
                  RAST._IExpr _10161___mcc_h9318 = _source407.dtor_left;
                  RAST._IExpr _10162___mcc_h9319 = _source407.dtor_right;
                  DAST.Format._IBinaryOpFormat _10163___mcc_h9320 = _source407.dtor_format2;
                } else if (_source407.is_TypeAscription) {
                  RAST._IExpr _10164___mcc_h9325 = _source407.dtor_left;
                  RAST._IType _10165___mcc_h9326 = _source407.dtor_tpe;
                } else if (_source407.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10166___mcc_h9329 = _source407.dtor_value;
                } else if (_source407.is_LiteralBool) {
                  bool _10167___mcc_h9331 = _source407.dtor_bvalue;
                } else if (_source407.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10168___mcc_h9333 = _source407.dtor_value;
                  bool _10169___mcc_h9334 = _source407.dtor_binary;
                } else if (_source407.is_DeclareVar) {
                  RAST._IDeclareType _10170___mcc_h9337 = _source407.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10171___mcc_h9338 = _source407.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10172___mcc_h9339 = _source407.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10173___mcc_h9340 = _source407.dtor_optRhs;
                } else if (_source407.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10174___mcc_h9345 = _source407.dtor_names;
                  RAST._IExpr _10175___mcc_h9346 = _source407.dtor_rhs;
                } else if (_source407.is_IfExpr) {
                  RAST._IExpr _10176___mcc_h9349 = _source407.dtor_cond;
                  RAST._IExpr _10177___mcc_h9350 = _source407.dtor_thn;
                  RAST._IExpr _10178___mcc_h9351 = _source407.dtor_els;
                } else if (_source407.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10179___mcc_h9355 = _source407.dtor_optCond;
                  RAST._IExpr _10180___mcc_h9356 = _source407.dtor_underlying;
                } else if (_source407.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10181___mcc_h9359 = _source407.dtor_name;
                  RAST._IExpr _10182___mcc_h9360 = _source407.dtor_range;
                  RAST._IExpr _10183___mcc_h9361 = _source407.dtor_body;
                } else if (_source407.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10184___mcc_h9365 = _source407.dtor_lbl;
                  RAST._IExpr _10185___mcc_h9366 = _source407.dtor_underlying;
                } else if (_source407.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10186___mcc_h9369 = _source407.dtor_optLbl;
                } else if (_source407.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10187___mcc_h9371 = _source407.dtor_optLbl;
                } else if (_source407.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10188___mcc_h9373 = _source407.dtor_optExpr;
                } else if (_source407.is_CallType) {
                  RAST._IExpr _10189___mcc_h9375 = _source407.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10190___mcc_h9376 = _source407.dtor_typeParameters;
                } else if (_source407.is_Call) {
                  RAST._IExpr _10191___mcc_h9379 = _source407.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10192___mcc_h9380 = _source407.dtor_arguments;
                } else if (_source407.is_Select) {
                  RAST._IExpr _10193___mcc_h9383 = _source407.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10194___mcc_h9384 = _source407.dtor_name;
                } else if (_source407.is_MemberSelect) {
                  RAST._IExpr _10195___mcc_h9387 = _source407.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10196___mcc_h9388 = _source407.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10197___mcc_h9391 = _source407.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10198___mcc_h9392 = _source407.dtor_retType;
                  RAST._IExpr _10199___mcc_h9393 = _source407.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_10083_field));
              if (_10082_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2130;
              DCOMP._IOwnership _out2131;
              (this).FromOwned(r, expectedOwnership, out _out2130, out _out2131);
              r = _out2130;
              resultingOwnership = _out2131;
              readIdents = _10091_recIdents;
            }
            return ;
          }
        } else if (_source324.is_IntRange) {
          DAST._IExpression _10200___mcc_h255 = _source324.dtor_lo;
          DAST._IExpression _10201___mcc_h256 = _source324.dtor_hi;
          bool _10202___mcc_h257 = _source324.dtor_up;
          DAST._IType _10203_fieldType = _5052___mcc_h58;
          bool _10204_isDatatype = _5051___mcc_h57;
          bool _10205_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _10206_field = _5049___mcc_h55;
          DAST._IExpression _10207_on = _5048___mcc_h54;
          {
            if (_10204_isDatatype) {
              RAST._IExpr _10208_onExpr;
              DCOMP._IOwnership _10209_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10210_recIdents;
              RAST._IExpr _out2132;
              DCOMP._IOwnership _out2133;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2134;
              (this).GenExpr(_10207_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2132, out _out2133, out _out2134);
              _10208_onExpr = _out2132;
              _10209_onOwned = _out2133;
              _10210_recIdents = _out2134;
              r = ((_10208_onExpr).Sel(DCOMP.__default.escapeName(_10206_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _10211_typ;
              RAST._IType _out2135;
              _out2135 = (this).GenType(_10203_fieldType, DCOMP.GenTypeContext.@default());
              _10211_typ = _out2135;
              RAST._IExpr _out2136;
              DCOMP._IOwnership _out2137;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2136, out _out2137);
              r = _out2136;
              resultingOwnership = _out2137;
              readIdents = _10210_recIdents;
            } else {
              RAST._IExpr _10212_onExpr;
              DCOMP._IOwnership _10213_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10214_recIdents;
              RAST._IExpr _out2138;
              DCOMP._IOwnership _out2139;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2140;
              (this).GenExpr(_10207_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2138, out _out2139, out _out2140);
              _10212_onExpr = _out2138;
              _10213_onOwned = _out2139;
              _10214_recIdents = _out2140;
              r = _10212_onExpr;
              if (!object.Equals(_10212_onExpr, RAST.__default.self)) {
                RAST._IExpr _source409 = _10212_onExpr;
                if (_source409.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _10215___mcc_h9397 = _source409.dtor_content;
                } else if (_source409.is_ExprFromType) {
                  RAST._IType _10216___mcc_h9399 = _source409.dtor_tpe;
                } else if (_source409.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _10217___mcc_h9401 = _source409.dtor_name;
                } else if (_source409.is_Match) {
                  RAST._IExpr _10218___mcc_h9403 = _source409.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _10219___mcc_h9404 = _source409.dtor_cases;
                } else if (_source409.is_StmtExpr) {
                  RAST._IExpr _10220___mcc_h9407 = _source409.dtor_stmt;
                  RAST._IExpr _10221___mcc_h9408 = _source409.dtor_rhs;
                } else if (_source409.is_Block) {
                  RAST._IExpr _10222___mcc_h9411 = _source409.dtor_underlying;
                } else if (_source409.is_StructBuild) {
                  RAST._IExpr _10223___mcc_h9413 = _source409.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _10224___mcc_h9414 = _source409.dtor_assignments;
                } else if (_source409.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _10225___mcc_h9417 = _source409.dtor_arguments;
                } else if (_source409.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10226___mcc_h9419 = _source409.dtor_op1;
                  RAST._IExpr _10227___mcc_h9420 = _source409.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _10228___mcc_h9421 = _source409.dtor_format;
                  if (object.Equals(_10226___mcc_h9419, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source410 = _10227___mcc_h9420;
                    if (_source410.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _10229___mcc_h9425 = _source410.dtor_content;
                    } else if (_source410.is_ExprFromType) {
                      RAST._IType _10230___mcc_h9427 = _source410.dtor_tpe;
                    } else if (_source410.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _10231___mcc_h9429 = _source410.dtor_name;
                      if (object.Equals(_10231___mcc_h9429, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source410.is_Match) {
                      RAST._IExpr _10232___mcc_h9431 = _source410.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _10233___mcc_h9432 = _source410.dtor_cases;
                    } else if (_source410.is_StmtExpr) {
                      RAST._IExpr _10234___mcc_h9435 = _source410.dtor_stmt;
                      RAST._IExpr _10235___mcc_h9436 = _source410.dtor_rhs;
                    } else if (_source410.is_Block) {
                      RAST._IExpr _10236___mcc_h9439 = _source410.dtor_underlying;
                    } else if (_source410.is_StructBuild) {
                      RAST._IExpr _10237___mcc_h9441 = _source410.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _10238___mcc_h9442 = _source410.dtor_assignments;
                    } else if (_source410.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _10239___mcc_h9445 = _source410.dtor_arguments;
                    } else if (_source410.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10240___mcc_h9447 = _source410.dtor_op1;
                      RAST._IExpr _10241___mcc_h9448 = _source410.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _10242___mcc_h9449 = _source410.dtor_format;
                    } else if (_source410.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10243___mcc_h9453 = _source410.dtor_op2;
                      RAST._IExpr _10244___mcc_h9454 = _source410.dtor_left;
                      RAST._IExpr _10245___mcc_h9455 = _source410.dtor_right;
                      DAST.Format._IBinaryOpFormat _10246___mcc_h9456 = _source410.dtor_format2;
                    } else if (_source410.is_TypeAscription) {
                      RAST._IExpr _10247___mcc_h9461 = _source410.dtor_left;
                      RAST._IType _10248___mcc_h9462 = _source410.dtor_tpe;
                    } else if (_source410.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10249___mcc_h9465 = _source410.dtor_value;
                    } else if (_source410.is_LiteralBool) {
                      bool _10250___mcc_h9467 = _source410.dtor_bvalue;
                    } else if (_source410.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10251___mcc_h9469 = _source410.dtor_value;
                      bool _10252___mcc_h9470 = _source410.dtor_binary;
                    } else if (_source410.is_DeclareVar) {
                      RAST._IDeclareType _10253___mcc_h9473 = _source410.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10254___mcc_h9474 = _source410.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10255___mcc_h9475 = _source410.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10256___mcc_h9476 = _source410.dtor_optRhs;
                    } else if (_source410.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10257___mcc_h9481 = _source410.dtor_names;
                      RAST._IExpr _10258___mcc_h9482 = _source410.dtor_rhs;
                    } else if (_source410.is_IfExpr) {
                      RAST._IExpr _10259___mcc_h9485 = _source410.dtor_cond;
                      RAST._IExpr _10260___mcc_h9486 = _source410.dtor_thn;
                      RAST._IExpr _10261___mcc_h9487 = _source410.dtor_els;
                    } else if (_source410.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10262___mcc_h9491 = _source410.dtor_optCond;
                      RAST._IExpr _10263___mcc_h9492 = _source410.dtor_underlying;
                    } else if (_source410.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10264___mcc_h9495 = _source410.dtor_name;
                      RAST._IExpr _10265___mcc_h9496 = _source410.dtor_range;
                      RAST._IExpr _10266___mcc_h9497 = _source410.dtor_body;
                    } else if (_source410.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10267___mcc_h9501 = _source410.dtor_lbl;
                      RAST._IExpr _10268___mcc_h9502 = _source410.dtor_underlying;
                    } else if (_source410.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10269___mcc_h9505 = _source410.dtor_optLbl;
                    } else if (_source410.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10270___mcc_h9507 = _source410.dtor_optLbl;
                    } else if (_source410.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10271___mcc_h9509 = _source410.dtor_optExpr;
                    } else if (_source410.is_CallType) {
                      RAST._IExpr _10272___mcc_h9511 = _source410.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10273___mcc_h9512 = _source410.dtor_typeParameters;
                    } else if (_source410.is_Call) {
                      RAST._IExpr _10274___mcc_h9515 = _source410.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10275___mcc_h9516 = _source410.dtor_arguments;
                    } else if (_source410.is_Select) {
                      RAST._IExpr _10276___mcc_h9519 = _source410.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10277___mcc_h9520 = _source410.dtor_name;
                    } else if (_source410.is_MemberSelect) {
                      RAST._IExpr _10278___mcc_h9523 = _source410.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10279___mcc_h9524 = _source410.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10280___mcc_h9527 = _source410.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10281___mcc_h9528 = _source410.dtor_retType;
                      RAST._IExpr _10282___mcc_h9529 = _source410.dtor_body;
                    }
                  } else {
                  }
                } else if (_source409.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10283___mcc_h9533 = _source409.dtor_op2;
                  RAST._IExpr _10284___mcc_h9534 = _source409.dtor_left;
                  RAST._IExpr _10285___mcc_h9535 = _source409.dtor_right;
                  DAST.Format._IBinaryOpFormat _10286___mcc_h9536 = _source409.dtor_format2;
                } else if (_source409.is_TypeAscription) {
                  RAST._IExpr _10287___mcc_h9541 = _source409.dtor_left;
                  RAST._IType _10288___mcc_h9542 = _source409.dtor_tpe;
                } else if (_source409.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10289___mcc_h9545 = _source409.dtor_value;
                } else if (_source409.is_LiteralBool) {
                  bool _10290___mcc_h9547 = _source409.dtor_bvalue;
                } else if (_source409.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10291___mcc_h9549 = _source409.dtor_value;
                  bool _10292___mcc_h9550 = _source409.dtor_binary;
                } else if (_source409.is_DeclareVar) {
                  RAST._IDeclareType _10293___mcc_h9553 = _source409.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10294___mcc_h9554 = _source409.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10295___mcc_h9555 = _source409.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10296___mcc_h9556 = _source409.dtor_optRhs;
                } else if (_source409.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10297___mcc_h9561 = _source409.dtor_names;
                  RAST._IExpr _10298___mcc_h9562 = _source409.dtor_rhs;
                } else if (_source409.is_IfExpr) {
                  RAST._IExpr _10299___mcc_h9565 = _source409.dtor_cond;
                  RAST._IExpr _10300___mcc_h9566 = _source409.dtor_thn;
                  RAST._IExpr _10301___mcc_h9567 = _source409.dtor_els;
                } else if (_source409.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10302___mcc_h9571 = _source409.dtor_optCond;
                  RAST._IExpr _10303___mcc_h9572 = _source409.dtor_underlying;
                } else if (_source409.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10304___mcc_h9575 = _source409.dtor_name;
                  RAST._IExpr _10305___mcc_h9576 = _source409.dtor_range;
                  RAST._IExpr _10306___mcc_h9577 = _source409.dtor_body;
                } else if (_source409.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10307___mcc_h9581 = _source409.dtor_lbl;
                  RAST._IExpr _10308___mcc_h9582 = _source409.dtor_underlying;
                } else if (_source409.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10309___mcc_h9585 = _source409.dtor_optLbl;
                } else if (_source409.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10310___mcc_h9587 = _source409.dtor_optLbl;
                } else if (_source409.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10311___mcc_h9589 = _source409.dtor_optExpr;
                } else if (_source409.is_CallType) {
                  RAST._IExpr _10312___mcc_h9591 = _source409.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10313___mcc_h9592 = _source409.dtor_typeParameters;
                } else if (_source409.is_Call) {
                  RAST._IExpr _10314___mcc_h9595 = _source409.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10315___mcc_h9596 = _source409.dtor_arguments;
                } else if (_source409.is_Select) {
                  RAST._IExpr _10316___mcc_h9599 = _source409.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10317___mcc_h9600 = _source409.dtor_name;
                } else if (_source409.is_MemberSelect) {
                  RAST._IExpr _10318___mcc_h9603 = _source409.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10319___mcc_h9604 = _source409.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10320___mcc_h9607 = _source409.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10321___mcc_h9608 = _source409.dtor_retType;
                  RAST._IExpr _10322___mcc_h9609 = _source409.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_10206_field));
              if (_10205_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2141;
              DCOMP._IOwnership _out2142;
              (this).FromOwned(r, expectedOwnership, out _out2141, out _out2142);
              r = _out2141;
              resultingOwnership = _out2142;
              readIdents = _10214_recIdents;
            }
            return ;
          }
        } else if (_source324.is_UnboundedIntRange) {
          DAST._IExpression _10323___mcc_h261 = _source324.dtor_start;
          bool _10324___mcc_h262 = _source324.dtor_up;
          DAST._IType _10325_fieldType = _5052___mcc_h58;
          bool _10326_isDatatype = _5051___mcc_h57;
          bool _10327_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _10328_field = _5049___mcc_h55;
          DAST._IExpression _10329_on = _5048___mcc_h54;
          {
            if (_10326_isDatatype) {
              RAST._IExpr _10330_onExpr;
              DCOMP._IOwnership _10331_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10332_recIdents;
              RAST._IExpr _out2143;
              DCOMP._IOwnership _out2144;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2145;
              (this).GenExpr(_10329_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2143, out _out2144, out _out2145);
              _10330_onExpr = _out2143;
              _10331_onOwned = _out2144;
              _10332_recIdents = _out2145;
              r = ((_10330_onExpr).Sel(DCOMP.__default.escapeName(_10328_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _10333_typ;
              RAST._IType _out2146;
              _out2146 = (this).GenType(_10325_fieldType, DCOMP.GenTypeContext.@default());
              _10333_typ = _out2146;
              RAST._IExpr _out2147;
              DCOMP._IOwnership _out2148;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2147, out _out2148);
              r = _out2147;
              resultingOwnership = _out2148;
              readIdents = _10332_recIdents;
            } else {
              RAST._IExpr _10334_onExpr;
              DCOMP._IOwnership _10335_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10336_recIdents;
              RAST._IExpr _out2149;
              DCOMP._IOwnership _out2150;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2151;
              (this).GenExpr(_10329_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2149, out _out2150, out _out2151);
              _10334_onExpr = _out2149;
              _10335_onOwned = _out2150;
              _10336_recIdents = _out2151;
              r = _10334_onExpr;
              if (!object.Equals(_10334_onExpr, RAST.__default.self)) {
                RAST._IExpr _source411 = _10334_onExpr;
                if (_source411.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _10337___mcc_h9613 = _source411.dtor_content;
                } else if (_source411.is_ExprFromType) {
                  RAST._IType _10338___mcc_h9615 = _source411.dtor_tpe;
                } else if (_source411.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _10339___mcc_h9617 = _source411.dtor_name;
                } else if (_source411.is_Match) {
                  RAST._IExpr _10340___mcc_h9619 = _source411.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _10341___mcc_h9620 = _source411.dtor_cases;
                } else if (_source411.is_StmtExpr) {
                  RAST._IExpr _10342___mcc_h9623 = _source411.dtor_stmt;
                  RAST._IExpr _10343___mcc_h9624 = _source411.dtor_rhs;
                } else if (_source411.is_Block) {
                  RAST._IExpr _10344___mcc_h9627 = _source411.dtor_underlying;
                } else if (_source411.is_StructBuild) {
                  RAST._IExpr _10345___mcc_h9629 = _source411.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _10346___mcc_h9630 = _source411.dtor_assignments;
                } else if (_source411.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _10347___mcc_h9633 = _source411.dtor_arguments;
                } else if (_source411.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10348___mcc_h9635 = _source411.dtor_op1;
                  RAST._IExpr _10349___mcc_h9636 = _source411.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _10350___mcc_h9637 = _source411.dtor_format;
                  if (object.Equals(_10348___mcc_h9635, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source412 = _10349___mcc_h9636;
                    if (_source412.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _10351___mcc_h9641 = _source412.dtor_content;
                    } else if (_source412.is_ExprFromType) {
                      RAST._IType _10352___mcc_h9643 = _source412.dtor_tpe;
                    } else if (_source412.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _10353___mcc_h9645 = _source412.dtor_name;
                      if (object.Equals(_10353___mcc_h9645, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source412.is_Match) {
                      RAST._IExpr _10354___mcc_h9647 = _source412.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _10355___mcc_h9648 = _source412.dtor_cases;
                    } else if (_source412.is_StmtExpr) {
                      RAST._IExpr _10356___mcc_h9651 = _source412.dtor_stmt;
                      RAST._IExpr _10357___mcc_h9652 = _source412.dtor_rhs;
                    } else if (_source412.is_Block) {
                      RAST._IExpr _10358___mcc_h9655 = _source412.dtor_underlying;
                    } else if (_source412.is_StructBuild) {
                      RAST._IExpr _10359___mcc_h9657 = _source412.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _10360___mcc_h9658 = _source412.dtor_assignments;
                    } else if (_source412.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _10361___mcc_h9661 = _source412.dtor_arguments;
                    } else if (_source412.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10362___mcc_h9663 = _source412.dtor_op1;
                      RAST._IExpr _10363___mcc_h9664 = _source412.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _10364___mcc_h9665 = _source412.dtor_format;
                    } else if (_source412.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10365___mcc_h9669 = _source412.dtor_op2;
                      RAST._IExpr _10366___mcc_h9670 = _source412.dtor_left;
                      RAST._IExpr _10367___mcc_h9671 = _source412.dtor_right;
                      DAST.Format._IBinaryOpFormat _10368___mcc_h9672 = _source412.dtor_format2;
                    } else if (_source412.is_TypeAscription) {
                      RAST._IExpr _10369___mcc_h9677 = _source412.dtor_left;
                      RAST._IType _10370___mcc_h9678 = _source412.dtor_tpe;
                    } else if (_source412.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10371___mcc_h9681 = _source412.dtor_value;
                    } else if (_source412.is_LiteralBool) {
                      bool _10372___mcc_h9683 = _source412.dtor_bvalue;
                    } else if (_source412.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10373___mcc_h9685 = _source412.dtor_value;
                      bool _10374___mcc_h9686 = _source412.dtor_binary;
                    } else if (_source412.is_DeclareVar) {
                      RAST._IDeclareType _10375___mcc_h9689 = _source412.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10376___mcc_h9690 = _source412.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10377___mcc_h9691 = _source412.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10378___mcc_h9692 = _source412.dtor_optRhs;
                    } else if (_source412.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10379___mcc_h9697 = _source412.dtor_names;
                      RAST._IExpr _10380___mcc_h9698 = _source412.dtor_rhs;
                    } else if (_source412.is_IfExpr) {
                      RAST._IExpr _10381___mcc_h9701 = _source412.dtor_cond;
                      RAST._IExpr _10382___mcc_h9702 = _source412.dtor_thn;
                      RAST._IExpr _10383___mcc_h9703 = _source412.dtor_els;
                    } else if (_source412.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10384___mcc_h9707 = _source412.dtor_optCond;
                      RAST._IExpr _10385___mcc_h9708 = _source412.dtor_underlying;
                    } else if (_source412.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10386___mcc_h9711 = _source412.dtor_name;
                      RAST._IExpr _10387___mcc_h9712 = _source412.dtor_range;
                      RAST._IExpr _10388___mcc_h9713 = _source412.dtor_body;
                    } else if (_source412.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10389___mcc_h9717 = _source412.dtor_lbl;
                      RAST._IExpr _10390___mcc_h9718 = _source412.dtor_underlying;
                    } else if (_source412.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10391___mcc_h9721 = _source412.dtor_optLbl;
                    } else if (_source412.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10392___mcc_h9723 = _source412.dtor_optLbl;
                    } else if (_source412.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10393___mcc_h9725 = _source412.dtor_optExpr;
                    } else if (_source412.is_CallType) {
                      RAST._IExpr _10394___mcc_h9727 = _source412.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10395___mcc_h9728 = _source412.dtor_typeParameters;
                    } else if (_source412.is_Call) {
                      RAST._IExpr _10396___mcc_h9731 = _source412.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10397___mcc_h9732 = _source412.dtor_arguments;
                    } else if (_source412.is_Select) {
                      RAST._IExpr _10398___mcc_h9735 = _source412.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10399___mcc_h9736 = _source412.dtor_name;
                    } else if (_source412.is_MemberSelect) {
                      RAST._IExpr _10400___mcc_h9739 = _source412.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10401___mcc_h9740 = _source412.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10402___mcc_h9743 = _source412.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10403___mcc_h9744 = _source412.dtor_retType;
                      RAST._IExpr _10404___mcc_h9745 = _source412.dtor_body;
                    }
                  } else {
                  }
                } else if (_source411.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10405___mcc_h9749 = _source411.dtor_op2;
                  RAST._IExpr _10406___mcc_h9750 = _source411.dtor_left;
                  RAST._IExpr _10407___mcc_h9751 = _source411.dtor_right;
                  DAST.Format._IBinaryOpFormat _10408___mcc_h9752 = _source411.dtor_format2;
                } else if (_source411.is_TypeAscription) {
                  RAST._IExpr _10409___mcc_h9757 = _source411.dtor_left;
                  RAST._IType _10410___mcc_h9758 = _source411.dtor_tpe;
                } else if (_source411.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10411___mcc_h9761 = _source411.dtor_value;
                } else if (_source411.is_LiteralBool) {
                  bool _10412___mcc_h9763 = _source411.dtor_bvalue;
                } else if (_source411.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10413___mcc_h9765 = _source411.dtor_value;
                  bool _10414___mcc_h9766 = _source411.dtor_binary;
                } else if (_source411.is_DeclareVar) {
                  RAST._IDeclareType _10415___mcc_h9769 = _source411.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10416___mcc_h9770 = _source411.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10417___mcc_h9771 = _source411.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10418___mcc_h9772 = _source411.dtor_optRhs;
                } else if (_source411.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10419___mcc_h9777 = _source411.dtor_names;
                  RAST._IExpr _10420___mcc_h9778 = _source411.dtor_rhs;
                } else if (_source411.is_IfExpr) {
                  RAST._IExpr _10421___mcc_h9781 = _source411.dtor_cond;
                  RAST._IExpr _10422___mcc_h9782 = _source411.dtor_thn;
                  RAST._IExpr _10423___mcc_h9783 = _source411.dtor_els;
                } else if (_source411.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10424___mcc_h9787 = _source411.dtor_optCond;
                  RAST._IExpr _10425___mcc_h9788 = _source411.dtor_underlying;
                } else if (_source411.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10426___mcc_h9791 = _source411.dtor_name;
                  RAST._IExpr _10427___mcc_h9792 = _source411.dtor_range;
                  RAST._IExpr _10428___mcc_h9793 = _source411.dtor_body;
                } else if (_source411.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10429___mcc_h9797 = _source411.dtor_lbl;
                  RAST._IExpr _10430___mcc_h9798 = _source411.dtor_underlying;
                } else if (_source411.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10431___mcc_h9801 = _source411.dtor_optLbl;
                } else if (_source411.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10432___mcc_h9803 = _source411.dtor_optLbl;
                } else if (_source411.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10433___mcc_h9805 = _source411.dtor_optExpr;
                } else if (_source411.is_CallType) {
                  RAST._IExpr _10434___mcc_h9807 = _source411.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10435___mcc_h9808 = _source411.dtor_typeParameters;
                } else if (_source411.is_Call) {
                  RAST._IExpr _10436___mcc_h9811 = _source411.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10437___mcc_h9812 = _source411.dtor_arguments;
                } else if (_source411.is_Select) {
                  RAST._IExpr _10438___mcc_h9815 = _source411.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10439___mcc_h9816 = _source411.dtor_name;
                } else if (_source411.is_MemberSelect) {
                  RAST._IExpr _10440___mcc_h9819 = _source411.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10441___mcc_h9820 = _source411.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10442___mcc_h9823 = _source411.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10443___mcc_h9824 = _source411.dtor_retType;
                  RAST._IExpr _10444___mcc_h9825 = _source411.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_10328_field));
              if (_10327_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2152;
              DCOMP._IOwnership _out2153;
              (this).FromOwned(r, expectedOwnership, out _out2152, out _out2153);
              r = _out2152;
              resultingOwnership = _out2153;
              readIdents = _10336_recIdents;
            }
            return ;
          }
        } else {
          DAST._IType _10445___mcc_h265 = _source324.dtor_elemType;
          DAST._IExpression _10446___mcc_h266 = _source324.dtor_collection;
          bool _10447___mcc_h267 = _source324.dtor_is__forall;
          DAST._IExpression _10448___mcc_h268 = _source324.dtor_lambda;
          DAST._IType _10449_fieldType = _5052___mcc_h58;
          bool _10450_isDatatype = _5051___mcc_h57;
          bool _10451_isConstant = _5050___mcc_h56;
          Dafny.ISequence<Dafny.Rune> _10452_field = _5049___mcc_h55;
          DAST._IExpression _10453_on = _5048___mcc_h54;
          {
            if (_10450_isDatatype) {
              RAST._IExpr _10454_onExpr;
              DCOMP._IOwnership _10455_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10456_recIdents;
              RAST._IExpr _out2154;
              DCOMP._IOwnership _out2155;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2156;
              (this).GenExpr(_10453_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2154, out _out2155, out _out2156);
              _10454_onExpr = _out2154;
              _10455_onOwned = _out2155;
              _10456_recIdents = _out2156;
              r = ((_10454_onExpr).Sel(DCOMP.__default.escapeName(_10452_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IType _10457_typ;
              RAST._IType _out2157;
              _out2157 = (this).GenType(_10449_fieldType, DCOMP.GenTypeContext.@default());
              _10457_typ = _out2157;
              RAST._IExpr _out2158;
              DCOMP._IOwnership _out2159;
              (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2158, out _out2159);
              r = _out2158;
              resultingOwnership = _out2159;
              readIdents = _10456_recIdents;
            } else {
              RAST._IExpr _10458_onExpr;
              DCOMP._IOwnership _10459_onOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10460_recIdents;
              RAST._IExpr _out2160;
              DCOMP._IOwnership _out2161;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2162;
              (this).GenExpr(_10453_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2160, out _out2161, out _out2162);
              _10458_onExpr = _out2160;
              _10459_onOwned = _out2161;
              _10460_recIdents = _out2162;
              r = _10458_onExpr;
              if (!object.Equals(_10458_onExpr, RAST.__default.self)) {
                RAST._IExpr _source413 = _10458_onExpr;
                if (_source413.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _10461___mcc_h9829 = _source413.dtor_content;
                } else if (_source413.is_ExprFromType) {
                  RAST._IType _10462___mcc_h9831 = _source413.dtor_tpe;
                } else if (_source413.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _10463___mcc_h9833 = _source413.dtor_name;
                } else if (_source413.is_Match) {
                  RAST._IExpr _10464___mcc_h9835 = _source413.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _10465___mcc_h9836 = _source413.dtor_cases;
                } else if (_source413.is_StmtExpr) {
                  RAST._IExpr _10466___mcc_h9839 = _source413.dtor_stmt;
                  RAST._IExpr _10467___mcc_h9840 = _source413.dtor_rhs;
                } else if (_source413.is_Block) {
                  RAST._IExpr _10468___mcc_h9843 = _source413.dtor_underlying;
                } else if (_source413.is_StructBuild) {
                  RAST._IExpr _10469___mcc_h9845 = _source413.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _10470___mcc_h9846 = _source413.dtor_assignments;
                } else if (_source413.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _10471___mcc_h9849 = _source413.dtor_arguments;
                } else if (_source413.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10472___mcc_h9851 = _source413.dtor_op1;
                  RAST._IExpr _10473___mcc_h9852 = _source413.dtor_underlying;
                  DAST.Format._IUnaryOpFormat _10474___mcc_h9853 = _source413.dtor_format;
                  if (object.Equals(_10472___mcc_h9851, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
                    RAST._IExpr _source414 = _10473___mcc_h9852;
                    if (_source414.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _10475___mcc_h9857 = _source414.dtor_content;
                    } else if (_source414.is_ExprFromType) {
                      RAST._IType _10476___mcc_h9859 = _source414.dtor_tpe;
                    } else if (_source414.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _10477___mcc_h9861 = _source414.dtor_name;
                      if (object.Equals(_10477___mcc_h9861, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))) {
                        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
                      } else {
                      }
                    } else if (_source414.is_Match) {
                      RAST._IExpr _10478___mcc_h9863 = _source414.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _10479___mcc_h9864 = _source414.dtor_cases;
                    } else if (_source414.is_StmtExpr) {
                      RAST._IExpr _10480___mcc_h9867 = _source414.dtor_stmt;
                      RAST._IExpr _10481___mcc_h9868 = _source414.dtor_rhs;
                    } else if (_source414.is_Block) {
                      RAST._IExpr _10482___mcc_h9871 = _source414.dtor_underlying;
                    } else if (_source414.is_StructBuild) {
                      RAST._IExpr _10483___mcc_h9873 = _source414.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _10484___mcc_h9874 = _source414.dtor_assignments;
                    } else if (_source414.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _10485___mcc_h9877 = _source414.dtor_arguments;
                    } else if (_source414.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10486___mcc_h9879 = _source414.dtor_op1;
                      RAST._IExpr _10487___mcc_h9880 = _source414.dtor_underlying;
                      DAST.Format._IUnaryOpFormat _10488___mcc_h9881 = _source414.dtor_format;
                    } else if (_source414.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _10489___mcc_h9885 = _source414.dtor_op2;
                      RAST._IExpr _10490___mcc_h9886 = _source414.dtor_left;
                      RAST._IExpr _10491___mcc_h9887 = _source414.dtor_right;
                      DAST.Format._IBinaryOpFormat _10492___mcc_h9888 = _source414.dtor_format2;
                    } else if (_source414.is_TypeAscription) {
                      RAST._IExpr _10493___mcc_h9893 = _source414.dtor_left;
                      RAST._IType _10494___mcc_h9894 = _source414.dtor_tpe;
                    } else if (_source414.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _10495___mcc_h9897 = _source414.dtor_value;
                    } else if (_source414.is_LiteralBool) {
                      bool _10496___mcc_h9899 = _source414.dtor_bvalue;
                    } else if (_source414.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _10497___mcc_h9901 = _source414.dtor_value;
                      bool _10498___mcc_h9902 = _source414.dtor_binary;
                    } else if (_source414.is_DeclareVar) {
                      RAST._IDeclareType _10499___mcc_h9905 = _source414.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _10500___mcc_h9906 = _source414.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _10501___mcc_h9907 = _source414.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _10502___mcc_h9908 = _source414.dtor_optRhs;
                    } else if (_source414.is_Assign) {
                      Std.Wrappers._IOption<RAST._IAssignLhs> _10503___mcc_h9913 = _source414.dtor_names;
                      RAST._IExpr _10504___mcc_h9914 = _source414.dtor_rhs;
                    } else if (_source414.is_IfExpr) {
                      RAST._IExpr _10505___mcc_h9917 = _source414.dtor_cond;
                      RAST._IExpr _10506___mcc_h9918 = _source414.dtor_thn;
                      RAST._IExpr _10507___mcc_h9919 = _source414.dtor_els;
                    } else if (_source414.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _10508___mcc_h9923 = _source414.dtor_optCond;
                      RAST._IExpr _10509___mcc_h9924 = _source414.dtor_underlying;
                    } else if (_source414.is_For) {
                      Dafny.ISequence<Dafny.Rune> _10510___mcc_h9927 = _source414.dtor_name;
                      RAST._IExpr _10511___mcc_h9928 = _source414.dtor_range;
                      RAST._IExpr _10512___mcc_h9929 = _source414.dtor_body;
                    } else if (_source414.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _10513___mcc_h9933 = _source414.dtor_lbl;
                      RAST._IExpr _10514___mcc_h9934 = _source414.dtor_underlying;
                    } else if (_source414.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10515___mcc_h9937 = _source414.dtor_optLbl;
                    } else if (_source414.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10516___mcc_h9939 = _source414.dtor_optLbl;
                    } else if (_source414.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _10517___mcc_h9941 = _source414.dtor_optExpr;
                    } else if (_source414.is_CallType) {
                      RAST._IExpr _10518___mcc_h9943 = _source414.dtor_obj;
                      Dafny.ISequence<RAST._IType> _10519___mcc_h9944 = _source414.dtor_typeParameters;
                    } else if (_source414.is_Call) {
                      RAST._IExpr _10520___mcc_h9947 = _source414.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _10521___mcc_h9948 = _source414.dtor_arguments;
                    } else if (_source414.is_Select) {
                      RAST._IExpr _10522___mcc_h9951 = _source414.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10523___mcc_h9952 = _source414.dtor_name;
                    } else if (_source414.is_MemberSelect) {
                      RAST._IExpr _10524___mcc_h9955 = _source414.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _10525___mcc_h9956 = _source414.dtor_name;
                    } else {
                      Dafny.ISequence<RAST._IFormal> _10526___mcc_h9959 = _source414.dtor_params;
                      Std.Wrappers._IOption<RAST._IType> _10527___mcc_h9960 = _source414.dtor_retType;
                      RAST._IExpr _10528___mcc_h9961 = _source414.dtor_body;
                    }
                  } else {
                  }
                } else if (_source413.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _10529___mcc_h9965 = _source413.dtor_op2;
                  RAST._IExpr _10530___mcc_h9966 = _source413.dtor_left;
                  RAST._IExpr _10531___mcc_h9967 = _source413.dtor_right;
                  DAST.Format._IBinaryOpFormat _10532___mcc_h9968 = _source413.dtor_format2;
                } else if (_source413.is_TypeAscription) {
                  RAST._IExpr _10533___mcc_h9973 = _source413.dtor_left;
                  RAST._IType _10534___mcc_h9974 = _source413.dtor_tpe;
                } else if (_source413.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _10535___mcc_h9977 = _source413.dtor_value;
                } else if (_source413.is_LiteralBool) {
                  bool _10536___mcc_h9979 = _source413.dtor_bvalue;
                } else if (_source413.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _10537___mcc_h9981 = _source413.dtor_value;
                  bool _10538___mcc_h9982 = _source413.dtor_binary;
                } else if (_source413.is_DeclareVar) {
                  RAST._IDeclareType _10539___mcc_h9985 = _source413.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _10540___mcc_h9986 = _source413.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _10541___mcc_h9987 = _source413.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _10542___mcc_h9988 = _source413.dtor_optRhs;
                } else if (_source413.is_Assign) {
                  Std.Wrappers._IOption<RAST._IAssignLhs> _10543___mcc_h9993 = _source413.dtor_names;
                  RAST._IExpr _10544___mcc_h9994 = _source413.dtor_rhs;
                } else if (_source413.is_IfExpr) {
                  RAST._IExpr _10545___mcc_h9997 = _source413.dtor_cond;
                  RAST._IExpr _10546___mcc_h9998 = _source413.dtor_thn;
                  RAST._IExpr _10547___mcc_h9999 = _source413.dtor_els;
                } else if (_source413.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _10548___mcc_h10003 = _source413.dtor_optCond;
                  RAST._IExpr _10549___mcc_h10004 = _source413.dtor_underlying;
                } else if (_source413.is_For) {
                  Dafny.ISequence<Dafny.Rune> _10550___mcc_h10007 = _source413.dtor_name;
                  RAST._IExpr _10551___mcc_h10008 = _source413.dtor_range;
                  RAST._IExpr _10552___mcc_h10009 = _source413.dtor_body;
                } else if (_source413.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _10553___mcc_h10013 = _source413.dtor_lbl;
                  RAST._IExpr _10554___mcc_h10014 = _source413.dtor_underlying;
                } else if (_source413.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10555___mcc_h10017 = _source413.dtor_optLbl;
                } else if (_source413.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _10556___mcc_h10019 = _source413.dtor_optLbl;
                } else if (_source413.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _10557___mcc_h10021 = _source413.dtor_optExpr;
                } else if (_source413.is_CallType) {
                  RAST._IExpr _10558___mcc_h10023 = _source413.dtor_obj;
                  Dafny.ISequence<RAST._IType> _10559___mcc_h10024 = _source413.dtor_typeParameters;
                } else if (_source413.is_Call) {
                  RAST._IExpr _10560___mcc_h10027 = _source413.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _10561___mcc_h10028 = _source413.dtor_arguments;
                } else if (_source413.is_Select) {
                  RAST._IExpr _10562___mcc_h10031 = _source413.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10563___mcc_h10032 = _source413.dtor_name;
                } else if (_source413.is_MemberSelect) {
                  RAST._IExpr _10564___mcc_h10035 = _source413.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _10565___mcc_h10036 = _source413.dtor_name;
                } else {
                  Dafny.ISequence<RAST._IFormal> _10566___mcc_h10039 = _source413.dtor_params;
                  Std.Wrappers._IOption<RAST._IType> _10567___mcc_h10040 = _source413.dtor_retType;
                  RAST._IExpr _10568___mcc_h10041 = _source413.dtor_body;
                }
                if (((this).ObjectType).is_RcMut) {
                  r = (r).Clone();
                }
                r = ((this).read__macro).Apply1(r);
              }
              r = (r).Sel(DCOMP.__default.escapeName(_10452_field));
              if (_10451_isConstant) {
                r = (r).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = (r).Clone();
              RAST._IExpr _out2163;
              DCOMP._IOwnership _out2164;
              (this).FromOwned(r, expectedOwnership, out _out2163, out _out2164);
              r = _out2163;
              resultingOwnership = _out2164;
              readIdents = _10460_recIdents;
            }
            return ;
          }
        }
      } else if (_source321.is_SelectFn) {
        DAST._IExpression _10569___mcc_h273 = _source321.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _10570___mcc_h274 = _source321.dtor_field;
        bool _10571___mcc_h275 = _source321.dtor_onDatatype;
        bool _10572___mcc_h276 = _source321.dtor_isStatic;
        BigInteger _10573___mcc_h277 = _source321.dtor_arity;
        BigInteger _10574_arity = _10573___mcc_h277;
        bool _10575_isStatic = _10572___mcc_h276;
        bool _10576_isDatatype = _10571___mcc_h275;
        Dafny.ISequence<Dafny.Rune> _10577_field = _10570___mcc_h274;
        DAST._IExpression _10578_on = _10569___mcc_h273;
        {
          RAST._IExpr _10579_onExpr;
          DCOMP._IOwnership _10580_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10581_recIdents;
          RAST._IExpr _out2165;
          DCOMP._IOwnership _out2166;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2167;
          (this).GenExpr(_10578_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2165, out _out2166, out _out2167);
          _10579_onExpr = _out2165;
          _10580_onOwned = _out2166;
          _10581_recIdents = _out2167;
          Dafny.ISequence<Dafny.Rune> _10582_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _10583_onString;
          _10583_onString = (_10579_onExpr)._ToString(DCOMP.__default.IND);
          if (_10575_isStatic) {
            _10582_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10583_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeName(_10577_field));
          } else {
            _10582_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _10582_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10582_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _10583_onString), ((object.Equals(_10580_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _10584_args;
            _10584_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _10585_i;
            _10585_i = BigInteger.Zero;
            while ((_10585_i) < (_10574_arity)) {
              if ((_10585_i).Sign == 1) {
                _10584_args = Dafny.Sequence<Dafny.Rune>.Concat(_10584_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _10584_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10584_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_10585_i));
              _10585_i = (_10585_i) + (BigInteger.One);
            }
            _10582_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10582_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _10584_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _10582_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10582_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), DCOMP.__default.escapeName(_10577_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _10584_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _10582_s = Dafny.Sequence<Dafny.Rune>.Concat(_10582_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _10582_s = Dafny.Sequence<Dafny.Rune>.Concat(_10582_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _10586_typeShape;
          _10586_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _10587_i;
          _10587_i = BigInteger.Zero;
          while ((_10587_i) < (_10574_arity)) {
            if ((_10587_i).Sign == 1) {
              _10586_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10586_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _10586_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10586_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _10587_i = (_10587_i) + (BigInteger.One);
          }
          _10586_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10586_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _10582_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _10582_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _10586_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          r = RAST.Expr.create_RawExpr(_10582_s);
          RAST._IExpr _out2168;
          DCOMP._IOwnership _out2169;
          (this).FromOwned(r, expectedOwnership, out _out2168, out _out2169);
          r = _out2168;
          resultingOwnership = _out2169;
          readIdents = _10581_recIdents;
          return ;
        }
      } else if (_source321.is_Index) {
        DAST._IExpression _10588___mcc_h278 = _source321.dtor_expr;
        DAST._ICollKind _10589___mcc_h279 = _source321.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _10590___mcc_h280 = _source321.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _10591_indices = _10590___mcc_h280;
        DAST._ICollKind _10592_collKind = _10589___mcc_h279;
        DAST._IExpression _10593_on = _10588___mcc_h278;
        {
          RAST._IExpr _10594_onExpr;
          DCOMP._IOwnership _10595_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10596_recIdents;
          RAST._IExpr _out2170;
          DCOMP._IOwnership _out2171;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2172;
          (this).GenExpr(_10593_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2170, out _out2171, out _out2172);
          _10594_onExpr = _out2170;
          _10595_onOwned = _out2171;
          _10596_recIdents = _out2172;
          readIdents = _10596_recIdents;
          r = _10594_onExpr;
          BigInteger _10597_i;
          _10597_i = BigInteger.Zero;
          while ((_10597_i) < (new BigInteger((_10591_indices).Count))) {
            if (object.Equals(_10592_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _10598_idx;
            DCOMP._IOwnership _10599_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10600_recIdentsIdx;
            RAST._IExpr _out2173;
            DCOMP._IOwnership _out2174;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2175;
            (this).GenExpr((_10591_indices).Select(_10597_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2173, out _out2174, out _out2175);
            _10598_idx = _out2173;
            _10599_idxOwned = _out2174;
            _10600_recIdentsIdx = _out2175;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_10598_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10600_recIdentsIdx);
            _10597_i = (_10597_i) + (BigInteger.One);
          }
          RAST._IExpr _out2176;
          DCOMP._IOwnership _out2177;
          (this).FromOwned(r, expectedOwnership, out _out2176, out _out2177);
          r = _out2176;
          resultingOwnership = _out2177;
          return ;
        }
      } else if (_source321.is_IndexRange) {
        DAST._IExpression _10601___mcc_h281 = _source321.dtor_expr;
        bool _10602___mcc_h282 = _source321.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _10603___mcc_h283 = _source321.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _10604___mcc_h284 = _source321.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _10605_high = _10604___mcc_h284;
        Std.Wrappers._IOption<DAST._IExpression> _10606_low = _10603___mcc_h283;
        bool _10607_isArray = _10602___mcc_h282;
        DAST._IExpression _10608_on = _10601___mcc_h281;
        {
          RAST._IExpr _10609_onExpr;
          DCOMP._IOwnership _10610_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10611_recIdents;
          RAST._IExpr _out2178;
          DCOMP._IOwnership _out2179;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2180;
          (this).GenExpr(_10608_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2178, out _out2179, out _out2180);
          _10609_onExpr = _out2178;
          _10610_onOwned = _out2179;
          _10611_recIdents = _out2180;
          readIdents = _10611_recIdents;
          Dafny.ISequence<Dafny.Rune> _10612_methodName;
          _10612_methodName = (((_10606_low).is_Some) ? ((((_10605_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_10605_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _10613_arguments;
          _10613_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source415 = _10606_low;
          if (_source415.is_None) {
          } else {
            DAST._IExpression _10614___mcc_h10045 = _source415.dtor_value;
            DAST._IExpression _10615_l = _10614___mcc_h10045;
            {
              RAST._IExpr _10616_lExpr;
              DCOMP._IOwnership _10617___v180;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10618_recIdentsL;
              RAST._IExpr _out2181;
              DCOMP._IOwnership _out2182;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2183;
              (this).GenExpr(_10615_l, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2181, out _out2182, out _out2183);
              _10616_lExpr = _out2181;
              _10617___v180 = _out2182;
              _10618_recIdentsL = _out2183;
              _10613_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10613_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_10616_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10618_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source416 = _10605_high;
          if (_source416.is_None) {
          } else {
            DAST._IExpression _10619___mcc_h10046 = _source416.dtor_value;
            DAST._IExpression _10620_h = _10619___mcc_h10046;
            {
              RAST._IExpr _10621_hExpr;
              DCOMP._IOwnership _10622___v181;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10623_recIdentsH;
              RAST._IExpr _out2184;
              DCOMP._IOwnership _out2185;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2186;
              (this).GenExpr(_10620_h, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2184, out _out2185, out _out2186);
              _10621_hExpr = _out2184;
              _10622___v181 = _out2185;
              _10623_recIdentsH = _out2186;
              _10613_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10613_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_10621_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10623_recIdentsH);
            }
          }
          r = _10609_onExpr;
          if (_10607_isArray) {
            if (!(_10612_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _10612_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _10612_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _10612_methodName))).Apply(_10613_arguments);
          } else {
            if (!(_10612_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_10612_methodName)).Apply(_10613_arguments);
            }
          }
          RAST._IExpr _out2187;
          DCOMP._IOwnership _out2188;
          (this).FromOwned(r, expectedOwnership, out _out2187, out _out2188);
          r = _out2187;
          resultingOwnership = _out2188;
          return ;
        }
      } else if (_source321.is_TupleSelect) {
        DAST._IExpression _10624___mcc_h285 = _source321.dtor_expr;
        BigInteger _10625___mcc_h286 = _source321.dtor_index;
        DAST._IType _10626___mcc_h287 = _source321.dtor_fieldType;
        DAST._IType _10627_fieldType = _10626___mcc_h287;
        BigInteger _10628_idx = _10625___mcc_h286;
        DAST._IExpression _10629_on = _10624___mcc_h285;
        {
          RAST._IExpr _10630_onExpr;
          DCOMP._IOwnership _10631_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10632_recIdents;
          RAST._IExpr _out2189;
          DCOMP._IOwnership _out2190;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2191;
          (this).GenExpr(_10629_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2189, out _out2190, out _out2191);
          _10630_onExpr = _out2189;
          _10631_onOwnership = _out2190;
          _10632_recIdents = _out2191;
          r = (_10630_onExpr).Sel(Std.Strings.__default.OfNat(_10628_idx));
          RAST._IExpr _out2192;
          DCOMP._IOwnership _out2193;
          (this).FromOwnership(r, DCOMP.Ownership.create_OwnershipOwned(), expectedOwnership, out _out2192, out _out2193);
          r = _out2192;
          resultingOwnership = _out2193;
          readIdents = _10632_recIdents;
          return ;
        }
      } else if (_source321.is_Call) {
        DAST._IExpression _10633___mcc_h288 = _source321.dtor_on;
        DAST._ICallName _10634___mcc_h289 = _source321.dtor_callName;
        Dafny.ISequence<DAST._IType> _10635___mcc_h290 = _source321.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _10636___mcc_h291 = _source321.dtor_args;
        Dafny.ISequence<DAST._IExpression> _10637_args = _10636___mcc_h291;
        Dafny.ISequence<DAST._IType> _10638_typeArgs = _10635___mcc_h290;
        DAST._ICallName _10639_name = _10634___mcc_h289;
        DAST._IExpression _10640_on = _10633___mcc_h288;
        {
          Dafny.ISequence<RAST._IExpr> _10641_argExprs;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10642_recIdents;
          Dafny.ISequence<RAST._IType> _10643_typeExprs;
          Std.Wrappers._IOption<DAST._IResolvedType> _10644_fullNameQualifier;
          Dafny.ISequence<RAST._IExpr> _out2194;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2195;
          Dafny.ISequence<RAST._IType> _out2196;
          Std.Wrappers._IOption<DAST._IResolvedType> _out2197;
          (this).GenArgs(selfIdent, _10639_name, _10638_typeArgs, _10637_args, env, out _out2194, out _out2195, out _out2196, out _out2197);
          _10641_argExprs = _out2194;
          _10642_recIdents = _out2195;
          _10643_typeExprs = _out2196;
          _10644_fullNameQualifier = _out2197;
          readIdents = _10642_recIdents;
          Std.Wrappers._IOption<DAST._IResolvedType> _source417 = _10644_fullNameQualifier;
          if (_source417.is_None) {
            RAST._IExpr _10645_onExpr;
            DCOMP._IOwnership _10646___v186;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10647_recIdents;
            RAST._IExpr _out2198;
            DCOMP._IOwnership _out2199;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2200;
            (this).GenExpr(_10640_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2198, out _out2199, out _out2200);
            _10645_onExpr = _out2198;
            _10646___v186 = _out2199;
            _10647_recIdents = _out2200;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10647_recIdents);
            Dafny.ISequence<Dafny.Rune> _10648_renderedName;
            _10648_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source418) => {
              if (_source418.is_CallName) {
                Dafny.ISequence<Dafny.Rune> _10649___mcc_h10061 = _source418.dtor_name;
                Std.Wrappers._IOption<DAST._IType> _10650___mcc_h10062 = _source418.dtor_onType;
                Std.Wrappers._IOption<DAST._IFormal> _10651___mcc_h10063 = _source418.dtor_receiverArgs;
                Dafny.ISequence<DAST._IFormal> _10652___mcc_h10064 = _source418.dtor_signature;
                Dafny.ISequence<Dafny.Rune> _10653_ident = _10649___mcc_h10061;
                return DCOMP.__default.escapeName(_10653_ident);
              } else if (_source418.is_MapBuilderAdd) {
                return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
              } else if (_source418.is_MapBuilderBuild) {
                return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
              } else if (_source418.is_SetBuilderAdd) {
                return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
              } else {
                return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
              }
            }))(_10639_name);
            DAST._IExpression _source419 = _10640_on;
            if (_source419.is_Literal) {
              DAST._ILiteral _10654___mcc_h10065 = _source419.dtor_Literal_i_a0;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source420 = _10639_name;
                  if (_source420.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10655___mcc_h10279 = _source420.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10656___mcc_h10280 = _source420.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10657___mcc_h10281 = _source420.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10658___mcc_h10282 = _source420.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source421 = _10656___mcc_h10280;
                    if (_source421.is_None) {
                    } else {
                      DAST._IType _10659___mcc_h10287 = _source421.dtor_value;
                      DAST._IType _10660_tpe = _10659___mcc_h10287;
                      RAST._IType _10661_typ;
                      RAST._IType _out2201;
                      _out2201 = (this).GenType(_10660_tpe, DCOMP.GenTypeContext.@default());
                      _10661_typ = _out2201;
                      if ((_10661_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source420.is_MapBuilderAdd) {
                  } else if (_source420.is_MapBuilderBuild) {
                  } else if (_source420.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Ident) {
              Dafny.ISequence<Dafny.Rune> _10662___mcc_h10067 = _source419.dtor_Ident_i_a0;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source422 = _10639_name;
                  if (_source422.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10663___mcc_h10289 = _source422.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10664___mcc_h10290 = _source422.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10665___mcc_h10291 = _source422.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10666___mcc_h10292 = _source422.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source423 = _10664___mcc_h10290;
                    if (_source423.is_None) {
                    } else {
                      DAST._IType _10667___mcc_h10297 = _source423.dtor_value;
                      DAST._IType _10668_tpe = _10667___mcc_h10297;
                      RAST._IType _10669_typ;
                      RAST._IType _out2202;
                      _out2202 = (this).GenType(_10668_tpe, DCOMP.GenTypeContext.@default());
                      _10669_typ = _out2202;
                      if ((_10669_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source422.is_MapBuilderAdd) {
                  } else if (_source422.is_MapBuilderBuild) {
                  } else if (_source422.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Companion) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10670___mcc_h10069 = _source419.dtor_Companion_i_a0;
              Dafny.ISequence<DAST._IType> _10671___mcc_h10070 = _source419.dtor_typeArgs;
              {
                _10645_onExpr = (_10645_onExpr).MSel(_10648_renderedName);
              }
            } else if (_source419.is_Tuple) {
              Dafny.ISequence<DAST._IExpression> _10672___mcc_h10073 = _source419.dtor_Tuple_i_a0;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source424 = _10639_name;
                  if (_source424.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10673___mcc_h10299 = _source424.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10674___mcc_h10300 = _source424.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10675___mcc_h10301 = _source424.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10676___mcc_h10302 = _source424.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source425 = _10674___mcc_h10300;
                    if (_source425.is_None) {
                    } else {
                      DAST._IType _10677___mcc_h10307 = _source425.dtor_value;
                      DAST._IType _10678_tpe = _10677___mcc_h10307;
                      RAST._IType _10679_typ;
                      RAST._IType _out2203;
                      _out2203 = (this).GenType(_10678_tpe, DCOMP.GenTypeContext.@default());
                      _10679_typ = _out2203;
                      if ((_10679_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source424.is_MapBuilderAdd) {
                  } else if (_source424.is_MapBuilderBuild) {
                  } else if (_source424.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_New) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10680___mcc_h10075 = _source419.dtor_path;
              Dafny.ISequence<DAST._IType> _10681___mcc_h10076 = _source419.dtor_typeArgs;
              Dafny.ISequence<DAST._IExpression> _10682___mcc_h10077 = _source419.dtor_args;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source426 = _10639_name;
                  if (_source426.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10683___mcc_h10309 = _source426.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10684___mcc_h10310 = _source426.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10685___mcc_h10311 = _source426.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10686___mcc_h10312 = _source426.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source427 = _10684___mcc_h10310;
                    if (_source427.is_None) {
                    } else {
                      DAST._IType _10687___mcc_h10317 = _source427.dtor_value;
                      DAST._IType _10688_tpe = _10687___mcc_h10317;
                      RAST._IType _10689_typ;
                      RAST._IType _out2204;
                      _out2204 = (this).GenType(_10688_tpe, DCOMP.GenTypeContext.@default());
                      _10689_typ = _out2204;
                      if ((_10689_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source426.is_MapBuilderAdd) {
                  } else if (_source426.is_MapBuilderBuild) {
                  } else if (_source426.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_NewUninitArray) {
              Dafny.ISequence<DAST._IExpression> _10690___mcc_h10081 = _source419.dtor_dims;
              DAST._IType _10691___mcc_h10082 = _source419.dtor_typ;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source428 = _10639_name;
                  if (_source428.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10692___mcc_h10319 = _source428.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10693___mcc_h10320 = _source428.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10694___mcc_h10321 = _source428.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10695___mcc_h10322 = _source428.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source429 = _10693___mcc_h10320;
                    if (_source429.is_None) {
                    } else {
                      DAST._IType _10696___mcc_h10327 = _source429.dtor_value;
                      DAST._IType _10697_tpe = _10696___mcc_h10327;
                      RAST._IType _10698_typ;
                      RAST._IType _out2205;
                      _out2205 = (this).GenType(_10697_tpe, DCOMP.GenTypeContext.@default());
                      _10698_typ = _out2205;
                      if ((_10698_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source428.is_MapBuilderAdd) {
                  } else if (_source428.is_MapBuilderBuild) {
                  } else if (_source428.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_ArrayIndexToInt) {
              DAST._IExpression _10699___mcc_h10085 = _source419.dtor_value;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source430 = _10639_name;
                  if (_source430.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10700___mcc_h10329 = _source430.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10701___mcc_h10330 = _source430.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10702___mcc_h10331 = _source430.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10703___mcc_h10332 = _source430.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source431 = _10701___mcc_h10330;
                    if (_source431.is_None) {
                    } else {
                      DAST._IType _10704___mcc_h10337 = _source431.dtor_value;
                      DAST._IType _10705_tpe = _10704___mcc_h10337;
                      RAST._IType _10706_typ;
                      RAST._IType _out2206;
                      _out2206 = (this).GenType(_10705_tpe, DCOMP.GenTypeContext.@default());
                      _10706_typ = _out2206;
                      if ((_10706_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source430.is_MapBuilderAdd) {
                  } else if (_source430.is_MapBuilderBuild) {
                  } else if (_source430.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_FinalizeNewArray) {
              DAST._IExpression _10707___mcc_h10087 = _source419.dtor_value;
              DAST._IType _10708___mcc_h10088 = _source419.dtor_typ;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source432 = _10639_name;
                  if (_source432.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10709___mcc_h10339 = _source432.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10710___mcc_h10340 = _source432.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10711___mcc_h10341 = _source432.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10712___mcc_h10342 = _source432.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source433 = _10710___mcc_h10340;
                    if (_source433.is_None) {
                    } else {
                      DAST._IType _10713___mcc_h10347 = _source433.dtor_value;
                      DAST._IType _10714_tpe = _10713___mcc_h10347;
                      RAST._IType _10715_typ;
                      RAST._IType _out2207;
                      _out2207 = (this).GenType(_10714_tpe, DCOMP.GenTypeContext.@default());
                      _10715_typ = _out2207;
                      if ((_10715_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source432.is_MapBuilderAdd) {
                  } else if (_source432.is_MapBuilderBuild) {
                  } else if (_source432.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_DatatypeValue) {
              DAST._IResolvedType _10716___mcc_h10091 = _source419.dtor_datatypeType;
              Dafny.ISequence<DAST._IType> _10717___mcc_h10092 = _source419.dtor_typeArgs;
              Dafny.ISequence<Dafny.Rune> _10718___mcc_h10093 = _source419.dtor_variant;
              bool _10719___mcc_h10094 = _source419.dtor_isCo;
              Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _10720___mcc_h10095 = _source419.dtor_contents;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source434 = _10639_name;
                  if (_source434.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10721___mcc_h10349 = _source434.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10722___mcc_h10350 = _source434.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10723___mcc_h10351 = _source434.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10724___mcc_h10352 = _source434.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source435 = _10722___mcc_h10350;
                    if (_source435.is_None) {
                    } else {
                      DAST._IType _10725___mcc_h10357 = _source435.dtor_value;
                      DAST._IType _10726_tpe = _10725___mcc_h10357;
                      RAST._IType _10727_typ;
                      RAST._IType _out2208;
                      _out2208 = (this).GenType(_10726_tpe, DCOMP.GenTypeContext.@default());
                      _10727_typ = _out2208;
                      if ((_10727_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source434.is_MapBuilderAdd) {
                  } else if (_source434.is_MapBuilderBuild) {
                  } else if (_source434.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Convert) {
              DAST._IExpression _10728___mcc_h10101 = _source419.dtor_value;
              DAST._IType _10729___mcc_h10102 = _source419.dtor_from;
              DAST._IType _10730___mcc_h10103 = _source419.dtor_typ;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source436 = _10639_name;
                  if (_source436.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10731___mcc_h10359 = _source436.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10732___mcc_h10360 = _source436.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10733___mcc_h10361 = _source436.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10734___mcc_h10362 = _source436.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source437 = _10732___mcc_h10360;
                    if (_source437.is_None) {
                    } else {
                      DAST._IType _10735___mcc_h10367 = _source437.dtor_value;
                      DAST._IType _10736_tpe = _10735___mcc_h10367;
                      RAST._IType _10737_typ;
                      RAST._IType _out2209;
                      _out2209 = (this).GenType(_10736_tpe, DCOMP.GenTypeContext.@default());
                      _10737_typ = _out2209;
                      if ((_10737_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source436.is_MapBuilderAdd) {
                  } else if (_source436.is_MapBuilderBuild) {
                  } else if (_source436.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_SeqConstruct) {
              DAST._IExpression _10738___mcc_h10107 = _source419.dtor_length;
              DAST._IExpression _10739___mcc_h10108 = _source419.dtor_elem;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source438 = _10639_name;
                  if (_source438.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10740___mcc_h10369 = _source438.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10741___mcc_h10370 = _source438.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10742___mcc_h10371 = _source438.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10743___mcc_h10372 = _source438.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source439 = _10741___mcc_h10370;
                    if (_source439.is_None) {
                    } else {
                      DAST._IType _10744___mcc_h10377 = _source439.dtor_value;
                      DAST._IType _10745_tpe = _10744___mcc_h10377;
                      RAST._IType _10746_typ;
                      RAST._IType _out2210;
                      _out2210 = (this).GenType(_10745_tpe, DCOMP.GenTypeContext.@default());
                      _10746_typ = _out2210;
                      if ((_10746_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source438.is_MapBuilderAdd) {
                  } else if (_source438.is_MapBuilderBuild) {
                  } else if (_source438.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_SeqValue) {
              Dafny.ISequence<DAST._IExpression> _10747___mcc_h10111 = _source419.dtor_elements;
              DAST._IType _10748___mcc_h10112 = _source419.dtor_typ;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source440 = _10639_name;
                  if (_source440.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10749___mcc_h10379 = _source440.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10750___mcc_h10380 = _source440.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10751___mcc_h10381 = _source440.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10752___mcc_h10382 = _source440.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source441 = _10750___mcc_h10380;
                    if (_source441.is_None) {
                    } else {
                      DAST._IType _10753___mcc_h10387 = _source441.dtor_value;
                      DAST._IType _10754_tpe = _10753___mcc_h10387;
                      RAST._IType _10755_typ;
                      RAST._IType _out2211;
                      _out2211 = (this).GenType(_10754_tpe, DCOMP.GenTypeContext.@default());
                      _10755_typ = _out2211;
                      if ((_10755_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source440.is_MapBuilderAdd) {
                  } else if (_source440.is_MapBuilderBuild) {
                  } else if (_source440.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_SetValue) {
              Dafny.ISequence<DAST._IExpression> _10756___mcc_h10115 = _source419.dtor_elements;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source442 = _10639_name;
                  if (_source442.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10757___mcc_h10389 = _source442.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10758___mcc_h10390 = _source442.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10759___mcc_h10391 = _source442.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10760___mcc_h10392 = _source442.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source443 = _10758___mcc_h10390;
                    if (_source443.is_None) {
                    } else {
                      DAST._IType _10761___mcc_h10397 = _source443.dtor_value;
                      DAST._IType _10762_tpe = _10761___mcc_h10397;
                      RAST._IType _10763_typ;
                      RAST._IType _out2212;
                      _out2212 = (this).GenType(_10762_tpe, DCOMP.GenTypeContext.@default());
                      _10763_typ = _out2212;
                      if ((_10763_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source442.is_MapBuilderAdd) {
                  } else if (_source442.is_MapBuilderBuild) {
                  } else if (_source442.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_MultisetValue) {
              Dafny.ISequence<DAST._IExpression> _10764___mcc_h10117 = _source419.dtor_elements;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source444 = _10639_name;
                  if (_source444.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10765___mcc_h10399 = _source444.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10766___mcc_h10400 = _source444.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10767___mcc_h10401 = _source444.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10768___mcc_h10402 = _source444.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source445 = _10766___mcc_h10400;
                    if (_source445.is_None) {
                    } else {
                      DAST._IType _10769___mcc_h10407 = _source445.dtor_value;
                      DAST._IType _10770_tpe = _10769___mcc_h10407;
                      RAST._IType _10771_typ;
                      RAST._IType _out2213;
                      _out2213 = (this).GenType(_10770_tpe, DCOMP.GenTypeContext.@default());
                      _10771_typ = _out2213;
                      if ((_10771_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source444.is_MapBuilderAdd) {
                  } else if (_source444.is_MapBuilderBuild) {
                  } else if (_source444.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_MapValue) {
              Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _10772___mcc_h10119 = _source419.dtor_mapElems;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source446 = _10639_name;
                  if (_source446.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10773___mcc_h10409 = _source446.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10774___mcc_h10410 = _source446.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10775___mcc_h10411 = _source446.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10776___mcc_h10412 = _source446.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source447 = _10774___mcc_h10410;
                    if (_source447.is_None) {
                    } else {
                      DAST._IType _10777___mcc_h10417 = _source447.dtor_value;
                      DAST._IType _10778_tpe = _10777___mcc_h10417;
                      RAST._IType _10779_typ;
                      RAST._IType _out2214;
                      _out2214 = (this).GenType(_10778_tpe, DCOMP.GenTypeContext.@default());
                      _10779_typ = _out2214;
                      if ((_10779_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source446.is_MapBuilderAdd) {
                  } else if (_source446.is_MapBuilderBuild) {
                  } else if (_source446.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_MapBuilder) {
              DAST._IType _10780___mcc_h10121 = _source419.dtor_keyType;
              DAST._IType _10781___mcc_h10122 = _source419.dtor_valueType;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source448 = _10639_name;
                  if (_source448.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10782___mcc_h10419 = _source448.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10783___mcc_h10420 = _source448.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10784___mcc_h10421 = _source448.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10785___mcc_h10422 = _source448.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source449 = _10783___mcc_h10420;
                    if (_source449.is_None) {
                    } else {
                      DAST._IType _10786___mcc_h10427 = _source449.dtor_value;
                      DAST._IType _10787_tpe = _10786___mcc_h10427;
                      RAST._IType _10788_typ;
                      RAST._IType _out2215;
                      _out2215 = (this).GenType(_10787_tpe, DCOMP.GenTypeContext.@default());
                      _10788_typ = _out2215;
                      if ((_10788_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source448.is_MapBuilderAdd) {
                  } else if (_source448.is_MapBuilderBuild) {
                  } else if (_source448.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_SeqUpdate) {
              DAST._IExpression _10789___mcc_h10125 = _source419.dtor_expr;
              DAST._IExpression _10790___mcc_h10126 = _source419.dtor_indexExpr;
              DAST._IExpression _10791___mcc_h10127 = _source419.dtor_value;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source450 = _10639_name;
                  if (_source450.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10792___mcc_h10429 = _source450.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10793___mcc_h10430 = _source450.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10794___mcc_h10431 = _source450.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10795___mcc_h10432 = _source450.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source451 = _10793___mcc_h10430;
                    if (_source451.is_None) {
                    } else {
                      DAST._IType _10796___mcc_h10437 = _source451.dtor_value;
                      DAST._IType _10797_tpe = _10796___mcc_h10437;
                      RAST._IType _10798_typ;
                      RAST._IType _out2216;
                      _out2216 = (this).GenType(_10797_tpe, DCOMP.GenTypeContext.@default());
                      _10798_typ = _out2216;
                      if ((_10798_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source450.is_MapBuilderAdd) {
                  } else if (_source450.is_MapBuilderBuild) {
                  } else if (_source450.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_MapUpdate) {
              DAST._IExpression _10799___mcc_h10131 = _source419.dtor_expr;
              DAST._IExpression _10800___mcc_h10132 = _source419.dtor_indexExpr;
              DAST._IExpression _10801___mcc_h10133 = _source419.dtor_value;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source452 = _10639_name;
                  if (_source452.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10802___mcc_h10439 = _source452.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10803___mcc_h10440 = _source452.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10804___mcc_h10441 = _source452.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10805___mcc_h10442 = _source452.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source453 = _10803___mcc_h10440;
                    if (_source453.is_None) {
                    } else {
                      DAST._IType _10806___mcc_h10447 = _source453.dtor_value;
                      DAST._IType _10807_tpe = _10806___mcc_h10447;
                      RAST._IType _10808_typ;
                      RAST._IType _out2217;
                      _out2217 = (this).GenType(_10807_tpe, DCOMP.GenTypeContext.@default());
                      _10808_typ = _out2217;
                      if ((_10808_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source452.is_MapBuilderAdd) {
                  } else if (_source452.is_MapBuilderBuild) {
                  } else if (_source452.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_SetBuilder) {
              DAST._IType _10809___mcc_h10137 = _source419.dtor_elemType;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source454 = _10639_name;
                  if (_source454.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10810___mcc_h10449 = _source454.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10811___mcc_h10450 = _source454.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10812___mcc_h10451 = _source454.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10813___mcc_h10452 = _source454.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source455 = _10811___mcc_h10450;
                    if (_source455.is_None) {
                    } else {
                      DAST._IType _10814___mcc_h10457 = _source455.dtor_value;
                      DAST._IType _10815_tpe = _10814___mcc_h10457;
                      RAST._IType _10816_typ;
                      RAST._IType _out2218;
                      _out2218 = (this).GenType(_10815_tpe, DCOMP.GenTypeContext.@default());
                      _10816_typ = _out2218;
                      if ((_10816_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source454.is_MapBuilderAdd) {
                  } else if (_source454.is_MapBuilderBuild) {
                  } else if (_source454.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_ToMultiset) {
              DAST._IExpression _10817___mcc_h10139 = _source419.dtor_ToMultiset_i_a0;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source456 = _10639_name;
                  if (_source456.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10818___mcc_h10459 = _source456.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10819___mcc_h10460 = _source456.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10820___mcc_h10461 = _source456.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10821___mcc_h10462 = _source456.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source457 = _10819___mcc_h10460;
                    if (_source457.is_None) {
                    } else {
                      DAST._IType _10822___mcc_h10467 = _source457.dtor_value;
                      DAST._IType _10823_tpe = _10822___mcc_h10467;
                      RAST._IType _10824_typ;
                      RAST._IType _out2219;
                      _out2219 = (this).GenType(_10823_tpe, DCOMP.GenTypeContext.@default());
                      _10824_typ = _out2219;
                      if ((_10824_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source456.is_MapBuilderAdd) {
                  } else if (_source456.is_MapBuilderBuild) {
                  } else if (_source456.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_This) {
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source458 = _10639_name;
                  if (_source458.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10825___mcc_h10469 = _source458.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10826___mcc_h10470 = _source458.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10827___mcc_h10471 = _source458.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10828___mcc_h10472 = _source458.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source459 = _10826___mcc_h10470;
                    if (_source459.is_None) {
                    } else {
                      DAST._IType _10829___mcc_h10477 = _source459.dtor_value;
                      DAST._IType _10830_tpe = _10829___mcc_h10477;
                      RAST._IType _10831_typ;
                      RAST._IType _out2220;
                      _out2220 = (this).GenType(_10830_tpe, DCOMP.GenTypeContext.@default());
                      _10831_typ = _out2220;
                      if ((_10831_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source458.is_MapBuilderAdd) {
                  } else if (_source458.is_MapBuilderBuild) {
                  } else if (_source458.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Ite) {
              DAST._IExpression _10832___mcc_h10141 = _source419.dtor_cond;
              DAST._IExpression _10833___mcc_h10142 = _source419.dtor_thn;
              DAST._IExpression _10834___mcc_h10143 = _source419.dtor_els;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source460 = _10639_name;
                  if (_source460.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10835___mcc_h10479 = _source460.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10836___mcc_h10480 = _source460.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10837___mcc_h10481 = _source460.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10838___mcc_h10482 = _source460.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source461 = _10836___mcc_h10480;
                    if (_source461.is_None) {
                    } else {
                      DAST._IType _10839___mcc_h10487 = _source461.dtor_value;
                      DAST._IType _10840_tpe = _10839___mcc_h10487;
                      RAST._IType _10841_typ;
                      RAST._IType _out2221;
                      _out2221 = (this).GenType(_10840_tpe, DCOMP.GenTypeContext.@default());
                      _10841_typ = _out2221;
                      if ((_10841_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source460.is_MapBuilderAdd) {
                  } else if (_source460.is_MapBuilderBuild) {
                  } else if (_source460.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_UnOp) {
              DAST._IUnaryOp _10842___mcc_h10147 = _source419.dtor_unOp;
              DAST._IExpression _10843___mcc_h10148 = _source419.dtor_expr;
              DAST.Format._IUnaryOpFormat _10844___mcc_h10149 = _source419.dtor_format1;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source462 = _10639_name;
                  if (_source462.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10845___mcc_h10489 = _source462.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10846___mcc_h10490 = _source462.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10847___mcc_h10491 = _source462.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10848___mcc_h10492 = _source462.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source463 = _10846___mcc_h10490;
                    if (_source463.is_None) {
                    } else {
                      DAST._IType _10849___mcc_h10497 = _source463.dtor_value;
                      DAST._IType _10850_tpe = _10849___mcc_h10497;
                      RAST._IType _10851_typ;
                      RAST._IType _out2222;
                      _out2222 = (this).GenType(_10850_tpe, DCOMP.GenTypeContext.@default());
                      _10851_typ = _out2222;
                      if ((_10851_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source462.is_MapBuilderAdd) {
                  } else if (_source462.is_MapBuilderBuild) {
                  } else if (_source462.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_BinOp) {
              DAST._IBinOp _10852___mcc_h10153 = _source419.dtor_op;
              DAST._IExpression _10853___mcc_h10154 = _source419.dtor_left;
              DAST._IExpression _10854___mcc_h10155 = _source419.dtor_right;
              DAST.Format._IBinaryOpFormat _10855___mcc_h10156 = _source419.dtor_format2;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source464 = _10639_name;
                  if (_source464.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10856___mcc_h10499 = _source464.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10857___mcc_h10500 = _source464.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10858___mcc_h10501 = _source464.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10859___mcc_h10502 = _source464.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source465 = _10857___mcc_h10500;
                    if (_source465.is_None) {
                    } else {
                      DAST._IType _10860___mcc_h10507 = _source465.dtor_value;
                      DAST._IType _10861_tpe = _10860___mcc_h10507;
                      RAST._IType _10862_typ;
                      RAST._IType _out2223;
                      _out2223 = (this).GenType(_10861_tpe, DCOMP.GenTypeContext.@default());
                      _10862_typ = _out2223;
                      if ((_10862_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source464.is_MapBuilderAdd) {
                  } else if (_source464.is_MapBuilderBuild) {
                  } else if (_source464.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_ArrayLen) {
              DAST._IExpression _10863___mcc_h10161 = _source419.dtor_expr;
              DAST._IType _10864___mcc_h10162 = _source419.dtor_exprType;
              BigInteger _10865___mcc_h10163 = _source419.dtor_dim;
              bool _10866___mcc_h10164 = _source419.dtor_native;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source466 = _10639_name;
                  if (_source466.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10867___mcc_h10509 = _source466.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10868___mcc_h10510 = _source466.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10869___mcc_h10511 = _source466.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10870___mcc_h10512 = _source466.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source467 = _10868___mcc_h10510;
                    if (_source467.is_None) {
                    } else {
                      DAST._IType _10871___mcc_h10517 = _source467.dtor_value;
                      DAST._IType _10872_tpe = _10871___mcc_h10517;
                      RAST._IType _10873_typ;
                      RAST._IType _out2224;
                      _out2224 = (this).GenType(_10872_tpe, DCOMP.GenTypeContext.@default());
                      _10873_typ = _out2224;
                      if ((_10873_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source466.is_MapBuilderAdd) {
                  } else if (_source466.is_MapBuilderBuild) {
                  } else if (_source466.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_MapKeys) {
              DAST._IExpression _10874___mcc_h10169 = _source419.dtor_expr;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source468 = _10639_name;
                  if (_source468.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10875___mcc_h10519 = _source468.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10876___mcc_h10520 = _source468.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10877___mcc_h10521 = _source468.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10878___mcc_h10522 = _source468.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source469 = _10876___mcc_h10520;
                    if (_source469.is_None) {
                    } else {
                      DAST._IType _10879___mcc_h10527 = _source469.dtor_value;
                      DAST._IType _10880_tpe = _10879___mcc_h10527;
                      RAST._IType _10881_typ;
                      RAST._IType _out2225;
                      _out2225 = (this).GenType(_10880_tpe, DCOMP.GenTypeContext.@default());
                      _10881_typ = _out2225;
                      if ((_10881_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source468.is_MapBuilderAdd) {
                  } else if (_source468.is_MapBuilderBuild) {
                  } else if (_source468.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_MapValues) {
              DAST._IExpression _10882___mcc_h10171 = _source419.dtor_expr;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source470 = _10639_name;
                  if (_source470.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10883___mcc_h10529 = _source470.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10884___mcc_h10530 = _source470.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10885___mcc_h10531 = _source470.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10886___mcc_h10532 = _source470.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source471 = _10884___mcc_h10530;
                    if (_source471.is_None) {
                    } else {
                      DAST._IType _10887___mcc_h10537 = _source471.dtor_value;
                      DAST._IType _10888_tpe = _10887___mcc_h10537;
                      RAST._IType _10889_typ;
                      RAST._IType _out2226;
                      _out2226 = (this).GenType(_10888_tpe, DCOMP.GenTypeContext.@default());
                      _10889_typ = _out2226;
                      if ((_10889_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source470.is_MapBuilderAdd) {
                  } else if (_source470.is_MapBuilderBuild) {
                  } else if (_source470.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Select) {
              DAST._IExpression _10890___mcc_h10173 = _source419.dtor_expr;
              Dafny.ISequence<Dafny.Rune> _10891___mcc_h10174 = _source419.dtor_field;
              bool _10892___mcc_h10175 = _source419.dtor_isConstant;
              bool _10893___mcc_h10176 = _source419.dtor_onDatatype;
              DAST._IType _10894___mcc_h10177 = _source419.dtor_fieldType;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source472 = _10639_name;
                  if (_source472.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10895___mcc_h10539 = _source472.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10896___mcc_h10540 = _source472.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10897___mcc_h10541 = _source472.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10898___mcc_h10542 = _source472.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source473 = _10896___mcc_h10540;
                    if (_source473.is_None) {
                    } else {
                      DAST._IType _10899___mcc_h10547 = _source473.dtor_value;
                      DAST._IType _10900_tpe = _10899___mcc_h10547;
                      RAST._IType _10901_typ;
                      RAST._IType _out2227;
                      _out2227 = (this).GenType(_10900_tpe, DCOMP.GenTypeContext.@default());
                      _10901_typ = _out2227;
                      if ((_10901_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source472.is_MapBuilderAdd) {
                  } else if (_source472.is_MapBuilderBuild) {
                  } else if (_source472.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_SelectFn) {
              DAST._IExpression _10902___mcc_h10183 = _source419.dtor_expr;
              Dafny.ISequence<Dafny.Rune> _10903___mcc_h10184 = _source419.dtor_field;
              bool _10904___mcc_h10185 = _source419.dtor_onDatatype;
              bool _10905___mcc_h10186 = _source419.dtor_isStatic;
              BigInteger _10906___mcc_h10187 = _source419.dtor_arity;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source474 = _10639_name;
                  if (_source474.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10907___mcc_h10549 = _source474.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10908___mcc_h10550 = _source474.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10909___mcc_h10551 = _source474.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10910___mcc_h10552 = _source474.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source475 = _10908___mcc_h10550;
                    if (_source475.is_None) {
                    } else {
                      DAST._IType _10911___mcc_h10557 = _source475.dtor_value;
                      DAST._IType _10912_tpe = _10911___mcc_h10557;
                      RAST._IType _10913_typ;
                      RAST._IType _out2228;
                      _out2228 = (this).GenType(_10912_tpe, DCOMP.GenTypeContext.@default());
                      _10913_typ = _out2228;
                      if ((_10913_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source474.is_MapBuilderAdd) {
                  } else if (_source474.is_MapBuilderBuild) {
                  } else if (_source474.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Index) {
              DAST._IExpression _10914___mcc_h10193 = _source419.dtor_expr;
              DAST._ICollKind _10915___mcc_h10194 = _source419.dtor_collKind;
              Dafny.ISequence<DAST._IExpression> _10916___mcc_h10195 = _source419.dtor_indices;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source476 = _10639_name;
                  if (_source476.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10917___mcc_h10559 = _source476.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10918___mcc_h10560 = _source476.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10919___mcc_h10561 = _source476.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10920___mcc_h10562 = _source476.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source477 = _10918___mcc_h10560;
                    if (_source477.is_None) {
                    } else {
                      DAST._IType _10921___mcc_h10567 = _source477.dtor_value;
                      DAST._IType _10922_tpe = _10921___mcc_h10567;
                      RAST._IType _10923_typ;
                      RAST._IType _out2229;
                      _out2229 = (this).GenType(_10922_tpe, DCOMP.GenTypeContext.@default());
                      _10923_typ = _out2229;
                      if ((_10923_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source476.is_MapBuilderAdd) {
                  } else if (_source476.is_MapBuilderBuild) {
                  } else if (_source476.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_IndexRange) {
              DAST._IExpression _10924___mcc_h10199 = _source419.dtor_expr;
              bool _10925___mcc_h10200 = _source419.dtor_isArray;
              Std.Wrappers._IOption<DAST._IExpression> _10926___mcc_h10201 = _source419.dtor_low;
              Std.Wrappers._IOption<DAST._IExpression> _10927___mcc_h10202 = _source419.dtor_high;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source478 = _10639_name;
                  if (_source478.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10928___mcc_h10569 = _source478.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10929___mcc_h10570 = _source478.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10930___mcc_h10571 = _source478.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10931___mcc_h10572 = _source478.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source479 = _10929___mcc_h10570;
                    if (_source479.is_None) {
                    } else {
                      DAST._IType _10932___mcc_h10577 = _source479.dtor_value;
                      DAST._IType _10933_tpe = _10932___mcc_h10577;
                      RAST._IType _10934_typ;
                      RAST._IType _out2230;
                      _out2230 = (this).GenType(_10933_tpe, DCOMP.GenTypeContext.@default());
                      _10934_typ = _out2230;
                      if ((_10934_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source478.is_MapBuilderAdd) {
                  } else if (_source478.is_MapBuilderBuild) {
                  } else if (_source478.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_TupleSelect) {
              DAST._IExpression _10935___mcc_h10207 = _source419.dtor_expr;
              BigInteger _10936___mcc_h10208 = _source419.dtor_index;
              DAST._IType _10937___mcc_h10209 = _source419.dtor_fieldType;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source480 = _10639_name;
                  if (_source480.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10938___mcc_h10579 = _source480.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10939___mcc_h10580 = _source480.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10940___mcc_h10581 = _source480.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10941___mcc_h10582 = _source480.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source481 = _10939___mcc_h10580;
                    if (_source481.is_None) {
                    } else {
                      DAST._IType _10942___mcc_h10587 = _source481.dtor_value;
                      DAST._IType _10943_tpe = _10942___mcc_h10587;
                      RAST._IType _10944_typ;
                      RAST._IType _out2231;
                      _out2231 = (this).GenType(_10943_tpe, DCOMP.GenTypeContext.@default());
                      _10944_typ = _out2231;
                      if ((_10944_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source480.is_MapBuilderAdd) {
                  } else if (_source480.is_MapBuilderBuild) {
                  } else if (_source480.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Call) {
              DAST._IExpression _10945___mcc_h10213 = _source419.dtor_on;
              DAST._ICallName _10946___mcc_h10214 = _source419.dtor_callName;
              Dafny.ISequence<DAST._IType> _10947___mcc_h10215 = _source419.dtor_typeArgs;
              Dafny.ISequence<DAST._IExpression> _10948___mcc_h10216 = _source419.dtor_args;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source482 = _10639_name;
                  if (_source482.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10949___mcc_h10589 = _source482.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10950___mcc_h10590 = _source482.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10951___mcc_h10591 = _source482.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10952___mcc_h10592 = _source482.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source483 = _10950___mcc_h10590;
                    if (_source483.is_None) {
                    } else {
                      DAST._IType _10953___mcc_h10597 = _source483.dtor_value;
                      DAST._IType _10954_tpe = _10953___mcc_h10597;
                      RAST._IType _10955_typ;
                      RAST._IType _out2232;
                      _out2232 = (this).GenType(_10954_tpe, DCOMP.GenTypeContext.@default());
                      _10955_typ = _out2232;
                      if ((_10955_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source482.is_MapBuilderAdd) {
                  } else if (_source482.is_MapBuilderBuild) {
                  } else if (_source482.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Lambda) {
              Dafny.ISequence<DAST._IFormal> _10956___mcc_h10221 = _source419.dtor_params;
              DAST._IType _10957___mcc_h10222 = _source419.dtor_retType;
              Dafny.ISequence<DAST._IStatement> _10958___mcc_h10223 = _source419.dtor_body;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source484 = _10639_name;
                  if (_source484.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10959___mcc_h10599 = _source484.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10960___mcc_h10600 = _source484.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10961___mcc_h10601 = _source484.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10962___mcc_h10602 = _source484.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source485 = _10960___mcc_h10600;
                    if (_source485.is_None) {
                    } else {
                      DAST._IType _10963___mcc_h10607 = _source485.dtor_value;
                      DAST._IType _10964_tpe = _10963___mcc_h10607;
                      RAST._IType _10965_typ;
                      RAST._IType _out2233;
                      _out2233 = (this).GenType(_10964_tpe, DCOMP.GenTypeContext.@default());
                      _10965_typ = _out2233;
                      if ((_10965_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source484.is_MapBuilderAdd) {
                  } else if (_source484.is_MapBuilderBuild) {
                  } else if (_source484.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_BetaRedex) {
              Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _10966___mcc_h10227 = _source419.dtor_values;
              DAST._IType _10967___mcc_h10228 = _source419.dtor_retType;
              DAST._IExpression _10968___mcc_h10229 = _source419.dtor_expr;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source486 = _10639_name;
                  if (_source486.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10969___mcc_h10609 = _source486.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10970___mcc_h10610 = _source486.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10971___mcc_h10611 = _source486.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10972___mcc_h10612 = _source486.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source487 = _10970___mcc_h10610;
                    if (_source487.is_None) {
                    } else {
                      DAST._IType _10973___mcc_h10617 = _source487.dtor_value;
                      DAST._IType _10974_tpe = _10973___mcc_h10617;
                      RAST._IType _10975_typ;
                      RAST._IType _out2234;
                      _out2234 = (this).GenType(_10974_tpe, DCOMP.GenTypeContext.@default());
                      _10975_typ = _out2234;
                      if ((_10975_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source486.is_MapBuilderAdd) {
                  } else if (_source486.is_MapBuilderBuild) {
                  } else if (_source486.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_IIFE) {
              Dafny.ISequence<Dafny.Rune> _10976___mcc_h10233 = _source419.dtor_name;
              DAST._IType _10977___mcc_h10234 = _source419.dtor_typ;
              DAST._IExpression _10978___mcc_h10235 = _source419.dtor_value;
              DAST._IExpression _10979___mcc_h10236 = _source419.dtor_iifeBody;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source488 = _10639_name;
                  if (_source488.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10980___mcc_h10619 = _source488.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10981___mcc_h10620 = _source488.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10982___mcc_h10621 = _source488.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10983___mcc_h10622 = _source488.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source489 = _10981___mcc_h10620;
                    if (_source489.is_None) {
                    } else {
                      DAST._IType _10984___mcc_h10627 = _source489.dtor_value;
                      DAST._IType _10985_tpe = _10984___mcc_h10627;
                      RAST._IType _10986_typ;
                      RAST._IType _out2235;
                      _out2235 = (this).GenType(_10985_tpe, DCOMP.GenTypeContext.@default());
                      _10986_typ = _out2235;
                      if ((_10986_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source488.is_MapBuilderAdd) {
                  } else if (_source488.is_MapBuilderBuild) {
                  } else if (_source488.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_Apply) {
              DAST._IExpression _10987___mcc_h10241 = _source419.dtor_expr;
              Dafny.ISequence<DAST._IExpression> _10988___mcc_h10242 = _source419.dtor_args;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source490 = _10639_name;
                  if (_source490.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10989___mcc_h10629 = _source490.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _10990___mcc_h10630 = _source490.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _10991___mcc_h10631 = _source490.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _10992___mcc_h10632 = _source490.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source491 = _10990___mcc_h10630;
                    if (_source491.is_None) {
                    } else {
                      DAST._IType _10993___mcc_h10637 = _source491.dtor_value;
                      DAST._IType _10994_tpe = _10993___mcc_h10637;
                      RAST._IType _10995_typ;
                      RAST._IType _out2236;
                      _out2236 = (this).GenType(_10994_tpe, DCOMP.GenTypeContext.@default());
                      _10995_typ = _out2236;
                      if ((_10995_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source490.is_MapBuilderAdd) {
                  } else if (_source490.is_MapBuilderBuild) {
                  } else if (_source490.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_TypeTest) {
              DAST._IExpression _10996___mcc_h10245 = _source419.dtor_on;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10997___mcc_h10246 = _source419.dtor_dType;
              Dafny.ISequence<Dafny.Rune> _10998___mcc_h10247 = _source419.dtor_variant;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source492 = _10639_name;
                  if (_source492.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _10999___mcc_h10639 = _source492.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11000___mcc_h10640 = _source492.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11001___mcc_h10641 = _source492.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11002___mcc_h10642 = _source492.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source493 = _11000___mcc_h10640;
                    if (_source493.is_None) {
                    } else {
                      DAST._IType _11003___mcc_h10647 = _source493.dtor_value;
                      DAST._IType _11004_tpe = _11003___mcc_h10647;
                      RAST._IType _11005_typ;
                      RAST._IType _out2237;
                      _out2237 = (this).GenType(_11004_tpe, DCOMP.GenTypeContext.@default());
                      _11005_typ = _out2237;
                      if ((_11005_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source492.is_MapBuilderAdd) {
                  } else if (_source492.is_MapBuilderBuild) {
                  } else if (_source492.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_InitializationValue) {
              DAST._IType _11006___mcc_h10251 = _source419.dtor_typ;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source494 = _10639_name;
                  if (_source494.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _11007___mcc_h10649 = _source494.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11008___mcc_h10650 = _source494.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11009___mcc_h10651 = _source494.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11010___mcc_h10652 = _source494.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source495 = _11008___mcc_h10650;
                    if (_source495.is_None) {
                    } else {
                      DAST._IType _11011___mcc_h10657 = _source495.dtor_value;
                      DAST._IType _11012_tpe = _11011___mcc_h10657;
                      RAST._IType _11013_typ;
                      RAST._IType _out2238;
                      _out2238 = (this).GenType(_11012_tpe, DCOMP.GenTypeContext.@default());
                      _11013_typ = _out2238;
                      if ((_11013_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source494.is_MapBuilderAdd) {
                  } else if (_source494.is_MapBuilderBuild) {
                  } else if (_source494.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_BoolBoundedPool) {
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source496 = _10639_name;
                  if (_source496.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _11014___mcc_h10659 = _source496.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11015___mcc_h10660 = _source496.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11016___mcc_h10661 = _source496.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11017___mcc_h10662 = _source496.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source497 = _11015___mcc_h10660;
                    if (_source497.is_None) {
                    } else {
                      DAST._IType _11018___mcc_h10667 = _source497.dtor_value;
                      DAST._IType _11019_tpe = _11018___mcc_h10667;
                      RAST._IType _11020_typ;
                      RAST._IType _out2239;
                      _out2239 = (this).GenType(_11019_tpe, DCOMP.GenTypeContext.@default());
                      _11020_typ = _out2239;
                      if ((_11020_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source496.is_MapBuilderAdd) {
                  } else if (_source496.is_MapBuilderBuild) {
                  } else if (_source496.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_SetBoundedPool) {
              DAST._IExpression _11021___mcc_h10253 = _source419.dtor_of;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source498 = _10639_name;
                  if (_source498.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _11022___mcc_h10669 = _source498.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11023___mcc_h10670 = _source498.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11024___mcc_h10671 = _source498.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11025___mcc_h10672 = _source498.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source499 = _11023___mcc_h10670;
                    if (_source499.is_None) {
                    } else {
                      DAST._IType _11026___mcc_h10677 = _source499.dtor_value;
                      DAST._IType _11027_tpe = _11026___mcc_h10677;
                      RAST._IType _11028_typ;
                      RAST._IType _out2240;
                      _out2240 = (this).GenType(_11027_tpe, DCOMP.GenTypeContext.@default());
                      _11028_typ = _out2240;
                      if ((_11028_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source498.is_MapBuilderAdd) {
                  } else if (_source498.is_MapBuilderBuild) {
                  } else if (_source498.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_MapBoundedPool) {
              DAST._IExpression _11029___mcc_h10255 = _source419.dtor_of;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source500 = _10639_name;
                  if (_source500.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _11030___mcc_h10679 = _source500.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11031___mcc_h10680 = _source500.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11032___mcc_h10681 = _source500.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11033___mcc_h10682 = _source500.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source501 = _11031___mcc_h10680;
                    if (_source501.is_None) {
                    } else {
                      DAST._IType _11034___mcc_h10687 = _source501.dtor_value;
                      DAST._IType _11035_tpe = _11034___mcc_h10687;
                      RAST._IType _11036_typ;
                      RAST._IType _out2241;
                      _out2241 = (this).GenType(_11035_tpe, DCOMP.GenTypeContext.@default());
                      _11036_typ = _out2241;
                      if ((_11036_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source500.is_MapBuilderAdd) {
                  } else if (_source500.is_MapBuilderBuild) {
                  } else if (_source500.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_SeqBoundedPool) {
              DAST._IExpression _11037___mcc_h10257 = _source419.dtor_of;
              bool _11038___mcc_h10258 = _source419.dtor_includeDuplicates;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source502 = _10639_name;
                  if (_source502.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _11039___mcc_h10689 = _source502.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11040___mcc_h10690 = _source502.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11041___mcc_h10691 = _source502.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11042___mcc_h10692 = _source502.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source503 = _11040___mcc_h10690;
                    if (_source503.is_None) {
                    } else {
                      DAST._IType _11043___mcc_h10697 = _source503.dtor_value;
                      DAST._IType _11044_tpe = _11043___mcc_h10697;
                      RAST._IType _11045_typ;
                      RAST._IType _out2242;
                      _out2242 = (this).GenType(_11044_tpe, DCOMP.GenTypeContext.@default());
                      _11045_typ = _out2242;
                      if ((_11045_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source502.is_MapBuilderAdd) {
                  } else if (_source502.is_MapBuilderBuild) {
                  } else if (_source502.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_IntRange) {
              DAST._IExpression _11046___mcc_h10261 = _source419.dtor_lo;
              DAST._IExpression _11047___mcc_h10262 = _source419.dtor_hi;
              bool _11048___mcc_h10263 = _source419.dtor_up;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source504 = _10639_name;
                  if (_source504.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _11049___mcc_h10699 = _source504.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11050___mcc_h10700 = _source504.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11051___mcc_h10701 = _source504.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11052___mcc_h10702 = _source504.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source505 = _11050___mcc_h10700;
                    if (_source505.is_None) {
                    } else {
                      DAST._IType _11053___mcc_h10707 = _source505.dtor_value;
                      DAST._IType _11054_tpe = _11053___mcc_h10707;
                      RAST._IType _11055_typ;
                      RAST._IType _out2243;
                      _out2243 = (this).GenType(_11054_tpe, DCOMP.GenTypeContext.@default());
                      _11055_typ = _out2243;
                      if ((_11055_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source504.is_MapBuilderAdd) {
                  } else if (_source504.is_MapBuilderBuild) {
                  } else if (_source504.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else if (_source419.is_UnboundedIntRange) {
              DAST._IExpression _11056___mcc_h10267 = _source419.dtor_start;
              bool _11057___mcc_h10268 = _source419.dtor_up;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source506 = _10639_name;
                  if (_source506.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _11058___mcc_h10709 = _source506.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11059___mcc_h10710 = _source506.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11060___mcc_h10711 = _source506.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11061___mcc_h10712 = _source506.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source507 = _11059___mcc_h10710;
                    if (_source507.is_None) {
                    } else {
                      DAST._IType _11062___mcc_h10717 = _source507.dtor_value;
                      DAST._IType _11063_tpe = _11062___mcc_h10717;
                      RAST._IType _11064_typ;
                      RAST._IType _out2244;
                      _out2244 = (this).GenType(_11063_tpe, DCOMP.GenTypeContext.@default());
                      _11064_typ = _out2244;
                      if ((_11064_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source506.is_MapBuilderAdd) {
                  } else if (_source506.is_MapBuilderBuild) {
                  } else if (_source506.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            } else {
              DAST._IType _11065___mcc_h10271 = _source419.dtor_elemType;
              DAST._IExpression _11066___mcc_h10272 = _source419.dtor_collection;
              bool _11067___mcc_h10273 = _source419.dtor_is__forall;
              DAST._IExpression _11068___mcc_h10274 = _source419.dtor_lambda;
              {
                if (!object.Equals(_10645_onExpr, RAST.__default.self)) {
                  DAST._ICallName _source508 = _10639_name;
                  if (_source508.is_CallName) {
                    Dafny.ISequence<Dafny.Rune> _11069___mcc_h10719 = _source508.dtor_name;
                    Std.Wrappers._IOption<DAST._IType> _11070___mcc_h10720 = _source508.dtor_onType;
                    Std.Wrappers._IOption<DAST._IFormal> _11071___mcc_h10721 = _source508.dtor_receiverArgs;
                    Dafny.ISequence<DAST._IFormal> _11072___mcc_h10722 = _source508.dtor_signature;
                    Std.Wrappers._IOption<DAST._IType> _source509 = _11070___mcc_h10720;
                    if (_source509.is_None) {
                    } else {
                      DAST._IType _11073___mcc_h10727 = _source509.dtor_value;
                      DAST._IType _11074_tpe = _11073___mcc_h10727;
                      RAST._IType _11075_typ;
                      RAST._IType _out2245;
                      _out2245 = (this).GenType(_11074_tpe, DCOMP.GenTypeContext.@default());
                      _11075_typ = _out2245;
                      if ((_11075_typ).IsObjectOrPointer()) {
                        _10645_onExpr = ((this).read__macro).Apply1(_10645_onExpr);
                      }
                    }
                  } else if (_source508.is_MapBuilderAdd) {
                  } else if (_source508.is_MapBuilderBuild) {
                  } else if (_source508.is_SetBuilderAdd) {
                  } else {
                  }
                }
                _10645_onExpr = (_10645_onExpr).Sel(_10648_renderedName);
              }
            }
            r = ((_10645_onExpr).ApplyType(_10643_typeExprs)).Apply(_10641_argExprs);
            RAST._IExpr _out2246;
            DCOMP._IOwnership _out2247;
            (this).FromOwned(r, expectedOwnership, out _out2246, out _out2247);
            r = _out2246;
            resultingOwnership = _out2247;
            return ;
          } else {
            DAST._IResolvedType _11076___mcc_h10047 = _source417.dtor_value;
            DAST._IResolvedType _source510 = _11076___mcc_h10047;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11077___mcc_h10049 = _source510.dtor_path;
            Dafny.ISequence<DAST._IType> _11078___mcc_h10050 = _source510.dtor_typeArgs;
            DAST._IResolvedTypeBase _11079___mcc_h10051 = _source510.dtor_kind;
            Dafny.ISequence<DAST._IAttribute> _11080___mcc_h10052 = _source510.dtor_attributes;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11081___mcc_h10053 = _source510.dtor_properMethods;
            Dafny.ISequence<DAST._IType> _11082___mcc_h10054 = _source510.dtor_extendedTypes;
            DAST._IResolvedTypeBase _11083_base = _11079___mcc_h10051;
            Dafny.ISequence<DAST._IType> _11084_onTypeArgs = _11078___mcc_h10050;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11085_path = _11077___mcc_h10049;
            RAST._IExpr _11086_fullPath;
            RAST._IExpr _out2248;
            _out2248 = DCOMP.COMP.GenPathExpr(_11085_path);
            _11086_fullPath = _out2248;
            Dafny.ISequence<RAST._IType> _11087_onTypeExprs;
            Dafny.ISequence<RAST._IType> _out2249;
            _out2249 = (this).GenTypeArgs(_11084_onTypeArgs, DCOMP.GenTypeContext.@default());
            _11087_onTypeExprs = _out2249;
            RAST._IExpr _11088_onExpr = RAST.Expr.Default();
            DCOMP._IOwnership _11089_recOwnership = DCOMP.Ownership.Default();
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11090_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
            if (((_11083_base).is_Trait) || ((_11083_base).is_Class)) {
              RAST._IExpr _out2250;
              DCOMP._IOwnership _out2251;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2252;
              (this).GenExpr(_10640_on, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2250, out _out2251, out _out2252);
              _11088_onExpr = _out2250;
              _11089_recOwnership = _out2251;
              _11090_recIdents = _out2252;
              _11088_onExpr = ((this).read__macro).Apply1(_11088_onExpr);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11090_recIdents);
            } else {
              RAST._IExpr _out2253;
              DCOMP._IOwnership _out2254;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2255;
              (this).GenExpr(_10640_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2253, out _out2254, out _out2255);
              _11088_onExpr = _out2253;
              _11089_recOwnership = _out2254;
              _11090_recIdents = _out2255;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11090_recIdents);
            }
            r = ((((_11086_fullPath).ApplyType(_11087_onTypeExprs)).MSel(DCOMP.__default.escapeName((_10639_name).dtor_name))).ApplyType(_10643_typeExprs)).Apply(Dafny.Sequence<RAST._IExpr>.Concat(Dafny.Sequence<RAST._IExpr>.FromElements(_11088_onExpr), _10641_argExprs));
            RAST._IExpr _out2256;
            DCOMP._IOwnership _out2257;
            (this).FromOwned(r, expectedOwnership, out _out2256, out _out2257);
            r = _out2256;
            resultingOwnership = _out2257;
          }
        }
      } else if (_source321.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _11091___mcc_h292 = _source321.dtor_params;
        DAST._IType _11092___mcc_h293 = _source321.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _11093___mcc_h294 = _source321.dtor_body;
        Dafny.ISequence<DAST._IStatement> _11094_body = _11093___mcc_h294;
        DAST._IType _11095_retType = _11092___mcc_h293;
        Dafny.ISequence<DAST._IFormal> _11096_paramsDafny = _11091___mcc_h292;
        {
          Dafny.ISequence<RAST._IFormal> _11097_params;
          Dafny.ISequence<RAST._IFormal> _out2258;
          _out2258 = (this).GenParams(_11096_paramsDafny);
          _11097_params = _out2258;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11098_paramNames;
          _11098_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _11099_paramTypesMap;
          _11099_paramTypesMap = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements();
          BigInteger _hi44 = new BigInteger((_11097_params).Count);
          for (BigInteger _11100_i = BigInteger.Zero; _11100_i < _hi44; _11100_i++) {
            Dafny.ISequence<Dafny.Rune> _11101_name;
            _11101_name = ((_11097_params).Select(_11100_i)).dtor_name;
            _11098_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_11098_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_11101_name));
            _11099_paramTypesMap = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_11099_paramTypesMap, _11101_name, ((_11097_params).Select(_11100_i)).dtor_tpe);
          }
          DCOMP._IEnvironment _11102_subEnv;
          _11102_subEnv = (env).merge(DCOMP.Environment.create(_11098_paramNames, _11099_paramTypesMap));
          RAST._IExpr _11103_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11104_recIdents;
          DCOMP._IEnvironment _11105___v197;
          RAST._IExpr _out2259;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2260;
          DCOMP._IEnvironment _out2261;
          (this).GenStmts(_11094_body, ((!object.Equals(selfIdent, DCOMP.SelfInfo.create_NoSelf())) ? (DCOMP.SelfInfo.create_ThisTyped(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), (selfIdent).dtor_dafnyType)) : (DCOMP.SelfInfo.create_NoSelf())), _11102_subEnv, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out2259, out _out2260, out _out2261);
          _11103_recursiveGen = _out2259;
          _11104_recIdents = _out2260;
          _11105___v197 = _out2261;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          _11104_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11104_recIdents, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISet<Dafny.ISequence<Dafny.Rune>>>>((_11106_paramNames) => ((System.Func<Dafny.ISet<Dafny.ISequence<Dafny.Rune>>>)(() => {
            var _coll6 = new System.Collections.Generic.List<Dafny.ISequence<Dafny.Rune>>();
            foreach (Dafny.ISequence<Dafny.Rune> _compr_6 in (_11106_paramNames).CloneAsArray()) {
              Dafny.ISequence<Dafny.Rune> _11107_name = (Dafny.ISequence<Dafny.Rune>)_compr_6;
              if ((_11106_paramNames).Contains(_11107_name)) {
                _coll6.Add(_11107_name);
              }
            }
            return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromCollection(_coll6);
          }))())(_11098_paramNames));
          RAST._IExpr _11108_allReadCloned;
          _11108_allReadCloned = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          while (!(_11104_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _11109_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_11104_recIdents).Elements) {
              _11109_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_11104_recIdents).Contains(_11109_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 4298)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, DCOMP.SelfInfo.create_NoSelf())) && ((_11109_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              RAST._IExpr _11110_selfCloned;
              DCOMP._IOwnership _11111___v198;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11112___v199;
              RAST._IExpr _out2262;
              DCOMP._IOwnership _out2263;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2264;
              (this).GenIdent(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), selfIdent, DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out2262, out _out2263, out _out2264);
              _11110_selfCloned = _out2262;
              _11111___v198 = _out2263;
              _11112___v199 = _out2264;
              _11108_allReadCloned = (_11108_allReadCloned).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_11110_selfCloned)));
            } else if (!((_11098_paramNames).Contains(_11109_next))) {
              RAST._IExpr _11113_copy;
              _11113_copy = (RAST.Expr.create_Identifier(_11109_next)).Clone();
              _11108_allReadCloned = (_11108_allReadCloned).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), _11109_next, Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_11113_copy)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11109_next));
            }
            _11104_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11104_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11109_next));
          }
          RAST._IType _11114_retTypeGen;
          RAST._IType _out2265;
          _out2265 = (this).GenType(_11095_retType, DCOMP.GenTypeContext.InFn());
          _11114_retTypeGen = _out2265;
          r = RAST.Expr.create_Block((_11108_allReadCloned).Then(RAST.__default.RcNew(RAST.Expr.create_Lambda(_11097_params, Std.Wrappers.Option<RAST._IType>.create_Some(_11114_retTypeGen), RAST.Expr.create_Block(_11103_recursiveGen)))));
          RAST._IExpr _out2266;
          DCOMP._IOwnership _out2267;
          (this).FromOwned(r, expectedOwnership, out _out2266, out _out2267);
          r = _out2266;
          resultingOwnership = _out2267;
          return ;
        }
      } else if (_source321.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11115___mcc_h295 = _source321.dtor_values;
        DAST._IType _11116___mcc_h296 = _source321.dtor_retType;
        DAST._IExpression _11117___mcc_h297 = _source321.dtor_expr;
        DAST._IExpression _11118_expr = _11117___mcc_h297;
        DAST._IType _11119_retType = _11116___mcc_h296;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11120_values = _11115___mcc_h295;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11121_paramNames;
          _11121_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IFormal> _11122_paramFormals;
          Dafny.ISequence<RAST._IFormal> _out2268;
          _out2268 = (this).GenParams(Std.Collections.Seq.__default.Map<_System._ITuple2<DAST._IFormal, DAST._IExpression>, DAST._IFormal>(((System.Func<_System._ITuple2<DAST._IFormal, DAST._IExpression>, DAST._IFormal>)((_11123_value) => {
            return (_11123_value).dtor__0;
          })), _11120_values));
          _11122_paramFormals = _out2268;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,RAST._IType> _11124_paramTypes;
          _11124_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11125_paramNamesSet;
          _11125_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _hi45 = new BigInteger((_11120_values).Count);
          for (BigInteger _11126_i = BigInteger.Zero; _11126_i < _hi45; _11126_i++) {
            Dafny.ISequence<Dafny.Rune> _11127_name;
            _11127_name = (((_11120_values).Select(_11126_i)).dtor__0).dtor_name;
            Dafny.ISequence<Dafny.Rune> _11128_rName;
            _11128_rName = DCOMP.__default.escapeName(_11127_name);
            _11121_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_11121_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_11128_rName));
            _11124_paramTypes = Dafny.Map<Dafny.ISequence<Dafny.Rune>, RAST._IType>.Update(_11124_paramTypes, _11128_rName, ((_11122_paramFormals).Select(_11126_i)).dtor_tpe);
            _11125_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11125_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11128_rName));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          BigInteger _hi46 = new BigInteger((_11120_values).Count);
          for (BigInteger _11129_i = BigInteger.Zero; _11129_i < _hi46; _11129_i++) {
            RAST._IType _11130_typeGen;
            RAST._IType _out2269;
            _out2269 = (this).GenType((((_11120_values).Select(_11129_i)).dtor__0).dtor_typ, DCOMP.GenTypeContext.InFn());
            _11130_typeGen = _out2269;
            RAST._IExpr _11131_valueGen;
            DCOMP._IOwnership _11132___v200;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11133_recIdents;
            RAST._IExpr _out2270;
            DCOMP._IOwnership _out2271;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2272;
            (this).GenExpr(((_11120_values).Select(_11129_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2270, out _out2271, out _out2272);
            _11131_valueGen = _out2270;
            _11132___v200 = _out2271;
            _11133_recIdents = _out2272;
            r = (r).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), DCOMP.__default.escapeName((((_11120_values).Select(_11129_i)).dtor__0).dtor_name), Std.Wrappers.Option<RAST._IType>.create_Some(_11130_typeGen), Std.Wrappers.Option<RAST._IExpr>.create_Some(_11131_valueGen)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11133_recIdents);
          }
          DCOMP._IEnvironment _11134_newEnv;
          _11134_newEnv = DCOMP.Environment.create(_11121_paramNames, _11124_paramTypes);
          RAST._IExpr _11135_recGen;
          DCOMP._IOwnership _11136_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11137_recIdents;
          RAST._IExpr _out2273;
          DCOMP._IOwnership _out2274;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2275;
          (this).GenExpr(_11118_expr, selfIdent, _11134_newEnv, expectedOwnership, out _out2273, out _out2274, out _out2275);
          _11135_recGen = _out2273;
          _11136_recOwned = _out2274;
          _11137_recIdents = _out2275;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11137_recIdents, _11125_paramNamesSet);
          r = RAST.Expr.create_Block((r).Then(_11135_recGen));
          RAST._IExpr _out2276;
          DCOMP._IOwnership _out2277;
          (this).FromOwnership(r, _11136_recOwned, expectedOwnership, out _out2276, out _out2277);
          r = _out2276;
          resultingOwnership = _out2277;
          return ;
        }
      } else if (_source321.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _11138___mcc_h298 = _source321.dtor_name;
        DAST._IType _11139___mcc_h299 = _source321.dtor_typ;
        DAST._IExpression _11140___mcc_h300 = _source321.dtor_value;
        DAST._IExpression _11141___mcc_h301 = _source321.dtor_iifeBody;
        DAST._IExpression _11142_iifeBody = _11141___mcc_h301;
        DAST._IExpression _11143_value = _11140___mcc_h300;
        DAST._IType _11144_tpe = _11139___mcc_h299;
        Dafny.ISequence<Dafny.Rune> _11145_name = _11138___mcc_h298;
        {
          RAST._IExpr _11146_valueGen;
          DCOMP._IOwnership _11147___v201;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11148_recIdents;
          RAST._IExpr _out2278;
          DCOMP._IOwnership _out2279;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2280;
          (this).GenExpr(_11143_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2278, out _out2279, out _out2280);
          _11146_valueGen = _out2278;
          _11147___v201 = _out2279;
          _11148_recIdents = _out2280;
          readIdents = _11148_recIdents;
          RAST._IType _11149_valueTypeGen;
          RAST._IType _out2281;
          _out2281 = (this).GenType(_11144_tpe, DCOMP.GenTypeContext.InFn());
          _11149_valueTypeGen = _out2281;
          RAST._IExpr _11150_bodyGen;
          DCOMP._IOwnership _11151___v202;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11152_bodyIdents;
          RAST._IExpr _out2282;
          DCOMP._IOwnership _out2283;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2284;
          (this).GenExpr(_11142_iifeBody, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2282, out _out2283, out _out2284);
          _11150_bodyGen = _out2282;
          _11151___v202 = _out2283;
          _11152_bodyIdents = _out2284;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11152_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(DCOMP.__default.escapeName((_11145_name)))));
          r = RAST.Expr.create_Block((RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), DCOMP.__default.escapeName((_11145_name)), Std.Wrappers.Option<RAST._IType>.create_Some(_11149_valueTypeGen), Std.Wrappers.Option<RAST._IExpr>.create_Some(_11146_valueGen))).Then(_11150_bodyGen));
          RAST._IExpr _out2285;
          DCOMP._IOwnership _out2286;
          (this).FromOwned(r, expectedOwnership, out _out2285, out _out2286);
          r = _out2285;
          resultingOwnership = _out2286;
          return ;
        }
      } else if (_source321.is_Apply) {
        DAST._IExpression _11153___mcc_h302 = _source321.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _11154___mcc_h303 = _source321.dtor_args;
        Dafny.ISequence<DAST._IExpression> _11155_args = _11154___mcc_h303;
        DAST._IExpression _11156_func = _11153___mcc_h302;
        {
          RAST._IExpr _11157_funcExpr;
          DCOMP._IOwnership _11158___v203;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11159_recIdents;
          RAST._IExpr _out2287;
          DCOMP._IOwnership _out2288;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2289;
          (this).GenExpr(_11156_func, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2287, out _out2288, out _out2289);
          _11157_funcExpr = _out2287;
          _11158___v203 = _out2288;
          _11159_recIdents = _out2289;
          readIdents = _11159_recIdents;
          Dafny.ISequence<RAST._IExpr> _11160_rArgs;
          _11160_rArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi47 = new BigInteger((_11155_args).Count);
          for (BigInteger _11161_i = BigInteger.Zero; _11161_i < _hi47; _11161_i++) {
            RAST._IExpr _11162_argExpr;
            DCOMP._IOwnership _11163_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11164_argIdents;
            RAST._IExpr _out2290;
            DCOMP._IOwnership _out2291;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2292;
            (this).GenExpr((_11155_args).Select(_11161_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2290, out _out2291, out _out2292);
            _11162_argExpr = _out2290;
            _11163_argOwned = _out2291;
            _11164_argIdents = _out2292;
            _11160_rArgs = Dafny.Sequence<RAST._IExpr>.Concat(_11160_rArgs, Dafny.Sequence<RAST._IExpr>.FromElements(_11162_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11164_argIdents);
          }
          r = (_11157_funcExpr).Apply(_11160_rArgs);
          RAST._IExpr _out2293;
          DCOMP._IOwnership _out2294;
          (this).FromOwned(r, expectedOwnership, out _out2293, out _out2294);
          r = _out2293;
          resultingOwnership = _out2294;
          return ;
        }
      } else if (_source321.is_TypeTest) {
        DAST._IExpression _11165___mcc_h304 = _source321.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11166___mcc_h305 = _source321.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _11167___mcc_h306 = _source321.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _11168_variant = _11167___mcc_h306;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11169_dType = _11166___mcc_h305;
        DAST._IExpression _11170_on = _11165___mcc_h304;
        {
          RAST._IExpr _11171_exprGen;
          DCOMP._IOwnership _11172___v204;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11173_recIdents;
          RAST._IExpr _out2295;
          DCOMP._IOwnership _out2296;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2297;
          (this).GenExpr(_11170_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2295, out _out2296, out _out2297);
          _11171_exprGen = _out2295;
          _11172___v204 = _out2296;
          _11173_recIdents = _out2297;
          RAST._IType _11174_dTypePath;
          RAST._IType _out2298;
          _out2298 = DCOMP.COMP.GenPath(_11169_dType);
          _11174_dTypePath = _out2298;
          r = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(((_11171_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(((_11174_dTypePath).MSel(DCOMP.__default.escapeName(_11168_variant)))._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. }")))));
          RAST._IExpr _out2299;
          DCOMP._IOwnership _out2300;
          (this).FromOwned(r, expectedOwnership, out _out2299, out _out2300);
          r = _out2299;
          resultingOwnership = _out2300;
          readIdents = _11173_recIdents;
          return ;
        }
      } else if (_source321.is_InitializationValue) {
        DAST._IType _11175___mcc_h307 = _source321.dtor_typ;
        DAST._IType _11176_typ = _11175___mcc_h307;
        {
          RAST._IType _11177_typExpr;
          RAST._IType _out2301;
          _out2301 = (this).GenType(_11176_typ, DCOMP.GenTypeContext.@default());
          _11177_typExpr = _out2301;
          if ((_11177_typExpr).IsObjectOrPointer()) {
            r = (_11177_typExpr).ToNullExpr();
          } else {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_11177_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          }
          RAST._IExpr _out2302;
          DCOMP._IOwnership _out2303;
          (this).FromOwned(r, expectedOwnership, out _out2302, out _out2303);
          r = _out2302;
          resultingOwnership = _out2303;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source321.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out2304;
          DCOMP._IOwnership _out2305;
          (this).FromOwned(r, expectedOwnership, out _out2304, out _out2305);
          r = _out2304;
          resultingOwnership = _out2305;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source321.is_SetBoundedPool) {
        DAST._IExpression _11178___mcc_h308 = _source321.dtor_of;
        DAST._IExpression _11179_of = _11178___mcc_h308;
        {
          RAST._IExpr _11180_exprGen;
          DCOMP._IOwnership _11181___v205;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11182_recIdents;
          RAST._IExpr _out2306;
          DCOMP._IOwnership _out2307;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2308;
          (this).GenExpr(_11179_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2306, out _out2307, out _out2308);
          _11180_exprGen = _out2306;
          _11181___v205 = _out2307;
          _11182_recIdents = _out2308;
          r = ((_11180_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("iter"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2309;
          DCOMP._IOwnership _out2310;
          (this).FromOwned(r, expectedOwnership, out _out2309, out _out2310);
          r = _out2309;
          resultingOwnership = _out2310;
          readIdents = _11182_recIdents;
          return ;
        }
      } else if (_source321.is_MapBoundedPool) {
        DAST._IExpression _11183___mcc_h309 = _source321.dtor_of;
        DAST._IExpression _11184_of = _11183___mcc_h309;
        {
          RAST._IExpr _11185_exprGen;
          DCOMP._IOwnership _11186___v207;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11187_recIdents;
          RAST._IExpr _out2311;
          DCOMP._IOwnership _out2312;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2313;
          (this).GenExpr(_11184_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2311, out _out2312, out _out2313);
          _11185_exprGen = _out2311;
          _11186___v207 = _out2312;
          _11187_recIdents = _out2313;
          r = ((((_11185_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("iter"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _11187_recIdents;
          RAST._IExpr _out2314;
          DCOMP._IOwnership _out2315;
          (this).FromOwned(r, expectedOwnership, out _out2314, out _out2315);
          r = _out2314;
          resultingOwnership = _out2315;
        }
      } else if (_source321.is_SeqBoundedPool) {
        DAST._IExpression _11188___mcc_h310 = _source321.dtor_of;
        bool _11189___mcc_h311 = _source321.dtor_includeDuplicates;
        bool _11190_includeDuplicates = _11189___mcc_h311;
        DAST._IExpression _11191_of = _11188___mcc_h310;
        {
          RAST._IExpr _11192_exprGen;
          DCOMP._IOwnership _11193___v206;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11194_recIdents;
          RAST._IExpr _out2316;
          DCOMP._IOwnership _out2317;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2318;
          (this).GenExpr(_11191_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2316, out _out2317, out _out2318);
          _11192_exprGen = _out2316;
          _11193___v206 = _out2317;
          _11194_recIdents = _out2318;
          r = ((_11192_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("iter"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          if (!(_11190_includeDuplicates)) {
            r = ((((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("itertools"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Itertools"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unique"))).Apply1(r);
          }
          RAST._IExpr _out2319;
          DCOMP._IOwnership _out2320;
          (this).FromOwned(r, expectedOwnership, out _out2319, out _out2320);
          r = _out2319;
          resultingOwnership = _out2320;
          readIdents = _11194_recIdents;
          return ;
        }
      } else if (_source321.is_IntRange) {
        DAST._IExpression _11195___mcc_h312 = _source321.dtor_lo;
        DAST._IExpression _11196___mcc_h313 = _source321.dtor_hi;
        bool _11197___mcc_h314 = _source321.dtor_up;
        bool _11198_up = _11197___mcc_h314;
        DAST._IExpression _11199_hi = _11196___mcc_h313;
        DAST._IExpression _11200_lo = _11195___mcc_h312;
        {
          RAST._IExpr _11201_lo;
          DCOMP._IOwnership _11202___v208;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11203_recIdentsLo;
          RAST._IExpr _out2321;
          DCOMP._IOwnership _out2322;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2323;
          (this).GenExpr(_11200_lo, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2321, out _out2322, out _out2323);
          _11201_lo = _out2321;
          _11202___v208 = _out2322;
          _11203_recIdentsLo = _out2323;
          RAST._IExpr _11204_hi;
          DCOMP._IOwnership _11205___v209;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11206_recIdentsHi;
          RAST._IExpr _out2324;
          DCOMP._IOwnership _out2325;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2326;
          (this).GenExpr(_11199_hi, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2324, out _out2325, out _out2326);
          _11204_hi = _out2324;
          _11205___v209 = _out2325;
          _11206_recIdentsHi = _out2326;
          if (_11198_up) {
            r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("integer_range"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_11201_lo, _11204_hi));
          } else {
            r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("integer_range_down"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_11204_hi, _11201_lo));
          }
          RAST._IExpr _out2327;
          DCOMP._IOwnership _out2328;
          (this).FromOwned(r, expectedOwnership, out _out2327, out _out2328);
          r = _out2327;
          resultingOwnership = _out2328;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11203_recIdentsLo, _11206_recIdentsHi);
          return ;
        }
      } else if (_source321.is_UnboundedIntRange) {
        DAST._IExpression _11207___mcc_h315 = _source321.dtor_start;
        bool _11208___mcc_h316 = _source321.dtor_up;
        bool _11209_up = _11208___mcc_h316;
        DAST._IExpression _11210_start = _11207___mcc_h315;
        {
          RAST._IExpr _11211_start;
          DCOMP._IOwnership _11212___v210;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11213_recIdentStart;
          RAST._IExpr _out2329;
          DCOMP._IOwnership _out2330;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2331;
          (this).GenExpr(_11210_start, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2329, out _out2330, out _out2331);
          _11211_start = _out2329;
          _11212___v210 = _out2330;
          _11213_recIdentStart = _out2331;
          if (_11209_up) {
            r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("integer_range_unbounded"))).Apply1(_11211_start);
          } else {
            r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("integer_range_down_unbounded"))).Apply1(_11211_start);
          }
          RAST._IExpr _out2332;
          DCOMP._IOwnership _out2333;
          (this).FromOwned(r, expectedOwnership, out _out2332, out _out2333);
          r = _out2332;
          resultingOwnership = _out2333;
          readIdents = _11213_recIdentStart;
          return ;
        }
      } else {
        DAST._IType _11214___mcc_h317 = _source321.dtor_elemType;
        DAST._IExpression _11215___mcc_h318 = _source321.dtor_collection;
        bool _11216___mcc_h319 = _source321.dtor_is__forall;
        DAST._IExpression _11217___mcc_h320 = _source321.dtor_lambda;
        DAST._IExpression _11218_lambda = _11217___mcc_h320;
        bool _11219_is__forall = _11216___mcc_h319;
        DAST._IExpression _11220_collection = _11215___mcc_h318;
        DAST._IType _11221_elemType = _11214___mcc_h317;
        {
          RAST._IType _11222_tpe;
          RAST._IType _out2334;
          _out2334 = (this).GenType(_11221_elemType, DCOMP.GenTypeContext.@default());
          _11222_tpe = _out2334;
          RAST._IExpr _11223_collectionGen;
          DCOMP._IOwnership _11224___v211;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11225_recIdents;
          RAST._IExpr _out2335;
          DCOMP._IOwnership _out2336;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2337;
          (this).GenExpr(_11220_collection, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2335, out _out2336, out _out2337);
          _11223_collectionGen = _out2335;
          _11224___v211 = _out2336;
          _11225_recIdents = _out2337;
          Dafny.ISequence<DAST._IAttribute> _11226_extraAttributes;
          _11226_extraAttributes = Dafny.Sequence<DAST._IAttribute>.FromElements();
          if ((((_11220_collection).is_IntRange) || ((_11220_collection).is_UnboundedIntRange)) || ((_11220_collection).is_SeqBoundedPool)) {
            _11226_extraAttributes = Dafny.Sequence<DAST._IAttribute>.FromElements(DCOMP.__default.AttributeOwned);
          }
          if ((_11218_lambda).is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _11227_formals;
            _11227_formals = (_11218_lambda).dtor_params;
            Dafny.ISequence<DAST._IFormal> _11228_newFormals;
            _11228_newFormals = Dafny.Sequence<DAST._IFormal>.FromElements();
            BigInteger _hi48 = new BigInteger((_11227_formals).Count);
            for (BigInteger _11229_i = BigInteger.Zero; _11229_i < _hi48; _11229_i++) {
              var _pat_let_tv28 = _11226_extraAttributes;
              var _pat_let_tv29 = _11227_formals;
              _11228_newFormals = Dafny.Sequence<DAST._IFormal>.Concat(_11228_newFormals, Dafny.Sequence<DAST._IFormal>.FromElements(Dafny.Helpers.Let<DAST._IFormal, DAST._IFormal>((_11227_formals).Select(_11229_i), _pat_let35_0 => Dafny.Helpers.Let<DAST._IFormal, DAST._IFormal>(_pat_let35_0, _11230_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IAttribute>, DAST._IFormal>(Dafny.Sequence<DAST._IAttribute>.Concat(_pat_let_tv28, ((_pat_let_tv29).Select(_11229_i)).dtor_attributes), _pat_let36_0 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IAttribute>, DAST._IFormal>(_pat_let36_0, _11231_dt__update_hattributes_h0 => DAST.Formal.create((_11230_dt__update__tmp_h0).dtor_name, (_11230_dt__update__tmp_h0).dtor_typ, _11231_dt__update_hattributes_h0)))))));
            }
            var _pat_let_tv30 = _11228_newFormals;
            DAST._IExpression _11232_newLambda;
            _11232_newLambda = Dafny.Helpers.Let<DAST._IExpression, DAST._IExpression>(_11218_lambda, _pat_let37_0 => Dafny.Helpers.Let<DAST._IExpression, DAST._IExpression>(_pat_let37_0, _11233_dt__update__tmp_h1 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IFormal>, DAST._IExpression>(_pat_let_tv30, _pat_let38_0 => Dafny.Helpers.Let<Dafny.ISequence<DAST._IFormal>, DAST._IExpression>(_pat_let38_0, _11234_dt__update_hparams_h0 => DAST.Expression.create_Lambda(_11234_dt__update_hparams_h0, (_11233_dt__update__tmp_h1).dtor_retType, (_11233_dt__update__tmp_h1).dtor_body)))));
            RAST._IExpr _11235_lambdaGen;
            DCOMP._IOwnership _11236___v212;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11237_recLambdaIdents;
            RAST._IExpr _out2338;
            DCOMP._IOwnership _out2339;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2340;
            (this).GenExpr(_11232_newLambda, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2338, out _out2339, out _out2340);
            _11235_lambdaGen = _out2338;
            _11236___v212 = _out2339;
            _11237_recLambdaIdents = _out2340;
            Dafny.ISequence<Dafny.Rune> _11238_fn;
            _11238_fn = ((_11219_is__forall) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("all")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("any")));
            r = ((_11223_collectionGen).Sel(_11238_fn)).Apply1(((_11235_lambdaGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11225_recIdents, _11237_recLambdaIdents);
          } else {
            (this).error = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Quantifier without an inline lambda"));
            r = RAST.Expr.create_RawExpr((this.error).dtor_value);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
          RAST._IExpr _out2341;
          DCOMP._IOwnership _out2342;
          (this).FromOwned(r, expectedOwnership, out _out2341, out _out2342);
          r = _out2341;
          resultingOwnership = _out2342;
        }
      }
    }
    public Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      BigInteger _11239_i;
      _11239_i = BigInteger.Zero;
      while ((_11239_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _11240_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _11241_m;
        RAST._IMod _out2343;
        _out2343 = (this).GenModule((p).Select(_11239_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _11241_m = _out2343;
        _11240_generated = (_11241_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_11239_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _11240_generated);
        _11239_i = (_11239_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _11242_i;
      _11242_i = BigInteger.Zero;
      while ((_11242_i) < (new BigInteger((fullName).Count))) {
        if ((_11242_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeName((fullName).Select(_11242_i)));
        _11242_i = (_11242_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public bool _i_UnicodeChars {get; set;}
    public bool UnicodeChars { get {
      return this._i_UnicodeChars;
    } }
    public Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if ((this).UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public RAST._IType DafnyCharUnderlying { get {
      if ((this).UnicodeChars) {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
      } else {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"));
      }
    } }
    public Dafny.ISequence<Dafny.Rune> string__of { get {
      if ((this).UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_utf16_of");
      }
    } }
    public DCOMP._IObjectType _i_ObjectType {get; set;}
    public DCOMP._IObjectType ObjectType { get {
      return this._i_ObjectType;
    } }
    public Dafny.ISequence<Dafny.Rune> allocate { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("allocate");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("allocate_rcmut");
      }
    } }
    public Dafny.ISequence<Dafny.Rune> allocate__fn { get {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), (this).allocate);
    } }
    public Dafny.ISequence<Dafny.Rune> update__field__uninit__macro { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_field_uninit!");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_field_uninit_rcmut!");
      }
    } }
    public RAST._IExpr thisInConstructor { get {
      if (((this).ObjectType).is_RawPointers) {
        return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"));
      } else {
        return (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this"))).Clone();
      }
    } }
    public Dafny.ISequence<Dafny.Rune> array__construct { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("construct");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("construct_rcmut");
      }
    } }
    public RAST._IExpr modify__macro { get {
      return (RAST.__default.dafny__runtime).MSel(((((this).ObjectType).is_RawPointers) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("modify!")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("md!"))));
    } }
    public RAST._IExpr read__macro { get {
      return (RAST.__default.dafny__runtime).MSel(((((this).ObjectType).is_RawPointers) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("read!")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rd!"))));
    } }
    public Dafny.ISequence<Dafny.Rune> placebos__usize { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("placebos_usize");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("placebos_usize_rcmut");
      }
    } }
    public Dafny.ISequence<Dafny.Rune> update__field__if__uninit__macro { get {
      if (((this).ObjectType).is_RawPointers) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_field_if_uninit!");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_field_if_uninit_rcmut!");
      }
    } }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP